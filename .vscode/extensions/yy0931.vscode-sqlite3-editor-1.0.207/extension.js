"use strict";var NI=Object.create;var Us=Object.defineProperty;var II=Object.getOwnPropertyDescriptor;var gI=Object.getOwnPropertyNames;var OI=Object.getPrototypeOf,_I=Object.prototype.hasOwnProperty;var Hr=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),Rc=(t,n)=>{for(var e in n)Us(t,e,{get:n[e],enumerable:!0})},Nc=(t,n,e,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let E of gI(n))!_I.call(t,E)&&E!==e&&Us(t,E,{get:()=>n[E],enumerable:!(i=II(n,E))||i.enumerable});return t};var Se=(t,n,e)=>(e=t!=null?NI(OI(t)):{},Nc(n||!t||!t.__esModule?Us(e,"default",{value:t,enumerable:!0}):e,t)),LI=t=>Nc(Us({},"__esModule",{value:!0}),t);var uf=Hr((My,Ef)=>{var zd=require("fs"),sr=require("path"),Zd=typeof __webpack_require__=="function"?__non_webpack_require__:require,ZI=process.config&&process.config.variables||{},eg=!!process.env.PREBUILDS_ONLY,Kd=process.versions.modules,El=rg()?"electron":"node",Qs=process.arch,zs=process.platform,ef=process.env.LIBC||(ng(zs)?"musl":"glibc"),ul=process.env.ARM_VERSION||(Qs==="arm64"?"8":ZI.arm_version)||"",tf=(process.versions.uv||"").split(".")[0];Ef.exports=Or;function Or(t){return Zd(Or.path(t))}Or.path=function(t){t=sr.resolve(t||".");var n;try{n=Zd(sr.join(t,"package.json")).name;var e=n.toUpperCase().replace(/-/g,"_")+"_PREBUILD";process.env[e]&&(t=process.env[e])}catch{}if(!eg){var i=Jd(sr.join(t,"build/Release"),Qd);if(i)return i;var E=Jd(sr.join(t,"build/Debug"),Qd);if(E)return E}var d=C(t);if(d)return d;var R=C(sr.dirname(process.execPath));if(R)return R;var _=(n[0]=="@"?"":"@"+n+"/")+n+"-"+zs+"-"+Qs;try{var I=sr.dirname(require("module").createRequire(sr.join(t,"package.json")).resolve(_));return w(I)}catch{}var S=["platform="+zs,"arch="+Qs,"runtime="+El,"abi="+Kd,"uv="+tf,ul?"armv="+ul:"","libc="+ef,"node="+process.versions.node,process.versions.electron?"electron="+process.versions.electron:"",typeof __webpack_require__=="function"?"webpack=true":""].filter(Boolean).join(" ");throw new Error("No native build was found for "+S+`
    loaded from: `+t+" and package: "+_+`
`);function C(b){var M=cl(sr.join(b,"prebuilds")).map(rf),G=M.filter(nf(zs,Qs)).sort(sf)[0];if(G)return w(sr.join(b,"prebuilds",G.name))}function w(b){var M=cl(b).map(af),G=M.filter(of(El,Kd)),$=G.sort(lf(El))[0];if($)return sr.join(b,$.file)}};function cl(t){try{return zd.readdirSync(t)}catch{return[]}}function Jd(t,n){var e=cl(t).filter(n);return e[0]&&sr.join(t,e[0])}function Qd(t){return/\.node$/.test(t)}function rf(t){var n=t.split("-");if(n.length===2){var e=n[0],i=n[1].split("+");if(e&&i.length&&i.every(Boolean))return{name:t,platform:e,architectures:i}}}function nf(t,n){return function(e){return e==null||e.platform!==t?!1:e.architectures.includes(n)}}function sf(t,n){return t.architectures.length-n.architectures.length}function af(t){var n=t.split("."),e=n.pop(),i={file:t,specificity:0};if(e==="node"){for(var E=0;E<n.length;E++){var d=n[E];if(d==="node"||d==="electron"||d==="node-webkit")i.runtime=d;else if(d==="napi")i.napi=!0;else if(d.slice(0,3)==="abi")i.abi=d.slice(3);else if(d.slice(0,2)==="uv")i.uv=d.slice(2);else if(d.slice(0,4)==="armv")i.armv=d.slice(4);else if(d==="glibc"||d==="musl")i.libc=d;else continue;i.specificity++}return i}}function of(t,n){return function(e){return!(e==null||e.runtime!==t&&!tg(e)||e.abi!==n&&!e.napi||e.uv&&e.uv!==tf||e.armv&&e.armv!==ul||e.libc&&e.libc!==ef)}}function tg(t){return t.runtime==="node"&&t.napi}function lf(t){return function(n,e){return n.runtime!==e.runtime?n.runtime===t?-1:1:n.abi!==e.abi?n.abi?-1:1:n.specificity!==e.specificity?n.specificity>e.specificity?-1:1:0}}function rg(){return process.versions&&process.versions.electron||process.env.ELECTRON_RUN_AS_NODE?!0:typeof window<"u"&&window.process&&window.process.type==="renderer"}function ng(t){return t==="linux"&&zd.existsSync("/etc/alpine-release")}Or.parseTags=af;Or.matchTags=of;Or.compareTags=lf;Or.parseTuple=rf;Or.matchTuple=nf;Or.compareTuples=sf});var df=Hr((vy,cf)=>{cf.exports=uf()(__dirname)});var Af=Hr(Xn=>{"use strict";Object.defineProperty(Xn,"__esModule",{value:!0});Xn.sync=Xn.isexe=void 0;var lg=require("fs"),Eg=require("fs/promises"),ug=async(t,n={})=>{let{ignoreErrors:e=!1}=n;try{return pf(await(0,Eg.stat)(t),n)}catch(i){let E=i;if(e||E.code==="EACCES")return!1;throw E}};Xn.isexe=ug;var cg=(t,n={})=>{let{ignoreErrors:e=!1}=n;try{return pf((0,lg.statSync)(t),n)}catch(i){let E=i;if(e||E.code==="EACCES")return!1;throw E}};Xn.sync=cg;var pf=(t,n)=>t.isFile()&&dg(t,n),dg=(t,n)=>{let e=n.uid??process.getuid?.(),i=n.groups??process.getgroups?.()??[],E=n.gid??process.getgid?.()??i[0];if(e===void 0||E===void 0)throw new Error("cannot get uid or gid");let d=new Set([E,...i]),R=t.mode,_=t.uid,I=t.gid,S=parseInt("100",8),C=parseInt("010",8),w=parseInt("001",8),b=S|C;return!!(R&w||R&C&&d.has(I)||R&S&&_===e||R&b&&e===0)}});var Rf=Hr(qn=>{"use strict";Object.defineProperty(qn,"__esModule",{value:!0});qn.sync=qn.isexe=void 0;var fg=require("fs"),hg=require("fs/promises"),Tg=async(t,n={})=>{let{ignoreErrors:e=!1}=n;try{return Sf(await(0,hg.stat)(t),t,n)}catch(i){let E=i;if(e||E.code==="EACCES")return!1;throw E}};qn.isexe=Tg;var mg=(t,n={})=>{let{ignoreErrors:e=!1}=n;try{return Sf((0,fg.statSync)(t),t,n)}catch(i){let E=i;if(e||E.code==="EACCES")return!1;throw E}};qn.sync=mg;var pg=(t,n)=>{let{pathExt:e=process.env.PATHEXT||""}=n,i=e.split(";");if(i.indexOf("")!==-1)return!0;for(let E=0;E<i.length;E++){let d=i[E].toLowerCase(),R=t.substring(t.length-d.length).toLowerCase();if(d&&R===d)return!0}return!1},Sf=(t,n,e)=>t.isFile()&&pg(n,e)});var If=Hr(Nf=>{"use strict";Object.defineProperty(Nf,"__esModule",{value:!0})});var wf=Hr(Tt=>{"use strict";var gf=Tt&&Tt.__createBinding||(Object.create?function(t,n,e,i){i===void 0&&(i=e);var E=Object.getOwnPropertyDescriptor(n,e);(!E||("get"in E?!n.__esModule:E.writable||E.configurable))&&(E={enumerable:!0,get:function(){return n[e]}}),Object.defineProperty(t,i,E)}:function(t,n,e,i){i===void 0&&(i=e),t[i]=n[e]}),Ag=Tt&&Tt.__setModuleDefault||(Object.create?function(t,n){Object.defineProperty(t,"default",{enumerable:!0,value:n})}:function(t,n){t.default=n}),Of=Tt&&Tt.__importStar||function(t){if(t&&t.__esModule)return t;var n={};if(t!=null)for(var e in t)e!=="default"&&Object.prototype.hasOwnProperty.call(t,e)&&gf(n,t,e);return Ag(n,t),n},Sg=Tt&&Tt.__exportStar||function(t,n){for(var e in t)e!=="default"&&!Object.prototype.hasOwnProperty.call(n,e)&&gf(n,t,e)};Object.defineProperty(Tt,"__esModule",{value:!0});Tt.sync=Tt.isexe=Tt.posix=Tt.win32=void 0;var _f=Of(Af());Tt.posix=_f;var Lf=Of(Rf());Tt.win32=Lf;Sg(If(),Tt);var Rg=process.env._ISEXE_TEST_PLATFORM_||process.platform,Cf=Rg==="win32"?Lf:_f;Tt.isexe=Cf.isexe;Tt.sync=Cf.sync});var Bf=Hr((eb,Gf)=>{var{isexe:Ng,sync:Ig}=wf(),{join:gg,delimiter:Og,sep:yf,posix:bf}=require("path"),Df=process.platform==="win32",Pf=new RegExp(`[${bf.sep}${yf===bf.sep?"":yf}]`.replace(/(\\)/g,"\\$1")),_g=new RegExp(`^\\.${Pf.source}`),Mf=t=>Object.assign(new Error(`not found: ${t}`),{code:"ENOENT"}),vf=(t,{path:n=process.env.PATH,pathExt:e=process.env.PATHEXT,delimiter:i=Og})=>{let E=t.match(Pf)?[""]:[...Df?[process.cwd()]:[],...(n||"").split(i)];if(Df){let d=e||[".EXE",".CMD",".BAT",".COM"].join(i),R=d.split(i).flatMap(_=>[_,_.toLowerCase()]);return t.includes(".")&&R[0]!==""&&R.unshift(""),{pathEnv:E,pathExt:R,pathExtExe:d}}return{pathEnv:E,pathExt:[""]}},xf=(t,n)=>{let e=/^".*"$/.test(t)?t.slice(1,-1):t;return(!e&&_g.test(n)?n.slice(0,2):"")+gg(e,n)},Uf=async(t,n={})=>{let{pathEnv:e,pathExt:i,pathExtExe:E}=vf(t,n),d=[];for(let R of e){let _=xf(R,t);for(let I of i){let S=_+I;if(await Ng(S,{pathExt:E,ignoreErrors:!0})){if(!n.all)return S;d.push(S)}}}if(n.all&&d.length)return d;if(n.nothrow)return null;throw Mf(t)},Lg=(t,n={})=>{let{pathEnv:e,pathExt:i,pathExtExe:E}=vf(t,n),d=[];for(let R of e){let _=xf(R,t);for(let I of i){let S=_+I;if(Ig(S,{pathExt:E,ignoreErrors:!0})){if(!n.all)return S;d.push(S)}}}if(n.all&&d.length)return d;if(n.nothrow)return null;throw Mf(t)};Gf.exports=Uf;Uf.sync=Lg});var rp=Hr((tp,Xa)=>{(function(t,n){typeof Xa=="object"&&Xa.exports?Xa.exports=n():t.nearley=n()})(tp,function(){function t(I,S,C){return this.id=++t.highestId,this.name=I,this.symbols=S,this.postprocess=C,this}t.highestId=0,t.prototype.toString=function(I){var S=typeof I>"u"?this.symbols.map(_).join(" "):this.symbols.slice(0,I).map(_).join(" ")+" \u25CF "+this.symbols.slice(I).map(_).join(" ");return this.name+" \u2192 "+S};function n(I,S,C,w){this.rule=I,this.dot=S,this.reference=C,this.data=[],this.wantedBy=w,this.isComplete=this.dot===I.symbols.length}n.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},n.prototype.nextState=function(I){var S=new n(this.rule,this.dot+1,this.reference,this.wantedBy);return S.left=this,S.right=I,S.isComplete&&(S.data=S.build(),S.right=void 0),S},n.prototype.build=function(){var I=[],S=this;do I.push(S.right.data),S=S.left;while(S.left);return I.reverse(),I},n.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,d.fail))};function e(I,S){this.grammar=I,this.index=S,this.states=[],this.wants={},this.scannable=[],this.completed={}}e.prototype.process=function(I){for(var S=this.states,C=this.wants,w=this.completed,b=0;b<S.length;b++){var M=S[b];if(M.isComplete){if(M.finish(),M.data!==d.fail){for(var G=M.wantedBy,$=G.length;$--;){var k=G[$];this.complete(k,M)}if(M.reference===this.index){var H=M.rule.name;(this.completed[H]=this.completed[H]||[]).push(M)}}}else{var H=M.rule.symbols[M.dot];if(typeof H!="string"){this.scannable.push(M);continue}if(C[H]){if(C[H].push(M),w.hasOwnProperty(H))for(var ie=w[H],$=0;$<ie.length;$++){var P=ie[$];this.complete(M,P)}}else C[H]=[M],this.predict(H)}}},e.prototype.predict=function(I){for(var S=this.grammar.byName[I]||[],C=0;C<S.length;C++){var w=S[C],b=this.wants[I],M=new n(w,0,this.index,b);this.states.push(M)}},e.prototype.complete=function(I,S){var C=I.nextState(S);this.states.push(C)};function i(I,S){this.rules=I,this.start=S||this.rules[0].name;var C=this.byName={};this.rules.forEach(function(w){C.hasOwnProperty(w.name)||(C[w.name]=[]),C[w.name].push(w)})}i.fromCompiled=function(w,S){var C=w.Lexer;w.ParserStart&&(S=w.ParserStart,w=w.ParserRules);var w=w.map(function(M){return new t(M.name,M.symbols,M.postprocess)}),b=new i(w,S);return b.lexer=C,b};function E(){this.reset("")}E.prototype.reset=function(I,S){this.buffer=I,this.index=0,this.line=S?S.line:1,this.lastLineBreak=S?-S.col:0},E.prototype.next=function(){if(this.index<this.buffer.length){var I=this.buffer[this.index++];return I===`
`&&(this.line+=1,this.lastLineBreak=this.index),{value:I}}},E.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},E.prototype.formatError=function(I,S){var C=this.buffer;if(typeof C=="string"){var w=C.split(`
`).slice(Math.max(0,this.line-5),this.line),b=C.indexOf(`
`,this.index);b===-1&&(b=C.length);var M=this.index-this.lastLineBreak,G=String(this.line).length;return S+=" at line "+this.line+" col "+M+`:

`,S+=w.map(function(k,H){return $(this.line-w.length+H+1,G)+" "+k},this).join(`
`),S+=`
`+$("",G+M)+`^
`,S}else return S+" at index "+(this.index-1);function $(k,H){var ie=String(k);return Array(H-ie.length+1).join(" ")+ie}};function d(I,S,C){if(I instanceof i)var w=I,C=S;else var w=i.fromCompiled(I,S);this.grammar=w,this.options={keepHistory:!1,lexer:w.lexer||new E};for(var b in C||{})this.options[b]=C[b];this.lexer=this.options.lexer,this.lexerState=void 0;var M=new e(w,0),G=this.table=[M];M.wants[w.start]=[],M.predict(w.start),M.process(),this.current=0}d.fail={},d.prototype.feed=function(I){var S=this.lexer;S.reset(I,this.lexerState);for(var C;;){try{if(C=S.next(),!C)break}catch(ee){var G=new e(this.grammar,this.current+1);this.table.push(G);var w=new Error(this.reportLexerError(ee));throw w.offset=this.current,w.token=ee.token,w}var b=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var M=this.current+1,G=new e(this.grammar,M);this.table.push(G);for(var $=C.text!==void 0?C.text:C.value,k=S.constructor===E?C.value:C,H=b.scannable,ie=H.length;ie--;){var P=H[ie],X=P.rule.symbols[P.dot];if(X.test?X.test(k):X.type?X.type===C.type:X.literal===$){var Q=P.nextState({data:k,token:C,isToken:!0,reference:M-1});G.states.push(Q)}}if(G.process(),G.states.length===0){var w=new Error(this.reportError(C));throw w.offset=this.current,w.token=C,w}this.options.keepHistory&&(b.lexerState=S.save()),this.current++}return b&&(this.lexerState=S.save()),this.results=this.finish(),this},d.prototype.reportLexerError=function(I){var S,C,w=I.token;return w?(S="input "+JSON.stringify(w.text[0])+" (lexer error)",C=this.lexer.formatError(w,"Syntax error")):(S="input (lexer error)",C=I.message),this.reportErrorCommon(C,S)},d.prototype.reportError=function(I){var S=(I.type?I.type+" token: ":"")+JSON.stringify(I.value!==void 0?I.value:I),C=this.lexer.formatError(I,"Syntax error");return this.reportErrorCommon(C,S)},d.prototype.reportErrorCommon=function(I,S){var C=[];C.push(I);var w=this.table.length-2,b=this.table[w],M=b.states.filter(function($){var k=$.rule.symbols[$.dot];return k&&typeof k!="string"});if(M.length===0)C.push("Unexpected "+S+`. I did not expect any more input. Here is the state of my parse table:
`),this.displayStateStack(b.states,C);else{C.push("Unexpected "+S+`. Instead, I was expecting to see one of the following:
`);var G=M.map(function($){return this.buildFirstStateStack($,[])||[$]},this);G.forEach(function($){var k=$[0],H=k.rule.symbols[k.dot],ie=this.getSymbolDisplay(H);C.push("A "+ie+" based on:"),this.displayStateStack($,C)},this)}return C.push(""),C.join(`
`)},d.prototype.displayStateStack=function(I,S){for(var C,w=0,b=0;b<I.length;b++){var M=I[b],G=M.rule.toString(M.dot);G===C?w++:(w>0&&S.push("    ^ "+w+" more lines identical to this"),w=0,S.push("    "+G)),C=G}},d.prototype.getSymbolDisplay=function(I){return R(I)},d.prototype.buildFirstStateStack=function(I,S){if(S.indexOf(I)!==-1)return null;if(I.wantedBy.length===0)return[I];var C=I.wantedBy[0],w=[I].concat(S),b=this.buildFirstStateStack(C,w);return b===null?null:[I].concat(b)},d.prototype.save=function(){var I=this.table[this.current];return I.lexerState=this.lexerState,I},d.prototype.restore=function(I){var S=I.index;this.current=S,this.table[S]=I,this.table.splice(S+1),this.lexerState=I.lexerState,this.results=this.finish()},d.prototype.rewind=function(I){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[I])},d.prototype.finish=function(){var I=[],S=this.grammar.start,C=this.table[this.table.length-1];return C.states.forEach(function(w){w.rule.name===S&&w.dot===w.rule.symbols.length&&w.reference===0&&w.data!==d.fail&&I.push(w)}),I.map(function(w){return w.data})};function R(I){var S=typeof I;if(S==="string")return I;if(S==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return"character matching "+I;if(I.type)return I.type+" token";if(I.test)return"token matching "+String(I.test);throw new Error("Unknown symbol type: "+I)}}function _(I){var S=typeof I;if(S==="string")return I;if(S==="object"){if(I.literal)return JSON.stringify(I.literal);if(I instanceof RegExp)return I.toString();if(I.type)return"%"+I.type;if(I.test)return"<"+String(I.test)+">";throw new Error("Unknown symbol type: "+I)}}return{Parser:d,Grammar:i,Rule:t}})});var ay={};Rc(ay,{activate:()=>ny,deactivate:()=>sy});module.exports=LI(ay);var Ne=t=>t instanceof Error?t.message:t instanceof Event?`${t.constructor.name} (type=${t.type})`:String(t);var Gs=class{#e=new Map([[!1,new Map],[!0,new Map]]);set(n,e,i){this.#e.get(n).set(e,i)}get(n,e){return this.#e.get(n).get(e)??null}clear(){for(let n of this.#e.values())n.clear()}},Ic=0,gc=4,Oc=5,_c=6,Lc=7,Cc=8,wc=9,yc=10,bc=11,Dc=12,Pc=13,Mc=14,vc=15,xc=16,Uc=17,Bs=18,Gc=19,Bc=20,Fc=21,Hc=22,kc=26,Yc=27,Vc=29,Wc=30,$c=31,Xc=32,qc=33,jc=34,Kc=35,Jc=36,Qc=37,zc=38,Zc=39,ed=40,td=41,rd=42,nd=43,id=44,sd=46,ad=49,od=51,ld=52,Ed=53,ud=54,cd=55,dd=56,fd=57;var Fs=class t{#e;#t;constructor(n){this.#e=n,typeof n=="object"&&n!==null&&"then"in n&&typeof n.then=="function"?(this.#t=!1,n.then(e=>{this.#e=e,this.#t=!0},()=>{})):this.#t=!0}$$map(n){return this.#t?new t(n(this.#e)):new t(this.#e.then(n))}then(n,e){return this.#t?n?Promise.resolve(n(this.#e)):Promise.resolve(this.#e):Promise.resolve(this.#e.then(n,e))}catch(n){return this.then(null,n)}$$get(){return this.#t?{$$resolved:!0,$$value:this.#e}:{$$resolved:!1,$$value:this.#e}}$$getValueOr(n){return this.#t?this.#e:n}};var Ko;try{Ko=new TextDecoder}catch{}var ue,Vt,U=0;var Zo=[],sn=Zo,Di=0,$e={},Ve,Ir,Yt=0,Jt=0,ht,gr,Dt=[],Ye,hd={useRecords:!1,mapsAsObjects:!0},Pi=class{},el=new Pi;el.name="MessagePack 0xC1";var Vn=!1,Id=2,Jo,Qo,zo;try{new Function("")}catch{Id=1/0}var dr=class t{constructor(n){n&&(n.useRecords===!1&&n.mapsAsObjects===void 0&&(n.mapsAsObjects=!0),n.sequential&&n.trusted!==!1&&(n.trusted=!0,!n.structures&&n.useRecords!=!1&&(n.structures=[],n.maxSharedStructures||(n.maxSharedStructures=0))),n.structures?n.structures.sharedLength=n.structures.length:n.getStructures&&((n.structures=[]).uninitialized=!0,n.structures.sharedLength=0),n.preserveNumericTypes?n.int64AsType="bigint":n.int64AsNumber&&(n.int64AsType="number")),Object.assign(this,n)}unpack(n,e){if(ue)return Md(()=>(Ys(),this?this.unpack(n,e):t.prototype.unpack.call(hd,n,e)));typeof e=="object"?(Vt=e.end||n.length,U=e.start||0):(U=0,Vt=e>-1?e:n.length),Di=0,Jt=0,Ir=null,sn=Zo,ht=null,ue=n;try{Ye=n.dataView||(n.dataView=new DataView(n.buffer,n.byteOffset,n.byteLength))}catch(i){throw ue=null,n instanceof Uint8Array?i:new Error("Source must be a Uint8Array or Buffer but was a "+(n&&typeof n=="object"?n.constructor.name:typeof n))}if(this instanceof t){if($e=this,this.structures)return Ve=this.structures,Hs(e);(!Ve||Ve.length>0)&&(Ve=[])}else $e=hd,(!Ve||Ve.length>0)&&(Ve=[]);return Hs(e)}unpackMultiple(n,e){let i,E=0;try{Vn=!0;let d=n.length,R=this?this.unpack(n,d):Vs.unpack(n,d);if(e){for(e(R);U<d;)if(E=U,e(Hs())===!1)return}else{for(i=[R];U<d;)E=U,i.push(Hs());return i}}catch(d){throw d.lastPosition=E,d.values=i,d}finally{Vn=!1,Ys()}}_mergeStructures(n,e){Qo&&(n=Qo.call(this,n)),n=n||[],Object.isFrozen(n)&&(n=n.map(i=>i.slice(0)));for(let i=0,E=n.length;i<E;i++){let d=n[i];d&&(d.isShared=!0,i>=32&&(d.highByte=i-32>>5))}n.sharedLength=n.length;for(let i in e||[])if(i>=0){let E=n[i],d=e[i];d&&(E&&((n.restoreStructures||(n.restoreStructures=[]))[i]=E),n[i]=d)}return this.structures=n}decode(n,e){return this.unpack(n,e)}};function Hs(t){try{if(!$e.trusted&&!Vn){let e=Ve.sharedLength||0;e<Ve.length&&(Ve.length=e)}let n;if($e.randomAccessStructure&&ue[U]<64&&ue[U]>=32&&Jo?(n=Jo(ue,U,Vt,$e),ue=null,!(t&&t.lazy)&&n&&(n=n.toJSON()),U=Vt):n=ut(),ht&&(U=ht.postBundlePosition,ht=null),U==Vt)Ve&&Ve.restoreStructures&&Td(),Ve=null,ue=null,gr&&(gr=null);else{if(U>Vt)throw new Error("Unexpected end of MessagePack data");if(!Vn)throw new Error("Data read, but end of buffer not reached")}return n}catch(n){throw Ve&&Ve.restoreStructures&&Td(),Ys(),(n instanceof RangeError||n.message.startsWith("Unexpected end of buffer")||U>Vt)&&(n.incomplete=!0),n}}function Td(){for(let t in Ve.restoreStructures)Ve[t]=Ve.restoreStructures[t];Ve.restoreStructures=null}function ut(){let t=ue[U++];if(t<160)if(t<128){if(t<64)return $e.preserveNumericTypes?BigInt(t):t;{let n=Ve[t&63]||$e.getStructures&&gd()[t&63];return n?(n.read||(n.read=tl(n,t&63)),n.read()):$e.preserveNumericTypes?BigInt(t):t}}else if(t<144)if(t-=128,$e.mapsAsObjects){let n={};for(let e=0;e<t;e++){let i=Dd();i==="__proto__"&&(i="__proto_"),n[i]=ut()}return n}else{let n=new Map;for(let e=0;e<t;e++)n.set(ut(),ut());return n}else{t-=144;let n=new Array(t);for(let e=0;e<t;e++)n[e]=ut();return $e.freezeData?Object.freeze(n):n}else if(t<192){let n=t-160;if(Jt>=U)return Ir.slice(U-Yt,(U+=n)-Yt);if(Jt==0&&Vt<140){let e=n<16?rl(n):bd(n);if(e!=null)return e}return ks(n)}else{let n;switch(t){case 192:return null;case 193:return ht?(n=ut(),n>0?ht[1].slice(ht.position1,ht.position1+=n):ht[0].slice(ht.position0,ht.position0-=n)):el;case 194:return!1;case 195:return!0;case 196:if(n=ue[U++],n===void 0)throw new Error("Unexpected end of buffer");return jo(n);case 197:return n=Ye.getUint16(U),U+=2,jo(n);case 198:return n=Ye.getUint32(U),U+=4,jo(n);case 199:return nn(ue[U++]);case 200:return n=Ye.getUint16(U),U+=2,nn(n);case 201:return n=Ye.getUint32(U),U+=4,nn(n);case 202:if(n=Ye.getFloat32(U),$e.useFloat32>2){let e=on[(ue[U]&127)<<1|ue[U+1]>>7];return U+=4,(e*n+(n>0?.5:-.5)>>0)/e}return U+=4,n;case 203:return n=Ye.getFloat64(U),U+=8,n;case 204:return n=ue[U++],$e.preserveNumericTypes&&(n=BigInt(n)),n;case 205:return n=Ye.getUint16(U),$e.preserveNumericTypes&&(n=BigInt(n)),U+=2,n;case 206:return n=Ye.getUint32(U),$e.preserveNumericTypes&&(n=BigInt(n)),U+=4,n;case 207:return $e.int64AsType==="number"?(n=Ye.getUint32(U)*4294967296,n+=Ye.getUint32(U+4)):$e.int64AsType==="string"?n=Ye.getBigUint64(U).toString():n=Ye.getBigUint64(U),U+=8,n;case 208:return n=Ye.getInt8(U++),$e.preserveNumericTypes&&(n=BigInt(n)),n;case 209:return n=Ye.getInt16(U),$e.preserveNumericTypes&&(n=BigInt(n)),U+=2,n;case 210:return n=Ye.getInt32(U),$e.preserveNumericTypes&&(n=BigInt(n)),U+=4,n;case 211:return $e.int64AsType==="number"?(n=Ye.getInt32(U)*4294967296,n+=Ye.getUint32(U+4)):$e.int64AsType==="string"?n=Ye.getBigInt64(U).toString():n=Ye.getBigInt64(U),U+=8,n;case 212:if(n=ue[U++],n==114)return Nd(ue[U++]&63);{let e=Dt[n];if(e)return e.read?(U++,e.read(ut())):e.noBuffer?(U++,e()):e(ue.subarray(U,++U));throw new Error("Unknown extension "+n)}case 213:return n=ue[U],n==114?(U++,Nd(ue[U++]&63,ue[U++])):nn(2);case 214:return nn(4);case 215:return nn(8);case 216:return nn(16);case 217:return n=ue[U++],Jt>=U?Ir.slice(U-Yt,(U+=n)-Yt):Od(n);case 218:return n=Ye.getUint16(U),U+=2,Jt>=U?Ir.slice(U-Yt,(U+=n)-Yt):_d(n);case 219:return n=Ye.getUint32(U),U+=4,Jt>=U?Ir.slice(U-Yt,(U+=n)-Yt):Ld(n);case 220:return n=Ye.getUint16(U),U+=2,pd(n);case 221:return n=Ye.getUint32(U),U+=4,pd(n);case 222:return n=Ye.getUint16(U),U+=2,Ad(n);case 223:return n=Ye.getUint32(U),U+=4,Ad(n);default:if(t>=224)return $e.preserveNumericTypes?BigInt(t-256):t-256;if(t===void 0){let e=new Error("Unexpected end of MessagePack data");throw e.incomplete=!0,e}throw new Error("Unknown MessagePack token "+t)}}}var CI=/^[a-zA-Z_$][a-zA-Z\d_$]*$/;function tl(t,n){function e(){if(e.count++>Id){let E=t.read=new Function("r","return function(){return "+($e.freezeData?"Object.freeze":"")+"({"+t.map(d=>d==="__proto__"?"__proto_:r()":CI.test(d)?d+":r()":"["+JSON.stringify(d)+"]:r()").join(",")+"})}")(ut);return t.highByte===0&&(t.read=md(n,t.read)),E()}let i={};for(let E=0,d=t.length;E<d;E++){let R=t[E];R==="__proto__"&&(R="__proto_"),i[R]=ut()}return $e.freezeData?Object.freeze(i):i}return e.count=0,t.highByte===0?md(n,e):e}var md=(t,n)=>function(){let e=ue[U++];if(e===0)return n();let i=t<32?-(t+(e<<5)):t+(e<<5),E=Ve[i]||gd()[i];if(!E)throw new Error("Record id is not defined for "+i);return E.read||(E.read=tl(E,t)),E.read()};function gd(){let t=Md(()=>(ue=null,$e.getStructures()));return Ve=$e._mergeStructures(t,Ve)}var ks=an,Od=an,_d=an,Ld=an,Cd=!1;function wd(t){Cd=!0,ks=n(1),Od=n(2),_d=n(3),Ld=n(5);function n(e){return function(E){let d=sn[Di++];if(d==null){if(ht)return an(E);let _=t(U-e,Vt,ue);if(typeof _=="string")d=_,sn=Zo;else if(sn=_,Di=1,Jt=1,d=sn[0],d===void 0)throw new Error("Unexpected end of buffer")}let R=d.length;return R<=E?(U+=E,d):(Ir=d,Yt=U,Jt=U+R,U+=E,d.slice(0,E))}}}function an(t){let n;if(t<16&&(n=rl(t)))return n;if(t>64&&Ko)return Ko.decode(ue.subarray(U,U+=t));let e=U+t,i=[];for(n="";U<e;){let E=ue[U++];if(!(E&128))i.push(E);else if((E&224)===192){let d=ue[U++]&63;i.push((E&31)<<6|d)}else if((E&240)===224){let d=ue[U++]&63,R=ue[U++]&63;i.push((E&31)<<12|d<<6|R)}else if((E&248)===240){let d=ue[U++]&63,R=ue[U++]&63,_=ue[U++]&63,I=(E&7)<<18|d<<12|R<<6|_;I>65535&&(I-=65536,i.push(I>>>10&1023|55296),I=56320|I&1023),i.push(I)}else i.push(E);i.length>=4096&&(n+=Rt.apply(String,i),i.length=0)}return i.length>0&&(n+=Rt.apply(String,i)),n}function yd(t,n,e){let i=ue;ue=t,U=n;try{return an(e)}finally{ue=i}}function pd(t){let n=new Array(t);for(let e=0;e<t;e++)n[e]=ut();return $e.freezeData?Object.freeze(n):n}function Ad(t){if($e.mapsAsObjects){let n={};for(let e=0;e<t;e++){let i=Dd();i==="__proto__"&&(i="__proto_"),n[i]=ut()}return n}else{let n=new Map;for(let e=0;e<t;e++)n.set(ut(),ut());return n}}var Rt=String.fromCharCode;function bd(t){let n=U,e=new Array(t);for(let i=0;i<t;i++){let E=ue[U++];if((E&128)>0){U=n;return}e[i]=E}return Rt.apply(String,e)}function rl(t){if(t<4)if(t<2){if(t===0)return"";{let n=ue[U++];if((n&128)>1){U-=1;return}return Rt(n)}}else{let n=ue[U++],e=ue[U++];if((n&128)>0||(e&128)>0){U-=2;return}if(t<3)return Rt(n,e);let i=ue[U++];if((i&128)>0){U-=3;return}return Rt(n,e,i)}else{let n=ue[U++],e=ue[U++],i=ue[U++],E=ue[U++];if((n&128)>0||(e&128)>0||(i&128)>0||(E&128)>0){U-=4;return}if(t<6){if(t===4)return Rt(n,e,i,E);{let d=ue[U++];if((d&128)>0){U-=5;return}return Rt(n,e,i,E,d)}}else if(t<8){let d=ue[U++],R=ue[U++];if((d&128)>0||(R&128)>0){U-=6;return}if(t<7)return Rt(n,e,i,E,d,R);let _=ue[U++];if((_&128)>0){U-=7;return}return Rt(n,e,i,E,d,R,_)}else{let d=ue[U++],R=ue[U++],_=ue[U++],I=ue[U++];if((d&128)>0||(R&128)>0||(_&128)>0||(I&128)>0){U-=8;return}if(t<10){if(t===8)return Rt(n,e,i,E,d,R,_,I);{let S=ue[U++];if((S&128)>0){U-=9;return}return Rt(n,e,i,E,d,R,_,I,S)}}else if(t<12){let S=ue[U++],C=ue[U++];if((S&128)>0||(C&128)>0){U-=10;return}if(t<11)return Rt(n,e,i,E,d,R,_,I,S,C);let w=ue[U++];if((w&128)>0){U-=11;return}return Rt(n,e,i,E,d,R,_,I,S,C,w)}else{let S=ue[U++],C=ue[U++],w=ue[U++],b=ue[U++];if((S&128)>0||(C&128)>0||(w&128)>0||(b&128)>0){U-=12;return}if(t<14){if(t===12)return Rt(n,e,i,E,d,R,_,I,S,C,w,b);{let M=ue[U++];if((M&128)>0){U-=13;return}return Rt(n,e,i,E,d,R,_,I,S,C,w,b,M)}}else{let M=ue[U++],G=ue[U++];if((M&128)>0||(G&128)>0){U-=14;return}if(t<15)return Rt(n,e,i,E,d,R,_,I,S,C,w,b,M,G);let $=ue[U++];if(($&128)>0){U-=15;return}return Rt(n,e,i,E,d,R,_,I,S,C,w,b,M,G,$)}}}}}function Sd(){let t=ue[U++],n;if(t<192)n=t-160;else switch(t){case 217:n=ue[U++];break;case 218:n=Ye.getUint16(U),U+=2;break;case 219:n=Ye.getUint32(U),U+=4;break;default:throw new Error("Expected string")}return an(n)}function jo(t){return $e.copyBuffers?Uint8Array.prototype.slice.call(ue,U,U+=t):ue.subarray(U,U+=t)}function nn(t){let n=ue[U++];if(Dt[n]){let e;return Dt[n](ue.subarray(U,e=U+=t),i=>{U=i;try{return ut()}finally{U=e}})}else throw new Error("Unknown extension type "+n)}var Rd=new Array(4096);function Dd(){let t=ue[U++];if(t>=160&&t<192){if(t=t-160,Jt>=U)return Ir.slice(U-Yt,(U+=t)-Yt);if(!(Jt==0&&Vt<180))return ks(t)}else return U--,Pd(ut());let n=(t<<5^(t>1?Ye.getUint16(U):t>0?ue[U]:0))&4095,e=Rd[n],i=U,E=U+t-3,d,R=0;if(e&&e.bytes==t){for(;i<E;){if(d=Ye.getUint32(i),d!=e[R++]){i=1879048192;break}i+=4}for(E+=3;i<E;)if(d=ue[i++],d!=e[R++]){i=1879048192;break}if(i===E)return U=i,e.string;E-=3,i=U}for(e=[],Rd[n]=e,e.bytes=t;i<E;)d=Ye.getUint32(i),e.push(d),i+=4;for(E+=3;i<E;)d=ue[i++],e.push(d);let _=t<16?rl(t):bd(t);return _!=null?e.string=_:e.string=ks(t)}function Pd(t){if(typeof t=="string")return t;if(typeof t=="number")return t.toString();throw new Error("Invalid property type for record",typeof t)}var Nd=(t,n)=>{let e=ut().map(Pd),i=t;n!==void 0&&(t=t<32?-((n<<5)+t):(n<<5)+t,e.highByte=n);let E=Ve[t];return E&&E.isShared&&((Ve.restoreStructures||(Ve.restoreStructures=[]))[t]=E),Ve[t]=e,e.read=tl(e,i),e.read()};Dt[0]=()=>{};Dt[0].noBuffer=!0;Dt[101]=()=>{let t=ut();return(globalThis[t[0]]||Error)(t[1])};Dt[105]=t=>{let n=Ye.getUint32(U-4);gr||(gr=new Map);let e=ue[U],i;e>=144&&e<160||e==220||e==221?i=[]:i={};let E={target:i};gr.set(n,E);let d=ut();return E.used?Object.assign(i,d):(E.target=d,d)};Dt[112]=t=>{let n=Ye.getUint32(U-4),e=gr.get(n);return e.used=!0,e.target};Dt[115]=()=>new Set(ut());var nl=["Int8","Uint8","Uint8Clamped","Int16","Uint16","Int32","Uint32","Float32","Float64","BigInt64","BigUint64"].map(t=>t+"Array");Dt[116]=t=>{let n=t[0],e=nl[n];if(!e)throw new Error("Could not find typed array for code "+n);return new globalThis[e](Uint8Array.prototype.slice.call(t,1).buffer)};Dt[120]=()=>{let t=ut();return new RegExp(t[0],t[1])};var wI=[];Dt[98]=t=>{let n=(t[0]<<24)+(t[1]<<16)+(t[2]<<8)+t[3],e=U;return U+=n-t.length,ht=wI,ht=[Sd(),Sd()],ht.position0=0,ht.position1=0,ht.postBundlePosition=U,U=e,ut()};Dt[255]=t=>t.length==4?new Date((t[0]*16777216+(t[1]<<16)+(t[2]<<8)+t[3])*1e3):t.length==8?new Date(((t[0]<<22)+(t[1]<<14)+(t[2]<<6)+(t[3]>>2))/1e6+((t[3]&3)*4294967296+t[4]*16777216+(t[5]<<16)+(t[6]<<8)+t[7])*1e3):t.length==12?new Date(((t[0]<<24)+(t[1]<<16)+(t[2]<<8)+t[3])/1e6+((t[4]&128?-281474976710656:0)+t[6]*1099511627776+t[7]*4294967296+t[8]*16777216+(t[9]<<16)+(t[10]<<8)+t[11])*1e3):new Date("invalid");function Md(t){zo&&zo();let n=Vt,e=U,i=Di,E=Yt,d=Jt,R=Ir,_=sn,I=gr,S=ht,C=new Uint8Array(ue.slice(0,Vt)),w=Ve,b=Ve.slice(0,Ve.length),M=$e,G=Vn,$=t();return Vt=n,U=e,Di=i,Yt=E,Jt=d,Ir=R,sn=_,gr=I,ht=S,ue=C,Vn=G,Ve=w,Ve.splice(0,Ve.length,...b),$e=M,Ye=new DataView(ue.buffer,ue.byteOffset,ue.byteLength),$}function Ys(){ue=null,gr=null,Ve=null}function vd(t){t.unpack?Dt[t.type]=t.unpack:Dt[t.type]=t}var on=new Array(147);for(let t=0;t<256;t++)on[t]=+("1e"+Math.floor(45.15-t*.30103));var Vs=new dr({useRecords:!1}),yI=Vs.unpack,bI=Vs.unpackMultiple,DI=Vs.unpack,Ws={NEVER:0,ALWAYS:1,DECIMAL_ROUND:3,DECIMAL_FIT:4},PI=new Float32Array(1),my=new Uint8Array(PI.buffer,0,4);function xd(t,n,e){Jo=t,Qo=n,zo=e}var Xs;try{Xs=new TextEncoder}catch{}var qs,il,js=typeof Buffer<"u",$s=js?function(t){return Buffer.allocUnsafeSlow(t)}:Uint8Array,Hd=js?Buffer:Uint8Array,Ud=js?4294967296:2144337920,K,Mi,Ke,V=0,Pt,it=null,kd,MI=61440,vI=/[\u0080-\uFFFF]/,fr=Symbol("record-id"),kr=class extends dr{constructor(n){super(n),this.offset=0;let e,i,E,d,R,_=Hd.prototype.utf8Write?function(Y,oe){return K.utf8Write(Y,oe,4294967295)}:Xs&&Xs.encodeInto?function(Y,oe){return Xs.encodeInto(Y,K.subarray(oe)).written}:!1,I=this;n||(n={});let S=n&&n.sequential,C=n.structures||n.saveStructures,w=n.maxSharedStructures;if(w==null&&(w=C?32:0),w>8160)throw new Error("Maximum maxSharedStructure is 8160");n.structuredClone&&n.moreTypes==null&&(n.moreTypes=!0);let b=n.maxOwnStructures;b==null&&(b=C?32:64),!this.structures&&n.useRecords!=!1&&(this.structures=[]);let M=w>32||b+w>64,G=w+64,$=w+b+64;if($>8256)throw new Error("Maximum maxSharedStructure + maxOwnStructure is 8192");let k=[],H=0,ie=0;this.pack=this.encode=function(Y,oe){if(K||(K=new $s(8192),Ke=K.dataView||(K.dataView=new DataView(K.buffer,0,8192)),V=0),Pt=K.length-10,Pt-V<2048?(K=new $s(K.length),Ke=K.dataView||(K.dataView=new DataView(K.buffer,0,K.length)),Pt=K.length-10,V=0):V=V+7&2147483640,i=V,R=I.structuredClone?new Map:null,I.bundleStrings&&typeof Y!="string"?(it=[],it.size=1/0):it=null,d=I.structures,d){d.uninitialized&&(d=I._mergeStructures(I.getStructures()));let W=d.sharedLength||0;if(W>w)throw new Error("Shared structures is larger than maximum shared structures, try increasing maxSharedStructures to "+d.sharedLength);if(!d.transitions){d.transitions=Object.create(null);for(let q=0;q<W;q++){let ce=d[q];if(!ce)continue;let pe,Me=d.transitions;for(let Ie=0,nt=ce.length;Ie<nt;Ie++){let Xe=ce[Ie];pe=Me[Xe],pe||(pe=Me[Xe]=Object.create(null)),Me=pe}Me[fr]=q+64}this.lastNamedStructuresLength=W}S||(d.nextId=W+64)}E&&(E=!1);try{I.randomAccessStructure&&Y.constructor&&Y.constructor===Object?Oe(Y):X(Y);let W=it;if(it&&Fd(i,X,0),R&&R.idsToInsert){let q=R.idsToInsert.sort((Ie,nt)=>Ie.offset>nt.offset?1:-1),ce=q.length,pe=-1;for(;W&&ce>0;){let Ie=q[--ce].offset+i;Ie<W.stringsPosition+i&&pe===-1&&(pe=0),Ie>W.position+i?pe>=0&&(pe+=6):(pe>=0&&(Ke.setUint32(W.position+i,Ke.getUint32(W.position+i)+pe),pe=-1),W=W.previous,ce++)}pe>=0&&W&&Ke.setUint32(W.position+i,Ke.getUint32(W.position+i)+pe),V+=q.length*6,V>Pt&&ee(V),I.offset=V;let Me=UI(K.subarray(i,V),q);return R=null,Me}return I.offset=V,oe&VI?(K.start=i,K.end=V,K):K.subarray(i,V)}finally{if(d){ie<10&&ie++;let W=d.sharedLength||0;if(d.length>W&&(d.length=W),H>1e4)d.transitions=null,ie=0,H=0,k.length>0&&(k=[]);else if(k.length>0&&!S){for(let q=0,ce=k.length;q<ce;q++)k[q][fr]=0;k=[]}if(E&&I.saveStructures){let q=K.subarray(i,V),ce=Yd(d,I);return I.saveStructures(ce,ce.isCompatible)===!1?I.pack(Y):(I.lastNamedStructuresLength=W,q)}}oe&WI&&(V=i)}};let P=Y=>{var oe=Y.length;oe<16?K[V++]=144|oe:oe<65536?(K[V++]=220,K[V++]=oe>>8,K[V++]=oe&255):(K[V++]=221,Ke.setUint32(V,oe),V+=4);for(let W=0;W<oe;W++)X(Y[W])},X=Y=>{V>Pt&&(K=ee(V));var oe=typeof Y,W;if(oe==="string"){let q=Y.length;if(it&&q>=4&&q<4096){if((it.size+=q)>MI){let Ie,nt=(it[0]?it[0].length*3+it[1].length:0)+10;V+nt>Pt&&(K=ee(V+nt));let Xe;it.position?(Xe=it,K[V]=200,V+=3,K[V++]=98,Ie=V-i,V+=4,Fd(i,X,0),Ke.setUint16(Ie+i-3,V-i-Ie)):(K[V++]=214,K[V++]=98,Ie=V-i,V+=4),it=["",""],it.previous=Xe,it.size=0,it.position=Ie}let Me=vI.test(Y);it[Me?0:1]+=Y,K[V++]=193,X(Me?-q:q);return}let ce;q<32?ce=1:q<256?ce=2:q<65536?ce=3:ce=5;let pe=q*3;if(V+pe>Pt&&(K=ee(V+pe)),q<64||!_){let Me,Ie,nt,Xe=V+ce;for(Me=0;Me<q;Me++)Ie=Y.charCodeAt(Me),Ie<128?K[Xe++]=Ie:Ie<2048?(K[Xe++]=Ie>>6|192,K[Xe++]=Ie&63|128):(Ie&64512)===55296&&((nt=Y.charCodeAt(Me+1))&64512)===56320?(Ie=65536+((Ie&1023)<<10)+(nt&1023),Me++,K[Xe++]=Ie>>18|240,K[Xe++]=Ie>>12&63|128,K[Xe++]=Ie>>6&63|128,K[Xe++]=Ie&63|128):(K[Xe++]=Ie>>12|224,K[Xe++]=Ie>>6&63|128,K[Xe++]=Ie&63|128);W=Xe-V-ce}else W=_(Y,V+ce);W<32?K[V++]=160|W:W<256?(ce<2&&K.copyWithin(V+2,V+1,V+1+W),K[V++]=217,K[V++]=W):W<65536?(ce<3&&K.copyWithin(V+3,V+2,V+2+W),K[V++]=218,K[V++]=W>>8,K[V++]=W&255):(ce<5&&K.copyWithin(V+5,V+3,V+3+W),K[V++]=219,Ke.setUint32(V,W),V+=4),V+=W}else if(oe==="number")if(Y>>>0===Y&&!n.preserveNumericTypes)Y<32||Y<128&&this.useRecords===!1||Y<64&&!this.randomAccessStructure?K[V++]=Y:Y<256?(K[V++]=204,K[V++]=Y):Y<65536?(K[V++]=205,K[V++]=Y>>8,K[V++]=Y&255):(K[V++]=206,Ke.setUint32(V,Y),V+=4);else if(Y>>0===Y&&!n.preserveNumericTypes)Y>=-32?K[V++]=256+Y:Y>=-128?(K[V++]=208,K[V++]=Y+256):Y>=-32768?(K[V++]=209,Ke.setInt16(V,Y),V+=2):(K[V++]=210,Ke.setInt32(V,Y),V+=4);else{let q;if((q=this.useFloat32)>0&&Y<4294967296&&Y>=-2147483648){K[V++]=202,Ke.setFloat32(V,Y);let ce;if(q<4||(ce=Y*on[(K[V]&127)<<1|K[V+1]>>7])>>0===ce){V+=4;return}else V--}K[V++]=203,Ke.setFloat64(V,Y),V+=8}else if(oe==="object")if(!Y)K[V++]=192;else{if(R){let ce=R.get(Y);if(ce){if(!ce.id){let pe=R.idsToInsert||(R.idsToInsert=[]);ce.id=pe.push(ce)}K[V++]=214,K[V++]=112,Ke.setUint32(V,ce.id),V+=4;return}else R.set(Y,{offset:V-i})}let q=Y.constructor;if(q===Object)Q(Y,!0);else if(q===Array)P(Y);else if(q===Map){W=Y.size,W<16?K[V++]=128|W:W<65536?(K[V++]=222,K[V++]=W>>8,K[V++]=W&255):(K[V++]=223,Ke.setUint32(V,W),V+=4);for(let[ce,pe]of Y)X(ce),X(pe)}else{for(let ce=0,pe=qs.length;ce<pe;ce++){let Me=il[ce];if(Y instanceof Me){let Ie=qs[ce];if(Ie.write){Ie.type&&(K[V++]=212,K[V++]=Ie.type,K[V++]=0);let er=Ie.write.call(this,Y);er===Y?Array.isArray(Y)?P(Y):Q(Y):X(er);return}let nt=K,Xe=Ke,Zt=V;K=null;let cr;try{cr=Ie.pack.call(this,Y,er=>(K=nt,nt=null,V+=er,V>Pt&&ee(V),{target:K,targetView:Ke,position:V-er}),X)}finally{nt&&(K=nt,Ke=Xe,V=Zt,Pt=K.length-10)}cr&&(cr.length+V>Pt&&ee(cr.length+V),V=xI(cr,K,V,Ie.type));return}}Array.isArray(Y)?P(Y):Q(Y,!Y.hasOwnProperty)}}else if(oe==="boolean")K[V++]=Y?195:194;else if(oe==="bigint"){if(Y<BigInt(1)<<BigInt(63)&&Y>=-(BigInt(1)<<BigInt(63)))K[V++]=211,Ke.setBigInt64(V,Y);else if(Y<BigInt(1)<<BigInt(64)&&Y>0)K[V++]=207,Ke.setBigUint64(V,Y);else if(this.largeBigIntToFloat)K[V++]=203,Ke.setFloat64(V,Number(Y));else throw new RangeError(Y+" was too large to fit in MessagePack 64-bit integer format, set largeBigIntToFloat to convert to float-64");V+=8}else if(oe==="undefined")this.encodeUndefinedAsNil?K[V++]=192:(K[V++]=212,K[V++]=0,K[V++]=0);else if(oe==="function")X(this.writeFunction&&this.writeFunction());else throw new Error("Unknown type: "+oe)},Q=this.useRecords===!1?this.variableMapSize?Y=>{let oe=Object.keys(Y),W=oe.length;W<16?K[V++]=128|W:W<65536?(K[V++]=222,K[V++]=W>>8,K[V++]=W&255):(K[V++]=223,Ke.setUint32(V,W),V+=4);let q;for(let ce=0;ce<W;ce++)X(q=oe[ce]),X(Y[q])}:(Y,oe)=>{K[V++]=222;let W=V-i;V+=2;let q=0;for(let ce in Y)(oe||Y.hasOwnProperty(ce))&&(X(ce),X(Y[ce]),q++);K[W+++i]=q>>8,K[W+i]=q&255}:n.progressiveRecords&&!M?(Y,oe)=>{let W,q=d.transitions||(d.transitions=Object.create(null)),ce=V++-i,pe;for(let Me in Y)if(oe||Y.hasOwnProperty(Me)){if(W=q[Me],W)q=W;else{let Ie=Object.keys(Y),nt=q;q=d.transitions;let Xe=0;for(let Zt=0,cr=Ie.length;Zt<cr;Zt++){let er=Ie[Zt];W=q[er],W||(W=q[er]=Object.create(null),Xe++),q=W}ce+i+1==V?(V--,te(q,Ie,Xe)):se(q,Ie,ce,Xe),pe=!0,q=nt[Me]}X(Y[Me])}if(!pe){let Me=q[fr];Me?K[ce+i]=Me:se(q,Object.keys(Y),ce,0)}}:(Y,oe)=>{let W,q=d.transitions||(d.transitions=Object.create(null)),ce=0;for(let Me in Y)(oe||Y.hasOwnProperty(Me))&&(W=q[Me],W||(W=q[Me]=Object.create(null),ce++),q=W);let pe=q[fr];pe?pe>=96&&M?(K[V++]=((pe-=96)&31)+96,K[V++]=pe>>5):K[V++]=pe:te(q,q.__keys__||Object.keys(Y),ce);for(let Me in Y)(oe||Y.hasOwnProperty(Me))&&X(Y[Me])},ee=Y=>{let oe;if(Y>16777216){if(Y-i>Ud)throw new Error("Packed buffer would be larger than maximum buffer size");oe=Math.min(Ud,Math.round(Math.max((Y-i)*(Y>67108864?1.25:2),4194304)/4096)*4096)}else oe=(Math.max(Y-i<<2,K.length-1)>>12)+1<<12;let W=new $s(oe);return Ke=W.dataView||(W.dataView=new DataView(W.buffer,0,oe)),Y=Math.min(Y,K.length),K.copy?K.copy(W,0,i,Y):W.set(K.slice(i,Y)),V-=i,i=0,Pt=W.length-10,K=W},te=(Y,oe,W)=>{let q=d.nextId;q||(q=64),q<G&&this.shouldShareStructure&&!this.shouldShareStructure(oe)?(q=d.nextOwnId,q<$||(q=G),d.nextOwnId=q+1):(q>=$&&(q=G),d.nextId=q+1);let ce=oe.highByte=q>=96&&M?q-96>>5:-1;Y[fr]=q,Y.__keys__=oe,d[q-64]=oe,q<G?(oe.isShared=!0,d.sharedLength=q-63,E=!0,ce>=0?(K[V++]=(q&31)+96,K[V++]=ce):K[V++]=q):(ce>=0?(K[V++]=213,K[V++]=114,K[V++]=(q&31)+96,K[V++]=ce):(K[V++]=212,K[V++]=114,K[V++]=q),W&&(H+=ie*W),k.length>=b&&(k.shift()[fr]=0),k.push(Y),X(oe))},se=(Y,oe,W,q)=>{let ce=K,pe=V,Me=Pt,Ie=i;K=Mi,V=0,i=0,K||(Mi=K=new $s(8192)),Pt=K.length-10,te(Y,oe,q),Mi=K;let nt=V;if(K=ce,V=pe,Pt=Me,i=Ie,nt>1){let Xe=V+nt-1;Xe>Pt&&ee(Xe);let Zt=W+i;K.copyWithin(Zt+nt,Zt+1,V),K.set(Mi.slice(0,nt),Zt),V=Xe}else K[W+i]=Mi[0]},Oe=(Y,oe)=>{let W=kd(Y,K,V,d,ee,(q,ce,pe)=>{if(pe)return E=!0;if(V=ce,i>0){if(X(q),i==0)return{position:V,targetView:Ke,target:K}}else X(q);return V},this);if(W===0)return Q(Y,!0);V=W}}useBuffer(n){K=n,Ke=new DataView(K.buffer,K.byteOffset,K.byteLength),V=0}clearSharedData(){this.structures&&(this.structures=[]),this.typedStructs&&(this.typedStructs=[])}};il=[Date,Set,Error,RegExp,ArrayBuffer,Object.getPrototypeOf(Uint8Array.prototype).constructor,Pi];qs=[{pack(t,n,e){let i=t.getTime()/1e3;if((this.useTimestamp32||t.getMilliseconds()===0)&&i>=0&&i<4294967296){let{target:E,targetView:d,position:R}=n(6);E[R++]=214,E[R++]=255,d.setUint32(R,i)}else if(i>0&&i<4294967296){let{target:E,targetView:d,position:R}=n(10);E[R++]=215,E[R++]=255,d.setUint32(R,t.getMilliseconds()*4e6+(i/1e3/4294967296>>0)),d.setUint32(R+4,i)}else if(isNaN(i)){if(this.onInvalidDate)return n(0),e(this.onInvalidDate());let{target:E,targetView:d,position:R}=n(3);E[R++]=212,E[R++]=255,E[R++]=255}else{let{target:E,targetView:d,position:R}=n(15);E[R++]=199,E[R++]=12,E[R++]=255,d.setUint32(R,t.getMilliseconds()*1e6),d.setBigInt64(R+4,BigInt(Math.floor(i)))}}},{pack(t,n,e){let i=Array.from(t),{target:E,position:d}=n(this.moreTypes?3:0);this.moreTypes&&(E[d++]=212,E[d++]=115,E[d++]=0),e(i)}},{pack(t,n,e){let{target:i,position:E}=n(this.moreTypes?3:0);this.moreTypes&&(i[E++]=212,i[E++]=101,i[E++]=0),e([t.name,t.message])}},{pack(t,n,e){let{target:i,position:E}=n(this.moreTypes?3:0);this.moreTypes&&(i[E++]=212,i[E++]=120,i[E++]=0),e([t.source,t.flags])}},{pack(t,n){this.moreTypes?Gd(t,16,n):Bd(js?Buffer.from(t):new Uint8Array(t),n)}},{pack(t,n){let e=t.constructor;e!==Hd&&this.moreTypes?Gd(t,nl.indexOf(e.name),n):Bd(t,n)}},{pack(t,n){let{target:e,position:i}=n(1);e[i]=193}}];function Gd(t,n,e,i){let E=t.byteLength;if(E+1<256){var{target:d,position:R}=e(4+E);d[R++]=199,d[R++]=E+1}else if(E+1<65536){var{target:d,position:R}=e(5+E);d[R++]=200,d[R++]=E+1>>8,d[R++]=E+1&255}else{var{target:d,position:R,targetView:_}=e(7+E);d[R++]=201,_.setUint32(R,E+1),R+=4}d[R++]=116,d[R++]=n,d.set(new Uint8Array(t.buffer,t.byteOffset,t.byteLength),R)}function Bd(t,n){let e=t.byteLength;var i,E;if(e<256){var{target:i,position:E}=n(e+2);i[E++]=196,i[E++]=e}else if(e<65536){var{target:i,position:E}=n(e+3);i[E++]=197,i[E++]=e>>8,i[E++]=e&255}else{var{target:i,position:E,targetView:d}=n(e+5);i[E++]=198,d.setUint32(E,e),E+=4}i.set(t,E)}function xI(t,n,e,i){let E=t.length;switch(E){case 1:n[e++]=212;break;case 2:n[e++]=213;break;case 4:n[e++]=214;break;case 8:n[e++]=215;break;case 16:n[e++]=216;break;default:E<256?(n[e++]=199,n[e++]=E):E<65536?(n[e++]=200,n[e++]=E>>8,n[e++]=E&255):(n[e++]=201,n[e++]=E>>24,n[e++]=E>>16&255,n[e++]=E>>8&255,n[e++]=E&255)}return n[e++]=i,n.set(t,e),e+=E,e}function UI(t,n){let e,i=n.length*6,E=t.length-i;for(;e=n.pop();){let d=e.offset,R=e.id;t.copyWithin(d+i,d,E),i-=6;let _=d+i;t[_++]=214,t[_++]=105,t[_++]=R>>24,t[_++]=R>>16&255,t[_++]=R>>8&255,t[_++]=R&255,E=d}return t}function Fd(t,n,e){if(it.length>0){Ke.setUint32(it.position+t,V+e-it.position-t),it.stringsPosition=V-t;let i=it;it=null,n(i[0]),n(i[1])}}function sl(t){if(t.Class){if(!t.pack&&!t.write)throw new Error("Extension has no pack or write function");if(t.pack&&!t.type)throw new Error("Extension has no type (numeric code to identify the extension)");il.unshift(t.Class),qs.unshift(t)}vd(t)}function Yd(t,n){return t.isCompatible=e=>{let i=!e||(n.lastNamedStructuresLength||0)===e.length;return i||n._mergeStructures(e),i},t}function Vd(t,n){kd=t,Yd=n}var Wd=new kr({useRecords:!1}),GI=Wd.pack,BI=Wd.pack;var{NEVER:FI,ALWAYS:HI,DECIMAL_ROUND:kI,DECIMAL_FIT:YI}=Ws,VI=512,WI=1024;var al=3,$n=0,vi=2,Ks=1,ll=16,Xd=["num","object","string","ascii"];Xd[ll]="date";var $I=[!1,!0,!0,!1,!1,!0,!0,!1],qd;try{new Function(""),qd=!0}catch{}var ln,XI=typeof Buffer<"u",Js,hr;try{Js=new TextEncoder}catch{}var qI=XI?function(t,n,e){return t.utf8Write(n,e,4294967295)}:Js&&Js.encodeInto?function(t,n,e){return Js.encodeInto(n,t.subarray(e)).written}:!1,_y=Symbol("type"),Ly=Symbol("parent");Vd(jd,zI);function jd(t,n,e,i,E,d,R){let _=R.typedStructs||(R.typedStructs=[]),I=n.dataView,S=(_.lastStringStart||100)+e,C=n.length-10,w=e;if(e>C){let Q=w;n=E(e),I=n.dataView,e-=Q,S-=Q,w=0,C=n.length-10}let b,M=S,G=_.transitions||(_.transitions=Object.create(null)),$=_.nextId||_.length,k=$<15?1:$<240?2:$<61440?3:$<15728640?4:0;if(k===0)return 0;e+=k;let H=[],ie,P=0;for(let Q in t){let ee=t[Q],te=G[Q];if(te||(G[Q]=te={key:Q,parent:G,enumerationOffset:0,ascii0:null,ascii8:null,num8:null,string16:null,object16:null,num32:null,float64:null,date64:null}),e>C){let se=w;n=E(e),I=n.dataView,e-=se,S-=se,M-=se,w=0,C=n.length-10}switch(typeof ee){case"number":let se=ee;if(se>>0===se&&se<536870912&&se>-520093696){se<246&&se>=0&&(te.num8||se<32&&!te.num32)?(G=te.num8||Gt(te,$n,1),n[e++]=se):(G=te.num32||Gt(te,$n,4),I.setUint32(e,se,!0),e+=4);break}else if(se<4294967296&&se>=-2147483648&&(I.setFloat32(e,se,!0),$I[n[e+3]>>>5])){let W;if((W=se*on[(n[e+3]&127)<<1|n[e+2]>>7])>>0===W){G=te.num32||Gt(te,$n,4),e+=4;break}}G=te.num64||Gt(te,$n,8),I.setFloat64(e,se,!0),e+=8;break;case"string":let Oe=ee.length;if(b=M-S,(Oe<<2)+M>C){let W=w;n=E((Oe<<2)+M),I=n.dataView,e-=W,S-=W,M-=W,w=0,C=n.length-10}if(Oe>65280+b>>2){H.push(Q,ee,e-w);break}let Y,oe=M;if(Oe<64){let W,q,ce;for(W=0;W<Oe;W++)q=ee.charCodeAt(W),q<128?n[M++]=q:q<2048?(Y=!0,n[M++]=q>>6|192,n[M++]=q&63|128):(q&64512)===55296&&((ce=ee.charCodeAt(W+1))&64512)===56320?(Y=!0,q=65536+((q&1023)<<10)+(ce&1023),W++,n[M++]=q>>18|240,n[M++]=q>>12&63|128,n[M++]=q>>6&63|128,n[M++]=q&63|128):(Y=!0,n[M++]=q>>12|224,n[M++]=q>>6&63|128,n[M++]=q&63|128)}else M+=qI(n,ee,M),Y=M-oe>Oe;if(b<160||b<246&&(te.ascii8||te.string8)){if(Y)(G=te.string8)||(_.length>10&&(G=te.ascii8)?(G.__type=vi,te.ascii8=null,te.string8=G,d(null,0,!0)):G=Gt(te,vi,1));else if(b===0&&!ie){ie=!0,G=te.ascii0||Gt(te,al,0);break}else!(G=te.ascii8)&&!(_.length>10&&(G=te.string8))&&(G=Gt(te,al,1));n[e++]=b}else G=te.string16||Gt(te,vi,2),I.setUint16(e,b,!0),e+=2;break;case"object":if(ee){ee.constructor===Date?(G=te.date64||Gt(te,ll,8),I.setFloat64(e,ee.getTime(),!0),e+=8):H.push(Q,ee,P);break}else te=$d(te,e,I,-10),te?(G=te,e=ln):H.push(Q,ee,P);break;case"boolean":G=te.num8||te.ascii8||Gt(te,$n,1),n[e++]=ee?249:248;break;case"undefined":te=$d(te,e,I,-9),te?(G=te,e=ln):H.push(Q,ee,P);break}P++}for(let Q=0,ee=H.length;Q<ee;){let te=H[Q++],se=H[Q++],Oe=H[Q++],Y=G[te];Y||(G[te]=Y={key:te,parent:G,enumerationOffset:Oe-P,ascii0:null,ascii8:null,num8:null,string16:null,object16:null,num32:null,float64:null});let oe;if(se){let W;b=M-S,b<65280?(G=Y.object16,G?W=2:(G=Y.object32)?W=4:(G=Gt(Y,Ks,2),W=2)):(G=Y.object32||Gt(Y,Ks,4),W=4),oe=d(se,M),typeof oe=="object"?(M=oe.position,I=oe.targetView,n=oe.target,S-=w,e-=w,w=0):M=oe,W===2?(I.setUint16(e,b,!0),e+=2):(I.setUint32(e,b,!0),e+=4)}else G=Y.object16||Gt(Y,Ks,2),I.setInt16(e,se===null?-10:-9,!0),e+=2;P++}let X=G[fr];if(X==null){X=R.typedStructs.length;let Q=[],ee=G,te,se;for(;(se=ee.__type)!==void 0;){let Oe=ee.__size;ee=ee.__parent,te=ee.key;let Y=[se,Oe,te];ee.enumerationOffset&&Y.push(ee.enumerationOffset),Q.push(Y),ee=ee.parent}Q.reverse(),G[fr]=X,R.typedStructs[X]=Q,d(null,0,!0)}switch(k){case 1:if(X>=16)return 0;n[w]=X+32;break;case 2:if(X>=256)return 0;n[w]=56,n[w+1]=X;break;case 3:if(X>=65536)return 0;n[w]=57,n.setUint16(w+1,X,!0);break;case 4:if(X>=16777216)return 0;n.setUint32(w,(X<<8)+58,!0);break}if(e<S){if(S===M)return e;n.copyWithin(e,S,M),M+=e-S,_.lastStringStart=e-w}else if(e>S)return S===M?e:(_.lastStringStart=e-w,jd(t,n,w,i,E,d,R));return M}function $d(t,n,e,i){let E;if(E=t.ascii8||t.num8)return e.setInt8(n,i,!0),ln=n+1,E;if(E=t.string16||t.object16)return e.setInt16(n,i,!0),ln=n+2,E;if(E=t.num32)return e.setUint32(n,3758096640+i,!0),ln=n+4,E;if(E=t.num64)return e.setFloat64(n,NaN,!0),e.setInt8(n,i),ln=n+8,E;ln=n}function Gt(t,n,e){let i=Xd[n]+(e<<3),E=t[i]||(t[i]=Object.create(null));return E.__type=n,E.__size=e,E.__parent=t,E}function jI(t){if(!(t instanceof Map))return t;let n=t.get("typed")||[];Object.isFrozen(n)&&(n=n.map(E=>E.slice(0)));let e=t.get("named"),i=Object.create(null);for(let E=0,d=n.length;E<d;E++){let R=n[E],_=i;for(let[I,S,C]of R){let w=_[C];w||(_[C]=w={key:C,parent:_,enumerationOffset:0,ascii0:null,ascii8:null,num8:null,string16:null,object16:null,num32:null,float64:null,date64:null}),_=Gt(w,I,S)}_[fr]=E}return n.transitions=i,this.typedStructs=n,this.lastTypedStructuresLength=n.length,e}var ol=Symbol.for("source");function KI(t,n,e,i){let E=t[n++]-32;if(E>=24)switch(E){case 24:E=t[n++];break;case 25:E=t[n++]+(t[n++]<<8);break;case 26:E=t[n++]+(t[n++]<<8)+(t[n++]<<16);break;case 27:E=t[n++]+(t[n++]<<8)+(t[n++]<<16)+(t[n++]<<24);break}let d=i.typedStructs&&i.typedStructs[E];if(!d){if(t=Uint8Array.prototype.slice.call(t,n,e),e-=n,n=0,i._mergeStructures(i.getStructures()),!i.typedStructs)throw new Error("Could not find any shared typed structures");if(i.lastTypedStructuresLength=i.typedStructs.length,d=i.typedStructs[E],!d)throw new Error("Could not find typed structure "+E)}var R=d.construct;if(!R){R=d.construct=function(){};var _=R.prototype;let S=[],C=0,w;for(let b=0,M=d.length;b<M;b++){let G=d[b],[$,k,H,ie]=G;H==="__proto__"&&(H="__proto_");let P={key:H,offset:C};ie?S.splice(b+ie,0,P):S.push(P);let X;switch(k){case 0:X=()=>0;break;case 1:X=(ee,te)=>{let se=ee.bytes[te+P.offset];return se>=246?Wn(se):se};break;case 2:X=(ee,te)=>{let se=ee.bytes,Y=(se.dataView||(se.dataView=new DataView(se.buffer,se.byteOffset,se.byteLength))).getUint16(te+P.offset,!0);return Y>=65280?Wn(Y&255):Y};break;case 4:X=(ee,te)=>{let se=ee.bytes,Y=(se.dataView||(se.dataView=new DataView(se.buffer,se.byteOffset,se.byteLength))).getUint32(te+P.offset,!0);return Y>=4294967040?Wn(Y&255):Y};break}P.getRef=X,C+=k;let Q;switch($){case al:w&&!w.next&&(w.next=P),w=P,P.multiGetCount=0,Q=function(ee){let te=ee.bytes,se=ee.position,Oe=C+se,Y=X(ee,se);if(typeof Y!="number")return Y;let oe,W=P.next;for(;W&&(oe=W.getRef(ee,se),typeof oe!="number");)oe=null,W=W.next;return oe==null&&(oe=ee.bytesEnd-Oe),ee.srcString?ee.srcString.slice(Y,oe):yd(te,Y+Oe,oe-Y)};break;case vi:case Ks:w&&!w.next&&(w.next=P),w=P,Q=function(ee){let te=ee.position,se=C+te,Oe=X(ee,te);if(typeof Oe!="number")return Oe;let Y=ee.bytes,oe,W=P.next;for(;W&&(oe=W.getRef(ee,te),typeof oe!="number");)oe=null,W=W.next;if(oe==null&&(oe=ee.bytesEnd-se),$===vi)return Y.toString("utf8",Oe+se,oe+se);hr=ee;try{return i.unpack(Y,{start:Oe+se,end:oe+se})}finally{hr=null}};break;case $n:switch(k){case 4:Q=function(ee){let te=ee.bytes,se=te.dataView||(te.dataView=new DataView(te.buffer,te.byteOffset,te.byteLength)),Oe=ee.position+P.offset,Y=se.getInt32(Oe,!0);if(Y<536870912){if(Y>-520093696)return Y;if(Y>-536870912)return Wn(Y&255)}let oe=se.getFloat32(Oe,!0),W=on[(te[Oe+3]&127)<<1|te[Oe+2]>>7];return(W*oe+(oe>0?.5:-.5)>>0)/W};break;case 8:Q=function(ee){let te=ee.bytes,Oe=(te.dataView||(te.dataView=new DataView(te.buffer,te.byteOffset,te.byteLength))).getFloat64(ee.position+P.offset,!0);if(isNaN(Oe)){let Y=te[ee.position+P.offset];if(Y>=246)return Wn(Y)}return Oe};break;case 1:Q=function(ee){let se=ee.bytes[ee.position+P.offset];return se<246?se:Wn(se)};break}break;case ll:Q=function(ee){let te=ee.bytes,se=te.dataView||(te.dataView=new DataView(te.buffer,te.byteOffset,te.byteLength));return new Date(se.getFloat64(ee.position+P.offset,!0))};break}P.get=Q}if(qd){let b=[],M=[],G=0;for(let k of S){Object.defineProperty(_,k.key,{get:JI(k.get),enumerable:!0});let H="v"+G++;M.push(H),b.push("["+JSON.stringify(k.key)+"]:"+H+"(s)")}let $=new Function(...M,"return function(s){return{"+b.join(",")+"}}").apply(null,S.map(k=>k.get));Object.defineProperty(_,"toJSON",{value(){return $(this[ol])}})}else Object.defineProperty(_,"toJSON",{value(){let b={};for(let M=0,G=S.length;M<G;M++){let $=S[M].key;b[$]=this[$]}return b}})}var I=new R;return I[ol]={bytes:t,position:n,srcString:"",bytesEnd:e},I}function Wn(t){switch(t){case 246:return null;case 247:return;case 248:return!1;case 249:return!0}throw new Error("Unknown constant")}function JI(t){return function(){return t(this[ol])}}function QI(){hr&&(hr.bytes=Uint8Array.prototype.slice.call(hr.bytes,hr.position,hr.bytesEnd),hr.position=0,hr.bytesEnd=hr.bytes.length)}function zI(t,n){if(n.typedStructs){let i=new Map;i.set("named",t),i.set("typed",n.typedStructs),t=i}let e=n.lastTypedStructuresLength||0;return t.isCompatible=i=>{let E=!0;return i instanceof Map?((i.get("named")||[]).length!==(n.lastNamedStructuresLength||0)&&(E=!1),(i.get("typed")||[]).length!==e&&(E=!1)):(i instanceof Array||Array.isArray(i))&&i.length!==(n.lastNamedStructuresLength||0)&&(E=!1),E||n._mergeStructures(i),E},n.lastTypedStructuresLength=n.typedStructs&&n.typedStructs.length,t}xd(KI,jI,QI);var ff=require("module"),og={};var ag=process.env.MSGPACKR_NATIVE_ACCELERATION_DISABLED!==void 0&&process.env.MSGPACKR_NATIVE_ACCELERATION_DISABLED.toLowerCase()==="true";if(!ag){let t;try{typeof require=="function"?t=df():t=(0,ff.createRequire)(og.url)("msgpackr-extract"),t&&wd(t.extractStrings)}catch{}}var hf=()=>new kr({useRecords:!1,preserveNumericTypes:!0}),Tf=()=>new dr({largeBigIntToFloat:!1,int64AsNumber:!1,mapsAsObjects:!0,useRecords:!0,preserveNumericTypes:!0}),ea=hf(),ta=Tf(),Zs=class{constructor(n){this.data=n}};sl({Class:Zs,type:48,pack:t=>hf().pack(t.data),unpack:t=>new Zs(Tf().unpack(t))});var ra=Se(require("node:crypto"),1),na=Se(require("node:fs"),1),mf=Se(require("node:os"),1),xi=Se(require("node:path"),1),ia=class{#e;#t=new Set;constructor(n=mf.default.tmpdir()){this.#e=n,na.default.mkdirSync(n,{recursive:!0})}temporaryFile(n={}){let e;if("name"in n&&n.name!==void 0&&n.name!==""){let i=xi.default.join(this.#e,ra.default.randomBytes(16).toString("hex"));this.#t.add(i),na.default.mkdirSync(i,{recursive:!0}),e=xi.default.join(i,n.name)}else"extension"in n&&n.extension!==void 0&&n.extension!==""?(e=xi.default.join(this.#e,ra.default.randomBytes(16).toString("hex")+"."+n.extension.replace(/^\./,"")),this.#t.add(e)):(e=xi.default.join(this.#e,ra.default.randomBytes(16).toString("hex")),this.#t.add(e));return e}dispose(){for(let n of this.#t)na.default.rmSync(n,{force:!0,recursive:!0})}};var Ut=Se(require("vscode")),Ap=Se(Bf());var Ui=Se(require("node:fs"),1),Ff=t=>{try{return Ui.default.accessSync(t,Ui.default.constants.R_OK),null}catch(n){return n instanceof Error?n.message:null}},jn=()=>{let t=[];return{fire:()=>{t.forEach(n=>n())},event:n=>{t.push(n)},dispose:()=>{t.length=0}}},Kn=(t,n)=>{let e=0,i;try{({mtimeMs:e,ino:i}=Ui.default.statSync(t))}catch{e=0,i=0}let E=setInterval(()=>{try{let d=Ui.default.statSync(t,{throwIfNoEntry:!1}),R=d?.mtimeMs??0,_=d?.ino;process.platform!=="win32"&&i!==_?_===void 0?n.delete?.():n.move?.():e!==R&&n.change?.(),e=R,i=_}catch(d){console.error(d)}},100);return{dispose:()=>{clearInterval(E)}}},Gi=process.platform==="win32"?".exe":"";var En={"connection.setupQueries":{},"connection.runtimeLoadableExtensions":{},pragma_foreign_key:"ON",maxHistoryEntries:500,executablePath:"","comment.filepath":"${fileDirname}/${fileBasename}.docs.md",developerMode:!1,"connectionSetupQueries.driver.sqlite3":{},"runtimeLoadableExtensions.driver.sqlite3":{},"ui.tableSelector.displayColumns":!1,"ui.tableSelector.displayShadowTables":!1,"ui.tableHeaderMaxLines":6,"ui.alignNumberRight":!1,"ui.defaultIndexName.table":"idx_{{tableName}}","ui.defaultIndexName.tableAndColumns":"idx_{{tableName}}_{{columns}}","ui.recordCountingLimit":1e7,"ui.conditionalFormatting":[],"ui.foreignKeyDropdownLimit":50001,"ui.performanceNotice":!0,"ui.insert.textareaLimit":50,"ui.alwaysDisplayTabs":!1,"ui.movePanelIfSpaceAllows":"bottom","ui.displayLanguage":"automatic","ui.indexVisualization.maxColumns":30,"ui.columnFilter.list.maxTableRecords":2e5,"ui.columnFilter.list.maxUniqueValues":50,"ui.experimental.resizeTableHeaderByDragging":!1,"ui.experimental.otherTools.compareDatabases":!1,"ui.tableCellForeignKeyPreview.opacity":.5,"ui.undo.memoryLimit":64,"ui.undo.diskLimit":256,"ui.commitOnEnterOrTab":!1,"ui.spacing":1.4,"ui.minimizePanel":!1,"ui.otherTools.databaseFlags":!1,"ui.erDiagram.displayReferencingColumns":!1,"ui.textarea.newLineCharacter":"lf","ui.experimental.popOutEditor.enabled":!1,"ui.mergeIdenticalCells":!1,"ui.experimental.displayQueryPlanButton":!1,"codeLens.hideExecuteAndSelectButtons":!1,"diagnostics.disableSyntaxCheck":!1,"completion.functionCase":"lower","format.commaPosition":"after","format.denseOperators":!1,"format.expressionWidth":50,"format.indentStyle":"standard","format.keywordCase":"preserve","format.linesBetweenQueries":1,"format.logicalOperatorNewline":"before","format.newlineBeforeSemicolon":!1,"format.tabulateAlias":!1,"format.trailingNewLine":!0,"experimental.queryEditorKeywordSyntaxDocumentation":!1,insertHelpComment:!0,"queryEditor.rewriteToRelativePath":!0,"queryEditor.autoConnect":!1,"queryEditor.experimental.visualizeExplainOutput":!1,"export.csv.delimiter":",","export.csv.null":"","export.xlsx.wrapText":!0,"export.xlsx.saveTopLeft":!0,"export.xlsx.saveSelection":!0,"export.xlsx.saveActiveSheet":!0},Hf={maxHistoryEntries:{type:"integer",maximum:2147483647,minimum:0},"ui.tableHeaderMaxLines":{type:"integer",maximum:2147483647,minimum:1},"ui.recordCountingLimit":{type:"integer",maximum:9007199254740991,minimum:1},"ui.foreignKeyDropdownLimit":{type:"integer",maximum:2147483647,minimum:1},"ui.insert.textareaLimit":{type:"integer",maximum:2147483647,minimum:1},"ui.indexVisualization.maxColumns":{type:"integer",maximum:2147483647,minimum:0},"ui.columnFilter.list.maxTableRecords":{type:"integer",maximum:2147483647,minimum:0},"ui.columnFilter.list.maxUniqueValues":{type:"integer",maximum:2147483647,minimum:0},"ui.tableCellForeignKeyPreview.opacity":{type:"number",maximum:1,minimum:0},"ui.undo.memoryLimit":{type:"number",maximum:2147483647,minimum:0},"ui.undo.diskLimit":{type:"number",maximum:2147483647,minimum:0},"ui.spacing":{type:"number",maximum:100,minimum:1},"format.expressionWidth":{type:"integer",maximum:2147483647,minimum:0},"format.linesBetweenQueries":{type:"integer",maximum:100,minimum:0}};var kf=["de","en","es","fr","it","ja","ko","pt-BR","ru","zh-CN","zh-TW"],Yf=t=>t,Vf=t=>Object.fromEntries(Object.keys(En).filter(n=>n.startsWith("ui.")&&n!=="ui.displayLanguage").map(n=>{let e=n.replace("ui.","");return[e,t?t(e):Cg(En[n])]})),Cg=globalThis.structuredClone??(t=>JSON.parse(JSON.stringify(t)));var Jn=t=>process.platform==="win32"?'"'+t.replace(/[\0\u0008\u001B\u009B]/gu,"").replace(/\r?\n|\r/gu," ").replace(/"/gu,'""')+'"':"'"+t.replace(/'/gu,"'\\''")+"'",st=t=>t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;");var Wf=t=>t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),dl=(t,n)=>n.$$maxLength===void 0||t.length<=n.$$maxLength?n.$$map(t)+(n.$$suffix??""):n.$$map(t.slice(0,n.$$maxLength))+"\u2026";var _h=Se(require("node:path")),ot=Se(require("vscode"));function sa(t,n=!1){let e=t.length,i=0,E="",d=0,R=16,_=0,I=0,S=0,C=0,w=0;function b(P,X){let Q=0,ee=0;for(;Q<P||!X;){let te=t.charCodeAt(i);if(te>=48&&te<=57)ee=ee*16+te-48;else if(te>=65&&te<=70)ee=ee*16+te-65+10;else if(te>=97&&te<=102)ee=ee*16+te-97+10;else break;i++,Q++}return Q<P&&(ee=-1),ee}function M(P){i=P,E="",d=0,R=16,w=0}function G(){let P=i;if(t.charCodeAt(i)===48)i++;else for(i++;i<t.length&&Qn(t.charCodeAt(i));)i++;if(i<t.length&&t.charCodeAt(i)===46)if(i++,i<t.length&&Qn(t.charCodeAt(i)))for(i++;i<t.length&&Qn(t.charCodeAt(i));)i++;else return w=3,t.substring(P,i);let X=i;if(i<t.length&&(t.charCodeAt(i)===69||t.charCodeAt(i)===101))if(i++,(i<t.length&&t.charCodeAt(i)===43||t.charCodeAt(i)===45)&&i++,i<t.length&&Qn(t.charCodeAt(i))){for(i++;i<t.length&&Qn(t.charCodeAt(i));)i++;X=i}else w=3;return t.substring(P,X)}function $(){let P="",X=i;for(;;){if(i>=e){P+=t.substring(X,i),w=2;break}let Q=t.charCodeAt(i);if(Q===34){P+=t.substring(X,i),i++;break}if(Q===92){if(P+=t.substring(X,i),i++,i>=e){w=2;break}switch(t.charCodeAt(i++)){case 34:P+='"';break;case 92:P+="\\";break;case 47:P+="/";break;case 98:P+="\b";break;case 102:P+="\f";break;case 110:P+=`
`;break;case 114:P+="\r";break;case 116:P+="	";break;case 117:let te=b(4,!0);te>=0?P+=String.fromCharCode(te):w=4;break;default:w=5}X=i;continue}if(Q>=0&&Q<=31)if(Bi(Q)){P+=t.substring(X,i),w=2;break}else w=6;i++}return P}function k(){if(E="",w=0,d=i,I=_,C=S,i>=e)return d=e,R=17;let P=t.charCodeAt(i);if(fl(P)){do i++,E+=String.fromCharCode(P),P=t.charCodeAt(i);while(fl(P));return R=15}if(Bi(P))return i++,E+=String.fromCharCode(P),P===13&&t.charCodeAt(i)===10&&(i++,E+=`
`),_++,S=i,R=14;switch(P){case 123:return i++,R=1;case 125:return i++,R=2;case 91:return i++,R=3;case 93:return i++,R=4;case 58:return i++,R=6;case 44:return i++,R=5;case 34:return i++,E=$(),R=10;case 47:let X=i-1;if(t.charCodeAt(i+1)===47){for(i+=2;i<e&&!Bi(t.charCodeAt(i));)i++;return E=t.substring(X,i),R=12}if(t.charCodeAt(i+1)===42){i+=2;let Q=e-1,ee=!1;for(;i<Q;){let te=t.charCodeAt(i);if(te===42&&t.charCodeAt(i+1)===47){i+=2,ee=!0;break}i++,Bi(te)&&(te===13&&t.charCodeAt(i)===10&&i++,_++,S=i)}return ee||(i++,w=1),E=t.substring(X,i),R=13}return E+=String.fromCharCode(P),i++,R=16;case 45:if(E+=String.fromCharCode(P),i++,i===e||!Qn(t.charCodeAt(i)))return R=16;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return E+=G(),R=11;default:for(;i<e&&H(P);)i++,P=t.charCodeAt(i);if(d!==i){switch(E=t.substring(d,i),E){case"true":return R=8;case"false":return R=9;case"null":return R=7}return R=16}return E+=String.fromCharCode(P),i++,R=16}}function H(P){if(fl(P)||Bi(P))return!1;switch(P){case 125:case 93:case 123:case 91:case 34:case 58:case 44:case 47:return!1}return!0}function ie(){let P;do P=k();while(P>=12&&P<=15);return P}return{setPosition:M,getPosition:()=>i,scan:n?ie:k,getToken:()=>R,getTokenValue:()=>E,getTokenOffset:()=>d,getTokenLength:()=>i-d,getTokenStartLine:()=>I,getTokenStartCharacter:()=>d-C,getTokenError:()=>w}}function fl(t){return t===32||t===9}function Bi(t){return t===10||t===13}function Qn(t){return t>=48&&t<=57}var $f;(function(t){t[t.lineFeed=10]="lineFeed",t[t.carriageReturn=13]="carriageReturn",t[t.space=32]="space",t[t._0=48]="_0",t[t._1=49]="_1",t[t._2=50]="_2",t[t._3=51]="_3",t[t._4=52]="_4",t[t._5=53]="_5",t[t._6=54]="_6",t[t._7=55]="_7",t[t._8=56]="_8",t[t._9=57]="_9",t[t.a=97]="a",t[t.b=98]="b",t[t.c=99]="c",t[t.d=100]="d",t[t.e=101]="e",t[t.f=102]="f",t[t.g=103]="g",t[t.h=104]="h",t[t.i=105]="i",t[t.j=106]="j",t[t.k=107]="k",t[t.l=108]="l",t[t.m=109]="m",t[t.n=110]="n",t[t.o=111]="o",t[t.p=112]="p",t[t.q=113]="q",t[t.r=114]="r",t[t.s=115]="s",t[t.t=116]="t",t[t.u=117]="u",t[t.v=118]="v",t[t.w=119]="w",t[t.x=120]="x",t[t.y=121]="y",t[t.z=122]="z",t[t.A=65]="A",t[t.B=66]="B",t[t.C=67]="C",t[t.D=68]="D",t[t.E=69]="E",t[t.F=70]="F",t[t.G=71]="G",t[t.H=72]="H",t[t.I=73]="I",t[t.J=74]="J",t[t.K=75]="K",t[t.L=76]="L",t[t.M=77]="M",t[t.N=78]="N",t[t.O=79]="O",t[t.P=80]="P",t[t.Q=81]="Q",t[t.R=82]="R",t[t.S=83]="S",t[t.T=84]="T",t[t.U=85]="U",t[t.V=86]="V",t[t.W=87]="W",t[t.X=88]="X",t[t.Y=89]="Y",t[t.Z=90]="Z",t[t.asterisk=42]="asterisk",t[t.backslash=92]="backslash",t[t.closeBrace=125]="closeBrace",t[t.closeBracket=93]="closeBracket",t[t.colon=58]="colon",t[t.comma=44]="comma",t[t.dot=46]="dot",t[t.doubleQuote=34]="doubleQuote",t[t.minus=45]="minus",t[t.openBrace=123]="openBrace",t[t.openBracket=91]="openBracket",t[t.plus=43]="plus",t[t.slash=47]="slash",t[t.formFeed=12]="formFeed",t[t.tab=9]="tab"})($f||($f={}));var yg=new Array(20).fill(0).map((t,n)=>" ".repeat(n)),zn=200,bg={" ":{"\n":new Array(zn).fill(0).map((t,n)=>`
`+" ".repeat(n)),"\r":new Array(zn).fill(0).map((t,n)=>"\r"+" ".repeat(n)),"\r\n":new Array(zn).fill(0).map((t,n)=>`\r
`+" ".repeat(n))},"	":{"\n":new Array(zn).fill(0).map((t,n)=>`
`+"	".repeat(n)),"\r":new Array(zn).fill(0).map((t,n)=>"\r"+"	".repeat(n)),"\r\n":new Array(zn).fill(0).map((t,n)=>`\r
`+"	".repeat(n))}};var aa;(function(t){t.DEFAULT={allowTrailingComma:!1}})(aa||(aa={}));function hl(t,n=[],e=aa.DEFAULT){let i={type:"array",offset:-1,length:-1,children:[],parent:void 0};function E(I){i.type==="property"&&(i.length=I-i.offset,i=i.parent)}function d(I){return i.children.push(I),I}Xf(t,{onObjectBegin:I=>{i=d({type:"object",offset:I,length:-1,parent:i,children:[]})},onObjectProperty:(I,S,C)=>{i=d({type:"property",offset:S,length:-1,parent:i,children:[]}),i.children.push({type:"string",value:I,offset:S,length:C,parent:i})},onObjectEnd:(I,S)=>{E(I+S),i.length=I+S-i.offset,i=i.parent,E(I+S)},onArrayBegin:(I,S)=>{i=d({type:"array",offset:I,length:-1,parent:i,children:[]})},onArrayEnd:(I,S)=>{i.length=I+S-i.offset,i=i.parent,E(I+S)},onLiteralValue:(I,S,C)=>{d({type:Pg(I),offset:S,length:C,parent:i,value:I}),E(S+C)},onSeparator:(I,S,C)=>{i.type==="property"&&(I===":"?i.colonOffset=S:I===","&&E(S))},onError:(I,S,C)=>{n.push({error:I,offset:S,length:C})}},e);let _=i.children[0];return _&&delete _.parent,_}function Tl(t,n){if(!t)return;let e=t;for(let i of n)if(typeof i=="string"){if(e.type!=="object"||!Array.isArray(e.children))return;let E=!1;for(let d of e.children)if(Array.isArray(d.children)&&d.children[0].value===i&&d.children.length===2){e=d.children[1],E=!0;break}if(!E)return}else{let E=i;if(e.type!=="array"||E<0||!Array.isArray(e.children)||E>=e.children.length)return;e=e.children[E]}return e}function Xf(t,n,e=aa.DEFAULT){let i=sa(t,!1),E=[];function d(W){return W?()=>W(i.getTokenOffset(),i.getTokenLength(),i.getTokenStartLine(),i.getTokenStartCharacter()):()=>!0}function R(W){return W?()=>W(i.getTokenOffset(),i.getTokenLength(),i.getTokenStartLine(),i.getTokenStartCharacter(),()=>E.slice()):()=>!0}function _(W){return W?q=>W(q,i.getTokenOffset(),i.getTokenLength(),i.getTokenStartLine(),i.getTokenStartCharacter()):()=>!0}function I(W){return W?q=>W(q,i.getTokenOffset(),i.getTokenLength(),i.getTokenStartLine(),i.getTokenStartCharacter(),()=>E.slice()):()=>!0}let S=R(n.onObjectBegin),C=I(n.onObjectProperty),w=d(n.onObjectEnd),b=R(n.onArrayBegin),M=d(n.onArrayEnd),G=I(n.onLiteralValue),$=_(n.onSeparator),k=d(n.onComment),H=_(n.onError),ie=e&&e.disallowComments,P=e&&e.allowTrailingComma;function X(){for(;;){let W=i.scan();switch(i.getTokenError()){case 4:Q(14);break;case 5:Q(15);break;case 3:Q(13);break;case 1:ie||Q(11);break;case 2:Q(12);break;case 6:Q(16);break}switch(W){case 12:case 13:ie?Q(10):k();break;case 16:Q(1);break;case 15:case 14:break;default:return W}}}function Q(W,q=[],ce=[]){if(H(W),q.length+ce.length>0){let pe=i.getToken();for(;pe!==17;){if(q.indexOf(pe)!==-1){X();break}else if(ce.indexOf(pe)!==-1)break;pe=X()}}}function ee(W){let q=i.getTokenValue();return W?G(q):(C(q),E.push(q)),X(),!0}function te(){switch(i.getToken()){case 11:let W=i.getTokenValue(),q=Number(W);isNaN(q)&&(Q(2),q=0),G(q);break;case 7:G(null);break;case 8:G(!0);break;case 9:G(!1);break;default:return!1}return X(),!0}function se(){return i.getToken()!==10?(Q(3,[],[2,5]),!1):(ee(!1),i.getToken()===6?($(":"),X(),oe()||Q(4,[],[2,5])):Q(5,[],[2,5]),E.pop(),!0)}function Oe(){S(),X();let W=!1;for(;i.getToken()!==2&&i.getToken()!==17;){if(i.getToken()===5){if(W||Q(4,[],[]),$(","),X(),i.getToken()===2&&P)break}else W&&Q(6,[],[]);se()||Q(4,[],[2,5]),W=!0}return w(),i.getToken()!==2?Q(7,[2],[]):X(),!0}function Y(){b(),X();let W=!0,q=!1;for(;i.getToken()!==4&&i.getToken()!==17;){if(i.getToken()===5){if(q||Q(4,[],[]),$(","),X(),i.getToken()===4&&P)break}else q&&Q(6,[],[]);W?(E.push(0),W=!1):E[E.length-1]++,oe()||Q(4,[],[4,5]),q=!0}return M(),W||E.pop(),i.getToken()!==4?Q(8,[4],[]):X(),!0}function oe(){switch(i.getToken()){case 3:return Y();case 1:return Oe();case 10:return ee(!0);default:return te()}}return X(),i.getToken()===17?e.allowEmptyContent?!0:(Q(4,[],[]),!1):oe()?(i.getToken()!==17&&Q(9,[],[]),!0):(Q(4,[],[]),!1)}function Pg(t){switch(typeof t){case"boolean":return"boolean";case"number":return"number";case"string":return"string";case"object":{if(t){if(Array.isArray(t))return"array"}else return"null";return"object"}default:return"null"}}var qf;(function(t){t[t.None=0]="None",t[t.UnexpectedEndOfComment=1]="UnexpectedEndOfComment",t[t.UnexpectedEndOfString=2]="UnexpectedEndOfString",t[t.UnexpectedEndOfNumber=3]="UnexpectedEndOfNumber",t[t.InvalidUnicode=4]="InvalidUnicode",t[t.InvalidEscapeCharacter=5]="InvalidEscapeCharacter",t[t.InvalidCharacter=6]="InvalidCharacter"})(qf||(qf={}));var jf;(function(t){t[t.OpenBraceToken=1]="OpenBraceToken",t[t.CloseBraceToken=2]="CloseBraceToken",t[t.OpenBracketToken=3]="OpenBracketToken",t[t.CloseBracketToken=4]="CloseBracketToken",t[t.CommaToken=5]="CommaToken",t[t.ColonToken=6]="ColonToken",t[t.NullKeyword=7]="NullKeyword",t[t.TrueKeyword=8]="TrueKeyword",t[t.FalseKeyword=9]="FalseKeyword",t[t.StringLiteral=10]="StringLiteral",t[t.NumericLiteral=11]="NumericLiteral",t[t.LineCommentTrivia=12]="LineCommentTrivia",t[t.BlockCommentTrivia=13]="BlockCommentTrivia",t[t.LineBreakTrivia=14]="LineBreakTrivia",t[t.Trivia=15]="Trivia",t[t.Unknown=16]="Unknown",t[t.EOF=17]="EOF"})(jf||(jf={}));var Jf=hl,Qf=Tl;var Kf;(function(t){t[t.InvalidSymbol=1]="InvalidSymbol",t[t.InvalidNumberFormat=2]="InvalidNumberFormat",t[t.PropertyNameExpected=3]="PropertyNameExpected",t[t.ValueExpected=4]="ValueExpected",t[t.ColonExpected=5]="ColonExpected",t[t.CommaExpected=6]="CommaExpected",t[t.CloseBraceExpected=7]="CloseBraceExpected",t[t.CloseBracketExpected=8]="CloseBracketExpected",t[t.EndOfFileExpected=9]="EndOfFileExpected",t[t.InvalidCommentToken=10]="InvalidCommentToken",t[t.UnexpectedEndOfComment=11]="UnexpectedEndOfComment",t[t.UnexpectedEndOfString=12]="UnexpectedEndOfString",t[t.UnexpectedEndOfNumber=13]="UnexpectedEndOfNumber",t[t.InvalidUnicode=14]="InvalidUnicode",t[t.InvalidEscapeCharacter=15]="InvalidEscapeCharacter",t[t.InvalidCharacter=16]="InvalidCharacter"})(Kf||(Kf={}));var ah=Se(require("node:path")),Cr=Se(require("vscode"));var D={};var zf=(t,n,e)=>{let i=!0,E=async()=>{if(i){try{await t()}catch(d){e?.(d)}setTimeout(E,n)}};return setTimeout(E,n),()=>{i=!1}};var Tr=Se(require("node:fs")),nh=Se(require("node:os")),Bt=Se(require("node:path")),dt=Se(require("vscode"));var fn=Se(require("vscode"));var dn=Se(require("vscode"));var ar=t=>/^(--\s*database:\s?)([^\r\n]+)/.exec(t);var un=Se(require("node:path")),Mt=Se(require("vscode"));var oa=class{#e=[];dispose(){this.#e.forEach(n=>{n.dispose()}),this.#e.length=0}constructor(){let n=new Map,e=i=>{!i.isUntitled||i.languageId!=="query-editor"||n.set(i,i.getText())};this.#e.push(Mt.default.workspace.onDidOpenTextDocument(i=>{e(i)})),this.#e.push(Mt.default.workspace.onDidChangeTextDocument(i=>{e(i.document)})),this.#e.push(Mt.default.workspace.onDidCloseTextDocument(i=>{n.delete(i)})),this.#e.push(Mt.default.workspace.onWillSaveTextDocument(i=>{if(i.document.isUntitled||!we(i.document.uri).get("queryEditor.rewriteToRelativePath"))return;let E=i.document.lineAt(0),d=ar(E.text);if(d!==null&&un.default.isAbsolute(d[2])){for(let R of n.values())if(i.document.getText()===R){let _=un.default.relative(un.default.dirname(i.document.uri.fsPath),d[2]).replace(/\\/g,"/").replace(/^([^.])/,"./$1");if(_===d[2])return;let I=new Mt.default.WorkspaceEdit;I.replace(i.document.uri,E.range,`-- database: ${_}`),i.waitUntil(Mt.default.workspace.applyEdit(I));return}}}))}},Zf=async()=>{let t=Mt.default.window.activeTextEditor;if(!t||!t.document.uri.path)return;let n=t.document.uri;if(ar(t.document.getText())!==null)return;let e=(await Mt.default.workspace.findFiles("**/*.{db,db3,sdb,s3db,sqlitedb,mddata,sqlite,sqlite3,sl3,vscdb,sq3}")).map(E=>({label:un.default.posix.relative(at(n,"..").path,E.path),uri:E,value:un.default.posix.relative(at(n,"..").path,E.path)})),i;if(e.length>0){let E=await Mt.default.window.showQuickPick([{label:"In-Memory Database",alwaysShow:!0,value:":memory:"},{label:"Files",kind:Mt.default.QuickPickItemKind.Separator,value:""},...e],{title:"Associate a SQLite database"});if(!E)return;i=E.value}else i=":memory:";await t.edit(E=>{E.insert(new Mt.default.Position(0,0),`-- database: ${i}
`)})},Zn=t=>{let n=ar(t.lineAt(0).text);if(n===null||n[2].trim()==="")return;let e=n[2];if(e===":memory:")return Mt.default.Uri.parse(`${Nt}:/memory`);if(t.uri.scheme==="untitled"||un.default.isAbsolute(e))return Mt.default.Uri.file(e);let i=at(t.uri,"..",e);return i===null?Mt.default.Uri.file(e):i},mt=t=>{if(t.languageId==="query-editor")return Zn(t)},la=(t,n)=>t.toString()===n.toString(),cn=(t,n)=>t.scheme===Nt?n.scheme===Nt:t.toString()===n.toString();var ml=class{#e=new Map;add(n,e){return this.#e.get(n)?.has(e)?!1:(this.#e.has(n)||this.#e.set(n,new Set),this.#e.get(n).add(e),!0)}remove(n,e){return this.#e.get(n)?.has(e)?(this.#e.get(n).delete(e),this.#e.get(n)?.size===0&&this.#e.delete(n),!0):!1}entries(){return this.#e.entries()}},Ea=class{#e=new ml;#t=new Set;#r=new WeakMap;#n=new dn.default.EventEmitter;onDidChange=this.#n.event;dispose(){}onOpenConnectionForQueryEditor(n){if(!this.#t.has(n))return this.#t.add(n),this.#n.fire(),()=>{this.#t.delete(n),this.#n.fire()}}onLoadWebviewPanel(n,e){if(this.#e.add(n,e))return this.#n.fire(),()=>{this.#e.remove(n,e),this.#n.fire()}}updatePanelLastUsedTime(n,e=Date.now()){this.#r.set(n,e),this.#n.fire()}webviewPanels(n){let e=dn.default.window.activeTextEditor?.document.languageId!=="query-editor"?void 0:mt(dn.default.window.activeTextEditor.document),i=new Map;for(let[E,d]of this.#e.entries())if(n===void 0||cn(E.uri,n)){let R=Number(e!==void 0&&cn(E.uri,e));for(let _ of d)i.set(_,{referencedByActiveQueryEditor:R})}return[...i.keys()].sort((E,d)=>i.get(d).referencedByActiveQueryEditor-i.get(E).referencedByActiveQueryEditor||Number(d.active)-Number(E.active)||Number(d.visible)-Number(E.visible)||(this.#r.get(d)??0)-(this.#r.get(E)??0))}connections(n){let e=dn.default.window.activeTextEditor?.document.languageId!=="query-editor"?void 0:mt(dn.default.window.activeTextEditor.document),i=new Map;for(let[E,d]of this.#e.entries())if(n===void 0||cn(E.uri,n)){i.set(E,{referencedByActiveQueryEditor:Number(e!==void 0&&cn(E.uri,e)),active:0,visible:0,lastUsedTime:0});let R=i.get(E);for(let _ of d)_.active&&(R.active=1),_.visible&&(R.visible=1),R.lastUsedTime=Math.max(R.lastUsedTime,this.#r.get(_)??0)}for(let E of this.#t)(n===void 0||cn(E.uri,n))&&(i.has(E)||i.set(E,{referencedByActiveQueryEditor:Number(e!==void 0&&cn(E.uri,e)),active:0,visible:0,lastUsedTime:0}));return[...i.keys()].sort((E,d)=>i.get(d).referencedByActiveQueryEditor-i.get(E).referencedByActiveQueryEditor||i.get(d).active-i.get(E).active||i.get(d).visible-i.get(E).visible||i.get(d).lastUsedTime-i.get(E).lastUsedTime)}},vt=async(t,n=dn.default.ViewColumn.Beside)=>{await pt("vscode.openWith",t,"sqlite3-editor.editor",n);let e=0;for(;D.connManager.webviewPanels(t).length===0&&e<100;)await new Promise(i=>setTimeout(i,100)),e++};var or=Se(require("vscode"));var ua=async(t=or.default.window.activeTextEditor?.document,n,e)=>{if(t===void 0)return;let i=Zn(t);if(i===void 0)return;let E=_=>{let I=or.default.workspace.onDidCloseTextDocument(S=>{la(S.uri,t.uri)&&(_(),I.dispose())});D.context.subscriptions.push(I)};await or.default.languages.setTextDocumentLanguage(t,"query-editor");let d=await e.connect(i);if("errorHTML"in d){let _=()=>{let I=or.default.window.createWebviewPanel("sqlite3-editor.panel.connectionError","SQLite3 Editor: Connection Failed",{viewColumn:or.default.ViewColumn.Beside});I.webview.html=d.errorHTML,I.webview.options={enableScripts:!1,localResourceRoots:[],enableCommandUris:!0},I.onDidDispose(()=>{d.dispose()})};switch(n){case"webview":_();break;case"message":let I=D.t("Show error details");or.default.window.showErrorMessage(D.t("Failed to connect to the database file {{- uri}}.",{uri:i.toString(!0)}),I).then(S=>{S===I&&_()},console.error);break}return}let R=D.connManager.onOpenConnectionForQueryEditor(d);E(()=>{R?.(),d.dispose()})},eh=async t=>{let n=Zn(t);n!==void 0&&(await or.default.languages.setTextDocumentLanguage(t,"query-editor"),await vt(n))},ca=async(t,n)=>{let e=we().get("insertHelpComment")&&!D.context.globalState.get("hasShownHelpComment"),i=e?`

-- ${D.t("Use the \u25B7 button in the top right corner to run the entire file.")}`:"",E=await or.default.workspace.openTextDocument({language:"query-editor",content:`-- database: ${n}${i}

${t}
`});await or.default.window.showTextDocument(E,{viewColumn:or.default.ViewColumn.Beside}),e&&await D.context.globalState.update("hasShownHelpComment",!0)};var Nt="sqlite3-editor-memory",th=t=>{let n=Date.now();t.push(fn.default.workspace.registerFileSystemProvider(Nt,{createDirectory(e){},delete(e,i){},readDirectory(e){return e.path==="/"?[["memory",fn.default.FileType.File]]:[]},readFile(e){return new Uint8Array},rename(e,i,E){},stat(e){return{ctime:n,mtime:n,size:0,type:fn.default.FileType.File}},watch(e,i){return{dispose:()=>{}}},writeFile(e,i,E){},copy(e,i,E){},onDidChangeFile:new fn.default.EventEmitter().event},{isCaseSensitive:!0}))},rh=async()=>{await vt(fn.default.Uri.parse(`${Nt}:/memory`),fn.default.ViewColumn.Active),await ca("",":memory:")};var hn=class extends Error{},we=t=>{let n=dt.default.workspace.getConfiguration("sqlite3-editor",t);return{get:e=>{try{let i=n.get(e,Yg(En[e])),E=Hf[e];if(E!==void 0){if(typeof i!="number")return En[e];if(!Number.isFinite(i))return En[e];let d=i;return E.type==="integer"&&!Number.isInteger(d)&&(d=Math.round(d)),d>E.maximum?d=E.maximum:d<E.minimum&&(d=E.minimum),d}return i}catch(i){throw i instanceof Error?new hn(i.message):i}},update:async(e,i,E,d)=>{try{await n.update(e,i,E,d)}catch(R){throw R instanceof Error?new hn(R.message):R}},reset:async(e,i,E)=>{try{await n.update(e,void 0,i,E)}catch(d){throw d instanceof Error?new hn(d.message):d}}}},Yg=globalThis.structuredClone??(t=>JSON.parse(JSON.stringify(t))),ih=t=>{try{let n=Bt.default.dirname(t.extension.extensionPath),e=t.extension.packageJSON.version??"unknown",i=JSON.parse(Tr.default.readFileSync(Bt.default.join(n,"extensions.json")).toString()).find(E=>E.identifier.id===t.extension.id&&E.version===e);return!i||i.metadata.updated!==void 0&&typeof i.metadata.updated!="boolean"||typeof i.metadata.isPreReleaseVersion!="boolean"||typeof i.metadata.installedTimestamp!="number"?void 0:i.metadata}catch{}},Fi=class{#e;#t;constructor(n){this.#t=n}sendText(n,e=!1){if(!this.#e||this.#e.exitStatus!==void 0){let i=process.platform==="win32";this.#e=dt.default.window.createTerminal(this.#t,i?"C:\\Windows\\System32\\cmd.exe":void 0)}this.#e.sendText(n,e),this.#e.show()}dispose(){this.#e?.dispose(),this.#e=void 0}},sh=(t,n="tmp")=>{let e=t.globalStorageUri.fsPath,i=Bt.default.dirname(e),E=Bt.default.join(nh.default.tmpdir(),`${n}-${t.extension.id}`),d;return Bt.default.resolve(i)===Bt.default.resolve(e)||Bt.default.resolve(i)===Bt.default.resolve(Bt.default.dirname(i))?d=E:Tr.default.existsSync(i)?d=Bt.default.join(e,n):d=E,Tr.default.mkdirSync(d,{recursive:!0}),d},_r=async t=>{try{return await dt.default.workspace.fs.stat(t),!0}catch{return!1}},Hi=new Set,ki=(t,n={})=>t.scheme==="file"||t.scheme===Nt?"writable":dt.default.workspace.fs.isWritableFileSystem(t.scheme)!==!0?"readonly filesystem":(n.dangerouslyWriteToVirtualWorkspaces!==void 0?n.dangerouslyWriteToVirtualWorkspaces:Hi.has(t.toString()))?"writable":"unsafe to write",Qt=class t{constructor(n,e,i){this.uri=n;this.file=e;this.#s=i}static async#e(n,e,i){let E;try{E=await dt.default.workspace.fs.readFile(n)}catch(d){d instanceof dt.default.FileSystemError&&d.code==="FileNotFound"?Tr.default.existsSync(e)&&await Tr.default.promises.unlink(e):Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(39,d));return}try{await i.writeFileWithFallback(e,E,D.connManager.connections())}catch(d){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(1,d))}}static async#t(n,e){if(!Tr.default.existsSync(e)){try{await dt.default.workspace.fs.delete(n)}catch(E){if(E instanceof dt.default.FileSystemError&&E.code==="FileNotFound")return;Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(2,E))}return}let i=await Tr.default.promises.readFile(e);try{await dt.default.workspace.fs.writeFile(n,i)}catch(E){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(3,E))}}static async#r(n){try{return(await dt.default.workspace.fs.stat(n)).mtime}catch(e){return e instanceof dt.default.FileSystemError&&e.code==="FileNotFound"||(Ne(e).includes("No file system handle registered")?Z(dt.default.window.showErrorMessage(Ne(e)+`
`+D.t("This error may be due to a broken link or a lost connection to the virtual workspace."))):Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(4,e))),null}}static#n(n){try{return Tr.default.statSync(n).mtimeMs}catch(e){return e instanceof Error&&"code"in e&&e.code==="ENOENT"||Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(5,e)),null}}static#i=new Map;static async mount(n,e,i,E={}){if(n.scheme==="file")return new t(n,n.fsPath,()=>{});let d=this.#i.get(n.toString());if(d&&d.count>0)return d.count++,d.instance;let R=typeof e=="string"?Bt.default.join(e,Bt.default.basename(n.path)):e.temporaryFile({name:Bt.default.basename(n.path)}),_=(async()=>{let I=await this.#r(n);await this.#e(n,R,i);let S=this.#n(R),C=!1,w=zf(async()=>{if(C){w(),Tr.default.rmSync(R,{force:!0});return}let b=await this.#r(n);if(b!==I){I=b,await this.#e(n,R,i),S=this.#n(R);return}if(ki(n,E)==="writable"){let M=this.#n(R);M!==S&&(S=M,await this.#t(n,R),I=await this.#r(n))}},1e3);return new t(n,R,()=>{C=!0})})();return this.#i.set(n.toString(),{count:1,instance:_}),_}#s;dispose(){let n=t.#i.get(this.uri.toString());n&&--n.count===0&&(t.#i.delete(this.uri.toString()),this.#s())}},mr=(t,n)=>new dt.default.Range(Number(t.line),Number(t.column),Number(n.line),Number(n.column)),Z=t=>{Promise.resolve(t).catch(console.error)},Lr=async({title:t,interrupt:n},e)=>{let i=e();return new Promise((E,d)=>{let R=!1,_=setTimeout(()=>{R||(R=!0,E(dt.default.window.withProgress({title:t,location:dt.default.ProgressLocation.Notification,cancellable:n!==void 0},(I,S)=>(n&&S.onCancellationRequested(()=>{n()}),i))))},1e3);i.then(I=>{R||(R=!0,clearTimeout(_),E(I))},I=>{R||(R=!0,clearTimeout(_),d(I))})})},da=(t,n)=>{let e=new URLSearchParams(t.query);for(let[i,E]of Object.entries(n))e.set(i,E);return t.with({query:e.toString()})},pt=(t,...n)=>dt.default.commands.executeCommand(t,...n);function*pl(){for(let{tabs:t}of dt.default.window.tabGroups.all)for(let n of t)n.input instanceof dt.default.TabInputText&&(yield n)}var jb=Symbol();function at(t,...n){if(!t.path)return null;let e=dt.default.Uri.joinPath(t,...n).with({query:"",fragment:""});if(t.scheme==="git")try{let i=JSON.parse(t.query);Object.keys(i).length===2&&typeof i.path=="string"&&typeof i.ref=="string"&&i.path===t.fsPath&&(i.path=e.fsPath,e=e.with({query:JSON.stringify(i)}))}catch{}return e}var oh=async(t,n,e,i)=>{let E=ah.default.posix.basename(t.uri.path),d=we();Cr.default.workspace.workspaceFolders===void 0||Cr.default.workspace.workspaceFolders.length===0?(await d.update("ui.conditionalFormatting",[...d.get("ui.conditionalFormatting"),{database:E,table:n??void 0,column:e,...i}],Cr.default.ConfigurationTarget.Global),await pt("workbench.action.openSettingsJson",{openToSide:!0,revealSetting:{key:"sqlite3-editor.ui.conditionalFormatting"}})):(await d.update("ui.conditionalFormatting",[...d.get("ui.conditionalFormatting"),{database:E,table:n??void 0,column:e,...i}],Cr.default.ConfigurationTarget.Workspace),await pt("workbench.action.openWorkspaceSettingsFile",{openToSide:!0,revealSetting:{key:"sqlite3-editor.ui.conditionalFormatting"}})),(()=>{let _=Cr.default.window.activeTextEditor;if(!_)return;let I=Jf(_.document.getText());if(!I)return;let S=Qf(I,["sqlite3-editor.ui.conditionalFormatting"]);if(S?.type!=="array"||!Array.isArray(S.children)||S.children.length===0)return;let C=S.children.at(-1);if(C?.type!=="object")return;let w=_.document.positionAt(C.offset),b=_.document.positionAt(C.offset+C.length);_.selection=new Cr.default.Selection(w,b),_.revealRange(new Cr.default.Range(w,b))})(),Z(Cr.default.window.showInformationMessage(D.t('Hover over "sqlite3-editor.ui.conditionalFormatting" for usage.')))};var Al=Se(require("vscode"));var Yi=async t=>{let n=D.context.globalState.get("queryHistory"),e=we().get("maxHistoryEntries");e===0?await D.context.globalState.update("queryHistory",void 0):await D.context.globalState.update("queryHistory",Array.isArray(n)?[...n,t].slice(-e):[t])},lh=async()=>{let t=D.context.globalState.get("queryHistory"),n=await Al.default.workspace.openTextDocument({language:"sql",content:`-- Use the "SQLite3 Editor: Clear History" command in the command palette to clear history.
-- Set "sqlite3-editor.maxHistoryEntries" to 0 in settings to disable query history.
`+(Array.isArray(t)?t:[]).join(`
---------------------
`)});await Al.default.window.showTextDocument(n,{})},Eh=async()=>{await D.context.globalState.update("queryHistory",void 0)};var wr=Se(require("node:fs")),Je=Se(require("vscode"));var Vg=async()=>{let t="$(window) "+D.t("Export Current Table"),n="$(multiple-windows) "+D.t("Export All Tables"),e=await Je.default.window.showQuickPick([t,n]);if(e!==void 0)return e===t?"current":"all"},uh=t=>{let n=Ne(t);return n.includes("32,767")||n.includes("1,048,576 x 16,384")},ch=async(t,n,e)=>{if(t.fsPaths==="memory"){Z(Je.default.window.showErrorMessage(D.t("This feature does not support in-memory databases.")));return}if(!Je.default.workspace.fs.isWritableFileSystem(t.uri.scheme)){Z(Je.default.window.showErrorMessage(`The file system ${t.uri.scheme} is not writable.`));return}let i=async()=>{for(let _=1;;_++){let I=at(t.uri,"..",`export${_===1?"":_}.xlsx`);if(!await _r(I))return I}},E=await Vg();if(E===void 0)return;e.all_tables=E==="all";let d=await Je.default.window.showSaveDialog({defaultUri:await i()});if(d===void 0)return;let R=we();if(R.get("export.xlsx.saveTopLeft")||(e.top_left=null),e.wrap_text=R.get("export.xlsx.wrapText"),R.get("export.xlsx.saveSelection")||(e.selection=null),R.get("export.xlsx.saveActiveSheet")||(e.active_sheet=null),d.scheme==="file")try{await t.p.executable.spawnOneOff("export",{database_filepath:t.fsPaths.base.file,format:"xlsx",query:n,output_file:d.fsPath,xlsx_options:JSON.stringify(e)})}catch(_){if(uh("32,767")){Z(Je.default.window.showErrorMessage(Ne(_)));return}throw _}else{let _=D.tmpDir.temporaryFile({extension:"xlsx"}),I;try{try{await t.p.executable.spawnOneOff("export",{database_filepath:t.fsPaths.base.file,format:"xlsx",query:n,output_file:_,xlsx_options:JSON.stringify(e)})}catch(S){if(uh("32,767")){Z(Je.default.window.showErrorMessage(Ne(S)));return}throw S}I=wr.default.readFileSync(_)}finally{await wr.default.promises.unlink(_)}await Je.default.workspace.fs.writeFile(d,I)}},dh=async(t,n)=>{if(t.fsPaths==="memory"){Z(Je.default.window.showErrorMessage(D.t("This feature does not support in-memory databases.")));return}let e=t.fsPaths.base.file,i=D.tmpDir.temporaryFile({extension:"csv"});try{let E=we(),d=E.get("export.csv.delimiter");/^[\x00-\x7F]$/.test(d)||(d=","),await Lr({title:D.t("Exporting the table...")},async()=>{await t.p.executable.spawnOneOff("export",{database_filepath:e,format:"csv",query:n,output_file:i,csv_options:JSON.stringify({delimiter:d,null:E.get("export.csv.null")})}),await Je.default.window.showTextDocument(await Je.default.workspace.openTextDocument({language:d==="	"?"tsv":"csv",content:wr.default.readFileSync(i).toString()}),Je.default.ViewColumn.Beside)})}finally{wr.default.unlinkSync(i)}},fh=async(t,n)=>{if(t.fsPaths==="memory"){Z(Je.default.window.showErrorMessage(D.t("This feature does not support in-memory databases.")));return}let e=t.fsPaths.base.file,i=D.tmpDir.temporaryFile({extension:"json"});try{await Lr({title:D.t("Exporting the table...")},async()=>{await t.p.executable.spawnOneOff("export",{database_filepath:e,format:"json",query:n,output_file:i}),await Je.default.window.showTextDocument(await Je.default.workspace.openTextDocument({language:"json",content:wr.default.readFileSync(i).toString()}),Je.default.ViewColumn.Beside)})}finally{wr.default.unlinkSync(i)}},hh=async t=>{if(t.fsPaths==="memory"){Z(Je.default.window.showErrorMessage(D.t("This feature does not support in-memory databases.")));return}let n=t.fsPaths.base.file,e=(await Je.default.window.showOpenDialog())?.[0];if(e===void 0)return;let i=await Je.default.window.showInputBox({value:"table-name"});if(i===void 0||i==="")return;let E=D.tmpDir.temporaryFile({extension:"csv"});try{await Lr({title:D.t("Importing the table...")},async()=>{await t.p.executable.writeFileWithFallback(E,await Je.default.workspace.fs.readFile(e)),await t.p.executable.spawnOneOff("import",{database_filepath:n,format:"csv",table_name:i,input_file:E,csv_delimiter:","})})}catch(d){Z(Je.default.window.showErrorMessage(Ne(d)))}finally{wr.default.unlinkSync(E)}},Th=async t=>{if(t.fsPaths==="memory"){Z(Je.default.window.showErrorMessage(D.t("This feature does not support in-memory databases.")));return}let n=t.fsPaths.base.file,e=(await Je.default.window.showOpenDialog())?.[0];if(e===void 0)return;let i=await Je.default.window.showInputBox({value:"table-name"});if(i===void 0||i==="")return;let E=D.tmpDir.temporaryFile({extension:"json"});try{await Lr({title:D.t("Importing the table...")},async()=>{await t.p.executable.writeFileWithFallback(E,await Je.default.workspace.fs.readFile(e)),await t.p.executable.spawnOneOff("import",{database_filepath:n,format:"json",table_name:i,input_file:E,csv_delimiter:","})})}catch(d){Z(Je.default.window.showErrorMessage(Ne(d)))}finally{wr.default.unlinkSync(E)}};var We;(function(t){t.assertEqual=E=>E;function n(E){}t.assertIs=n;function e(E){throw new Error}t.assertNever=e,t.arrayToEnum=E=>{let d={};for(let R of E)d[R]=R;return d},t.getValidEnumValues=E=>{let d=t.objectKeys(E).filter(_=>typeof E[E[_]]!="number"),R={};for(let _ of d)R[_]=E[_];return t.objectValues(R)},t.objectValues=E=>t.objectKeys(E).map(function(d){return E[d]}),t.objectKeys=typeof Object.keys=="function"?E=>Object.keys(E):E=>{let d=[];for(let R in E)Object.prototype.hasOwnProperty.call(E,R)&&d.push(R);return d},t.find=(E,d)=>{for(let R of E)if(d(R))return R},t.isInteger=typeof Number.isInteger=="function"?E=>Number.isInteger(E):E=>typeof E=="number"&&isFinite(E)&&Math.floor(E)===E;function i(E,d=" | "){return E.map(R=>typeof R=="string"?`'${R}'`:R).join(d)}t.joinValues=i,t.jsonStringifyReplacer=(E,d)=>typeof d=="bigint"?d.toString():d})(We||(We={}));var Rl;(function(t){t.mergeShapes=(n,e)=>({...n,...e})})(Rl||(Rl={}));var de=We.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Yr=t=>{switch(typeof t){case"undefined":return de.undefined;case"string":return de.string;case"number":return isNaN(t)?de.nan:de.number;case"boolean":return de.boolean;case"function":return de.function;case"bigint":return de.bigint;case"symbol":return de.symbol;case"object":return Array.isArray(t)?de.array:t===null?de.null:t.then&&typeof t.then=="function"&&t.catch&&typeof t.catch=="function"?de.promise:typeof Map<"u"&&t instanceof Map?de.map:typeof Set<"u"&&t instanceof Set?de.set:typeof Date<"u"&&t instanceof Date?de.date:de.object;default:return de.unknown}},Ee=We.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),Wg=t=>JSON.stringify(t,null,2).replace(/"([^"]+)":/g,"$1:"),Wt=class extends Error{constructor(n){super(),this.issues=[],this.addIssue=i=>{this.issues=[...this.issues,i]},this.addIssues=(i=[])=>{this.issues=[...this.issues,...i]};let e=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,e):this.__proto__=e,this.name="ZodError",this.issues=n}get errors(){return this.issues}format(n){let e=n||function(d){return d.message},i={_errors:[]},E=d=>{for(let R of d.issues)if(R.code==="invalid_union")R.unionErrors.map(E);else if(R.code==="invalid_return_type")E(R.returnTypeError);else if(R.code==="invalid_arguments")E(R.argumentsError);else if(R.path.length===0)i._errors.push(e(R));else{let _=i,I=0;for(;I<R.path.length;){let S=R.path[I];I===R.path.length-1?(_[S]=_[S]||{_errors:[]},_[S]._errors.push(e(R))):_[S]=_[S]||{_errors:[]},_=_[S],I++}}};return E(this),i}toString(){return this.message}get message(){return JSON.stringify(this.issues,We.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(n=e=>e.message){let e={},i=[];for(let E of this.issues)E.path.length>0?(e[E.path[0]]=e[E.path[0]]||[],e[E.path[0]].push(n(E))):i.push(n(E));return{formErrors:i,fieldErrors:e}}get formErrors(){return this.flatten()}};Wt.create=t=>new Wt(t);var Vi=(t,n)=>{let e;switch(t.code){case Ee.invalid_type:t.received===de.undefined?e="Required":e=`Expected ${t.expected}, received ${t.received}`;break;case Ee.invalid_literal:e=`Invalid literal value, expected ${JSON.stringify(t.expected,We.jsonStringifyReplacer)}`;break;case Ee.unrecognized_keys:e=`Unrecognized key(s) in object: ${We.joinValues(t.keys,", ")}`;break;case Ee.invalid_union:e="Invalid input";break;case Ee.invalid_union_discriminator:e=`Invalid discriminator value. Expected ${We.joinValues(t.options)}`;break;case Ee.invalid_enum_value:e=`Invalid enum value. Expected ${We.joinValues(t.options)}, received '${t.received}'`;break;case Ee.invalid_arguments:e="Invalid function arguments";break;case Ee.invalid_return_type:e="Invalid function return type";break;case Ee.invalid_date:e="Invalid date";break;case Ee.invalid_string:typeof t.validation=="object"?"includes"in t.validation?(e=`Invalid input: must include "${t.validation.includes}"`,typeof t.validation.position=="number"&&(e=`${e} at one or more positions greater than or equal to ${t.validation.position}`)):"startsWith"in t.validation?e=`Invalid input: must start with "${t.validation.startsWith}"`:"endsWith"in t.validation?e=`Invalid input: must end with "${t.validation.endsWith}"`:We.assertNever(t.validation):t.validation!=="regex"?e=`Invalid ${t.validation}`:e="Invalid";break;case Ee.too_small:t.type==="array"?e=`Array must contain ${t.exact?"exactly":t.inclusive?"at least":"more than"} ${t.minimum} element(s)`:t.type==="string"?e=`String must contain ${t.exact?"exactly":t.inclusive?"at least":"over"} ${t.minimum} character(s)`:t.type==="number"?e=`Number must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${t.minimum}`:t.type==="date"?e=`Date must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(t.minimum))}`:e="Invalid input";break;case Ee.too_big:t.type==="array"?e=`Array must contain ${t.exact?"exactly":t.inclusive?"at most":"less than"} ${t.maximum} element(s)`:t.type==="string"?e=`String must contain ${t.exact?"exactly":t.inclusive?"at most":"under"} ${t.maximum} character(s)`:t.type==="number"?e=`Number must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="bigint"?e=`BigInt must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="date"?e=`Date must be ${t.exact?"exactly":t.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(t.maximum))}`:e="Invalid input";break;case Ee.custom:e="Invalid input";break;case Ee.invalid_intersection_types:e="Intersection results could not be merged";break;case Ee.not_multiple_of:e=`Number must be a multiple of ${t.multipleOf}`;break;case Ee.not_finite:e="Number must be finite";break;default:e=n.defaultError,We.assertNever(t)}return{message:e}},Ah=Vi;function $g(t){Ah=t}function ha(){return Ah}var Ta=t=>{let{data:n,path:e,errorMaps:i,issueData:E}=t,d=[...e,...E.path||[]],R={...E,path:d},_="",I=i.filter(S=>!!S).slice().reverse();for(let S of I)_=S(R,{data:n,defaultError:_}).message;return{...E,path:d,message:E.message||_}},Xg=[];function fe(t,n){let e=Ta({issueData:n,data:t.data,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,ha(),Vi].filter(i=>!!i)});t.common.issues.push(e)}var yt=class t{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(n,e){let i=[];for(let E of e){if(E.status==="aborted")return Ce;E.status==="dirty"&&n.dirty(),i.push(E.value)}return{status:n.value,value:i}}static async mergeObjectAsync(n,e){let i=[];for(let E of e)i.push({key:await E.key,value:await E.value});return t.mergeObjectSync(n,i)}static mergeObjectSync(n,e){let i={};for(let E of e){let{key:d,value:R}=E;if(d.status==="aborted"||R.status==="aborted")return Ce;d.status==="dirty"&&n.dirty(),R.status==="dirty"&&n.dirty(),d.value!=="__proto__"&&(typeof R.value<"u"||E.alwaysSet)&&(i[d.value]=R.value)}return{status:n.value,value:i}}},Ce=Object.freeze({status:"aborted"}),Sh=t=>({status:"dirty",value:t}),xt=t=>({status:"valid",value:t}),Nl=t=>t.status==="aborted",Il=t=>t.status==="dirty",Wi=t=>t.status==="valid",ma=t=>typeof Promise<"u"&&t instanceof Promise,Re;(function(t){t.errToObj=n=>typeof n=="string"?{message:n}:n||{},t.toString=n=>typeof n=="string"?n:n?.message})(Re||(Re={}));var zt=class{constructor(n,e,i,E){this._cachedPath=[],this.parent=n,this.data=e,this._path=i,this._key=E}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}},mh=(t,n)=>{if(Wi(n))return{success:!0,data:n.value};if(!t.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;let e=new Wt(t.common.issues);return this._error=e,this._error}}};function ye(t){if(!t)return{};let{errorMap:n,invalid_type_error:e,required_error:i,description:E}=t;if(n&&(e||i))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return n?{errorMap:n,description:E}:{errorMap:(R,_)=>R.code!=="invalid_type"?{message:_.defaultError}:typeof _.data>"u"?{message:i??_.defaultError}:{message:e??_.defaultError},description:E}}var be=class{constructor(n){this.spa=this.safeParseAsync,this._def=n,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(n){return Yr(n.data)}_getOrReturnCtx(n,e){return e||{common:n.parent.common,data:n.data,parsedType:Yr(n.data),schemaErrorMap:this._def.errorMap,path:n.path,parent:n.parent}}_processInputParams(n){return{status:new yt,ctx:{common:n.parent.common,data:n.data,parsedType:Yr(n.data),schemaErrorMap:this._def.errorMap,path:n.path,parent:n.parent}}}_parseSync(n){let e=this._parse(n);if(ma(e))throw new Error("Synchronous parse encountered promise.");return e}_parseAsync(n){let e=this._parse(n);return Promise.resolve(e)}parse(n,e){let i=this.safeParse(n,e);if(i.success)return i.data;throw i.error}safeParse(n,e){var i;let E={common:{issues:[],async:(i=e?.async)!==null&&i!==void 0?i:!1,contextualErrorMap:e?.errorMap},path:e?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:n,parsedType:Yr(n)},d=this._parseSync({data:n,path:E.path,parent:E});return mh(E,d)}async parseAsync(n,e){let i=await this.safeParseAsync(n,e);if(i.success)return i.data;throw i.error}async safeParseAsync(n,e){let i={common:{issues:[],contextualErrorMap:e?.errorMap,async:!0},path:e?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:n,parsedType:Yr(n)},E=this._parse({data:n,path:i.path,parent:i}),d=await(ma(E)?E:Promise.resolve(E));return mh(i,d)}refine(n,e){let i=E=>typeof e=="string"||typeof e>"u"?{message:e}:typeof e=="function"?e(E):e;return this._refinement((E,d)=>{let R=n(E),_=()=>d.addIssue({code:Ee.custom,...i(E)});return typeof Promise<"u"&&R instanceof Promise?R.then(I=>I?!0:(_(),!1)):R?!0:(_(),!1)})}refinement(n,e){return this._refinement((i,E)=>n(i)?!0:(E.addIssue(typeof e=="function"?e(i,E):e),!1))}_refinement(n){return new $t({schema:this,typeName:ge.ZodEffects,effect:{type:"refinement",refinement:n}})}superRefine(n){return this._refinement(n)}optional(){return lr.create(this,this._def)}nullable(){return Dr.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return br.create(this,this._def)}promise(){return $r.create(this,this._def)}or(n){return Nn.create([this,n],this._def)}and(n){return In.create(this,n,this._def)}transform(n){return new $t({...ye(this._def),schema:this,typeName:ge.ZodEffects,effect:{type:"transform",transform:n}})}default(n){let e=typeof n=="function"?n:()=>n;return new Cn({...ye(this._def),innerType:this,defaultValue:e,typeName:ge.ZodDefault})}brand(){return new Ra({typeName:ge.ZodBranded,type:this,...ye(this._def)})}catch(n){let e=typeof n=="function"?n:()=>n;return new si({...ye(this._def),innerType:this,catchValue:e,typeName:ge.ZodCatch})}describe(n){let e=this.constructor;return new e({...this._def,description:n})}pipe(n){return $i.create(this,n)}readonly(){return oi.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}},qg=/^c[^\s-]{8,}$/i,jg=/^[a-z][a-z0-9]*$/,Kg=/^[0-9A-HJKMNP-TV-Z]{26}$/,Jg=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,Qg=/^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,zg="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$",Sl,Zg=/^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/,eO=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,tO=t=>t.precision?t.offset?new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${t.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`):new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${t.precision}}Z$`):t.precision===0?t.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"):t.offset?new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$"):new RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");function rO(t,n){return!!((n==="v4"||!n)&&Zg.test(t)||(n==="v6"||!n)&&eO.test(t))}var Vr=class t extends be{_parse(n){if(this._def.coerce&&(n.data=String(n.data)),this._getType(n)!==de.string){let d=this._getOrReturnCtx(n);return fe(d,{code:Ee.invalid_type,expected:de.string,received:d.parsedType}),Ce}let i=new yt,E;for(let d of this._def.checks)if(d.kind==="min")n.data.length<d.value&&(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.too_small,minimum:d.value,type:"string",inclusive:!0,exact:!1,message:d.message}),i.dirty());else if(d.kind==="max")n.data.length>d.value&&(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.too_big,maximum:d.value,type:"string",inclusive:!0,exact:!1,message:d.message}),i.dirty());else if(d.kind==="length"){let R=n.data.length>d.value,_=n.data.length<d.value;(R||_)&&(E=this._getOrReturnCtx(n,E),R?fe(E,{code:Ee.too_big,maximum:d.value,type:"string",inclusive:!0,exact:!0,message:d.message}):_&&fe(E,{code:Ee.too_small,minimum:d.value,type:"string",inclusive:!0,exact:!0,message:d.message}),i.dirty())}else if(d.kind==="email")Qg.test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"email",code:Ee.invalid_string,message:d.message}),i.dirty());else if(d.kind==="emoji")Sl||(Sl=new RegExp(zg,"u")),Sl.test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"emoji",code:Ee.invalid_string,message:d.message}),i.dirty());else if(d.kind==="uuid")Jg.test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"uuid",code:Ee.invalid_string,message:d.message}),i.dirty());else if(d.kind==="cuid")qg.test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"cuid",code:Ee.invalid_string,message:d.message}),i.dirty());else if(d.kind==="cuid2")jg.test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"cuid2",code:Ee.invalid_string,message:d.message}),i.dirty());else if(d.kind==="ulid")Kg.test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"ulid",code:Ee.invalid_string,message:d.message}),i.dirty());else if(d.kind==="url")try{new URL(n.data)}catch{E=this._getOrReturnCtx(n,E),fe(E,{validation:"url",code:Ee.invalid_string,message:d.message}),i.dirty()}else d.kind==="regex"?(d.regex.lastIndex=0,d.regex.test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"regex",code:Ee.invalid_string,message:d.message}),i.dirty())):d.kind==="trim"?n.data=n.data.trim():d.kind==="includes"?n.data.includes(d.value,d.position)||(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.invalid_string,validation:{includes:d.value,position:d.position},message:d.message}),i.dirty()):d.kind==="toLowerCase"?n.data=n.data.toLowerCase():d.kind==="toUpperCase"?n.data=n.data.toUpperCase():d.kind==="startsWith"?n.data.startsWith(d.value)||(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.invalid_string,validation:{startsWith:d.value},message:d.message}),i.dirty()):d.kind==="endsWith"?n.data.endsWith(d.value)||(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.invalid_string,validation:{endsWith:d.value},message:d.message}),i.dirty()):d.kind==="datetime"?tO(d).test(n.data)||(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.invalid_string,validation:"datetime",message:d.message}),i.dirty()):d.kind==="ip"?rO(n.data,d.version)||(E=this._getOrReturnCtx(n,E),fe(E,{validation:"ip",code:Ee.invalid_string,message:d.message}),i.dirty()):We.assertNever(d);return{status:i.value,value:n.data}}_regex(n,e,i){return this.refinement(E=>n.test(E),{validation:e,code:Ee.invalid_string,...Re.errToObj(i)})}_addCheck(n){return new t({...this._def,checks:[...this._def.checks,n]})}email(n){return this._addCheck({kind:"email",...Re.errToObj(n)})}url(n){return this._addCheck({kind:"url",...Re.errToObj(n)})}emoji(n){return this._addCheck({kind:"emoji",...Re.errToObj(n)})}uuid(n){return this._addCheck({kind:"uuid",...Re.errToObj(n)})}cuid(n){return this._addCheck({kind:"cuid",...Re.errToObj(n)})}cuid2(n){return this._addCheck({kind:"cuid2",...Re.errToObj(n)})}ulid(n){return this._addCheck({kind:"ulid",...Re.errToObj(n)})}ip(n){return this._addCheck({kind:"ip",...Re.errToObj(n)})}datetime(n){var e;return typeof n=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,message:n}):this._addCheck({kind:"datetime",precision:typeof n?.precision>"u"?null:n?.precision,offset:(e=n?.offset)!==null&&e!==void 0?e:!1,...Re.errToObj(n?.message)})}regex(n,e){return this._addCheck({kind:"regex",regex:n,...Re.errToObj(e)})}includes(n,e){return this._addCheck({kind:"includes",value:n,position:e?.position,...Re.errToObj(e?.message)})}startsWith(n,e){return this._addCheck({kind:"startsWith",value:n,...Re.errToObj(e)})}endsWith(n,e){return this._addCheck({kind:"endsWith",value:n,...Re.errToObj(e)})}min(n,e){return this._addCheck({kind:"min",value:n,...Re.errToObj(e)})}max(n,e){return this._addCheck({kind:"max",value:n,...Re.errToObj(e)})}length(n,e){return this._addCheck({kind:"length",value:n,...Re.errToObj(e)})}nonempty(n){return this.min(1,Re.errToObj(n))}trim(){return new t({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new t({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new t({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(n=>n.kind==="datetime")}get isEmail(){return!!this._def.checks.find(n=>n.kind==="email")}get isURL(){return!!this._def.checks.find(n=>n.kind==="url")}get isEmoji(){return!!this._def.checks.find(n=>n.kind==="emoji")}get isUUID(){return!!this._def.checks.find(n=>n.kind==="uuid")}get isCUID(){return!!this._def.checks.find(n=>n.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(n=>n.kind==="cuid2")}get isULID(){return!!this._def.checks.find(n=>n.kind==="ulid")}get isIP(){return!!this._def.checks.find(n=>n.kind==="ip")}get minLength(){let n=null;for(let e of this._def.checks)e.kind==="min"&&(n===null||e.value>n)&&(n=e.value);return n}get maxLength(){let n=null;for(let e of this._def.checks)e.kind==="max"&&(n===null||e.value<n)&&(n=e.value);return n}};Vr.create=t=>{var n;return new Vr({checks:[],typeName:ge.ZodString,coerce:(n=t?.coerce)!==null&&n!==void 0?n:!1,...ye(t)})};function nO(t,n){let e=(t.toString().split(".")[1]||"").length,i=(n.toString().split(".")[1]||"").length,E=e>i?e:i,d=parseInt(t.toFixed(E).replace(".","")),R=parseInt(n.toFixed(E).replace(".",""));return d%R/Math.pow(10,E)}var Tn=class t extends be{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(n){if(this._def.coerce&&(n.data=Number(n.data)),this._getType(n)!==de.number){let d=this._getOrReturnCtx(n);return fe(d,{code:Ee.invalid_type,expected:de.number,received:d.parsedType}),Ce}let i,E=new yt;for(let d of this._def.checks)d.kind==="int"?We.isInteger(n.data)||(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.invalid_type,expected:"integer",received:"float",message:d.message}),E.dirty()):d.kind==="min"?(d.inclusive?n.data<d.value:n.data<=d.value)&&(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.too_small,minimum:d.value,type:"number",inclusive:d.inclusive,exact:!1,message:d.message}),E.dirty()):d.kind==="max"?(d.inclusive?n.data>d.value:n.data>=d.value)&&(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.too_big,maximum:d.value,type:"number",inclusive:d.inclusive,exact:!1,message:d.message}),E.dirty()):d.kind==="multipleOf"?nO(n.data,d.value)!==0&&(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.not_multiple_of,multipleOf:d.value,message:d.message}),E.dirty()):d.kind==="finite"?Number.isFinite(n.data)||(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.not_finite,message:d.message}),E.dirty()):We.assertNever(d);return{status:E.value,value:n.data}}gte(n,e){return this.setLimit("min",n,!0,Re.toString(e))}gt(n,e){return this.setLimit("min",n,!1,Re.toString(e))}lte(n,e){return this.setLimit("max",n,!0,Re.toString(e))}lt(n,e){return this.setLimit("max",n,!1,Re.toString(e))}setLimit(n,e,i,E){return new t({...this._def,checks:[...this._def.checks,{kind:n,value:e,inclusive:i,message:Re.toString(E)}]})}_addCheck(n){return new t({...this._def,checks:[...this._def.checks,n]})}int(n){return this._addCheck({kind:"int",message:Re.toString(n)})}positive(n){return this._addCheck({kind:"min",value:0,inclusive:!1,message:Re.toString(n)})}negative(n){return this._addCheck({kind:"max",value:0,inclusive:!1,message:Re.toString(n)})}nonpositive(n){return this._addCheck({kind:"max",value:0,inclusive:!0,message:Re.toString(n)})}nonnegative(n){return this._addCheck({kind:"min",value:0,inclusive:!0,message:Re.toString(n)})}multipleOf(n,e){return this._addCheck({kind:"multipleOf",value:n,message:Re.toString(e)})}finite(n){return this._addCheck({kind:"finite",message:Re.toString(n)})}safe(n){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:Re.toString(n)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:Re.toString(n)})}get minValue(){let n=null;for(let e of this._def.checks)e.kind==="min"&&(n===null||e.value>n)&&(n=e.value);return n}get maxValue(){let n=null;for(let e of this._def.checks)e.kind==="max"&&(n===null||e.value<n)&&(n=e.value);return n}get isInt(){return!!this._def.checks.find(n=>n.kind==="int"||n.kind==="multipleOf"&&We.isInteger(n.value))}get isFinite(){let n=null,e=null;for(let i of this._def.checks){if(i.kind==="finite"||i.kind==="int"||i.kind==="multipleOf")return!0;i.kind==="min"?(e===null||i.value>e)&&(e=i.value):i.kind==="max"&&(n===null||i.value<n)&&(n=i.value)}return Number.isFinite(e)&&Number.isFinite(n)}};Tn.create=t=>new Tn({checks:[],typeName:ge.ZodNumber,coerce:t?.coerce||!1,...ye(t)});var mn=class t extends be{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(n){if(this._def.coerce&&(n.data=BigInt(n.data)),this._getType(n)!==de.bigint){let d=this._getOrReturnCtx(n);return fe(d,{code:Ee.invalid_type,expected:de.bigint,received:d.parsedType}),Ce}let i,E=new yt;for(let d of this._def.checks)d.kind==="min"?(d.inclusive?n.data<d.value:n.data<=d.value)&&(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.too_small,type:"bigint",minimum:d.value,inclusive:d.inclusive,message:d.message}),E.dirty()):d.kind==="max"?(d.inclusive?n.data>d.value:n.data>=d.value)&&(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.too_big,type:"bigint",maximum:d.value,inclusive:d.inclusive,message:d.message}),E.dirty()):d.kind==="multipleOf"?n.data%d.value!==BigInt(0)&&(i=this._getOrReturnCtx(n,i),fe(i,{code:Ee.not_multiple_of,multipleOf:d.value,message:d.message}),E.dirty()):We.assertNever(d);return{status:E.value,value:n.data}}gte(n,e){return this.setLimit("min",n,!0,Re.toString(e))}gt(n,e){return this.setLimit("min",n,!1,Re.toString(e))}lte(n,e){return this.setLimit("max",n,!0,Re.toString(e))}lt(n,e){return this.setLimit("max",n,!1,Re.toString(e))}setLimit(n,e,i,E){return new t({...this._def,checks:[...this._def.checks,{kind:n,value:e,inclusive:i,message:Re.toString(E)}]})}_addCheck(n){return new t({...this._def,checks:[...this._def.checks,n]})}positive(n){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:Re.toString(n)})}negative(n){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:Re.toString(n)})}nonpositive(n){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:Re.toString(n)})}nonnegative(n){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:Re.toString(n)})}multipleOf(n,e){return this._addCheck({kind:"multipleOf",value:n,message:Re.toString(e)})}get minValue(){let n=null;for(let e of this._def.checks)e.kind==="min"&&(n===null||e.value>n)&&(n=e.value);return n}get maxValue(){let n=null;for(let e of this._def.checks)e.kind==="max"&&(n===null||e.value<n)&&(n=e.value);return n}};mn.create=t=>{var n;return new mn({checks:[],typeName:ge.ZodBigInt,coerce:(n=t?.coerce)!==null&&n!==void 0?n:!1,...ye(t)})};var pn=class extends be{_parse(n){if(this._def.coerce&&(n.data=!!n.data),this._getType(n)!==de.boolean){let i=this._getOrReturnCtx(n);return fe(i,{code:Ee.invalid_type,expected:de.boolean,received:i.parsedType}),Ce}return xt(n.data)}};pn.create=t=>new pn({typeName:ge.ZodBoolean,coerce:t?.coerce||!1,...ye(t)});var An=class t extends be{_parse(n){if(this._def.coerce&&(n.data=new Date(n.data)),this._getType(n)!==de.date){let d=this._getOrReturnCtx(n);return fe(d,{code:Ee.invalid_type,expected:de.date,received:d.parsedType}),Ce}if(isNaN(n.data.getTime())){let d=this._getOrReturnCtx(n);return fe(d,{code:Ee.invalid_date}),Ce}let i=new yt,E;for(let d of this._def.checks)d.kind==="min"?n.data.getTime()<d.value&&(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.too_small,message:d.message,inclusive:!0,exact:!1,minimum:d.value,type:"date"}),i.dirty()):d.kind==="max"?n.data.getTime()>d.value&&(E=this._getOrReturnCtx(n,E),fe(E,{code:Ee.too_big,message:d.message,inclusive:!0,exact:!1,maximum:d.value,type:"date"}),i.dirty()):We.assertNever(d);return{status:i.value,value:new Date(n.data.getTime())}}_addCheck(n){return new t({...this._def,checks:[...this._def.checks,n]})}min(n,e){return this._addCheck({kind:"min",value:n.getTime(),message:Re.toString(e)})}max(n,e){return this._addCheck({kind:"max",value:n.getTime(),message:Re.toString(e)})}get minDate(){let n=null;for(let e of this._def.checks)e.kind==="min"&&(n===null||e.value>n)&&(n=e.value);return n!=null?new Date(n):null}get maxDate(){let n=null;for(let e of this._def.checks)e.kind==="max"&&(n===null||e.value<n)&&(n=e.value);return n!=null?new Date(n):null}};An.create=t=>new An({checks:[],coerce:t?.coerce||!1,typeName:ge.ZodDate,...ye(t)});var ti=class extends be{_parse(n){if(this._getType(n)!==de.symbol){let i=this._getOrReturnCtx(n);return fe(i,{code:Ee.invalid_type,expected:de.symbol,received:i.parsedType}),Ce}return xt(n.data)}};ti.create=t=>new ti({typeName:ge.ZodSymbol,...ye(t)});var Sn=class extends be{_parse(n){if(this._getType(n)!==de.undefined){let i=this._getOrReturnCtx(n);return fe(i,{code:Ee.invalid_type,expected:de.undefined,received:i.parsedType}),Ce}return xt(n.data)}};Sn.create=t=>new Sn({typeName:ge.ZodUndefined,...ye(t)});var Rn=class extends be{_parse(n){if(this._getType(n)!==de.null){let i=this._getOrReturnCtx(n);return fe(i,{code:Ee.invalid_type,expected:de.null,received:i.parsedType}),Ce}return xt(n.data)}};Rn.create=t=>new Rn({typeName:ge.ZodNull,...ye(t)});var Wr=class extends be{constructor(){super(...arguments),this._any=!0}_parse(n){return xt(n.data)}};Wr.create=t=>new Wr({typeName:ge.ZodAny,...ye(t)});var yr=class extends be{constructor(){super(...arguments),this._unknown=!0}_parse(n){return xt(n.data)}};yr.create=t=>new yr({typeName:ge.ZodUnknown,...ye(t)});var Er=class extends be{_parse(n){let e=this._getOrReturnCtx(n);return fe(e,{code:Ee.invalid_type,expected:de.never,received:e.parsedType}),Ce}};Er.create=t=>new Er({typeName:ge.ZodNever,...ye(t)});var ri=class extends be{_parse(n){if(this._getType(n)!==de.undefined){let i=this._getOrReturnCtx(n);return fe(i,{code:Ee.invalid_type,expected:de.void,received:i.parsedType}),Ce}return xt(n.data)}};ri.create=t=>new ri({typeName:ge.ZodVoid,...ye(t)});var br=class t extends be{_parse(n){let{ctx:e,status:i}=this._processInputParams(n),E=this._def;if(e.parsedType!==de.array)return fe(e,{code:Ee.invalid_type,expected:de.array,received:e.parsedType}),Ce;if(E.exactLength!==null){let R=e.data.length>E.exactLength.value,_=e.data.length<E.exactLength.value;(R||_)&&(fe(e,{code:R?Ee.too_big:Ee.too_small,minimum:_?E.exactLength.value:void 0,maximum:R?E.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:E.exactLength.message}),i.dirty())}if(E.minLength!==null&&e.data.length<E.minLength.value&&(fe(e,{code:Ee.too_small,minimum:E.minLength.value,type:"array",inclusive:!0,exact:!1,message:E.minLength.message}),i.dirty()),E.maxLength!==null&&e.data.length>E.maxLength.value&&(fe(e,{code:Ee.too_big,maximum:E.maxLength.value,type:"array",inclusive:!0,exact:!1,message:E.maxLength.message}),i.dirty()),e.common.async)return Promise.all([...e.data].map((R,_)=>E.type._parseAsync(new zt(e,R,e.path,_)))).then(R=>yt.mergeArray(i,R));let d=[...e.data].map((R,_)=>E.type._parseSync(new zt(e,R,e.path,_)));return yt.mergeArray(i,d)}get element(){return this._def.type}min(n,e){return new t({...this._def,minLength:{value:n,message:Re.toString(e)}})}max(n,e){return new t({...this._def,maxLength:{value:n,message:Re.toString(e)}})}length(n,e){return new t({...this._def,exactLength:{value:n,message:Re.toString(e)}})}nonempty(n){return this.min(1,n)}};br.create=(t,n)=>new br({type:t,minLength:null,maxLength:null,exactLength:null,typeName:ge.ZodArray,...ye(n)});function ei(t){if(t instanceof Ft){let n={};for(let e in t.shape){let i=t.shape[e];n[e]=lr.create(ei(i))}return new Ft({...t._def,shape:()=>n})}else return t instanceof br?new br({...t._def,type:ei(t.element)}):t instanceof lr?lr.create(ei(t.unwrap())):t instanceof Dr?Dr.create(ei(t.unwrap())):t instanceof pr?pr.create(t.items.map(n=>ei(n))):t}var Ft=class t extends be{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;let n=this._def.shape(),e=We.objectKeys(n);return this._cached={shape:n,keys:e}}_parse(n){if(this._getType(n)!==de.object){let S=this._getOrReturnCtx(n);return fe(S,{code:Ee.invalid_type,expected:de.object,received:S.parsedType}),Ce}let{status:i,ctx:E}=this._processInputParams(n),{shape:d,keys:R}=this._getCached(),_=[];if(!(this._def.catchall instanceof Er&&this._def.unknownKeys==="strip"))for(let S in E.data)R.includes(S)||_.push(S);let I=[];for(let S of R){let C=d[S],w=E.data[S];I.push({key:{status:"valid",value:S},value:C._parse(new zt(E,w,E.path,S)),alwaysSet:S in E.data})}if(this._def.catchall instanceof Er){let S=this._def.unknownKeys;if(S==="passthrough")for(let C of _)I.push({key:{status:"valid",value:C},value:{status:"valid",value:E.data[C]}});else if(S==="strict")_.length>0&&(fe(E,{code:Ee.unrecognized_keys,keys:_}),i.dirty());else if(S!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{let S=this._def.catchall;for(let C of _){let w=E.data[C];I.push({key:{status:"valid",value:C},value:S._parse(new zt(E,w,E.path,C)),alwaysSet:C in E.data})}}return E.common.async?Promise.resolve().then(async()=>{let S=[];for(let C of I){let w=await C.key;S.push({key:w,value:await C.value,alwaysSet:C.alwaysSet})}return S}).then(S=>yt.mergeObjectSync(i,S)):yt.mergeObjectSync(i,I)}get shape(){return this._def.shape()}strict(n){return Re.errToObj,new t({...this._def,unknownKeys:"strict",...n!==void 0?{errorMap:(e,i)=>{var E,d,R,_;let I=(R=(d=(E=this._def).errorMap)===null||d===void 0?void 0:d.call(E,e,i).message)!==null&&R!==void 0?R:i.defaultError;return e.code==="unrecognized_keys"?{message:(_=Re.errToObj(n).message)!==null&&_!==void 0?_:I}:{message:I}}}:{}})}strip(){return new t({...this._def,unknownKeys:"strip"})}passthrough(){return new t({...this._def,unknownKeys:"passthrough"})}extend(n){return new t({...this._def,shape:()=>({...this._def.shape(),...n})})}merge(n){return new t({unknownKeys:n._def.unknownKeys,catchall:n._def.catchall,shape:()=>({...this._def.shape(),...n._def.shape()}),typeName:ge.ZodObject})}setKey(n,e){return this.augment({[n]:e})}catchall(n){return new t({...this._def,catchall:n})}pick(n){let e={};return We.objectKeys(n).forEach(i=>{n[i]&&this.shape[i]&&(e[i]=this.shape[i])}),new t({...this._def,shape:()=>e})}omit(n){let e={};return We.objectKeys(this.shape).forEach(i=>{n[i]||(e[i]=this.shape[i])}),new t({...this._def,shape:()=>e})}deepPartial(){return ei(this)}partial(n){let e={};return We.objectKeys(this.shape).forEach(i=>{let E=this.shape[i];n&&!n[i]?e[i]=E:e[i]=E.optional()}),new t({...this._def,shape:()=>e})}required(n){let e={};return We.objectKeys(this.shape).forEach(i=>{if(n&&!n[i])e[i]=this.shape[i];else{let d=this.shape[i];for(;d instanceof lr;)d=d._def.innerType;e[i]=d}}),new t({...this._def,shape:()=>e})}keyof(){return Rh(We.objectKeys(this.shape))}};Ft.create=(t,n)=>new Ft({shape:()=>t,unknownKeys:"strip",catchall:Er.create(),typeName:ge.ZodObject,...ye(n)});Ft.strictCreate=(t,n)=>new Ft({shape:()=>t,unknownKeys:"strict",catchall:Er.create(),typeName:ge.ZodObject,...ye(n)});Ft.lazycreate=(t,n)=>new Ft({shape:t,unknownKeys:"strip",catchall:Er.create(),typeName:ge.ZodObject,...ye(n)});var Nn=class extends be{_parse(n){let{ctx:e}=this._processInputParams(n),i=this._def.options;function E(d){for(let _ of d)if(_.result.status==="valid")return _.result;for(let _ of d)if(_.result.status==="dirty")return e.common.issues.push(..._.ctx.common.issues),_.result;let R=d.map(_=>new Wt(_.ctx.common.issues));return fe(e,{code:Ee.invalid_union,unionErrors:R}),Ce}if(e.common.async)return Promise.all(i.map(async d=>{let R={...e,common:{...e.common,issues:[]},parent:null};return{result:await d._parseAsync({data:e.data,path:e.path,parent:R}),ctx:R}})).then(E);{let d,R=[];for(let I of i){let S={...e,common:{...e.common,issues:[]},parent:null},C=I._parseSync({data:e.data,path:e.path,parent:S});if(C.status==="valid")return C;C.status==="dirty"&&!d&&(d={result:C,ctx:S}),S.common.issues.length&&R.push(S.common.issues)}if(d)return e.common.issues.push(...d.ctx.common.issues),d.result;let _=R.map(I=>new Wt(I));return fe(e,{code:Ee.invalid_union,unionErrors:_}),Ce}}get options(){return this._def.options}};Nn.create=(t,n)=>new Nn({options:t,typeName:ge.ZodUnion,...ye(n)});var fa=t=>t instanceof gn?fa(t.schema):t instanceof $t?fa(t.innerType()):t instanceof On?[t.value]:t instanceof _n?t.options:t instanceof Ln?Object.keys(t.enum):t instanceof Cn?fa(t._def.innerType):t instanceof Sn?[void 0]:t instanceof Rn?[null]:null,pa=class t extends be{_parse(n){let{ctx:e}=this._processInputParams(n);if(e.parsedType!==de.object)return fe(e,{code:Ee.invalid_type,expected:de.object,received:e.parsedType}),Ce;let i=this.discriminator,E=e.data[i],d=this.optionsMap.get(E);return d?e.common.async?d._parseAsync({data:e.data,path:e.path,parent:e}):d._parseSync({data:e.data,path:e.path,parent:e}):(fe(e,{code:Ee.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[i]}),Ce)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(n,e,i){let E=new Map;for(let d of e){let R=fa(d.shape[n]);if(!R)throw new Error(`A discriminator value for key \`${n}\` could not be extracted from all schema options`);for(let _ of R){if(E.has(_))throw new Error(`Discriminator property ${String(n)} has duplicate value ${String(_)}`);E.set(_,d)}}return new t({typeName:ge.ZodDiscriminatedUnion,discriminator:n,options:e,optionsMap:E,...ye(i)})}};function gl(t,n){let e=Yr(t),i=Yr(n);if(t===n)return{valid:!0,data:t};if(e===de.object&&i===de.object){let E=We.objectKeys(n),d=We.objectKeys(t).filter(_=>E.indexOf(_)!==-1),R={...t,...n};for(let _ of d){let I=gl(t[_],n[_]);if(!I.valid)return{valid:!1};R[_]=I.data}return{valid:!0,data:R}}else if(e===de.array&&i===de.array){if(t.length!==n.length)return{valid:!1};let E=[];for(let d=0;d<t.length;d++){let R=t[d],_=n[d],I=gl(R,_);if(!I.valid)return{valid:!1};E.push(I.data)}return{valid:!0,data:E}}else return e===de.date&&i===de.date&&+t==+n?{valid:!0,data:t}:{valid:!1}}var In=class extends be{_parse(n){let{status:e,ctx:i}=this._processInputParams(n),E=(d,R)=>{if(Nl(d)||Nl(R))return Ce;let _=gl(d.value,R.value);return _.valid?((Il(d)||Il(R))&&e.dirty(),{status:e.value,value:_.data}):(fe(i,{code:Ee.invalid_intersection_types}),Ce)};return i.common.async?Promise.all([this._def.left._parseAsync({data:i.data,path:i.path,parent:i}),this._def.right._parseAsync({data:i.data,path:i.path,parent:i})]).then(([d,R])=>E(d,R)):E(this._def.left._parseSync({data:i.data,path:i.path,parent:i}),this._def.right._parseSync({data:i.data,path:i.path,parent:i}))}};In.create=(t,n,e)=>new In({left:t,right:n,typeName:ge.ZodIntersection,...ye(e)});var pr=class t extends be{_parse(n){let{status:e,ctx:i}=this._processInputParams(n);if(i.parsedType!==de.array)return fe(i,{code:Ee.invalid_type,expected:de.array,received:i.parsedType}),Ce;if(i.data.length<this._def.items.length)return fe(i,{code:Ee.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),Ce;!this._def.rest&&i.data.length>this._def.items.length&&(fe(i,{code:Ee.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),e.dirty());let d=[...i.data].map((R,_)=>{let I=this._def.items[_]||this._def.rest;return I?I._parse(new zt(i,R,i.path,_)):null}).filter(R=>!!R);return i.common.async?Promise.all(d).then(R=>yt.mergeArray(e,R)):yt.mergeArray(e,d)}get items(){return this._def.items}rest(n){return new t({...this._def,rest:n})}};pr.create=(t,n)=>{if(!Array.isArray(t))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new pr({items:t,typeName:ge.ZodTuple,rest:null,...ye(n)})};var Aa=class t extends be{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(n){let{status:e,ctx:i}=this._processInputParams(n);if(i.parsedType!==de.object)return fe(i,{code:Ee.invalid_type,expected:de.object,received:i.parsedType}),Ce;let E=[],d=this._def.keyType,R=this._def.valueType;for(let _ in i.data)E.push({key:d._parse(new zt(i,_,i.path,_)),value:R._parse(new zt(i,i.data[_],i.path,_))});return i.common.async?yt.mergeObjectAsync(e,E):yt.mergeObjectSync(e,E)}get element(){return this._def.valueType}static create(n,e,i){return e instanceof be?new t({keyType:n,valueType:e,typeName:ge.ZodRecord,...ye(i)}):new t({keyType:Vr.create(),valueType:n,typeName:ge.ZodRecord,...ye(e)})}},ni=class extends be{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(n){let{status:e,ctx:i}=this._processInputParams(n);if(i.parsedType!==de.map)return fe(i,{code:Ee.invalid_type,expected:de.map,received:i.parsedType}),Ce;let E=this._def.keyType,d=this._def.valueType,R=[...i.data.entries()].map(([_,I],S)=>({key:E._parse(new zt(i,_,i.path,[S,"key"])),value:d._parse(new zt(i,I,i.path,[S,"value"]))}));if(i.common.async){let _=new Map;return Promise.resolve().then(async()=>{for(let I of R){let S=await I.key,C=await I.value;if(S.status==="aborted"||C.status==="aborted")return Ce;(S.status==="dirty"||C.status==="dirty")&&e.dirty(),_.set(S.value,C.value)}return{status:e.value,value:_}})}else{let _=new Map;for(let I of R){let S=I.key,C=I.value;if(S.status==="aborted"||C.status==="aborted")return Ce;(S.status==="dirty"||C.status==="dirty")&&e.dirty(),_.set(S.value,C.value)}return{status:e.value,value:_}}}};ni.create=(t,n,e)=>new ni({valueType:n,keyType:t,typeName:ge.ZodMap,...ye(e)});var ii=class t extends be{_parse(n){let{status:e,ctx:i}=this._processInputParams(n);if(i.parsedType!==de.set)return fe(i,{code:Ee.invalid_type,expected:de.set,received:i.parsedType}),Ce;let E=this._def;E.minSize!==null&&i.data.size<E.minSize.value&&(fe(i,{code:Ee.too_small,minimum:E.minSize.value,type:"set",inclusive:!0,exact:!1,message:E.minSize.message}),e.dirty()),E.maxSize!==null&&i.data.size>E.maxSize.value&&(fe(i,{code:Ee.too_big,maximum:E.maxSize.value,type:"set",inclusive:!0,exact:!1,message:E.maxSize.message}),e.dirty());let d=this._def.valueType;function R(I){let S=new Set;for(let C of I){if(C.status==="aborted")return Ce;C.status==="dirty"&&e.dirty(),S.add(C.value)}return{status:e.value,value:S}}let _=[...i.data.values()].map((I,S)=>d._parse(new zt(i,I,i.path,S)));return i.common.async?Promise.all(_).then(I=>R(I)):R(_)}min(n,e){return new t({...this._def,minSize:{value:n,message:Re.toString(e)}})}max(n,e){return new t({...this._def,maxSize:{value:n,message:Re.toString(e)}})}size(n,e){return this.min(n,e).max(n,e)}nonempty(n){return this.min(1,n)}};ii.create=(t,n)=>new ii({valueType:t,minSize:null,maxSize:null,typeName:ge.ZodSet,...ye(n)});var Sa=class t extends be{constructor(){super(...arguments),this.validate=this.implement}_parse(n){let{ctx:e}=this._processInputParams(n);if(e.parsedType!==de.function)return fe(e,{code:Ee.invalid_type,expected:de.function,received:e.parsedType}),Ce;function i(_,I){return Ta({data:_,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,ha(),Vi].filter(S=>!!S),issueData:{code:Ee.invalid_arguments,argumentsError:I}})}function E(_,I){return Ta({data:_,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,ha(),Vi].filter(S=>!!S),issueData:{code:Ee.invalid_return_type,returnTypeError:I}})}let d={errorMap:e.common.contextualErrorMap},R=e.data;if(this._def.returns instanceof $r){let _=this;return xt(async function(...I){let S=new Wt([]),C=await _._def.args.parseAsync(I,d).catch(M=>{throw S.addIssue(i(I,M)),S}),w=await Reflect.apply(R,this,C);return await _._def.returns._def.type.parseAsync(w,d).catch(M=>{throw S.addIssue(E(w,M)),S})})}else{let _=this;return xt(function(...I){let S=_._def.args.safeParse(I,d);if(!S.success)throw new Wt([i(I,S.error)]);let C=Reflect.apply(R,this,S.data),w=_._def.returns.safeParse(C,d);if(!w.success)throw new Wt([E(C,w.error)]);return w.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...n){return new t({...this._def,args:pr.create(n).rest(yr.create())})}returns(n){return new t({...this._def,returns:n})}implement(n){return this.parse(n)}strictImplement(n){return this.parse(n)}static create(n,e,i){return new t({args:n||pr.create([]).rest(yr.create()),returns:e||yr.create(),typeName:ge.ZodFunction,...ye(i)})}},gn=class extends be{get schema(){return this._def.getter()}_parse(n){let{ctx:e}=this._processInputParams(n);return this._def.getter()._parse({data:e.data,path:e.path,parent:e})}};gn.create=(t,n)=>new gn({getter:t,typeName:ge.ZodLazy,...ye(n)});var On=class extends be{_parse(n){if(n.data!==this._def.value){let e=this._getOrReturnCtx(n);return fe(e,{received:e.data,code:Ee.invalid_literal,expected:this._def.value}),Ce}return{status:"valid",value:n.data}}get value(){return this._def.value}};On.create=(t,n)=>new On({value:t,typeName:ge.ZodLiteral,...ye(n)});function Rh(t,n){return new _n({values:t,typeName:ge.ZodEnum,...ye(n)})}var _n=class t extends be{_parse(n){if(typeof n.data!="string"){let e=this._getOrReturnCtx(n),i=this._def.values;return fe(e,{expected:We.joinValues(i),received:e.parsedType,code:Ee.invalid_type}),Ce}if(this._def.values.indexOf(n.data)===-1){let e=this._getOrReturnCtx(n),i=this._def.values;return fe(e,{received:e.data,code:Ee.invalid_enum_value,options:i}),Ce}return xt(n.data)}get options(){return this._def.values}get enum(){let n={};for(let e of this._def.values)n[e]=e;return n}get Values(){let n={};for(let e of this._def.values)n[e]=e;return n}get Enum(){let n={};for(let e of this._def.values)n[e]=e;return n}extract(n){return t.create(n)}exclude(n){return t.create(this.options.filter(e=>!n.includes(e)))}};_n.create=Rh;var Ln=class extends be{_parse(n){let e=We.getValidEnumValues(this._def.values),i=this._getOrReturnCtx(n);if(i.parsedType!==de.string&&i.parsedType!==de.number){let E=We.objectValues(e);return fe(i,{expected:We.joinValues(E),received:i.parsedType,code:Ee.invalid_type}),Ce}if(e.indexOf(n.data)===-1){let E=We.objectValues(e);return fe(i,{received:i.data,code:Ee.invalid_enum_value,options:E}),Ce}return xt(n.data)}get enum(){return this._def.values}};Ln.create=(t,n)=>new Ln({values:t,typeName:ge.ZodNativeEnum,...ye(n)});var $r=class extends be{unwrap(){return this._def.type}_parse(n){let{ctx:e}=this._processInputParams(n);if(e.parsedType!==de.promise&&e.common.async===!1)return fe(e,{code:Ee.invalid_type,expected:de.promise,received:e.parsedType}),Ce;let i=e.parsedType===de.promise?e.data:Promise.resolve(e.data);return xt(i.then(E=>this._def.type.parseAsync(E,{path:e.path,errorMap:e.common.contextualErrorMap})))}};$r.create=(t,n)=>new $r({type:t,typeName:ge.ZodPromise,...ye(n)});var $t=class extends be{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===ge.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(n){let{status:e,ctx:i}=this._processInputParams(n),E=this._def.effect||null,d={addIssue:R=>{fe(i,R),R.fatal?e.abort():e.dirty()},get path(){return i.path}};if(d.addIssue=d.addIssue.bind(d),E.type==="preprocess"){let R=E.transform(i.data,d);return i.common.issues.length?{status:"dirty",value:i.data}:i.common.async?Promise.resolve(R).then(_=>this._def.schema._parseAsync({data:_,path:i.path,parent:i})):this._def.schema._parseSync({data:R,path:i.path,parent:i})}if(E.type==="refinement"){let R=_=>{let I=E.refinement(_,d);if(i.common.async)return Promise.resolve(I);if(I instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return _};if(i.common.async===!1){let _=this._def.schema._parseSync({data:i.data,path:i.path,parent:i});return _.status==="aborted"?Ce:(_.status==="dirty"&&e.dirty(),R(_.value),{status:e.value,value:_.value})}else return this._def.schema._parseAsync({data:i.data,path:i.path,parent:i}).then(_=>_.status==="aborted"?Ce:(_.status==="dirty"&&e.dirty(),R(_.value).then(()=>({status:e.value,value:_.value}))))}if(E.type==="transform")if(i.common.async===!1){let R=this._def.schema._parseSync({data:i.data,path:i.path,parent:i});if(!Wi(R))return R;let _=E.transform(R.value,d);if(_ instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:e.value,value:_}}else return this._def.schema._parseAsync({data:i.data,path:i.path,parent:i}).then(R=>Wi(R)?Promise.resolve(E.transform(R.value,d)).then(_=>({status:e.value,value:_})):R);We.assertNever(E)}};$t.create=(t,n,e)=>new $t({schema:t,typeName:ge.ZodEffects,effect:n,...ye(e)});$t.createWithPreprocess=(t,n,e)=>new $t({schema:n,effect:{type:"preprocess",transform:t},typeName:ge.ZodEffects,...ye(e)});var lr=class extends be{_parse(n){return this._getType(n)===de.undefined?xt(void 0):this._def.innerType._parse(n)}unwrap(){return this._def.innerType}};lr.create=(t,n)=>new lr({innerType:t,typeName:ge.ZodOptional,...ye(n)});var Dr=class extends be{_parse(n){return this._getType(n)===de.null?xt(null):this._def.innerType._parse(n)}unwrap(){return this._def.innerType}};Dr.create=(t,n)=>new Dr({innerType:t,typeName:ge.ZodNullable,...ye(n)});var Cn=class extends be{_parse(n){let{ctx:e}=this._processInputParams(n),i=e.data;return e.parsedType===de.undefined&&(i=this._def.defaultValue()),this._def.innerType._parse({data:i,path:e.path,parent:e})}removeDefault(){return this._def.innerType}};Cn.create=(t,n)=>new Cn({innerType:t,typeName:ge.ZodDefault,defaultValue:typeof n.default=="function"?n.default:()=>n.default,...ye(n)});var si=class extends be{_parse(n){let{ctx:e}=this._processInputParams(n),i={...e,common:{...e.common,issues:[]}},E=this._def.innerType._parse({data:i.data,path:i.path,parent:{...i}});return ma(E)?E.then(d=>({status:"valid",value:d.status==="valid"?d.value:this._def.catchValue({get error(){return new Wt(i.common.issues)},input:i.data})})):{status:"valid",value:E.status==="valid"?E.value:this._def.catchValue({get error(){return new Wt(i.common.issues)},input:i.data})}}removeCatch(){return this._def.innerType}};si.create=(t,n)=>new si({innerType:t,typeName:ge.ZodCatch,catchValue:typeof n.catch=="function"?n.catch:()=>n.catch,...ye(n)});var ai=class extends be{_parse(n){if(this._getType(n)!==de.nan){let i=this._getOrReturnCtx(n);return fe(i,{code:Ee.invalid_type,expected:de.nan,received:i.parsedType}),Ce}return{status:"valid",value:n.data}}};ai.create=t=>new ai({typeName:ge.ZodNaN,...ye(t)});var iO=Symbol("zod_brand"),Ra=class extends be{_parse(n){let{ctx:e}=this._processInputParams(n),i=e.data;return this._def.type._parse({data:i,path:e.path,parent:e})}unwrap(){return this._def.type}},$i=class t extends be{_parse(n){let{status:e,ctx:i}=this._processInputParams(n);if(i.common.async)return(async()=>{let d=await this._def.in._parseAsync({data:i.data,path:i.path,parent:i});return d.status==="aborted"?Ce:d.status==="dirty"?(e.dirty(),Sh(d.value)):this._def.out._parseAsync({data:d.value,path:i.path,parent:i})})();{let E=this._def.in._parseSync({data:i.data,path:i.path,parent:i});return E.status==="aborted"?Ce:E.status==="dirty"?(e.dirty(),{status:"dirty",value:E.value}):this._def.out._parseSync({data:E.value,path:i.path,parent:i})}}static create(n,e){return new t({in:n,out:e,typeName:ge.ZodPipeline})}},oi=class extends be{_parse(n){let e=this._def.innerType._parse(n);return Wi(e)&&(e.value=Object.freeze(e.value)),e}};oi.create=(t,n)=>new oi({innerType:t,typeName:ge.ZodReadonly,...ye(n)});var Nh=(t,n={},e)=>t?Wr.create().superRefine((i,E)=>{var d,R;if(!t(i)){let _=typeof n=="function"?n(i):typeof n=="string"?{message:n}:n,I=(R=(d=_.fatal)!==null&&d!==void 0?d:e)!==null&&R!==void 0?R:!0,S=typeof _=="string"?{message:_}:_;E.addIssue({code:"custom",...S,fatal:I})}}):Wr.create(),sO={object:Ft.lazycreate},ge;(function(t){t.ZodString="ZodString",t.ZodNumber="ZodNumber",t.ZodNaN="ZodNaN",t.ZodBigInt="ZodBigInt",t.ZodBoolean="ZodBoolean",t.ZodDate="ZodDate",t.ZodSymbol="ZodSymbol",t.ZodUndefined="ZodUndefined",t.ZodNull="ZodNull",t.ZodAny="ZodAny",t.ZodUnknown="ZodUnknown",t.ZodNever="ZodNever",t.ZodVoid="ZodVoid",t.ZodArray="ZodArray",t.ZodObject="ZodObject",t.ZodUnion="ZodUnion",t.ZodDiscriminatedUnion="ZodDiscriminatedUnion",t.ZodIntersection="ZodIntersection",t.ZodTuple="ZodTuple",t.ZodRecord="ZodRecord",t.ZodMap="ZodMap",t.ZodSet="ZodSet",t.ZodFunction="ZodFunction",t.ZodLazy="ZodLazy",t.ZodLiteral="ZodLiteral",t.ZodEnum="ZodEnum",t.ZodEffects="ZodEffects",t.ZodNativeEnum="ZodNativeEnum",t.ZodOptional="ZodOptional",t.ZodNullable="ZodNullable",t.ZodDefault="ZodDefault",t.ZodCatch="ZodCatch",t.ZodPromise="ZodPromise",t.ZodBranded="ZodBranded",t.ZodPipeline="ZodPipeline",t.ZodReadonly="ZodReadonly"})(ge||(ge={}));var aO=(t,n={message:`Input not instance of ${t.name}`})=>Nh(e=>e instanceof t,n),Ih=Vr.create,gh=Tn.create,oO=ai.create,lO=mn.create,Oh=pn.create,EO=An.create,uO=ti.create,cO=Sn.create,dO=Rn.create,fO=Wr.create,hO=yr.create,TO=Er.create,mO=ri.create,pO=br.create,AO=Ft.create,SO=Ft.strictCreate,RO=Nn.create,NO=pa.create,IO=In.create,gO=pr.create,OO=Aa.create,_O=ni.create,LO=ii.create,CO=Sa.create,wO=gn.create,yO=On.create,bO=_n.create,DO=Ln.create,PO=$r.create,ph=$t.create,MO=lr.create,vO=Dr.create,xO=$t.createWithPreprocess,UO=$i.create,GO=()=>Ih().optional(),BO=()=>gh().optional(),FO=()=>Oh().optional(),HO={string:t=>Vr.create({...t,coerce:!0}),number:t=>Tn.create({...t,coerce:!0}),boolean:t=>pn.create({...t,coerce:!0}),bigint:t=>mn.create({...t,coerce:!0}),date:t=>An.create({...t,coerce:!0})},kO=Ce,tt=Object.freeze({__proto__:null,defaultErrorMap:Vi,setErrorMap:$g,getErrorMap:ha,makeIssue:Ta,EMPTY_PATH:Xg,addIssueToContext:fe,ParseStatus:yt,INVALID:Ce,DIRTY:Sh,OK:xt,isAborted:Nl,isDirty:Il,isValid:Wi,isAsync:ma,get util(){return We},get objectUtil(){return Rl},ZodParsedType:de,getParsedType:Yr,ZodType:be,ZodString:Vr,ZodNumber:Tn,ZodBigInt:mn,ZodBoolean:pn,ZodDate:An,ZodSymbol:ti,ZodUndefined:Sn,ZodNull:Rn,ZodAny:Wr,ZodUnknown:yr,ZodNever:Er,ZodVoid:ri,ZodArray:br,ZodObject:Ft,ZodUnion:Nn,ZodDiscriminatedUnion:pa,ZodIntersection:In,ZodTuple:pr,ZodRecord:Aa,ZodMap:ni,ZodSet:ii,ZodFunction:Sa,ZodLazy:gn,ZodLiteral:On,ZodEnum:_n,ZodNativeEnum:Ln,ZodPromise:$r,ZodEffects:$t,ZodTransformer:$t,ZodOptional:lr,ZodNullable:Dr,ZodDefault:Cn,ZodCatch:si,ZodNaN:ai,BRAND:iO,ZodBranded:Ra,ZodPipeline:$i,ZodReadonly:oi,custom:Nh,Schema:be,ZodSchema:be,late:sO,get ZodFirstPartyTypeKind(){return ge},coerce:HO,any:fO,array:pO,bigint:lO,boolean:Oh,date:EO,discriminatedUnion:NO,effect:ph,enum:bO,function:CO,instanceof:aO,intersection:IO,lazy:wO,literal:yO,map:_O,nan:oO,nativeEnum:DO,never:TO,null:dO,nullable:vO,number:gh,object:AO,oboolean:FO,onumber:BO,optional:MO,ostring:GO,pipeline:UO,preprocess:xO,promise:PO,record:OO,set:LO,strictObject:SO,string:Ih,symbol:uO,transformer:ph,tuple:gO,undefined:cO,union:RO,unknown:hO,void:mO,NEVER:kO,ZodIssueCode:Ee,quotelessJson:Wg,ZodError:Wt});var YO={"whatsNewDialog.condition.firstInstalledVersion":tt.string(),"unknownFileExtensionNotification.disabled":tt.boolean(),"unknownFileExtensionNotification.shown":tt.string().array(),"installationIssuesSurvey.condition.lastErrorTimestamp":tt.number(),"installationIssuesSurvey.condition.lastErrorUri":tt.string(),queryHistory:tt.string().array(),"starMeDialog.condition.date":tt.number(),"starMeDialog.condition.editorLoadCount":tt.number(),"starMeDialog.closed":tt.boolean(),"starMeDialog.history":tt.string(),"starMeDialog.showed":tt.boolean(),showedStarMeDialog:tt.boolean(),displayedSomethingWentWrongError:tt.boolean(),hasFirstFormatMessageShown:tt.boolean(),"tipsShown.dropTable":tt.boolean(),"tipsShown.renameTable":tt.boolean(),"tipsShown.createIndex":tt.boolean(),feedbackClosed:tt.boolean(),feedbackAccepted:tt.boolean(),muslFallbackMessageDisplayed:tt.boolean(),displayedTutorial:tt.boolean(),inMemoryDbComments:tt.string(),hasShownCommentInfo:tt.boolean(),hasShownHelpComment:tt.boolean()},Na=class{#e;constructor(n){this.#e=n}get(n,e){return this.#e.get(n,e)}async update(n,e){if(e===void 0){await this.#e.update(n,void 0);return}let i=YO[n].safeParse(e);if("error"in i)throw new TypeError(`Invalid value for globalState(${JSON.stringify(n)}): ${i.error.message}`);return await this.#e.update(n,e)}async clear(){await Promise.all(this.#e.keys().map(n=>this.#e.update(n,void 0)))}get raw(){return this.#e}},rt=(t,n,...e)=>t.postMessage([n,...e]);var Lh=(t,n,e,i,E,d,R,_,I,S)=>{let C=Date.now(),w=t.p.editorPragma("list_tables",[]).then(b=>b.unpack());return{async[Ic](b){await ot.default.env.openExternal(ot.default.Uri.parse(b))},async[gc](b){b==="openGitHub"&&await ot.default.env.openExternal(ot.default.Uri.parse("https://github.com/yy0931/sqlite3-editor")),Z(D.context.globalState.update("starMeDialog.history",D.context.globalState.get("starMeDialog.history","")+b+",")),Z(D.context.globalState.update("starMeDialog.closed",!0))},async[Oc](b){R.sendText(b.map(M=>typeof M=="string"?M:Jn(M.escape)).join("").replaceAll("{{command}}",t.p.executable.path).replaceAll("{{database-filepath}}",Jn(t.fsPaths==="memory"?":memory:":t.fsPaths.base.file)))},async[_c](b){await Yi(b)},async[Lc](b){await ca(b,t.fsPaths==="memory"?":memory:":t.fsPaths.base.file)},async[Cc]({prompt:b,value:M,placeHolder:G}){return await ot.default.window.showInputBox({prompt:b,value:M,placeHolder:G})},async[wc](b){await ot.default.env.clipboard.writeText(b)},async[yc](){return await ot.default.env.clipboard.readText()},async[bc](b,M){D.loggerAndReporter.reportError(b,M)},async[Dc](){await pt("sqlite3-editor.showHistory")},async[Pc](){C!==null&&(D.loggerAndReporter.logLine(`Loaded in ${Date.now()-C} ms`),C=null),Z(D.context.globalState.update("starMeDialog.condition.editorLoadCount",D.context.globalState.get("starMeDialog.condition.editorLoadCount",0)+1));let b=D.connManager.onLoadWebviewPanel(t,n);n.onDidDispose(async()=>{b?.(),S()})},async[Mc](b){await i.setTableList(t,b)},async[vc](b){await i.setActiveTable(n,b)},async[xc](){let b=we(t.uri),M=Vf(G=>b.get(`ui.${G}`));return M.conditionalFormatting=M.conditionalFormatting.filter(G=>G.database===void 0||G.database===_h.default.posix.basename(t.uri.path)),M},async[Uc](b,M,G){await we().update(`ui.${b}`,Yf(M),ot.default.ConfigurationTarget[G])},async[fd](b,M){await we().reset(`ui.${b}`,ot.default.ConfigurationTarget[M])},async[Bs](b,M){return D.context.workspaceState.get(`storage${M?"":`/${t.uri.toString()}`}-${b}`)??null},async[Gc](b,M,G){await D.context.workspaceState.update(`storage${G?"":`/${t.uri.toString()}`}-${b}`,M)},async[Bc](b,M){await D.context.workspaceState.update(`storage${M?"":`/${t.uri.toString()}`}-${b}`,void 0)},async[Fc](){await pt("sqlite3-editor.compare",ot.default.Uri.file(t.uri.fsPath),t.p)},async[Hc](){await pt("sqlite3-editor.compare",void 0,t.p)},async[kc](){return await I},async[ld](b,M){await ch(t,b,M)},async[Ed](b){await dh(t,b)},async[ud](b){await fh(t,b)},async[cd](){await hh(t)},async[dd](){await Th(t)},async[Yc](){if(t.fsPaths==="memory"){Z(ot.default.window.showErrorMessage(D.t("This feature does not support in-memory databases.")));return}_.sendText(`sqlite3${Gi} ${Jn(t.fsPaths.base.file)}`,!0)},async[Vc](b,M,G){await oh(t,b,M,G)},async[Wc](){return t.fsPaths==="memory"?"database.db":t.fsPaths.base.file},async[$c](b){return(await t.p.request("check_syntax",[b])).unpack()},async[Xc](){t.p.interrupt()},async[qc](b,M){let G=new Set(ot.default.window.tabGroups.all.map(k=>k.viewColumn)),$=[ot.default.ViewColumn.One,ot.default.ViewColumn.Two,ot.default.ViewColumn.Three,ot.default.ViewColumn.Four,ot.default.ViewColumn.Five,ot.default.ViewColumn.Six,ot.default.ViewColumn.Seven,ot.default.ViewColumn.Eight,ot.default.ViewColumn.Nine].find(k=>!G.has(k));$!==void 0?(e.enqueueNextWebviewQueryParameter(t.uri,{tableName:b,columnFilters:JSON.stringify(M)}),await vt(t.uri,$)):await vt(da(t.uri,{tableName:b,columnFilters:JSON.stringify(M)}))},async[jc](){if(w===null)return t.p.editorPragma("list_tables",[]).then(M=>M.unpack());let b=await w;return w=null,b},async[Kc](b){await t.commentFile.write(b,t.p.executable)},async[Jc](){await D.context.globalState.update("hasShownCommentInfo",!0)},async[Qc](){Hi.add(t.uri.toString())},async[zc](){n.active&&await ot.default.commands.executeCommand("workbench.action.keepEditor")},async[td](b,M){Z(E.create(b,M,G=>{Z(rt(n.webview,21,b,G))},n))},async[rd](b,M){E.update(b,M)},async[nd](b){Z(E.remove(b))},async[id](){return E.isFocused()},async[Zc](b,M,G){return d.set(b,M,G)},async[ed](b,M){return d.get(b,M)},async[sd](){},async[ad](){return{current:"",list:[]}}}};var WO=(t,n=!0)=>t===void 0||t==="off"||t==="on"||t==="smart",$O=(t,n=!0)=>t===void 0||t==="always"||t==="beforeWhitespace"||t==="languageDefined"||t==="never",XO=(t,n=!0)=>t===void 0||t==="always"||t==="beforeWhitespace"||t==="languageDefined"||t==="never",qO=(t,n=!0)=>t===void 0||t==="always"||t==="auto"||t==="never",jO=(t,n=!0)=>t===void 0||t==="always"||t==="auto"||t==="never",KO=(t,n=!0)=>t===void 0||t==="always"||t==="beforeWhitespace"||t==="languageDefined"||t==="never",JO=(t,n=!0)=>t===void 0||t==="advanced"||t==="brackets"||t==="full"||t==="keep"||t==="none",QO=(t,n=!0)=>t===void 0||t==="brackets"||t==="languageDefined"||t==="never"||t==="quotes",zO=(t,n=!0)=>t===void 0||typeof t=="boolean",ZO=(t,n=!0)=>t===void 0||typeof t=="boolean",e_=(t,n=!0)=>t===void 0||typeof t=="boolean",t_=(t,n=!0)=>t===void 0||typeof t=="boolean",r_=(t,n=!0)=>t===void 0||typeof t=="boolean",n_=(t,n=!0)=>t===void 0||typeof t=="boolean",i_=(t,n=!0)=>t===void 0||t==="blink"||t==="expand"||t==="phase"||t==="smooth"||t==="solid",s_=(t,n=!0)=>t===void 0||t==="explicit"||t==="off"||t==="on",a_=(t,n=!0)=>t===void 0||t==="block"||t==="block-outline"||t==="line"||t==="line-thin"||t==="underline"||t==="underline-thin",o_=(t,n=!0)=>t===void 0||typeof t=="number",l_=(t,n=!0)=>t===void 0||t==="all"||t==="default",E_=(t,n=!0)=>t===void 0||typeof t=="number",u_=(t,n=!0)=>t===void 0||typeof t=="boolean",c_=(t,n=!0)=>t===void 0||typeof t=="boolean",d_=(t,n=!0)=>t===void 0||typeof t=="number",f_=(t,n=!0)=>t===void 0||typeof t=="number",h_=(t,n=!0)=>t===void 0||typeof t=="number",T_=(t,n=!0)=>t===void 0||t==="always"||t==="near"||t==="never",m_=(t,n=!0)=>t===void 0||typeof t=="boolean",p_=(t,n=!0)=>t===void 0||typeof t=="number",A_=(t,n=!0)=>t===void 0||typeof t=="boolean",S_=(t,n=!0)=>t===void 0||t==="full"||t==="spread",R_=(t,n=!0)=>t===void 0||typeof t=="number",N_=(t,n=!0)=>t===void 0||typeof t=="boolean",I_=(t,n=!0)=>t===void 0||t==="dimmed"||t==="off"||t==="on",g_=(t,n=!0)=>t===void 0||t==="all"||t==="gutter"||t==="line"||t==="none",O_=(t,n=!0)=>t===void 0||t==="all"||t==="boundary"||t==="none"||t==="selection"||t==="trailing",__=(t,n=!0)=>t===void 0||typeof t=="boolean",L_=(t,n=!0)=>t===void 0||typeof t=="boolean",C_=(t,n=!0)=>t===void 0||t==="bottom"||t==="inline"||t==="none"||t==="top",w_=(t,n=!0)=>t===void 0||t==="insert"||t==="replace",y_=(t,n=!0)=>t===void 0||t==="off"||t==="on"||t==="onlySnippets",b_=(t,n=!0)=>t===void 0||typeof t=="string",De=(t,n)=>t(n)?n:void 0,Ch=t=>({acceptSuggestionOnEnter:De(WO,t.acceptSuggestionOnEnter),autoClosingBrackets:De($O,t.autoClosingBrackets),autoClosingComments:De(XO,t.autoClosingComments),autoClosingDelete:De(qO,t.autoClosingDelete),autoClosingOvertype:De(jO,t.autoClosingOvertype),autoClosingQuotes:De(KO,t.autoClosingQuotes),autoIndent:De(JO,t.autoIndent),autoSurround:De(QO,t.autoSurround),bracketPairColorization:{enabled:De(zO,t.bracketPairColorization?.enabled),independentColorPoolPerBracketType:De(ZO,t.bracketPairColorization?.independentColorPoolPerBracketType)},columnSelection:De(e_,t.columnSelection),comments:{insertSpace:De(t_,t.comments?.insertSpace),ignoreEmptyLines:De(r_,t.comments?.ignoreEmptyLines)},copyWithSyntaxHighlighting:De(n_,t.copyWithSyntaxHighlighting),cursorBlinking:De(i_,t.cursorBlinking),cursorSmoothCaretAnimation:De(s_,t.cursorSmoothCaretAnimation),cursorStyle:De(a_,t.cursorStyle),cursorSurroundingLines:De(o_,t.cursorSurroundingLines),cursorSurroundingLinesStyle:De(l_,t.cursorSurroundingLinesStyle),cursorWidth:De(E_,t.cursorWidth),dragAndDrop:De(u_,t.dragAndDrop),emptySelectionClipboard:De(c_,t.emptySelectionClipboard),fastScrollSensitivity:De(d_,t.fastScrollSensitivity),letterSpacing:De(f_,t.letterSpacing),lineHeight:De(h_,t.lineHeight),matchBrackets:De(T_,t.matchBrackets),matchOnWordStartOnly:De(m_,t.matchOnWordStartOnly),mouseWheelScrollSensitivity:De(p_,t.mouseWheelScrollSensitivity),mouseWheelZoom:De(A_,t.mouseWheelZoom),multiCursorPaste:De(S_,t.multiCursorPaste),quickSuggestionsDelay:De(R_,t.quickSuggestionsDelay),renderControlCharacters:De(N_,t.renderControlCharacters),renderFinalNewline:De(I_,t.renderFinalNewline),renderLineHighlight:De(g_,t.renderLineHighlight),renderWhitespace:De(O_,t.renderWhitespace),roundedSelection:De(__,t.roundedSelection),smoothScrolling:De(L_,t.smoothScrolling),snippetSuggestions:De(C_,t.snippetSuggestions),suggest:{insertMode:De(w_,t.suggest?.insertMode)},tabCompletion:De(y_,t.tabCompletion),wordSeparators:De(b_,t.wordSeparators)});var ve,he,wh={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:`
`,r:"\r",t:"	"},Qe,Mr=t=>{if(t!==he)throw new SyntaxError(`Expected '${t}' instead of '${he}', at ${ve}`)},yh=()=>{let t="";for(he==="-"&&(t="-",he=Qe[ve++]);he>="0"&&he<="9";)t+=he,he=Qe[ve++];if(he==="n")return he=Qe[ve++],BigInt(t);if(he===".")for(t+=".";(he=Qe[ve++])&&he>="0"&&he<="9";)t+=he;if(he==="e"||he==="E")for(t+=he,he=Qe[ve++],(he==="-"||he==="+")&&(t+=he,he=Qe[ve++]);he>="0"&&he<="9";)t+=he,he=Qe[ve++];let n=+t;if(!isFinite(n))throw new SyntaxError(`Bad number, at ${ve}`);return n},bh=()=>{let t="";Mr('"');let n=ve;for(;he=Qe[ve++];){if(he==='"')return ve-1>n&&(t+=Qe.substring(n,ve-1)),he=Qe[ve++],t;if(he==="\\"){if(ve-1>n&&(t+=Qe.substring(n,ve-1)),he=Qe[ve++],he==="u"){let e=0;for(let i=0;i<4;i++){let E=parseInt(he=Qe[ve++],16);if(!isFinite(E))throw new SyntaxError(`Bad escape sequence, at ${ve}`);e=e*16+E}t+=String.fromCharCode(e)}else if(typeof wh[he]=="string")t+=wh[he];else throw new SyntaxError(`Bad escape sequence: "\\${he}", at ${ve}`);n=ve}}throw new SyntaxError(`Unexpected end of input, at ${ve}`)},Pr=()=>{for(;he&&he<=" ";)he=Qe[ve++]},D_=()=>{switch(he){case"t":for(let t of"true")Mr(t),he=Qe[ve++];return!0;case"f":for(let t of"false")Mr(t),he=Qe[ve++];return!1;case"n":for(let t of"null")Mr(t),he=Qe[ve++];return null}throw new SyntaxError(`Unexpected '${he}', at ${ve}`)},P_=()=>{let t=[];if(Mr("["),he=Qe[ve++],Pr(),he==="]")return he=Qe[ve++],t;for(;he;){if(t.push(Ol()),Pr(),he==="]")return he=Qe[ve++],t;Mr(","),he=Qe[ve++],Pr()}throw new SyntaxError(`Unexpected end of input, at ${ve}`)},M_=()=>{let t={};if(Mr("{"),he=Qe[ve++],Pr(),he==="}")return he=Qe[ve++],t;for(;he;){let n=bh();if(Pr(),Mr(":"),he=Qe[ve++],Object.defineProperty(t,n,{value:Ol(),writable:!0,enumerable:!0,configurable:!0}),Pr(),he==="}")return he=Qe[ve++],t;Mr(","),he=Qe[ve++],Pr()}throw new SyntaxError(`Unexpected end of input, at ${ve}`)},Ol=()=>{switch(Pr(),he){case"{":return M_();case"[":return P_();case'"':return bh();case"-":return yh();default:return he>="0"&&he<="9"?yh():D_()}},_l=(t,n)=>{Qe=String(t),ve=0,he=" ";let e=Ol();if(Pr(),he)throw new SyntaxError(`Syntax error, at ${ve}`);if(typeof n=="function"){let i=(E,d)=>{let R=E[d];if(R&&typeof R=="object")for(let _ of Object.keys(R)){let I=i(R,_);I!==void 0?R[_]=I:delete R[_]}return n.call(E,d,R)};return i({"":e},"")}return e};var Xt,ga,Xi,Dh,Ll=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,v_={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},Ia=t=>(Ll.lastIndex=0,Ll.test(t)?`"${t.replace(Ll,n=>v_[n]??`\\u${n.charCodeAt(0).toString(16).padStart(4,"0")}`)}"`:`"${t}"`),Oa=(t,n,e)=>{let i=Xt,E=n[t];switch(E&&typeof E=="object"&&"toJSON"in E&&typeof E.toJSON=="function"&&(E=E.toJSON(String(t))),typeof Xi=="function"&&(E=Xi.call(n,String(t),E)),typeof E){case"string":return Ia(E);case"number":return isFinite(E)?String(E):"null";case"boolean":return String(E);case"bigint":return Dh?String(E)+"n":String(E);case"object":if(E===null)return"null";if(E instanceof String)return Ia(String(E));if(E instanceof Number)return isFinite(Number(E))?String(Number(E)):"null";if(E instanceof Boolean)return String(E);if(e.has(E))throw new TypeError("circular reference");let d=new Set([...e,E]);if(Xt+=ga,Array.isArray(E)){let I=[];for(let C=0;C<E.length;C++)I.push(Oa(C,E,d)??"null");let S;return I.length===0?S="[]":Xt?S=`[
${Xt}${I.join(`,
${Xt}`)}
${i}]`:S=`[${I.join(",")}]`,Xt=i,S}let R=[];if(Array.isArray(Xi)){for(let I of Xi)if(typeof I=="string"||typeof I=="number"||I instanceof String||I instanceof Number){let S=String(I instanceof Number?String(Number(I)):I),C=Oa(S,E,d);C&&R.push(Ia(S)+(Xt?": ":":")+C)}}else for(let I of Object.keys(E)){let S=Oa(I,E,d);S&&R.push(Ia(I)+(Xt?": ":":")+S)}let _;return R.length===0?_="{}":Xt?_=`{
${Xt}${R.join(`,
${Xt}`)}
${i}}`:_=`{${R.join(",")}}`,Xt=i,_;case"function":case"symbol":case"undefined":return}},Ph=(t,n,e,i)=>(Dh=t,Xt="",typeof i=="number"?ga=" ".repeat(Math.min(i,10)):typeof i=="string"?ga=i.slice(0,10):ga="",Xi=e,Oa("",{"":n},new Set)),x_=Ph.bind(null,!1),Cl=Ph.bind(null,!0);var wl=(t,n,e)=>{if(typeof n=="string"){if(!t.includes(n))throw new Error(`${JSON.stringify(t)} does not include ${JSON.stringify(n)}`);return t.replace(n,e)}else{if(!n.test(t))throw new Error(`${JSON.stringify(t)} does not include /${n.source}/.`);return t.replace(n,e)}},vh=0,xh=1,Uh=3,Gh=4,Bh=6,Fh=7,Hh=8,kh=9,Yh=10,Vh=11,Wh=12,$h=13,Xh=14,qh=15,jh=16,Kh=17,Jh=t=>{let n=[];for(let[e,i]of Object.entries(t))n[+e]=i;return Cl(n)};var Qh=["w:mainStore","g:noKeysFoundV2","g:23514221-0d60-4e30-9d98-746a9ac94497","g:searchDetailsVisibility"],zh=t=>[t.startsWith("g:"),t.slice(2)];var vr=Se(require("vscode"));var U_=(t,n)=>{function e(i,E={}){let d=i;if(Object.hasOwn(n,i)){for(let R of t)if(Object.hasOwn(n[i],R)&&n[i][R]!==""){d=n[i][R];break}}return d.replace(/\{%.*%\}/g,"").replace(/\{\{(-)?([^}]+)\}\}/g,(R,_,I)=>{I=I.trim();let S=Object.hasOwn(E,I)?String(E[I]):R;return _?S:st(S)})}return e},Zh=U_;var tT=Se(require("vscode"));var eT={"<code>File: Compare Active File with Saved</code> is not supported because this extension directly updates SQLite databases by executing SQL queries, bypassing VSCode's undo/redo functionality.":{de:"<code>File: Compare Active File with Saved</code> wird nicht unterst\xFCtzt, da diese Erweiterung SQLite-Datenbanken durch Ausf\xFChren von SQL-Abfragen direkt aktualisiert und dabei die R\xFCckg\xE4ngig/Wiederherstellen-Funktion von VSCode umgeht.",es:"<code>File: Compare Active File with Saved</code> no es compatible porque esta extensi\xF3n actualiza directamente las bases de datos SQLite ejecutando consultas SQL, eludiendo la funcionalidad de deshacer/rehacer de VSCode.",fr:"<code>File: Compare Active File with Saved</code> n'est pas pris en charge car cette extension met \xE0 jour directement les bases de donn\xE9es SQLite en ex\xE9cutant des requ\xEAtes SQL, contournant la fonctionnalit\xE9 d'annulation/r\xE9tablissement de VSCode.",it:"<code>File: Compare Active File with Saved</code> non \xE8 supportato perch\xE9 questa estensione aggiorna direttamente i database SQLite eseguendo query SQL, bypassando la funzionalit\xE0 annulla/ripristina di VSCode.",ja:"<code>File: Compare Active File with Saved</code>\u306F\u3001\u3053\u306E\u62E1\u5F35\u6A5F\u80FD\u304CSQL\u30AF\u30A8\u30EA\u3092\u5B9F\u884C\u3057\u3066SQLite\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u3092\u76F4\u63A5\u66F4\u65B0\u3057\u3001VSCode\u306E\u5143\u306B\u623B\u3059/\u3084\u308A\u76F4\u3059\u6A5F\u80FD\u3092\u30D0\u30A4\u30D1\u30B9\u3059\u308B\u305F\u3081\u3001\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002",ko:"<code>File: Compare Active File with Saved</code>\uB294 \uC774 \uD655\uC7A5 \uAE30\uB2A5\uC774 SQL \uCFFC\uB9AC\uB97C \uC2E4\uD589\uD558\uC5EC SQLite \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uB97C \uC9C1\uC811 \uC5C5\uB370\uC774\uD2B8\uD558\uACE0 VSCode\uC758 \uC2E4\uD589 \uCDE8\uC18C/\uB2E4\uC2DC \uC2E4\uD589 \uAE30\uB2A5\uC744 \uC6B0\uD68C\uD558\uAE30 \uB54C\uBB38\uC5D0 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"<code>File: Compare Active File with Saved</code> n\xE3o \xE9 suportado porque esta extens\xE3o atualiza diretamente os bancos de dados SQLite executando consultas SQL, contornando a funcionalidade desfazer/refazer do VSCode.",ru:"<code>File: Compare Active File with Saved</code> \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F, \u043F\u043E\u0442\u043E\u043C\u0443 \u0447\u0442\u043E \u044D\u0442\u043E \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435 \u043D\u0430\u043F\u0440\u044F\u043C\u0443\u044E \u043E\u0431\u043D\u043E\u0432\u043B\u044F\u0435\u0442 \u0431\u0430\u0437\u044B \u0434\u0430\u043D\u043D\u044B\u0445 SQLite, \u0432\u044B\u043F\u043E\u043B\u043D\u044F\u044F SQL-\u0437\u0430\u043F\u0440\u043E\u0441\u044B, \u043E\u0431\u0445\u043E\u0434\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B \u043E\u0442\u043C\u0435\u043D\u044B/\u043F\u043E\u0432\u0442\u043E\u0440\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0432 VSCode.","zh-CN":"<code>File: Compare Active File with Saved</code>\u4E0D\u53D7\u652F\u6301\uFF0C\u56E0\u4E3A\u6B64\u6269\u5C55\u76F4\u63A5\u901A\u8FC7\u6267\u884C SQL \u67E5\u8BE2\u66F4\u65B0 SQLite \u6570\u636E\u5E93\uFF0C\u7ED5\u8FC7\u4E86 VSCode \u7684\u64A4\u9500/\u91CD\u505A\u529F\u80FD\u3002","zh-TW":"<code>File: Compare Active File with Saved</code>\u4E0D\u53D7\u652F\u6301\uFF0C\u56E0\u70BA\u6B64\u64F4\u5145\u529F\u80FD\u76F4\u63A5\u900F\u904E\u57F7\u884C SQL \u67E5\u8A62\u4F86\u66F4\u65B0 SQLite \u8CC7\u6599\u5EAB\uFF0C\u7E5E\u904E\u4E86 VSCode \u7684\u5FA9\u539F/\u91CD\u505A\u529F\u80FD\u3002"},"<code>{{ featureName }}</code> is not supported.":{de:"<code>{{ featureName }}</code> wird nicht unterst\xFCtzt.",es:"<code>{{ featureName }}</code> no es compatible.",fr:"<code>{{ featureName }}</code> n'est pas pris en charge.",it:"<code>{{ featureName }}</code> non \xE8 supportato.",ja:"<code>{{ featureName }}</code>\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002",ko:"<code>{{ featureName }}</code>\uB294 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"<code>{{ featureName }}</code> n\xE3o \xE9 suportado.",ru:"<code>{{ featureName }}</code> \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F.","zh-CN":"<code>{{ featureName }}</code>\u4E0D\u53D7\u652F\u6301\u3002","zh-TW":"<code>{{ featureName }}</code>\u4E0D\u53D7\u652F\u6301\u3002"},"Canceled{% comparing databases %}":{de:"Abgebrochen",es:"Cancelado",fr:"Annul\xE9",it:"Annullato",ja:"\u30AD\u30E3\u30F3\u30BB\u30EB\u3055\u308C\u307E\u3057\u305F",ko:"\uCDE8\uC18C\uB428","pt-BR":"Cancelado",ru:"\u041E\u0442\u043C\u0435\u043D\u0435\u043D\u043E","zh-CN":"\u5DF2\u53D6\u6D88","zh-TW":"\u5DF2\u53D6\u6D88"},"Comparing databases...":{de:"Datenbanken vergleichen...",es:"Comparando bases de datos...",fr:"Comparaison des bases de donn\xE9es...",it:"Confronto tra database...",ja:"\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u3092\u6BD4\u8F03\u3057\u3066\u3044\u307E\u3059...",ko:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uBE44\uAD50 \uC911...","pt-BR":"Comparando bancos de dados...",ru:"\u0421\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u0435 \u0431\u0430\u0437 \u0434\u0430\u043D\u043D\u044B\u0445...","zh-CN":"\u6B63\u5728\u6BD4\u8F83\u6570\u636E\u5E93...","zh-TW":"\u6B63\u5728\u6BD4\u8F03\u8CC7\u6599\u5EAB..."},"Could not read the metadata{% text in the active file %}. Please specify which database to query{% in the metadata text %}.":{de:"Metadaten konnten nicht gelesen werden. Bitte geben Sie an, welche Datenbank abgefragt werden soll.",es:"No se pudo leer los metadatos. Por favor, especifique qu\xE9 base de datos consultar.",fr:"Impossible de lire les m\xE9tadonn\xE9es. Veuillez pr\xE9ciser quelle base de donn\xE9es interroger.",it:"Impossibile leggere i metadati. Si prega di specificare quale database interrogare.",ja:"\u30E1\u30BF\u30C7\u30FC\u30BF\u3092\u8AAD\u307F\u53D6\u308C\u307E\u305B\u3093\u3067\u3057\u305F\u3002\u554F\u3044\u5408\u308F\u305B\u308B\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"\uBA54\uD0C0\uB370\uC774\uD130\uB97C \uC77D\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4. \uCFFC\uB9AC\uD560 \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uB97C \uC9C0\uC815\uD558\uC2ED\uC2DC\uC624.","pt-BR":"N\xE3o foi poss\xEDvel ler os metadados. Por favor, especifique qual banco de dados consultar.",ru:"\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044C \u043C\u0435\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0435. \u0423\u043A\u0430\u0436\u0438\u0442\u0435, \u043A\u0430\u043A\u0443\u044E \u0431\u0430\u0437\u0443 \u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043B\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u043F\u0440\u043E\u0441\u0438\u0442\u044C.","zh-CN":"\u65E0\u6CD5\u8BFB\u53D6\u5143\u6570\u636E\u3002\u8BF7\u6307\u5B9A\u8981\u67E5\u8BE2\u7684\u6570\u636E\u5E93\u3002","zh-TW":"\u7121\u6CD5\u8B80\u53D6\u5143\u6578\u64DA\u3002\u8ACB\u6307\u5B9A\u8981\u67E5\u8A62\u7684\u6578\u64DA\u5EAB\u3002"},"Create database":{de:"Datenbank erstellen",es:"Crear base de datos",fr:"Cr\xE9er une base de donn\xE9es",it:"Crea database",ja:"\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u3092\u4F5C\u6210",ko:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC0DD\uC131","pt-BR":"Criar banco de dados",ru:"\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0431\u0430\u0437\u0443 \u0434\u0430\u043D\u043D\u044B\u0445","zh-CN":"\u521B\u5EFA\u6570\u636E\u5E93","zh-TW":"\u5EFA\u7ACB\u8CC7\u6599\u5EAB"},"Encountered one of errors that can be resolved by reloading the{% application %} window. Please reload the window and try again.":{de:"Es ist ein Fehler aufgetreten, der durch das erneute Laden des Fensters behoben werden kann. Bitte laden Sie das Fenster neu und versuchen Sie es erneut.",es:"Se encontr\xF3 uno de los errores que se pueden resolver recargando la ventana. Por favor, recargue la ventana e intente de nuevo.",fr:"Une erreur peut \xEAtre r\xE9solue en rechargeant la fen\xEAtre. Veuillez recharger la fen\xEAtre et r\xE9essayer.",it:"Incontrato uno degli errori che pu\xF2 essere risolto ricaricando la finestra. Ricarica la finestra e riprova.",ja:"\u30A6\u30A3\u30F3\u30C9\u30A6\u3092\u30EA\u30ED\u30FC\u30C9\u3059\u308B\u3053\u3068\u3067\u89E3\u6C7A\u3067\u304D\u308B\u30A8\u30E9\u30FC\u306E\u3046\u3061\u306E1\u3064\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002\u30A6\u30A3\u30F3\u30C9\u30A6\u3092\u30EA\u30ED\u30FC\u30C9\u3057\u3066\u3082\u3046\u4E00\u5EA6\u8A66\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"\uCC3D\uC744 \uB2E4\uC2DC \uB85C\uB4DC\uD558\uC5EC \uD574\uACB0\uD560 \uC218 \uC788\uB294 \uC624\uB958 \uC911 \uD558\uB098\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. \uCC3D\uC744 \uB2E4\uC2DC \uB85C\uB4DC\uD558\uACE0 \uB2E4\uC2DC \uC2DC\uB3C4\uD558\uC2ED\uC2DC\uC624.","pt-BR":"Encontrou um dos erros que podem ser resolvidos recarregando a janela. Por favor, recarregue a janela e tente novamente.",ru:"\u041F\u0440\u043E\u0438\u0437\u043E\u0448\u043B\u0430 \u043E\u0434\u043D\u0430 \u0438\u0437 \u043E\u0448\u0438\u0431\u043E\u043A, \u043A\u043E\u0442\u043E\u0440\u0443\u044E \u043C\u043E\u0436\u043D\u043E \u0438\u0441\u043F\u0440\u0430\u0432\u0438\u0442\u044C, \u043F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0432 \u043E\u043A\u043D\u043E. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u043E\u043A\u043D\u043E \u0438 \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u0441\u043D\u043E\u0432\u0430.","zh-CN":"\u9047\u5230\u4E86\u53EF\u4EE5\u901A\u8FC7\u91CD\u65B0\u52A0\u8F7D\u7A97\u53E3\u89E3\u51B3\u7684\u9519\u8BEF\u4E4B\u4E00\u3002\u8BF7\u91CD\u65B0\u52A0\u8F7D\u7A97\u53E3\u5E76\u91CD\u8BD5\u3002","zh-TW":"\u9047\u5230\u4E86\u53EF\u4EE5\u901A\u904E\u91CD\u65B0\u52A0\u8F09\u7A97\u53E3\u89E3\u6C7A\u7684\u932F\u8AA4\u4E4B\u4E00\u3002\u8ACB\u91CD\u65B0\u52A0\u8F09\u7A97\u53E3\u4E26\u91CD\u8A66\u3002"},"Enter Values for Placeholders":{de:"Werte f\xFCr Platzhalter eingeben",es:"Ingrese valores para los marcadores de posici\xF3n",fr:"Entrez les valeurs pour les param\xE8tres",it:"Inserisci i valori per i segnaposto",ja:"\u30D7\u30EC\u30FC\u30B9\u30DB\u30EB\u30C0\u30FC\u306B\u5BFE\u3059\u308B\u5024\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044",ko:"\uC790\uB9AC \uD45C\uC2DC\uC790\uC5D0 \uB300\uD55C \uAC12\uC744 \uC785\uB825\uD558\uC2ED\uC2DC\uC624","pt-BR":"Digite valores para os placeholders",ru:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0434\u043B\u044F \u0437\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u0435\u0439","zh-CN":"\u8F93\u5165\u5360\u4F4D\u7B26\u7684\u503C","zh-TW":"\u8F38\u5165\u5360\u4F4D\u7B26\u7684\u503C"},"Error: Incorrect syntax. Use `DELETE FROM table_name` instead of `DELETE * FROM table_name`.":{de:"Fehler: Falsche Syntax. Verwenden Sie `DELETE FROM Tabellenname` anstelle von `DELETE * FROM Tabellenname`.",es:"Error: Sintaxis incorrecta. Usa `DELETE FROM nombre_tabla` en lugar de `DELETE * FROM nombre_tabla`.",fr:"Erreur : Syntaxe incorrecte. Utilisez `DELETE FROM nom_table` au lieu de `DELETE * FROM nom_table`.",it:"Errore: Sintassi errata. Usa `DELETE FROM nome_tabella` invece di `DELETE * FROM nome_tabella`.",ja:"\u30A8\u30E9\u30FC: \u6587\u6CD5\u304C\u4E0D\u6B63\u3067\u3059\u3002`DELETE * FROM \u30C6\u30FC\u30D6\u30EB\u540D`\u3067\u306F\u306A\u304F`DELETE FROM \u30C6\u30FC\u30D6\u30EB\u540D`\u3092\u4F7F\u7528\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"\uC624\uB958: \uBB38\uBC95\uC774 \uC798\uBABB\uB418\uC5C8\uC2B5\uB2C8\uB2E4. `DELETE * FROM \uD14C\uC774\uBE14_\uC774\uB984` \uB300\uC2E0 `DELETE FROM \uD14C\uC774\uBE14_\uC774\uB984`\uC744 \uC0AC\uC6A9\uD558\uC138\uC694.","pt-BR":"Erro: Sintaxe incorreta. Use `DELETE FROM nome_tabela` em vez de `DELETE * FROM nome_tabela`.",ru:"\u041E\u0448\u0438\u0431\u043A\u0430: \u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0441\u0438\u043D\u0442\u0430\u043A\u0441\u0438\u0441. \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 `DELETE FROM \u0438\u043C\u044F_\u0442\u0430\u0431\u043B\u0438\u0446\u044B` \u0432\u043C\u0435\u0441\u0442\u043E `DELETE * FROM \u0438\u043C\u044F_\u0442\u0430\u0431\u043B\u0438\u0446\u044B`.","zh-CN":"\u9519\u8BEF\uFF1A\u8BED\u6CD5\u4E0D\u6B63\u786E\u3002\u8BF7\u4F7F\u7528 `DELETE FROM \u8868\u540D` \u800C\u4E0D\u662F `DELETE * FROM \u8868\u540D`\u3002","zh-TW":"\u932F\u8AA4\uFF1A\u8A9E\u6CD5\u4E0D\u6B63\u78BA\u3002\u8ACB\u4F7F\u7528 `DELETE FROM \u8868\u540D` \u800C\u4E0D\u662F `DELETE * FROM \u8868\u540D`\u3002"},"Examples: 'text', 123, x'ffff', NULL":{de:"Beispiele: 'text', 123, x'ffff', NULL",es:"Ejemplos: 'text', 123, x'ffff', NULL",fr:"Exemples : 'text', 123, x'ffff', NULL",it:"Esempi: 'text', 123, x'ffff', NULL",ja:"\u4F8B: 'text', 123, x'ffff', NULL",ko:"\uC608: 'text', 123, x'ffff', NULL","pt-BR":"Exemplos: 'text', 123, x'ffff', NULL",ru:"\u041F\u0440\u0438\u043C\u0435\u0440\u044B: 'text', 123, x'ffff', NULL","zh-CN":"\u793A\u4F8B\uFF1A'text', 123, x'ffff', NULL","zh-TW":"\u7BC4\u4F8B\uFF1A'text', 123, x'ffff', NULL"},"Executing the queries...":{de:"Ausf\xFChrung der Abfragen...",es:"Ejecutando las consultas...",fr:"Ex\xE9cution des requ\xEAtes...",it:"Esecuzione delle query...",ja:"\u30AF\u30A8\u30EA\u3092\u5B9F\u884C\u3057\u3066\u3044\u307E\u3059...",ko:"\uCFFC\uB9AC \uC2E4\uD589 \uC911...","pt-BR":"Executando as consultas...",ru:"\u0412\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u043E\u0432...","zh-CN":"\u6B63\u5728\u6267\u884C\u67E5\u8BE2...","zh-TW":"\u6B63\u5728\u57F7\u884C\u67E5\u8A62..."},"Executing the query...":{de:"Ausf\xFChrung der Abfrage...",es:"Ejecutando la consulta...",fr:"Ex\xE9cution de la requ\xEAte...",it:"Esecuzione della query...",ja:"\u30AF\u30A8\u30EA\u3092\u5B9F\u884C\u3057\u3066\u3044\u307E\u3059...",ko:"\uCFFC\uB9AC \uC2E4\uD589 \uC911...","pt-BR":"Executando a consulta...",ru:"\u0412\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435 \u0437\u0430\u043F\u0440\u043E\u0441\u0430...","zh-CN":"\u6B63\u5728\u6267\u884C\u67E5\u8BE2...","zh-TW":"\u6B63\u5728\u57F7\u884C\u67E5\u8A62..."},"Export All Tables":{de:"Alle Tabellen exportieren",es:"Exportar todas las tablas",fr:"Exporter toutes les tables",it:"Esporta tutte le tabelle",ja:"\u3059\u3079\u3066\u306E\u30C6\u30FC\u30D6\u30EB\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8",ko:"\uBAA8\uB4E0 \uD14C\uC774\uBE14 \uB0B4\uBCF4\uB0B4\uAE30","pt-BR":"Exportar todas as tabelas",ru:"\u042D\u043A\u0441\u043F\u043E\u0440\u0442 \u0432\u0441\u0435\u0445 \u0442\u0430\u0431\u043B\u0438\u0446","zh-CN":"\u5BFC\u51FA\u6240\u6709\u8868","zh-TW":"\u532F\u51FA\u6240\u6709\u8868"},"Export Current Table":{de:"Aktuelle Tabelle exportieren",es:"Exportar tabla actual",fr:"Exporter la table actuelle",it:"Esporta tabella corrente",ja:"\u73FE\u5728\u306E\u30C6\u30FC\u30D6\u30EB\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8",ko:"\uD604\uC7AC \uD14C\uC774\uBE14 \uB0B4\uBCF4\uB0B4\uAE30","pt-BR":"Exportar tabela atual",ru:"\u042D\u043A\u0441\u043F\u043E\u0440\u0442 \u0442\u0435\u043A\u0443\u0449\u0435\u0439 \u0442\u0430\u0431\u043B\u0438\u0446\u044B","zh-CN":"\u5BFC\u51FA\u5F53\u524D\u8868","zh-TW":"\u532F\u51FA\u7576\u524D\u8868"},"Exporting the table...":{de:"Die Tabelle wird exportiert...",es:"Exportando la tabla...",fr:"Exportation de la table...",it:"Esportazione della tabella...",ja:"\u30C6\u30FC\u30D6\u30EB\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u3066\u3044\u307E\u3059...",ko:"\uD14C\uC774\uBE14\uC744 \uB0B4\uBCF4\uB0B4\uB294 \uC911...","pt-BR":"Exportando a tabela...",ru:"\u042D\u043A\u0441\u043F\u043E\u0440\u0442 \u0442\u0430\u0431\u043B\u0438\u0446\u044B...","zh-CN":"\u6B63\u5728\u5BFC\u51FA\u8868...","zh-TW":"\u6B63\u5728\u532F\u51FA\u8868..."},"Failed to connect to the database file {{- uri}}.":{de:"Verbindung zur Datenbankdatei {{- uri}} fehlgeschlagen.",es:"No se pudo conectar al archivo de base de datos {{- uri}}.",fr:"\xC9chec de la connexion au fichier de base de donn\xE9es {{- uri}}.",it:"Connessione al file di database {{- uri}} non riuscita.",ja:"\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u30D5\u30A1\u30A4\u30EB {{- uri}} \u306B\u63A5\u7D9A\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002",ko:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uD30C\uC77C {{- uri}} \uC5D0 \uC5F0\uACB0\uD558\uC9C0 \uBABB\uD588\uC2B5\uB2C8\uB2E4.","pt-BR":"Falha ao conectar ao arquivo de banco de dados {{- uri}}.",ru:"\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0441\u044F \u043A \u0444\u0430\u0439\u043B\u0443 \u0431\u0430\u0437\u044B \u0434\u0430\u043D\u043D\u044B\u0445 {{- uri}}.","zh-CN":"\u8FDE\u63A5\u6570\u636E\u5E93\u6587\u4EF6 {{- uri}} \u5931\u8D25\u3002","zh-TW":"\u9023\u63A5\u6578\u64DA\u5EAB\u6A94\u6848 {{- uri}} \u5931\u6557\u3002"},"Failed to load {{- vcRuntimeLink}}. Please try reinstalling it by downloading and running {{- exeLink}} (you can find other versions in {{- vcRedistUrl}}). If it does not work, please report the issue on GitHub.":{de:"Fehler beim Laden von {{- vcRuntimeLink}}. Bitte versuchen Sie, es neu zu installieren, indem Sie {{- exeLink}} herunterladen und ausf\xFChren (andere Versionen finden Sie unter {{- vcRedistUrl}}). Wenn das nicht funktioniert, melden Sie bitte das Problem auf GitHub.",es:"Error al cargar {{- vcRuntimeLink}}. Por favor, intenta reinstalarlo descargando y ejecutando {{- exeLink}} (puedes encontrar otras versiones en {{- vcRedistUrl}}). Si no funciona, por favor, reporta el problema en GitHub.",fr:"\xC9chec du chargement de {{- vcRuntimeLink}}. Veuillez essayer de le r\xE9installer en t\xE9l\xE9chargeant et en ex\xE9cutant {{- exeLink}} (vous pouvez trouver d'autres versions sur {{- vcRedistUrl}}). Si cela ne fonctionne pas, veuillez signaler le probl\xE8me sur GitHub.",it:"Impossibile caricare {{- vcRuntimeLink}}. Si prega di provare a reinstallarlo scaricando ed eseguendo {{- exeLink}} (puoi trovare altre versioni in {{- vcRedistUrl}}). Se non funziona, si prega di segnalare il problema su GitHub.",ja:"{{- vcRuntimeLink}}\u306E\u8AAD\u307F\u8FBC\u307F\u306B\u5931\u6557\u3057\u307E\u3057\u305F\u3002{{- exeLink}}\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9\u3057\u3066\u5B9F\u884C\u3059\u308B\u3053\u3068\u3067\u518D\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3057\u3066\u304F\u3060\u3055\u3044\uFF08\u4ED6\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u306F{{- vcRedistUrl}}\u3067\u898B\u3064\u3051\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\uFF09\u3002\u305D\u308C\u3067\u3082\u6A5F\u80FD\u3057\u306A\u3044\u5834\u5408\u306F\u3001GitHub\u4E0A\u3067\u554F\u984C\u3092\u5831\u544A\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"{{- vcRuntimeLink}}\uB97C \uBD88\uB7EC\uC624\uC9C0 \uBABB\uD588\uC2B5\uB2C8\uB2E4. {{- exeLink}}\uC744 \uB2E4\uC6B4\uB85C\uB4DC\uD558\uC5EC \uC2E4\uD589\uD558\uC5EC \uC7AC\uC124\uCE58\uB97C \uC2DC\uB3C4\uD574 \uBCF4\uC138\uC694(\uB2E4\uB978 \uBC84\uC804\uC740 {{- vcRedistUrl}}\uC5D0\uC11C \uCC3E\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4). \uC791\uB3D9\uD558\uC9C0 \uC54A\uC73C\uBA74 GitHub\uC5D0 \uBB38\uC81C\uB97C \uBCF4\uACE0\uD574 \uC8FC\uC138\uC694.","pt-BR":"Falha ao carregar {{- vcRuntimeLink}}. Por favor, tente reinstal\xE1-lo baixando e executando {{- exeLink}} (voc\xEA pode encontrar outras vers\xF5es em {{- vcRedistUrl}}). Se n\xE3o funcionar, por favor, relate o problema no GitHub.",ru:"\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C {{- vcRuntimeLink}}. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 \u043F\u0435\u0440\u0435\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0435\u0433\u043E, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0432 \u0438 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0432 {{- exeLink}} (\u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043C\u043E\u0436\u043D\u043E \u043D\u0430\u0439\u0442\u0438 \u043D\u0430 {{- vcRedistUrl}}). \u0415\u0441\u043B\u0438 \u044D\u0442\u043E \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0441\u043E\u043E\u0431\u0449\u0438\u0442\u0435 \u043E \u043F\u0440\u043E\u0431\u043B\u0435\u043C\u0435 \u043D\u0430 GitHub.","zh-CN":"\u52A0\u8F7D {{- vcRuntimeLink}} \u5931\u8D25\u3002\u8BF7\u5C1D\u8BD5\u901A\u8FC7\u4E0B\u8F7D\u5E76\u8FD0\u884C {{- exeLink}} \u6765\u91CD\u65B0\u5B89\u88C5\u5B83\uFF08\u4F60\u53EF\u4EE5\u5728 {{- vcRedistUrl}} \u4E2D\u627E\u5230\u5176\u4ED6\u7248\u672C\uFF09\u3002\u5982\u679C\u4E0D\u8D77\u4F5C\u7528\uFF0C\u8BF7\u5728 GitHub \u4E0A\u62A5\u544A\u95EE\u9898\u3002","zh-TW":"\u7121\u6CD5\u8F09\u5165 {{- vcRuntimeLink}}\u3002\u8ACB\u5617\u8A66\u901A\u904E\u4E0B\u8F09\u4E26\u904B\u884C {{- exeLink}} \u4F86\u91CD\u65B0\u5B89\u88DD\uFF08\u4F60\u53EF\u4EE5\u5728 {{- vcRedistUrl}} \u4E2D\u627E\u5230\u5176\u4ED6\u7248\u672C\uFF09\u3002\u5982\u679C\u7121\u6548\uFF0C\u8ACB\u5728 GitHub \u4E0A\u5831\u544A\u554F\u984C\u3002"},"Go to row {{- rowNumber}}.":{de:"Gehe zu Zeile {{- rowNumber}}.",es:"Ve a la fila {{- rowNumber}}.",fr:"Aller \xE0 la ligne {{- rowNumber}}.",it:"Vai alla riga {{- rowNumber}}.",ja:"{{- rowNumber}}\u884C\u76EE\u306B\u79FB\u52D5\u3057\u307E\u3059\u3002",ko:"{{- rowNumber}} \uD589\uC73C\uB85C \uC774\uB3D9\uD558\uC2ED\uC2DC\uC624.","pt-BR":"V\xE1 para a linha {{- rowNumber}}.",ru:"\u041F\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043A \u0441\u0442\u0440\u043E\u043A\u0435 {{- rowNumber}}.","zh-CN":"\u8F6C\u5230\u884C{{- rowNumber}}\u3002","zh-TW":"\u8F49\u5230\u884C{{- rowNumber}}\u3002"},"Go to table {{- tableName}} and row {{- rowNumber}}.":{de:"Gehe zu Tabelle {{- tableName}} und Zeile {{- rowNumber}}.",es:"Ve a la tabla {{- tableName}} y a la fila {{- rowNumber}}.",fr:"Aller \xE0 la table {{- tableName}} et \xE0 la ligne {{- rowNumber}}.",it:"Vai alla tabella {{- tableName}} e alla riga {{- rowNumber}}.",ja:"{{- tableName}}\u306E\u30C6\u30FC\u30D6\u30EB\u3068{{- rowNumber}}\u884C\u76EE\u306B\u79FB\u52D5\u3057\u307E\u3059\u3002",ko:"{{- tableName}} \uD14C\uC774\uBE14 \uBC0F {{- rowNumber}} \uD589\uC73C\uB85C \uC774\uB3D9\uD558\uC2ED\uC2DC\uC624.","pt-BR":"V\xE1 para a tabela {{- tableName}} e a linha {{- rowNumber}}.",ru:"\u041F\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043A \u0442\u0430\u0431\u043B\u0438\u0446\u0435 {{- tableName}} \u0438 \u0441\u0442\u0440\u043E\u043A\u0435 {{- rowNumber}}.","zh-CN":"\u8F6C\u5230{{- tableName}}\u8868\u548C{{- rowNumber}}\u884C\u3002","zh-TW":"\u8F49\u5230{{- tableName}}\u8868\u548C{{- rowNumber}}\u884C\u3002"},"Go to table {{- tableName}}.":{de:"Gehe zu Tabelle {{- tableName}}.",es:"Ve a la tabla {{- tableName}}.",fr:"Aller \xE0 la table {{- tableName}}.",it:"Vai alla tabella {{- tableName}}.",ja:"{{- tableName}}\u306E\u30C6\u30FC\u30D6\u30EB\u306B\u79FB\u52D5\u3057\u307E\u3059\u3002",ko:"{{- tableName}} \uD14C\uC774\uBE14\uB85C \uC774\uB3D9\uD558\uC2ED\uC2DC\uC624.","pt-BR":"V\xE1 para a tabela {{- tableName}}.",ru:"\u041F\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043A \u0442\u0430\u0431\u043B\u0438\u0446\u0435 {{- tableName}}.","zh-CN":"\u8F6C\u5230{{- tableName}}\u8868\u3002","zh-TW":"\u8F49\u5230{{- tableName}}\u8868\u3002"},'Hover over "sqlite3-editor.ui.conditionalFormatting" for usage.':{de:'"sqlite3-editor.ui.conditionalFormatting" \xFCberfahren, um die Anwendung zu sehen.',es:'Pase el cursor sobre "sqlite3-editor.ui.conditionalFormatting" para ver su uso.',fr:'Survolez "sqlite3-editor.ui.conditionalFormatting" pour voir son utilisation.',it:`Passa il mouse su "sqlite3-editor.ui.conditionalFormatting" per vederne l'uso.`,ja:'"sqlite3-editor.ui.conditionalFormatting"\u306B\u30AB\u30FC\u30BD\u30EB\u3092\u5408\u308F\u305B\u3066\u4F7F\u7528\u65B9\u6CD5\u3092\u78BA\u8A8D\u3067\u304D\u307E\u3059\u3002',ko:'"sqlite3-editor.ui.conditionalFormatting"\uC704\uC5D0 \uB9C8\uC6B0\uC2A4\uB97C \uC62C\uB824 \uC0AC\uC6A9\uBC29\uBC95\uC744 \uD655\uC778\uD558\uC138\uC694.',"pt-BR":'Passe o mouse sobre "sqlite3-editor.ui.conditionalFormatting" para ver o uso.',ru:'\u041D\u0430\u0432\u0435\u0434\u0438\u0442\u0435 \u043A\u0443\u0440\u0441\u043E\u0440 \u043D\u0430 "sqlite3-editor.ui.conditionalFormatting" \u0447\u0442\u043E\u0431\u044B \u0443\u0432\u0438\u0434\u0435\u0442\u044C, \u043A\u0430\u043A \u044D\u0442\u043E \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u0442\u0441\u044F.',"zh-CN":"\u60AC\u505C\u5728\u201Csqlite3-editor.ui.conditionalFormatting\u201D\u4E0A\u67E5\u770B\u4F7F\u7528\u65B9\u6CD5\u3002","zh-TW":'\u5C07\u6ED1\u9F20\u6307\u5411"sqlite3-editor.ui.conditionalFormatting"\u4EE5\u67E5\u770B\u4F7F\u7528\u65B9\u5F0F\u3002'},"Importing the table...":{de:"Die Tabelle wird importiert...",es:"Importando la tabla...",fr:"Importation de la table...",it:"Importazione della tabella...",ja:"\u30C6\u30FC\u30D6\u30EB\u3092\u30A4\u30F3\u30DD\u30FC\u30C8\u3057\u3066\u3044\u307E\u3059...",ko:"\uD14C\uC774\uBE14\uC744 \uAC00\uC838\uC624\uB294 \uC911...","pt-BR":"Importando a tabela...",ru:"\u0418\u043C\u043F\u043E\u0440\u0442 \u0442\u0430\u0431\u043B\u0438\u0446\u044B...","zh-CN":"\u6B63\u5728\u5BFC\u5165\u8868...","zh-TW":"\u6B63\u5728\u532F\u5165\u8868..."},"Invalid number of values.":{de:"Ung\xFCltige Anzahl von Werten.",es:"N\xFAmero inv\xE1lido de valores.",fr:"Nombre de valeurs invalide.",it:"Numero di valori non valido.",ja:"\u5024\u306E\u6570\u304C\u7121\u52B9\u3067\u3059\u3002",ko:"\uAC12\uC758 \uC218\uAC00 \uC798\uBABB\uB418\uC5C8\uC2B5\uB2C8\uB2E4.","pt-BR":"N\xFAmero inv\xE1lido de valores.",ru:"\u041D\u0435\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u043E\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439.","zh-CN":"\u65E0\u6548\u7684\u503C\u6570\u91CF\u3002","zh-TW":"\u7121\u6548\u7684\u503C\u6578\u91CF\u3002"},"Loading resources":{de:"Ressourcen laden",es:"Cargando recursos",fr:"Chargement des ressources",it:"Caricamento risorse",ja:"\u30EA\u30BD\u30FC\u30B9\u3092\u8AAD\u307F\u8FBC\u307F\u4E2D",ko:"\uB9AC\uC18C\uC2A4 \uB85C\uB529 \uC911","pt-BR":"Carregando recursos",ru:"\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0432","zh-CN":"\u6B63\u5728\u52A0\u8F7D\u8D44\u6E90","zh-TW":"\u6B63\u5728\u8F09\u5165\u8CC7\u6E90"},"No access to the database: {{rawErrorMessage}}":{de:"Kein Zugriff auf die Datenbank: {{rawErrorMessage}}",es:"No se puede acceder a la base de datos: {{rawErrorMessage}}",fr:"Pas d'acc\xE8s \xE0 la base de donn\xE9es : {{rawErrorMessage}}",it:"Nessun accesso al database: {{rawErrorMessage}}",ja:"\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u306B\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\uFF1A{{rawErrorMessage}}",ko:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC5D0 \uC561\uC138\uC2A4\uD560 \uC218 \uC5C6\uC74C: {{rawErrorMessage}}","pt-BR":"Sem acesso ao banco de dados: {{rawErrorMessage}}",ru:"\u041D\u0435\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u043A \u0431\u0430\u0437\u0435 \u0434\u0430\u043D\u043D\u044B\u0445: {{rawErrorMessage}}","zh-CN":"\u65E0\u6CD5\u8BBF\u95EE\u6570\u636E\u5E93\uFF1A{{rawErrorMessage}}","zh-TW":"\u7121\u6CD5\u5B58\u53D6\u8CC7\u6599\u5EAB\uFF1A{{rawErrorMessage}}"},"No database connection was found.":{de:"Keine Datenbankverbindung gefunden.",es:"No se encontr\xF3 ninguna conexi\xF3n a la base de datos.",fr:"Aucune connexion \xE0 la base de donn\xE9es trouv\xE9e.",it:"Nessuna connessione al database trovata.",ja:"\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u63A5\u7D9A\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F\u3002",ko:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.","pt-BR":"Nenhuma conex\xE3o com o banco de dados foi encontrada.",ru:"\u041F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043A \u0431\u0430\u0437\u0435 \u0434\u0430\u043D\u043D\u044B\u0445 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E.","zh-CN":"\u672A\u627E\u5230\u6570\u636E\u5E93\u8FDE\u63A5\u3002","zh-TW":"\u672A\u627E\u5230\u8CC7\u6599\u5EAB\u9023\u63A5\u3002"},"No file system provider was found for the resource <code>{{ uri }}</code>.":{de:"Kein Dateisystemanbieter wurde f\xFCr die Ressource <code>{{ uri }}</code> gefunden.",es:"No se encontr\xF3 un proveedor de sistema de archivos para el recurso <code>{{ uri }}</code>.",fr:"Aucun fournisseur de syst\xE8me de fichiers n'a \xE9t\xE9 trouv\xE9 pour la ressource <code>{{ uri }}</code>.",it:"Nessun provider del file system \xE8 stato trovato per la risorsa <code>{{ uri }}</code>.",ja:"\u30EA\u30BD\u30FC\u30B9 <code>{{ uri }}</code> \u306E\u30D5\u30A1\u30A4\u30EB\u30B7\u30B9\u30C6\u30E0\u30D7\u30ED\u30D0\u30A4\u30C0\u30FC\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F\u3002",ko:"\uB9AC\uC18C\uC2A4 <code>{{ uri }}</code>\uC5D0 \uB300\uD55C \uD30C\uC77C \uC2DC\uC2A4\uD15C \uACF5\uAE09\uC790\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.","pt-BR":"Nenhum provedor de sistema de arquivos foi encontrado para o recurso <code>{{ uri }}</code>.",ru:"\u0414\u043B\u044F \u0440\u0435\u0441\u0443\u0440\u0441\u0430 <code>{{ uri }}</code> \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D \u043F\u043E\u0441\u0442\u0430\u0432\u0449\u0438\u043A \u0444\u0430\u0439\u043B\u043E\u0432\u043E\u0439 \u0441\u0438\u0441\u0442\u0435\u043C\u044B.","zh-CN":"\u672A\u627E\u5230\u8D44\u6E90 <code>{{ uri }}</code> \u7684\u6587\u4EF6\u7CFB\u7EDF\u63D0\u4F9B\u7A0B\u5E8F\u3002","zh-TW":"\u627E\u4E0D\u5230\u8CC7\u6E90 <code>{{ uri }}</code> \u7684\u6A94\u6848\u7CFB\u7D71\u63D0\u4F9B\u8005\u3002"},"No statement{% to be executed %} on the cursor.":{de:"Keine Anweisung am Cursor.",es:"No hay ninguna declaraci\xF3n en el cursor.",fr:"Aucune instruction sur le curseur.",it:"Nessuna istruzione sul cursore.",ja:"\u30AB\u30FC\u30BD\u30EB\u4E0A\u306B\u5B9F\u884C\u3059\u308B\u30B9\u30C6\u30FC\u30C8\u30E1\u30F3\u30C8\u304C\u3042\u308A\u307E\u305B\u3093\u3002",ko:"\uCEE4\uC11C\uC5D0 \uC2E4\uD589\uD560 \uBB38\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.","pt-BR":"Nenhuma instru\xE7\xE3o no cursor.",ru:"\u041D\u0435\u0442 \u0438\u043D\u0441\u0442\u0440\u0443\u043A\u0446\u0438\u0438 \u043D\u0430 \u043A\u0443\u0440\u0441\u043E\u0440\u0435.","zh-CN":"\u5149\u6807\u4E0A\u6CA1\u6709\u8BED\u53E5\u3002","zh-TW":"\u5149\u6A19\u4E0A\u6C92\u6709\u8A9E\u53E5\u3002"},"No text selected.":{de:"Kein Text ausgew\xE4hlt.",es:"No se ha seleccionado texto.",fr:"Aucun texte s\xE9lectionn\xE9.",it:"Nessun testo selezionato.",ja:"\u30C6\u30AD\u30B9\u30C8\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002",ko:"\uC120\uD0DD\uB41C \uD14D\uC2A4\uD2B8\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4.","pt-BR":"Nenhum texto selecionado.",ru:"\u0422\u0435\u043A\u0441\u0442 \u043D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D.","zh-CN":"\u672A\u9009\u62E9\u6587\u672C\u3002","zh-TW":"\u672A\u9078\u64C7\u6587\u672C\u3002"},"Open {{- tableName}}":{de:"\xD6ffnen {{- tableName}}",es:"Abrir {{- tableName}}",fr:"Ouvrir {{- tableName}}",it:"Apri {{- tableName}}",ja:"{{- tableName}} \u3092\u958B\u304F",ko:"{{- tableName}} \uC5F4\uAE30","pt-BR":"Abrir {{- tableName}}",ru:"\u041E\u0442\u043A\u0440\u044B\u0442\u044C {{- tableName}}","zh-CN":"\u6253\u5F00 {{- tableName}}","zh-TW":"\u6253\u958B {{- tableName}}"},"Placeholders: {{- list }}":{de:"Platzhalter: {{- list }}",es:"Marcadores de posici\xF3n: {{- list }}",fr:"Param\xE8tres: {{- list }}",it:"Segnaposto: {{- list }}",ja:"\u30D7\u30EC\u30FC\u30B9\u30DB\u30EB\u30C0\u30FC: {{- list }}",ko:"\uC790\uB9AC \uD45C\uC2DC\uC790: {{- list }}","pt-BR":"Placeholders: {{- list }}",ru:"\u0417\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u0438: {{- list }}","zh-CN":"\u5360\u4F4D\u7B26: {{- list }}","zh-TW":"\u5360\u4F4D\u7B26: {{- list }}"},"Please reopen the editor tab to apply the configuration changes.":{de:"Bitte \xF6ffnen Sie die Editor-Registerkarte erneut, um die Konfigurations\xE4nderungen anzuwenden.",es:"Por favor, vuelva a abrir la pesta\xF1a del editor para aplicar los cambios en la configuraci\xF3n.",fr:"Veuillezrouvrir l'onglet de l'\xE9diteur pour appliquer les modifications de configuration.",it:"Si prega di riaprire la scheda dell'editor per applicare le modifiche alla configurazione.",ja:"\u8A2D\u5B9A\u306E\u5909\u66F4\u3092\u9069\u7528\u3059\u308B\u305F\u3081\u306B\u3001\u30A8\u30C7\u30A3\u30BF\u30FC\u30BF\u30D6\u3092\u958B\u304D\u76F4\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"\uAD6C\uC131 \uBCC0\uACBD \uC0AC\uD56D\uC744 \uC801\uC6A9\uD558\uB824\uBA74 \uD3B8\uC9D1\uAE30 \uD0ED\uC744 \uB2E4\uC2DC \uC5F4\uC5B4 \uC8FC\uC138\uC694.","pt-BR":"Por favor, reabra a guia do editor para aplicar as altera\xE7\xF5es de configura\xE7\xE3o.",ru:"\u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0432\u043A\u043B\u0430\u0434\u043A\u0443 \u0440\u0435\u0434\u0430\u043A\u0442\u043E\u0440\u0430 \u0441\u043D\u043E\u0432\u0430, \u0447\u0442\u043E\u0431\u044B \u043F\u0440\u0438\u043C\u0435\u043D\u0438\u0442\u044C \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438.","zh-CN":"\u8BF7\u91CD\u65B0\u6253\u5F00\u7F16\u8F91\u5668\u9009\u9879\u5361\u4EE5\u5E94\u7528\u914D\u7F6E\u66F4\u6539\u3002","zh-TW":"\u8ACB\u91CD\u65B0\u6253\u958B\u7DE8\u8F2F\u5668\u9078\u9805\u5361\u4EE5\u61C9\u7528\u914D\u7F6E\u66F4\u6539\u3002"},"Reopen in a text editor":{de:"In Texteditor erneut \xF6ffnen",es:"Reabrir en un editor de texto",fr:"R\xE9ouvrir dans un \xE9diteur de texte",it:"Riapri in un editor di testo",ja:"\u30C6\u30AD\u30B9\u30C8\u30A8\u30C7\u30A3\u30BF\u3067\u958B\u304D\u76F4\u3059",ko:"\uD14D\uC2A4\uD2B8 \uD3B8\uC9D1\uAE30\uC5D0\uC11C \uB2E4\uC2DC \uC5F4\uAE30","pt-BR":"Reabrir em um editor de texto",ru:"\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0437\u0430\u043D\u043E\u0432\u043E \u0432 \u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u043C \u0440\u0435\u0434\u0430\u043A\u0442\u043E\u0440\u0435","zh-CN":"\u5728\u6587\u672C\u7F16\u8F91\u5668\u4E2D\u91CD\u65B0\u6253\u5F00","zh-TW":"\u5728\u6587\u5B57\u7DE8\u8F2F\u5668\u4E2D\u91CD\u65B0\u958B\u555F"},"Run-time loadable extensions are not supported in environments using musl. If you have experience with musl-based Linux and Rust, please consider submitting a pull request to update the build script at https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml to resolve this issue.":{de:"Laufzeitladbare Erweiterungen werden in musl-basierten Umgebungen nicht unterst\xFCtzt. Wenn Sie Erfahrung mit musl-basiertem Linux und Rust haben, erw\xE4gen Sie bitte, einen Pull-Request zu senden, um das Build-Skript unter https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml zu aktualisieren und dieses Problem zu beheben.",es:"Las extensiones cargables en tiempo de ejecuci\xF3n no son compatibles en entornos que utilizan musl. Si tienes experiencia con Linux basado en musl y Rust, considera enviar un pull request para actualizar el script de construcci\xF3n en https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml para resolver este problema.",fr:"Les extensions chargeables \xE0 l'ex\xE9cution ne sont pas prises en charge dans les environnements utilisant musl. Si vous avez de l'exp\xE9rience avec Linux bas\xE9 sur musl et Rust, veuillez envisager de soumettre une pull request pour mettre \xE0 jour le script de build sur https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml pour r\xE9soudre ce probl\xE8me.",it:"Le estensioni caricabili a runtime non sono supportate in ambienti che utilizzano musl. Se hai esperienza con Linux basato su musl e Rust, considera di inviare una pull request per aggiornare lo script di build su https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml per risolvere questo problema.",ja:"musl\u3092\u4F7F\u7528\u3059\u308B\u74B0\u5883\u3067\u306F\u30E9\u30F3\u30BF\u30A4\u30E0\u3067\u30ED\u30FC\u30C9\u53EF\u80FD\u306A\u62E1\u5F35\u6A5F\u80FD\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002musl\u30D9\u30FC\u30B9\u306ELinux\u3068Rust\u306B\u7D4C\u9A13\u304C\u3042\u308B\u5834\u5408\u306F\u3001\u3053\u306E\u554F\u984C\u3092\u89E3\u6C7A\u3059\u308B\u305F\u3081\u306B https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml \u306E\u30D3\u30EB\u30C9\u30B9\u30AF\u30EA\u30D7\u30C8\u3092\u66F4\u65B0\u3059\u308B\u30D7\u30EB\u30EA\u30AF\u30A8\u30B9\u30C8\u3092\u9001\u308B\u3053\u3068\u3092\u691C\u8A0E\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"musl\uC744 \uC0AC\uC6A9\uD558\uB294 \uD658\uACBD\uC5D0\uC11C\uB294 \uB7F0\uD0C0\uC784 \uB85C\uB4DC \uAC00\uB2A5\uD55C \uD655\uC7A5 \uAE30\uB2A5\uC774 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. musl \uAE30\uBC18 Linux\uC640 Rust\uC5D0 \uACBD\uD5D8\uC774 \uC788\uB2E4\uBA74, \uC774 \uBB38\uC81C\uB97C \uD574\uACB0\uD558\uAE30 \uC704\uD574 https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml\uC5D0\uC11C \uBE4C\uB4DC \uC2A4\uD06C\uB9BD\uD2B8\uB97C \uC5C5\uB370\uC774\uD2B8\uD558\uB294 \uD480 \uB9AC\uD018\uC2A4\uD2B8\uB97C \uC81C\uCD9C\uD558\uB294 \uAC83\uC744 \uACE0\uB824\uD574 \uC8FC\uC138\uC694.","pt-BR":"Extens\xF5es carreg\xE1veis em tempo de execu\xE7\xE3o n\xE3o s\xE3o suportadas em ambientes que utilizam musl. Se voc\xEA tem experi\xEAncia com Linux baseado em musl e Rust, considere enviar um pull request para atualizar o script de build em https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml para resolver este problema.",ru:"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043C\u044B\u0435 \u0432\u043E \u0432\u0440\u0435\u043C\u044F \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F, \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044E\u0442\u0441\u044F \u0432 \u0441\u0440\u0435\u0434\u0430\u0445, \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044E\u0449\u0438\u0445 musl. \u0415\u0441\u043B\u0438 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044C \u043E\u043F\u044B\u0442 \u0440\u0430\u0431\u043E\u0442\u044B \u0441 Linux \u043D\u0430 \u0431\u0430\u0437\u0435 musl \u0438 Rust, \u043F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0440\u0430\u0441\u0441\u043C\u043E\u0442\u0440\u0438\u0442\u0435 \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u044C \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0438 pull request \u0434\u043B\u044F \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u0441\u043A\u0440\u0438\u043F\u0442\u0430 \u0441\u0431\u043E\u0440\u043A\u0438 \u043F\u043E \u0430\u0434\u0440\u0435\u0441\u0443 https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml \u0434\u043B\u044F \u0440\u0435\u0448\u0435\u043D\u0438\u044F \u044D\u0442\u043E\u0439 \u043F\u0440\u043E\u0431\u043B\u0435\u043C\u044B.","zh-CN":"\u5728\u4F7F\u7528 musl \u7684\u73AF\u5883\u4E2D\u4E0D\u652F\u6301\u8FD0\u884C\u65F6\u53EF\u52A0\u8F7D\u7684\u6269\u5C55\u3002\u5982\u679C\u60A8\u6709 musl \u57FA\u7840\u7684 Linux \u548C Rust \u7684\u7ECF\u9A8C\uFF0C\u8BF7\u8003\u8651\u63D0\u4EA4\u4E00\u4E2A pull request \u6765\u66F4\u65B0\u4F4D\u4E8E https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml \u7684\u6784\u5EFA\u811A\u672C\u4EE5\u89E3\u51B3\u6B64\u95EE\u9898\u3002","zh-TW":"\u5728\u4F7F\u7528 musl \u7684\u74B0\u5883\u4E2D\u4E0D\u652F\u63F4\u57F7\u884C\u6642\u53EF\u8F09\u5165\u7684\u64F4\u5145\u529F\u80FD\u3002\u5982\u679C\u60A8\u6709 musl \u57FA\u790E\u7684 Linux \u548C Rust \u7684\u7D93\u9A57\uFF0C\u8ACB\u8003\u616E\u63D0\u4EA4\u4E00\u500B pull request \u4F86\u66F4\u65B0\u4F4D\u65BC https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml \u7684\u5EFA\u7F6E\u8173\u672C\u4EE5\u89E3\u6C7A\u6B64\u554F\u984C\u3002"},"SQLite 2 databases are not supported as it has no new releases since 2005. The following command may work for converting your database to SQLite 3. <code>{{shellCommand}}</code>":{de:"SQLite 2-Datenbanken werden nicht unterst\xFCtzt, da es seit 2005 keine neuen Ver\xF6ffentlichungen gibt. Der folgende Befehl k\xF6nnte zum Konvertieren Ihrer Datenbank in SQLite 3 funktionieren. <code>{{shellCommand}}</code>",es:"Las bases de datos SQLite 2 no son compatibles ya que no han tenido nuevas versiones desde 2005. El siguiente comando podr\xEDa funcionar para convertir su base de datos a SQLite 3. <code>{{shellCommand}}</code>",fr:"Les bases de donn\xE9es SQLite 2 ne sont pas prises en charge car il n'y a pas eu de nouvelles versions depuis 2005. La commande suivante pourrait fonctionner pour convertir votre base de donn\xE9es en SQLite 3. <code>{{shellCommand}}</code>",it:"I database SQLite 2 non sono supportati in quanto non ci sono state nuove versioni dal 2005. Il seguente comando potrebbe funzionare per convertire il tuo database in SQLite 3. <code>{{shellCommand}}</code>",ja:"2005\u5E74\u4EE5\u964D\u306E\u65B0\u3057\u3044\u30EA\u30EA\u30FC\u30B9\u304C\u306A\u3044\u305F\u3081\u3001SQLite 2\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002\u6B21\u306E\u30B3\u30DE\u30F3\u30C9\u3067\u3001\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u3092SQLite 3\u306B\u5909\u63DB\u3067\u304D\u308B\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002<code>{{shellCommand}}</code>",ko:"2005\uB144 \uC774\uD6C4 \uC0C8\uB85C\uC6B4 \uB9B4\uB9AC\uC2A4\uAC00 \uC5C6\uAE30 \uB54C\uBB38\uC5D0 SQLite 2 \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uB294 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. \uB2E4\uC74C \uBA85\uB839\uC5B4\uAC00 \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uB97C SQLite 3\uC73C\uB85C \uBCC0\uD658\uD558\uB294 \uB370 \uB3C4\uC6C0\uC774 \uB420 \uC218 \uC788\uC2B5\uB2C8\uB2E4. <code>{{shellCommand}}</code>","pt-BR":"Bancos de dados SQLite 2 n\xE3o s\xE3o suportados, pois n\xE3o h\xE1 novos lan\xE7amentos desde 2005. O seguinte comando pode funcionar para converter seu banco de dados para SQLite 3. <code>{{shellCommand}}</code>",ru:"\u0411\u0430\u0437\u044B \u0434\u0430\u043D\u043D\u044B\u0445 SQLite 2 \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044E\u0442\u0441\u044F, \u0442\u0430\u043A \u043A\u0430\u043A \u0441 2005 \u0433\u043E\u0434\u0430 \u043D\u0435 \u0431\u044B\u043B\u043E \u043D\u043E\u0432\u044B\u0445 \u0432\u0435\u0440\u0441\u0438\u0439. \u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u043A\u043E\u043C\u0430\u043D\u0434\u0430 \u043C\u043E\u0436\u0435\u0442 \u043F\u043E\u043C\u043E\u0447\u044C \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u0442\u044C \u0432\u0430\u0448\u0443 \u0431\u0430\u0437\u0443 \u0434\u0430\u043D\u043D\u044B\u0445 \u0432 SQLite 3. <code>{{shellCommand}}</code>","zh-CN":"\u4E0D\u652F\u6301 SQLite 2 \u6570\u636E\u5E93\uFF0C\u56E0\u4E3A\u81EA 2005 \u5E74\u4EE5\u6765\u6CA1\u6709\u65B0\u7248\u672C\u3002\u4EE5\u4E0B\u547D\u4EE4\u53EF\u80FD\u9002\u7528\u4E8E\u5C06\u60A8\u7684\u6570\u636E\u5E93\u8F6C\u6362\u4E3A SQLite 3\u3002 <code>{{shellCommand}}</code>","zh-TW":"SQLite 2 \u8CC7\u6599\u5EAB\u4E0D\u53D7\u652F\u6301\uFF0C\u56E0\u70BA\u81EA 2005 \u5E74\u4EE5\u4F86\u6C92\u6709\u65B0\u7248\u672C\u3002\u4EE5\u4E0B\u547D\u4EE4\u53EF\u80FD\u9069\u7528\u65BC\u5C07\u60A8\u7684\u8CC7\u6599\u5EAB\u8F49\u63DB\u70BA SQLite 3\u3002 <code>{{shellCommand}}</code>"},"Show error details":{de:"Fehlerdetails anzeigen",es:"Mostrar detalles del error",fr:"Afficher les d\xE9tails de l'erreur",it:"Mostra dettagli errore",ja:"\u30A8\u30E9\u30FC\u306E\u8A73\u7D30\u3092\u8868\u793A",ko:"\uC624\uB958 \uC138\uBD80\uC815\uBCF4 \uD45C\uC2DC","pt-BR":"Mostrar detalhes do erro",ru:"\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0434\u0435\u0442\u0430\u043B\u0438 \u043E\u0448\u0438\u0431\u043A\u0438","zh-CN":"\u663E\u793A\u9519\u8BEF\u8BE6\u60C5","zh-TW":"\u986F\u793A\u932F\u8AA4\u8A73\u7D30\u8CC7\u8A0A"},"Syntax error.":{de:"Syntaxfehler.",es:"Error de sintaxis.",fr:"Erreur de syntaxe.",it:"Errore di sintassi.",ja:"\u69CB\u6587\u30A8\u30E9\u30FC",ko:"\uAD6C\uBB38 \uC624\uB958\uC785\uB2C8\uB2E4.","pt-BR":"Erro de sintaxe.",ru:"\u0421\u0438\u043D\u0442\u0430\u043A\u0441\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u043E\u0448\u0438\u0431\u043A\u0430.","zh-CN":"\u8BED\u6CD5\u9519\u8BEF\u3002","zh-TW":"\u8A9E\u6CD5\u932F\u8AA4\u3002"},"The SQL query is committed when you save the contents in the editor.":{de:"Die SQL-Abfrage wird best\xE4tigt, wenn Sie die Inhalte im Editor speichern.",es:"La consulta SQL se confirma cuando guardas los contenidos en el editor.",fr:"La requ\xEAte SQL est valid\xE9e lorsque vous enregistrez les contenus dans l'\xE9diteur.",it:"La query SQL viene confermata quando salvi i contenuti nell'editor.",ja:"\u30A8\u30C7\u30A3\u30BF\u30FC\u306E\u5185\u5BB9\u3092\u4FDD\u5B58\u3059\u308B\u3068\u3001SQL\u30AF\u30A8\u30EA\u304C\u30B3\u30DF\u30C3\u30C8\u3055\u308C\u307E\u3059\u3002",ko:"\uD3B8\uC9D1\uAE30\uC5D0\uC11C \uB0B4\uC6A9\uC744 \uC800\uC7A5\uD558\uBA74 SQL \uCFFC\uB9AC\uAC00 \uCEE4\uBC0B\uB429\uB2C8\uB2E4\u3002","pt-BR":"A consulta SQL \xE9 confirmada quando voc\xEA salva os conte\xFAdos no editor.",ru:"SQL-\u0437\u0430\u043F\u0440\u043E\u0441 \u043F\u043E\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442\u0441\u044F, \u043A\u043E\u0433\u0434\u0430 \u0432\u044B \u0441\u043E\u0445\u0440\u0430\u043D\u044F\u0435\u0442\u0435 \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u043C\u043E\u0435 \u0432 \u0440\u0435\u0434\u0430\u043A\u0442\u043E\u0440\u0435.","zh-CN":"\u5F53\u60A8\u5728\u7F16\u8F91\u5668\u4E2D\u4FDD\u5B58\u5185\u5BB9\u65F6\uFF0CSQL \u67E5\u8BE2\u88AB\u63D0\u4EA4\u3002","zh-TW":"\u7576\u60A8\u5728\u7DE8\u8F2F\u5668\u4E2D\u5132\u5B58\u5167\u5BB9\u6642\uFF0CSQL \u67E5\u8A62\u88AB\u63D0\u4EA4\u3002"},"The database's iNode has been changed. An attempt was made to reconnect to the new iNode, but the following error occurred: {{err}}":{de:"Das iNode der Datenbank wurde ge\xE4ndert. Es wurde versucht, eine Verbindung zum neuen iNode herzustellen, aber der folgende Fehler ist aufgetreten: {{err}}",es:"El iNode de la base de datos ha cambiado. Se intent\xF3 reconectar con el nuevo iNode, pero ocurri\xF3 el siguiente error: {{err}}",fr:"Le iNode de la base de donn\xE9es a \xE9t\xE9 modifi\xE9. Une tentative de reconnexion au nouveau iNode a \xE9t\xE9 faite, mais l'erreur suivante est survenue : {{err}}",it:"Il iNode del database \xE8 stato modificato. \xC8 stato fatto un tentativo di riconnettere al nuovo iNode, ma si \xE8 verificato il seguente errore: {{err}}",ja:"\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u306EiNode\u304C\u5909\u66F4\u3055\u308C\u307E\u3057\u305F\u3002\u65B0\u3057\u3044iNode\u306B\u518D\u63A5\u7D9A\u3059\u308B\u8A66\u307F\u304C\u884C\u308F\u308C\u307E\u3057\u305F\u304C\u3001\u6B21\u306E\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: {{err}}",ko:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC758 iNode\uAC00 \uBCC0\uACBD\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uC0C8 iNode\uC5D0 \uB2E4\uC2DC \uC5F0\uACB0\uD558\uB824\uACE0 \uC2DC\uB3C4\uD588\uC9C0\uB9CC \uB2E4\uC74C\uACFC \uAC19\uC740 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: {{err}}","pt-BR":"O iNode do banco de dados foi alterado. Foi tentado reconectar ao novo iNode, mas ocorreu o seguinte erro: {{err}}",ru:"iNode \u0431\u0430\u0437\u044B \u0434\u0430\u043D\u043D\u044B\u0445 \u0431\u044B\u043B \u0438\u0437\u043C\u0435\u043D\u0435\u043D. \u0411\u044B\u043B\u0430 \u043F\u043E\u043F\u044B\u0442\u043A\u0430 \u043F\u0435\u0440\u0435\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0441\u044F \u043A \u043D\u043E\u0432\u043E\u043C\u0443 iNode, \u043D\u043E \u043F\u0440\u043E\u0438\u0437\u043E\u0448\u043B\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0430\u044F \u043E\u0448\u0438\u0431\u043A\u0430: {{err}}","zh-CN":"\u6570\u636E\u5E93\u7684 iNode \u5DF2\u66F4\u6539\u3002\u5C1D\u8BD5\u91CD\u65B0\u8FDE\u63A5\u5230\u65B0\u7684 iNode\uFF0C\u4F46\u51FA\u73B0\u4EE5\u4E0B\u9519\u8BEF: {{err}}","zh-TW":"\u8CC7\u6599\u5EAB\u7684 iNode \u5DF2\u88AB\u66F4\u6539\u3002\u5617\u8A66\u91CD\u65B0\u9023\u63A5\u5230\u65B0\u7684 iNode\uFF0C\u4F46\u767C\u751F\u4EE5\u4E0B\u932F\u8AA4: {{err}}"},"The directory '{{- filepath}}' does not exist.":{de:"Das Verzeichnis '{{- filepath}}' existiert nicht.",es:"El directorio '{{- filepath}}' no existe.",fr:"Le r\xE9pertoire '{{- filepath}}' n'existe pas.",it:"La directory '{{- filepath}}' non esiste.",ja:"\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA '{{- filepath}}' \u306F\u5B58\u5728\u3057\u307E\u305B\u3093\u3002",ko:"'{{- filepath}}' \uB514\uB809\uD130\uB9AC\uAC00 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"O diret\xF3rio '{{- filepath}}' n\xE3o existe.",ru:"\u0414\u0438\u0440\u0435\u043A\u0442\u043E\u0440\u0438\u044F '{{- filepath}}' \u043D\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.","zh-CN":"\u76EE\u5F55 '{{- filepath}}' \u4E0D\u5B58\u5728\u3002","zh-TW":"\u76EE\u9304 '{{- filepath}}' \u4E0D\u5B58\u5728\u3002"},"The executable file {{- filepath }} is missing, which is needed to run the extension. If you have antivirus software, please check if it has deleted the file. Alternatively, you can compile the executable file from the source. Please refer to the 'Using User-Compiled SQLite' section in the README of this extension for instructions.":{de:"Die ausf\xFChrbare Datei {{- filepath }} fehlt, die zum Ausf\xFChren der Erweiterung ben\xF6tigt wird. Falls Sie eine Antivirensoftware haben, \xFCberpr\xFCfen Sie bitte, ob diese die Datei gel\xF6scht hat. Alternativ k\xF6nnen Sie die ausf\xFChrbare Datei aus dem Quellcode kompilieren. Bitte beachten Sie den Abschnitt 'Verwendung von benutzerkompiliertem SQLite' im README dieser Erweiterung f\xFCr Anweisungen.",es:"Falta el archivo ejecutable {{- filepath }}, que es necesario para ejecutar la extensi\xF3n. Si tienes un software antivirus, por favor verifica si ha borrado el archivo. Alternativamente, puedes compilar el archivo ejecutable desde la fuente. Por favor, consulta la secci\xF3n 'Usando SQLite Compilado por el Usuario' en el README de esta extensi\xF3n para obtener instrucciones.",fr:"Le fichier ex\xE9cutable {{- filepath }} manque, ce qui est n\xE9cessaire pour ex\xE9cuter l'extension. Si vous avez un logiciel antivirus, veuillez v\xE9rifier s'il a supprim\xE9 le fichier. Sinon, vous pouvez compiler le fichier ex\xE9cutable \xE0 partir de la source. Veuillez vous r\xE9f\xE9rer \xE0 la section 'Utilisation de SQLite compil\xE9 par l'utilisateur' dans le README de cette extension pour les instructions.",it:"Il file eseguibile {{- filepath }} manca, il quale \xE8 necessario per eseguire l'estensione. Se hai un software antivirus, per favore controlla se ha eliminato il file. In alternativa, puoi compilare il file eseguibile dalla sorgente. Per favore, fai riferimento alla sezione 'Utilizzo di SQLite Compilato dall'Utente' nel README di questa estensione per le istruzioni.",ja:"\u5B9F\u884C\u53EF\u80FD\u30D5\u30A1\u30A4\u30EB {{- filepath }} \u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002\u3053\u306E\u30D5\u30A1\u30A4\u30EB\u306F\u62E1\u5F35\u6A5F\u80FD\u3092\u5B9F\u884C\u3059\u308B\u305F\u3081\u306B\u5FC5\u8981\u3067\u3059\u3002\u30A2\u30F3\u30C1\u30A6\u30A4\u30EB\u30B9\u30BD\u30D5\u30C8\u30A6\u30A7\u30A2\u3092\u304A\u4F7F\u3044\u306E\u5834\u5408\u306F\u3001\u30D5\u30A1\u30A4\u30EB\u304C\u524A\u9664\u3055\u308C\u3066\u3044\u306A\u3044\u304B\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u307E\u305F\u3001\u30BD\u30FC\u30B9\u304B\u3089\u5B9F\u884C\u53EF\u80FD\u30D5\u30A1\u30A4\u30EB\u3092\u30B3\u30F3\u30D1\u30A4\u30EB\u3059\u308B\u3053\u3068\u3082\u3067\u304D\u307E\u3059\u3002\u3053\u306E\u62E1\u5F35\u6A5F\u80FD\u306EREADME\u306B\u3042\u308B '\u30E6\u30FC\u30B6\u30FC\u306B\u3088\u308BSQLite\u306E\u30B3\u30F3\u30D1\u30A4\u30EB\u306E\u4F7F\u7528' \u30BB\u30AF\u30B7\u30E7\u30F3\u3092\u53C2\u7167\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"\uC2E4\uD589 \uD30C\uC77C {{- filepath }}\uC774(\uAC00) \uB204\uB77D\uB418\uC5C8\uC73C\uBA70, \uC774\uB294 \uD655\uC7A5 \uAE30\uB2A5\uC744 \uC2E4\uD589\uD558\uB294 \uB370 \uD544\uC694\uD569\uB2C8\uB2E4. \uBC14\uC774\uB7EC\uC2A4 \uBC31\uC2E0 \uC18C\uD504\uD2B8\uC6E8\uC5B4\uAC00 \uC788\uC73C\uBA74 \uD30C\uC77C\uC774 \uC0AD\uC81C\uB418\uC5C8\uB294\uC9C0 \uD655\uC778\uD558\uC2ED\uC2DC\uC624. \uB610\uB294 \uC18C\uC2A4\uC5D0\uC11C \uC2E4\uD589 \uD30C\uC77C\uC744 \uCEF4\uD30C\uC77C\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4. \uC774 \uD655\uC7A5\uC758 README\uC5D0\uC11C '\uC0AC\uC6A9\uC790\uAC00 \uCEF4\uD30C\uC77C\uD55C SQLite \uC0AC\uC6A9\uD558\uAE30' \uC139\uC158\uC744 \uCC38\uC870\uD558\uC2ED\uC2DC\uC624.","pt-BR":"O arquivo execut\xE1vel {{- filepath }} est\xE1 faltando, o que \xE9 necess\xE1rio para executar a extens\xE3o. Se voc\xEA tem um software antiv\xEDrus, verifique se ele deletou o arquivo. Alternativamente, voc\xEA pode compilar o arquivo execut\xE1vel a partir da fonte. Por favor, consulte a se\xE7\xE3o 'Usando SQLite Compilado pelo Usu\xE1rio' no README desta extens\xE3o para instru\xE7\xF5es.",ru:"\u041E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u0441\u043F\u043E\u043B\u043D\u044F\u0435\u043C\u044B\u0439 \u0444\u0430\u0439\u043B {{- filepath }}, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C \u0434\u043B\u044F \u0440\u0430\u0431\u043E\u0442\u044B \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F. \u0415\u0441\u043B\u0438 \u0443 \u0432\u0430\u0441 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u043E \u0430\u043D\u0442\u0438\u0432\u0438\u0440\u0443\u0441\u043D\u043E\u0435 \u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u043D\u043E\u0435 \u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0435\u043D\u0438\u0435, \u043F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435, \u043D\u0435 \u0431\u044B\u043B \u043B\u0438 \u0444\u0430\u0439\u043B \u0443\u0434\u0430\u043B\u0435\u043D. \u0412 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u043B\u044C\u0442\u0435\u0440\u043D\u0430\u0442\u0438\u0432\u044B \u0432\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0441\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0438\u0441\u043F\u043E\u043B\u043D\u044F\u0435\u043C\u044B\u0439 \u0444\u0430\u0439\u043B \u0438\u0437 \u0438\u0441\u0445\u043E\u0434\u043D\u043E\u0433\u043E \u043A\u043E\u0434\u0430. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0441\u043C\u043E\u0442\u0440\u0438\u0442\u0435 \u0440\u0430\u0437\u0434\u0435\u043B '\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435 SQLite, \u0441\u043A\u043E\u043C\u043F\u0438\u043B\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0433\u043E \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u043C' \u0432 README \u044D\u0442\u043E\u0433\u043E \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F \u0434\u043B\u044F \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u044F \u0438\u043D\u0441\u0442\u0440\u0443\u043A\u0446\u0438\u0439.","zh-CN":"\u7F3A\u5C11\u6267\u884C\u6587\u4EF6 {{- filepath }}\uFF0C\u8BE5\u6587\u4EF6\u662F\u8FD0\u884C\u6269\u5C55\u6240\u5FC5\u9700\u7684\u3002\u5982\u679C\u60A8\u6709\u9632\u75C5\u6BD2\u8F6F\u4EF6\uFF0C\u8BF7\u68C0\u67E5\u5B83\u662F\u5426\u5DF2\u5220\u9664\u8BE5\u6587\u4EF6\u3002\u6216\u8005\uFF0C\u60A8\u53EF\u4EE5\u4ECE\u6E90\u4EE3\u7801\u7F16\u8BD1\u6267\u884C\u6587\u4EF6\u3002\u8BF7\u53C2\u9605\u6B64\u6269\u5C55\u7684README\u4E2D\u7684'\u4F7F\u7528\u7528\u6237\u7F16\u8BD1\u7684SQLite'\u90E8\u5206\u4EE5\u83B7\u53D6\u8BF4\u660E\u3002","zh-TW":"\u7F3A\u5C11\u53EF\u57F7\u884C\u6A94\u6848 {{- filepath }}\uFF0C\u8A72\u6A94\u6848\u662F\u904B\u884C\u64F4\u5C55\u6240\u5FC5\u9700\u7684\u3002\u5982\u679C\u60A8\u6709\u9632\u6BD2\u8EDF\u9AD4\uFF0C\u8ACB\u6AA2\u67E5\u5B83\u662F\u5426\u522A\u9664\u4E86\u8A72\u6A94\u6848\u3002\u6216\u8005\uFF0C\u60A8\u53EF\u4EE5\u5F9E\u539F\u59CB\u78BC\u7DE8\u8B6F\u57F7\u884C\u6A94\u3002\u8ACB\u53C3\u95B1\u6B64\u64F4\u5C55\u7684README\u4E2D\u7684'\u4F7F\u7528\u7528\u6236\u7DE8\u8B6F\u7684SQLite'\u90E8\u5206\u4EE5\u7372\u53D6\u8AAA\u660E\u3002"},"The file does not contain a recognizable file magic. It may be an unsupported file format or an encrypted database.":{de:"Die Datei enth\xE4lt keine erkennbare Datei-Magie. Es kann sich um ein nicht unterst\xFCtztes Dateiformat oder eine verschl\xFCsselte Datenbank handeln.",es:"El archivo no contiene un encabezado de archivo reconocible. Puede ser un formato de archivo no compatible o una base de datos cifrada.",fr:"Le fichier ne contient pas de signature de fichier reconnaissable. Il peut s'agir d'un format de fichier non pris en charge ou d'une base de donn\xE9es chiffr\xE9e.",it:"Il file non contiene un'identificazione del file riconoscibile. Potrebbe essere un formato di file non supportato o un database crittografato.",ja:"\u30D5\u30A1\u30A4\u30EB\u306B\u8A8D\u8B58\u53EF\u80FD\u306A\u30D5\u30A1\u30A4\u30EB\u30DE\u30B8\u30C3\u30AF\u304C\u542B\u307E\u308C\u3066\u3044\u307E\u305B\u3093\u3002\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u306A\u3044\u30D5\u30A1\u30A4\u30EB\u5F62\u5F0F\u3084\u6697\u53F7\u5316\u3055\u308C\u305F\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u306E\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002",ko:"\uD30C\uC77C\uC5D0 \uC778\uC2DD\uD560 \uC218 \uC788\uB294 \uD30C\uC77C \uB9E4\uC9C1\uC774 \uD3EC\uD568\uB418\uC5B4 \uC788\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uB294 \uD30C\uC77C \uD615\uC2DD\uC774\uAC70\uB098 \uC554\uD638\uD654\uB41C \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC77C \uC218 \uC788\uC2B5\uB2C8\uB2E4.","pt-BR":"O arquivo n\xE3o cont\xE9m um cabe\xE7alho de arquivo reconhec\xEDvel. Pode ser um formato de arquivo n\xE3o suportado ou um banco de dados criptografado.",ru:"\u0424\u0430\u0439\u043B \u043D\u0435 \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0430\u0441\u043F\u043E\u0437\u043D \u0430\u0432\u0430\u0435\u043C\u043E\u0433\u043E \u043C\u0430\u0433\u0438\u0447\u0435\u0441\u043A\u043E\u0433\u043E \u0447\u0438\u0441\u043B\u0430. \u0412\u043E\u0437\u043C\u043E\u0436\u043D\u043E, \u044D\u0442\u043E \u043D\u0435\u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043C\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u0444\u0430\u0439\u043B\u0430 \u0438\u043B\u0438 \u0437\u0430\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u043D\u0430\u044F \u0431\u0430\u0437\u0430 \u0434\u0430\u043D\u043D\u044B\u0445.","zh-CN":"\u8BE5\u6587\u4EF6\u4E2D\u4E0D\u5305\u542B\u53EF\u8BC6\u522B\u7684\u6587\u4EF6\u9B54\u6570\u3002\u5B83\u53EF\u80FD\u662F\u4E0D\u53D7\u652F\u6301\u7684\u6587\u4EF6\u683C\u5F0F\u6216\u52A0\u5BC6\u7684\u6570\u636E\u5E93\u3002","zh-TW":"\u8A72\u6A94\u6848\u4E0D\u5305\u542B\u53EF\u8B58\u5225\u7684\u6A94\u6848\u9B54\u8853\u78BC\u3002\u5B83\u53EF\u80FD\u662F\u4E0D\u53D7\u652F\u6301\u7684\u6A94\u6848\u683C\u5F0F\u6216\u52A0\u5BC6\u7684\u8CC7\u6599\u5EAB\u3002"},"The file specified in the configuration sqlite3-editor.executablePath ({{- executablePath }}) does not exist.":{de:"Die in der Konfiguration sqlite3-editor.executablePath ({{- executablePath }}) angegebene Datei existiert nicht.",es:"El archivo especificado en la configuraci\xF3n sqlite3-editor.executablePath ({{- executablePath }}) no existe.",fr:"Le fichier sp\xE9cifi\xE9 dans la configuration sqlite3-editor.executablePath ({{- executablePath }}) n'existe pas.",it:"Il file specificato nella configurazione sqlite3-editor.executablePath ({{- executablePath }}) non esiste.",ja:"\u8A2D\u5B9A\u306Esqlite3-editor.executablePath ({{- executablePath }})\u3067\u6307\u5B9A\u3055\u308C\u305F\u30D5\u30A1\u30A4\u30EB\u306F\u5B58\u5728\u3057\u307E\u305B\u3093\u3002",ko:"\uAD6C\uC131 sqlite3-editor.executablePath ({{- executablePath }})\uC5D0 \uC9C0\uC815\uB41C \uD30C\uC77C\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"O arquivo especificado na configura\xE7\xE3o sqlite3-editor.executablePath ({{- executablePath }}) n\xE3o existe.",ru:"\u0424\u0430\u0439\u043B, \u0443\u043A\u0430\u0437\u0430\u043D\u043D\u044B\u0439 \u0432 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 sqlite3-editor.executablePath ({{- executablePath }}), \u043D\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.","zh-CN":"\u914D\u7F6E\u4E2D\u6307\u5B9A\u7684\u6587\u4EF6 sqlite3-editor.executablePath ({{- executablePath }}) \u4E0D\u5B58\u5728\u3002","zh-TW":"\u914D\u7F6E\u4E2D\u6307\u5B9A\u7684\u6A94\u6848 sqlite3-editor.executablePath ({{- executablePath }}) \u4E0D\u5B58\u5728\u3002"},"The file {{- databasePath}} does not exist.":{de:"Die Datei {{- databasePath}} existiert nicht.",es:"El archivo {{- databasePath}} no existe.",fr:"Le fichier {{- databasePath}} n'existe pas.",it:"Il file {{- databasePath}} non esiste.",ja:"\u30D5\u30A1\u30A4\u30EB {{- databasePath}} \u304C\u5B58\u5728\u3057\u307E\u305B\u3093\u3002",ko:"{{- databasePath}} \uD30C\uC77C\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"O arquivo {{- databasePath}} n\xE3o existe.",ru:"\u0424\u0430\u0439\u043B {{- databasePath}} \u043D\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.","zh-CN":"{{- databasePath}} \u6587\u4EF6\u4E0D\u5B58\u5728\u3002","zh-TW":"{{- databasePath}} \u6A94\u6848\u4E0D\u5B58\u5728\u3002"},"The file {{- filepath}} is readonly.":{de:"Die Datei {{- filepath}} ist schreibgesch\xFCtzt.",es:"El archivo {{- filepath}} es de solo lectura.",fr:"Le fichier {{- filepath}} est en lecture seule.",it:"Il file {{- filepath}} \xE8 di sola lettura.",ja:"\u30D5\u30A1\u30A4\u30EB {{- filepath}} \u306F\u8AAD\u307F\u53D6\u308A\u5C02\u7528\u3067\u3059\u3002",ko:"\uD30C\uC77C {{- filepath}}\uC740(\uB294) \uC77D\uAE30 \uC804\uC6A9\uC785\uB2C8\uB2E4.","pt-BR":"O arquivo {{- filepath}} \xE9 somente leitura.",ru:"\u0424\u0430\u0439\u043B {{- filepath}} \u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D \u0442\u043E\u043B\u044C\u043A\u043E \u0434\u043B\u044F \u0447\u0442\u0435\u043D\u0438\u044F.","zh-CN":"\u6587\u4EF6 {{- filepath}} \u4E3A\u53EA\u8BFB\u3002","zh-TW":"\u6A94\u6848 {{- filepath}} \u70BA\u552F\u8B80\u3002"},"The file {{- file}} already exists.":{de:"Die Datei {{- file}} existiert bereits.",es:"El archivo {{- file}} ya existe.",fr:"Le fichier {{- file}} existe d\xE9j\xE0.",it:"Il file {{- file}} esiste gi\xE0.",ja:"\u30D5\u30A1\u30A4\u30EB {{- file}} \u306F\u3059\u3067\u306B\u5B58\u5728\u3057\u307E\u3059\u3002",ko:"{{- file}} \uD30C\uC77C\uC774 \uC774\uBBF8 \uC874\uC7AC\uD569\uB2C8\uB2E4.","pt-BR":"O arquivo {{- file}} j\xE1 existe.",ru:"\u0424\u0430\u0439\u043B {{- file}} \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.","zh-CN":"\u6587\u4EF6 {{- file}} \u5DF2\u5B58\u5728\u3002","zh-TW":"\u6A94\u6848 {{- file}} \u5DF2\u5B58\u5728\u3002"},"The file {{- file}} does not exist.":{de:"Die Datei {{- file}} existiert nicht.",es:"El archivo {{- file}} no existe.",fr:"Le fichier {{- file}} n'existe pas.",it:"Il file {{- file}} non esiste.",ja:"\u30D5\u30A1\u30A4\u30EB {{- file}} \u304C\u5B58\u5728\u3057\u307E\u305B\u3093\u3002",ko:"{{- file}} \uD30C\uC77C\uC774 \uC874\uC7AC\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"O arquivo {{- file}} n\xE3o existe.",ru:"\u0424\u0430\u0439\u043B {{- file}} \u043D\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442.","zh-CN":"{{- file}} \u6587\u4EF6\u4E0D\u5B58\u5728\u3002","zh-TW":"{{- file}} \u6A94\u6848\u4E0D\u5B58\u5728\u3002"},'The resolved value of the configuration "sqlite3-editor.comment.filepath" must end with ".md"':{de:'Der aufgel\xF6ste Wert der Konfiguration "sqlite3-editor.comment.filepath" muss auf ".md" enden',es:'El valor resuelto de la configuraci\xF3n "sqlite3-editor.comment.filepath" debe terminar con ".md"',fr:'La valeur r\xE9solue de la configuration "sqlite3-editor.comment.filepath" doit se terminer par ".md"',it:'Il valore risolto della configurazione "sqlite3-editor.comment.filepath" deve terminare con ".md"',ja:'\u8A2D\u5B9A "sqlite3-editor.comment.filepath" \u306E\u89E3\u6C7A\u5024\u306F ".md" \u3067\u7D42\u308F\u3089\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093',ko:'"sqlite3-editor.comment.filepath" \uAD6C\uC131\uC758 \uD574\uACB0\uB41C \uAC12\uC740 ".md"\uB85C \uB05D\uB098\uC57C \uD569\uB2C8\uB2E4',"pt-BR":'O valor resolvido da configura\xE7\xE3o "sqlite3-editor.comment.filepath" deve terminar com ".md"',ru:'\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 "sqlite3-editor.comment.filepath" \u0434\u043E\u043B\u0436\u043D\u043E \u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0442\u044C\u0441\u044F \u043D\u0430 ".md"',"zh-CN":'\u914D\u7F6E "sqlite3-editor.comment.filepath" \u7684\u89E3\u6790\u503C\u5FC5\u987B\u4EE5 ".md" \u7ED3\u5C3E',"zh-TW":'\u914D\u7F6E "sqlite3-editor.comment.filepath" \u7684\u89E3\u6790\u503C\u5FC5\u9808\u4EE5 ".md" \u7D50\u5C3E'},'The value of the configuration "sqlite3-editor.comment.filepath" starts with "${fileWorkspaceFolder}/", but no workspace folder is currently opened.':{de:'Der Wert der Konfiguration "sqlite3-editor.comment.filepath" beginnt mit "${fileWorkspaceFolder}/", aber derzeit ist kein Arbeitsbereichsordner ge\xF6ffnet.',es:'El valor de la configuraci\xF3n "sqlite3-editor.comment.filepath" comienza con "${fileWorkspaceFolder}/", pero actualmente no hay una carpeta de espacio de trabajo abierta.',fr:'La valeur de la configuration "sqlite3-editor.comment.filepath" commence par "${fileWorkspaceFolder}/", mais aucun dossier de workspace n\'est actuellement ouvert.',it:'Il valore della configurazione "sqlite3-editor.comment.filepath" inizia con "${fileWorkspaceFolder}/", ma attualmente non \xE8 aperta nessuna cartella di lavoro.',ja:'\u8A2D\u5B9A "sqlite3-editor.comment.filepath" \u306E\u5148\u982D\u306B "${fileWorkspaceFolder}/" \u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u3059\u304C\u3001\u73FE\u5728\u30EF\u30FC\u30AF\u30B9\u30DA\u30FC\u30B9\u30D5\u30A9\u30EB\u30C0\u30FC\u304C\u958B\u304B\u308C\u3066\u3044\u307E\u305B\u3093\u3002',ko:'"sqlite3-editor.comment.filepath" \uC124\uC815\uAC12\uC774 "${fileWorkspaceFolder}/"\uB85C \uC2DC\uC791\uD558\uC9C0\uB9CC, \uD604\uC7AC \uC791\uC5C5 \uACF5\uAC04 \uD3F4\uB354\uAC00 \uC5F4\uB824 \uC788\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.',"pt-BR":'O valor da configura\xE7\xE3o "sqlite3-editor.comment.filepath" come\xE7a com "${fileWorkspaceFolder}/", mas nenhuma pasta de workspace est\xE1 aberta no momento.',ru:'\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 "sqlite3-editor.comment.filepath" \u043D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F \u0441 "${fileWorkspaceFolder}/", \u043D\u043E \u0432 \u0434\u0430\u043D\u043D\u044B\u0439 \u043C\u043E\u043C\u0435\u043D\u0442 \u043F\u0430\u043F\u043A\u0430 \u0440\u0430\u0431\u043E\u0447\u0435\u0433\u043E \u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u0430 \u043D\u0435 \u043E\u0442\u043A\u0440\u044B\u0442\u0430.',"zh-CN":'\u914D\u7F6E\u9879 "sqlite3-editor.comment.filepath" \u7684\u503C\u4EE5 "${fileWorkspaceFolder}/" \u5F00\u59CB\uFF0C\u4F46\u5F53\u524D\u6CA1\u6709\u6253\u5F00\u5DE5\u4F5C\u533A\u6587\u4EF6\u5939\u3002',"zh-TW":'\u914D\u7F6E "sqlite3-editor.comment.filepath" \u7684\u503C\u958B\u982D\u70BA "${fileWorkspaceFolder}/"\uFF0C\u4F46\u76EE\u524D\u6C92\u6709\u6253\u958B\u4EFB\u4F55\u5DE5\u4F5C\u5340\u8CC7\u6599\u593E\u3002'},"This error may be due to a broken link or a lost connection to the virtual workspace.":{de:"Dieser Fehler k\xF6nnte auf einen defekten Link oder eine verlorene Verbindung zum virtuellen Arbeitsbereich zur\xFCckzuf\xFChren sein.",es:"Este error puede deberse a un enlace roto o a una conexi\xF3n perdida con el espacio de trabajo virtual.",fr:"Cette erreur peut \xEAtre due \xE0 un lien rompu ou \xE0 une perte de connexion avec l'espace de travail virtuel.",it:"Questo errore potrebbe essere dovuto a un link interrotto o a una connessione persa con lo spazio di lavoro virtuale.",ja:"\u3053\u306E\u30A8\u30E9\u30FC\u306F\u30EA\u30F3\u30AF\u5207\u308C\u307E\u305F\u306F\u4EEE\u60F3\u30EF\u30FC\u30AF\u30B9\u30DA\u30FC\u30B9\u3078\u306E\u63A5\u7D9A\u304C\u5931\u308F\u308C\u305F\u3053\u3068\u304C\u539F\u56E0\u304B\u3082\u3057\u308C\u307E\u305B\u3093\u3002",ko:"\uC774 \uC624\uB958\uB294 \uB9C1\uD06C\uAC00 \uB04A\uC5B4\uC9C0\uAC70\uB098 \uAC00\uC0C1 \uC791\uC5C5 \uACF5\uAC04\uC5D0 \uB300\uD55C \uC5F0\uACB0\uC774 \uB04A\uAE34 \uAC83\uC77C \uC218 \uC788\uC2B5\uB2C8\uB2E4.","pt-BR":"Este erro pode ser devido a um link quebrado ou uma conex\xE3o perdida com o espa\xE7o de trabalho virtual.",ru:"\u042D\u0442\u0430 \u043E\u0448\u0438\u0431\u043A\u0430 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u0432\u044B\u0437\u0432\u0430\u043D\u0430 \u043D\u0435\u0440\u0430\u0431\u043E\u0442\u0430\u044E\u0449\u0435\u0439 \u0441\u0441\u044B\u043B\u043A\u043E\u0439 \u0438\u043B\u0438 \u043F\u043E\u0442\u0435\u0440\u0435\u0439 \u0441\u0432\u044F\u0437\u0438 \u0441 \u0432\u0438\u0440\u0442\u0443\u0430\u043B\u044C\u043D\u044B\u043C \u0440\u0430\u0431\u043E\u0447\u0438\u043C \u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u043E\u043C.","zh-CN":"\u6B64\u9519\u8BEF\u53EF\u80FD\u662F\u56E0\u4E3A\u94FE\u63A5\u65AD\u88C2\u6216\u4E0E\u865A\u62DF\u5DE5\u4F5C\u533A\u7684\u8FDE\u63A5\u4E22\u5931\u3002","zh-TW":"\u6B64\u932F\u8AA4\u53EF\u80FD\u662F\u7531\u65BC\u9023\u7D50\u65B7\u88C2\u6216\u8207\u865B\u64EC\u5DE5\u4F5C\u5340\u7684\u9023\u63A5\u4E1F\u5931\u3002"},"This extension currently does not support 32-bit Windows.":{de:"Diese Erweiterung unterst\xFCtzt derzeit kein 32-Bit-Windows.",es:"Esta extensi\xF3n actualmente no es compatible con Windows de 32 bits.",fr:"Cette extension ne prend actuellement pas en charge Windows 32 bits.",it:"Questa estensione attualmente non supporta Windows a 32 bit.",ja:"\u3053\u306E\u62E1\u5F35\u6A5F\u80FD\u306F\u73FE\u5728\u300132\u30D3\u30C3\u30C8\u306EWindows\u3092\u30B5\u30DD\u30FC\u30C8\u3057\u3066\u3044\u307E\u305B\u3093",ko:"\uC774 \uD655\uC7A5 \uD504\uB85C\uADF8\uB7A8\uC740 \uD604\uC7AC 32\uBE44\uD2B8 Windows\uB97C \uC9C0\uC6D0\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"Esta extens\xE3o atualmente n\xE3o suporta Windows de 32 bits.",ru:"\u0412 \u043D\u0430\u0441\u0442\u043E\u044F\u0449\u0435\u0435 \u0432\u0440\u0435\u043C\u044F \u044D\u0442\u043E \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435 \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 32-\u0431\u0438\u0442\u043D\u044B\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 Windows.","zh-CN":"\u6B64\u6269\u5C55\u76EE\u524D\u4E0D\u652F\u630132\u4F4DWindows\u3002","zh-TW":"\u6B64\u64F4\u5C55\u76EE\u524D\u4E0D\u652F\u63F432\u4F4D\u5143Windows\u3002"},"This feature does not support in-memory databases.":{de:"Diese Funktion unterst\xFCtzt keine In-Memory-Datenbanken.",es:"Esta caracter\xEDstica no admite bases de datos en memoria.",fr:"Cette fonctionnalit\xE9 ne supporte pas les bases de donn\xE9es en m\xE9moire.",it:"Questa funzione non supporta i database in memoria.",ja:"\u3053\u306E\u6A5F\u80FD\u306F\u30A4\u30F3\u30E1\u30E2\u30EA\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u3092\u30B5\u30DD\u30FC\u30C8\u3057\u3066\u3044\u307E\u305B\u3093\u3002",ko:"\uC774 \uAE30\uB2A5\uC740 \uC778\uBA54\uBAA8\uB9AC \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uB97C \uC9C0\uC6D0\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"Este recurso n\xE3o suporta banco de dados em mem\xF3ria.",ru:"\u042D\u0442\u0430 \u0444\u0443\u043D\u043A\u0446\u0438\u044F \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0431\u0430\u0437\u044B \u0434\u0430\u043D\u043D\u044B\u0445 \u0432 \u043F\u0430\u043C\u044F\u0442\u0438.","zh-CN":"\u6B64\u529F\u80FD\u4E0D\u652F\u6301\u5185\u5B58\u6570\u636E\u5E93\u3002","zh-TW":"\u6B64\u529F\u80FD\u4E0D\u652F\u63F4\u5167\u5B58\u8CC7\u6599\u5EAB\u3002"},"URIs with an empty path are not supported: {{- path }}":{de:"URIs mit einem leeren Pfad werden nicht unterst\xFCtzt: {{- path }}",es:"Los URI con una ruta vac\xEDa no son compatibles: {{- path }}",fr:"Les URI avec un chemin vide ne sont pas pris en charge : {{- path }}",it:"Gli URI con un percorso vuoto non sono supportati: {{- path }}",ja:"\u30D1\u30B9\u304C\u7A7A\u306EURI\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093: {{- path }}",ko:"\uACBD\uB85C\uAC00 \uBE44\uC5B4\uC788\uB294 URI\uB294 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4: {{- path }}","pt-BR":"URIs com caminho vazio n\xE3o s\xE3o suportados: {{- path }}",ru:"URI \u0441 \u043F\u0443\u0441\u0442\u044B\u043C \u043F\u0443\u0442\u0435\u043C \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044E\u0442\u0441\u044F: {{- path }}","zh-CN":"\u4E0D\u652F\u6301\u7A7A\u8DEF\u5F84\u7684URI: {{- path }}","zh-TW":"\u4E0D\u652F\u63F4\u7A7A\u8DEF\u5F91\u7684URI: {{- path }}"},"Untitled files are not supported, as they cannot contain binary data.":{de:"Unbenannte Dateien werden nicht unterst\xFCtzt, da sie keine Bin\xE4rdaten enthalten k\xF6nnen.",es:"Los archivos sin t\xEDtulo no son compatibles, ya que no pueden contener datos binarios.",fr:"Les fichiers sans titre ne sont pas pris en charge, car ils ne peuvent pas contenir de donn\xE9es binaires.",it:"I file senza titolo non sono supportati poich\xE9 non possono contenere dati binari.",ja:"\u7121\u984C\u306E\u30D5\u30A1\u30A4\u30EB\u306F\u3001\u30D0\u30A4\u30CA\u30EA\u30C7\u30FC\u30BF\u3092\u542B\u3080\u3053\u3068\u304C\u3067\u304D\u306A\u3044\u305F\u3081\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002",ko:"\uC81C\uBAA9 \uC5C6\uB294 \uD30C\uC77C\uC740 \uC774\uC9C4 \uB370\uC774\uD130\uB97C \uD3EC\uD568\uD560 \uC218 \uC5C6\uC73C\uBBC0\uB85C \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"Arquivos sem t\xEDtulo n\xE3o s\xE3o suportados, pois n\xE3o podem conter dados bin\xE1rios.",ru:"\u0424\u0430\u0439\u043B\u044B \u0431\u0435\u0437 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u044F \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044E\u0442\u0441\u044F, \u0442\u0430\u043A \u043A\u0430\u043A \u043E\u043D\u0438 \u043D\u0435 \u043C\u043E\u0433\u0443\u0442 \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C \u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435.","zh-CN":"\u4E0D\u652F\u6301\u65E0\u6807\u9898\u7684\u6587\u4EF6\uFF0C\u56E0\u4E3A\u5B83\u4EEC\u4E0D\u80FD\u5305\u542B\u4E8C\u8FDB\u5236\u6570\u636E\u3002","zh-TW":"\u4E0D\u652F\u6301\u7121\u6A19\u984C\u7684\u6A94\u6848\uFF0C\u56E0\u70BA\u5B83\u5011\u7121\u6CD5\u5305\u542B\u4E8C\u9032\u5236\u8CC7\u6599\u3002"},"Use the \u25B7 button in the top right corner to run the entire file.":{de:"Dr\xFCcken Sie die \u25B7-Schaltfl\xE4che oben rechts im Fenster, um die gesamte Datei auszuf\xFChren.",es:"Presione el bot\xF3n \u25B7 en la esquina superior derecha de la ventana para ejecutar todo el archivo.",fr:"Appuyez sur le bouton \u25B7 dans le coin sup\xE9rieur droit de la fen\xEAtre pour ex\xE9cuter l'ensemble du fichier.",it:"Premi il pulsante \u25B7 nell'angolo in alto a destra della finestra per eseguire l'intero file.",ja:"\u30D5\u30A1\u30A4\u30EB\u5168\u4F53\u3092\u5B9F\u884C\u3059\u308B\u306B\u306F\u30A6\u30A3\u30F3\u30C9\u30A6\u53F3\u4E0A\u306E\u25B7\u3092\u62BC\u3057\u3066\u304F\u3060\u3055\u3044\u3002",ko:"\uC804\uCCB4 \uD30C\uC77C\uC744 \uC2E4\uD589\uD558\uB824\uBA74 \uCC3D \uC624\uB978\uCABD \uC0C1\uB2E8\uC758 \u25B7 \uBC84\uD2BC\uC744 \uB204\uB974\uC2ED\uC2DC\uC624.","pt-BR":"Pressione o bot\xE3o \u25B7 no canto superior direito da janela para executar todo o arquivo.",ru:"\u0427\u0442\u043E\u0431\u044B \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u0432\u0435\u0441\u044C \u0444\u0430\u0439\u043B, \u043D\u0430\u0436\u043C\u0438\u0442\u0435 \u043A\u043D\u043E\u043F\u043A\u0443 \u25B7 \u0432 \u043F\u0440\u0430\u0432\u043E\u043C \u0432\u0435\u0440\u0445\u043D\u0435\u043C \u0443\u0433\u043B\u0443 \u043E\u043A\u043D\u0430.","zh-CN":"\u8981\u8FD0\u884C\u6574\u4E2A\u6587\u4EF6\uFF0C\u8BF7\u6309\u7A97\u53E3\u53F3\u4E0A\u89D2\u7684\u25B7\u6309\u94AE\u3002","zh-TW":"\u8981\u904B\u884C\u6574\u500B\u6587\u4EF6\uFF0C\u8ACB\u6309\u7A97\u53E3\u53F3\u4E0A\u89D2\u7684\u25B7\u6309\u9215\u3002"},"You can create an index from the right-click menu on the table column.":{de:"Sie k\xF6nnen einen Index \xFCber das Rechtsklick-Men\xFC in der Tabellenspalte erstellen.",es:"Puedes crear un \xEDndice desde el men\xFA del bot\xF3n derecho en la columna de la tabla.",fr:"Vous pouvez cr\xE9er un index \xE0 partir du menu contextuel de la colonne de table.",it:"Puoi creare un indice dal menu a tendina a clic destro sulla colonna della tabella.",ja:"\u30C6\u30FC\u30D6\u30EB\u5217\u306E\u53F3\u30AF\u30EA\u30C3\u30AF\u30E1\u30CB\u30E5\u30FC\u304B\u3089\u30A4\u30F3\u30C7\u30C3\u30AF\u30B9\u3092\u4F5C\u6210\u3067\u304D\u307E\u3059\u3002",ko:"\uD14C\uC774\uBE14 \uCEEC\uB7FC\uC758 \uC624\uB978\uCABD \uD074\uB9AD \uBA54\uB274\uC5D0\uC11C \uC778\uB371\uC2A4\uB97C \uC0DD\uC131\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.","pt-BR":"Voc\xEA pode criar um \xEDndice no menu de clique direito na coluna da tabela.",ru:"\u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0441\u043E\u0437\u0434\u0430\u0442\u044C \u0438\u043D\u0434\u0435\u043A\u0441 \u0438\u0437 \u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u043D\u043E\u0433\u043E \u043C\u0435\u043D\u044E \u043F\u043E \u043F\u0440\u0430\u0432\u043E\u0439 \u043A\u043D\u043E\u043F\u043A\u0435 \u043C\u044B\u0448\u0438 \u0432 \u043A\u043E\u043B\u043E\u043D\u043A\u0435 \u0442\u0430\u0431\u043B\u0438\u0446\u044B.","zh-CN":"\u60A8\u53EF\u4EE5\u901A\u8FC7\u5728\u8868\u683C\u5217\u7684\u53F3\u952E\u83DC\u5355\u4E2D\u521B\u5EFA\u7D22\u5F15\u3002","zh-TW":"\u60A8\u53EF\u4EE5\u5728\u8868\u683C\u5217\u7684\u53F3\u9375\u9078\u55AE\u4E2D\u5EFA\u7ACB\u7D22\u5F15\u3002"},"You can execute DROP TABLE and DROP VIEW from the right-click menu on the table name dropdown.":{de:"Sie k\xF6nnen DROP TABLE und DROP VIEW \xFCber das Kontextmen\xFC des Tabellennamen-Dropdowns ausf\xFChren.",es:"Puede ejecutar DROP TABLE y DROP VIEW desde el men\xFA del bot\xF3n derecho en el desplegable del nombre de la tabla.",fr:"Vous pouvez ex\xE9cuter DROP TABLE et DROP VIEW \xE0 partir du menu contextuel sur le menu d\xE9roulant du nom de la table.",it:"\xE8 possibile eseguire DROP TABLE e DROP VIEW dal menu a discesa del nome della tabella cliccando con il tasto destro.",ja:"\u30C6\u30FC\u30D6\u30EB\u540D\u306E\u30C9\u30ED\u30C3\u30D7\u30C0\u30A6\u30F3\u3067\u53F3\u30AF\u30EA\u30C3\u30AF\u30E1\u30CB\u30E5\u30FC\u304B\u3089\u300CDROP TABLE\u300D\u3068\u300CDROP VIEW\u300D\u3092\u5B9F\u884C\u3067\u304D\u307E\u3059\u3002",ko:"\uD14C\uC774\uBE14 \uC774\uB984 \uB4DC\uB86D\uB2E4\uC6B4\uC5D0\uC11C \uB9C8\uC6B0\uC2A4 \uC624\uB978\uCABD \uBC84\uD2BC \uBA54\uB274\uB97C \uC0AC\uC6A9\uD558\uC5EC DROP TABLE \uBC0F DROP VIEW\uB97C \uC2E4\uD589\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.","pt-BR":"Voc\xEA pode executar DROP TABLE e DROP VIEW a partir do menu de clique direito no menu suspenso do nome da tabela.",ru:"\u0432\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C DROP TABLE \u0438 DROP VIEW \u0438\u0437 \u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u043D\u043E\u0433\u043E \u043C\u0435\u043D\u044E \u043D\u0430 \u0432\u044B\u043F\u0430\u0434\u0430\u044E\u0449\u0435\u043C \u0441\u043F\u0438\u0441\u043A\u0435 \u0438\u043C\u0435\u043D\u0438 \u0442\u0430\u0431\u043B\u0438\u0446\u044B.","zh-CN":"\u60A8\u53EF\u4EE5\u5728\u8868\u540D\u4E0B\u62C9\u83DC\u5355\u7684\u53F3\u952E\u83DC\u5355\u4E2D\u6267\u884C DROP TABLE \u548C DROP VIEW\u3002","zh-TW":"\u60A8\u53EF\u4EE5\u5728\u8868\u540D\u4E0B\u62C9\u83DC\u55AE\u7684\u53F3\u9375\u83DC\u55AE\u4E2D\u57F7\u884C DROP TABLE \u548C DROP VIEW\u3002"},"You can rename a table from the right-click menu on the table name dropdown.":{de:"Sie k\xF6nnen eine Tabelle \xFCber das Rechtsklick-Men\xFC im Tabellennamen-Dropdown umbenennen.",es:"Puedes renombrar una tabla desde el men\xFA del bot\xF3n derecho en el desplegable del nombre de la tabla.",fr:"Vous pouvez renommer une table \xE0 partir du menu contextuel sur la liste d\xE9roulante du nom de la table.",it:"Puoi rinominare una tabella dal menu a tendina a clic destro sul nome della tabella.",ja:"\u30C6\u30FC\u30D6\u30EB\u540D\u306E\u30C9\u30ED\u30C3\u30D7\u30C0\u30A6\u30F3\u3067\u53F3\u30AF\u30EA\u30C3\u30AF\u30E1\u30CB\u30E5\u30FC\u304B\u3089\u30C6\u30FC\u30D6\u30EB\u306E\u540D\u524D\u3092\u5909\u66F4\u3067\u304D\u307E\u3059\u3002",ko:"\uD14C\uC774\uBE14 \uC774\uB984 \uB4DC\uB86D\uB2E4\uC6B4\uC758 \uC624\uB978\uCABD \uD074\uB9AD \uBA54\uB274\uC5D0\uC11C \uD14C\uC774\uBE14 \uC774\uB984\uC744 \uBC14\uAFC0 \uC218 \uC788\uC2B5\uB2C8\uB2E4.","pt-BR":"Voc\xEA pode renomear uma tabela atrav\xE9s do menu de clique direito no dropdown do nome da tabela.",ru:"\u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u043F\u0435\u0440\u0435\u0438\u043C\u0435\u043D\u043E\u0432\u0430\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443 \u0438\u0437 \u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u043D\u043E\u0433\u043E \u043C\u0435\u043D\u044E \u0432 \u0432\u044B\u043F\u0430\u0434\u0430\u044E\u0449\u0435\u043C \u0441\u043F\u0438\u0441\u043A\u0435 \u0438\u043C\u0435\u043D\u0438 \u0442\u0430\u0431\u043B\u0438\u0446\u044B.","zh-CN":"\u60A8\u53EF\u4EE5\u4ECE\u8868\u540D\u4E0B\u62C9\u83DC\u5355\u7684\u53F3\u952E\u83DC\u5355\u4E2D\u91CD\u547D\u540D\u8868\u3002","zh-TW":"\u60A8\u53EF\u4EE5\u5728\u8868\u683C\u540D\u7A31\u4E0B\u62C9\u9078\u55AE\u7684\u53F3\u9375\u529F\u80FD\u8868\u4E2D\u91CD\u65B0\u547D\u540D\u8868\u683C\u3002"},"Your system's glibc version is older than the required version. The system will fall back to the statically linked musl, but SQLite's run-time loadable extensions will not work in this mode.":{de:"Die glibc-Version Ihres Systems ist \xE4lter als die erforderliche Version. Das System wird auf das statisch verkn\xFCpfte musl zur\xFCckgreifen, aber die zur Laufzeit ladef\xE4higen Erweiterungen von SQLite funktionieren in diesem Modus nicht.",es:"La versi\xF3n glibc de su sistema es m\xE1s antigua que la versi\xF3n requerida. El sistema recurrir\xE1 al musl vinculado est\xE1ticamente, pero las extensiones de SQLite que se pueden cargar en tiempo de ejecuci\xF3n no funcionar\xE1n en este modo.",fr:"La version de glibc de votre syst\xE8me est plus ancienne que la version requise. Le syst\xE8me se rabattra sur la version musl li\xE9e statiquement, mais les extensions charg\xE9es au moment de l'ex\xE9cution de SQLite ne fonctionneront pas en ce mode.",it:"La versione di glibc del tuo sistema \xE8 pi\xF9 vecchia della versione richiesta. Il sistema ricadr\xE0 su musl collegato staticamente, ma le estensioni caricabili a runtime di SQLite non funzioneranno in questa modalit\xE0.",ja:"\u30B7\u30B9\u30C6\u30E0\u306Eglibc\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u304C\u8981\u6C42\u30D0\u30FC\u30B8\u30E7\u30F3\u3092\u6E80\u305F\u3057\u3066\u3044\u307E\u305B\u3093\u3002\u9759\u7684\u306B\u30EA\u30F3\u30AF\u3055\u308C\u305Fmusl\u306B\u30D5\u30A9\u30FC\u30EB\u30D0\u30C3\u30AF\u3057\u307E\u3059\u304C\u3001SQLite\u306E Run-time loadable extensions \u306F\u3053\u306E\u30E2\u30FC\u30C9\u3067\u306F\u52D5\u4F5C\u3057\u307E\u305B\u3093\u3002",ko:"\uC2DC\uC2A4\uD15C\uC758 glibc \uBC84\uC804\uC774 \uD544\uC694\uD55C \uBC84\uC804\uBCF4\uB2E4 \uC624\uB798\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uC2DC\uC2A4\uD15C\uC740 \uC815\uC801\uC73C\uB85C \uC5F0\uACB0\uB41C musl\uB85C \uB418\uB3CC\uC544\uAC00\uC9C0\uB9CC, SQLite\uC758 \uB7F0\uD0C0\uC784 \uB85C\uB4DC \uAC00\uB2A5 \uD655\uC7A5\uAE30\uB2A5\uC740 \uC774 \uBAA8\uB4DC\uC5D0\uC11C \uC791\uB3D9\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.","pt-BR":"A vers\xE3o do glibc do seu sistema \xE9 mais antiga do que a vers\xE3o necess\xE1ria. O sistema recorrer\xE1 ao musl linkado estaticamente, mas as extens\xF5es carreg\xE1veis em tempo real do SQLite n\xE3o funcionar\xE3o neste modo.",ru:"\u0412\u0435\u0440\u0441\u0438\u044F glibc \u0432\u0430\u0448\u0435\u0439 \u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0441\u0442\u0430\u0440\u0448\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u043C\u043E\u0439 \u0432\u0435\u0440\u0441\u0438\u0438. \u0421\u0438\u0441\u0442\u0435\u043C\u0430 \u0432\u0435\u0440\u043D\u0435\u0442\u0441\u044F \u043A \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0438 \u0441\u0432\u044F\u0437\u0430\u043D\u043D\u043E\u043C\u0443 musl, \u043D\u043E \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043C\u044B\u0435 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F SQLite \u043D\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043E\u0442\u0430\u0442\u044C \u0432 \u044D\u0442\u043E\u043C \u0440\u0435\u0436\u0438\u043C\u0435.","zh-CN":"\u60A8\u7CFB\u7EDF\u7684glibc\u7248\u672C\u6BD4\u6240\u9700\u7248\u672C\u65E7\u3002\u7CFB\u7EDF\u5C06\u56DE\u9000\u5230\u9759\u6001\u94FE\u63A5\u7684musl\uFF0C\u4F46\u662FSQLite\u7684\u8FD0\u884C\u65F6\u53EF\u52A0\u8F7D\u6269\u5C55\u5728\u8BE5\u6A21\u5F0F\u4E0B\u65E0\u6CD5\u5DE5\u4F5C\u3002","zh-TW":"\u60A8\u7684\u7CFB\u7D71\u4E2D\u7684 glibc \u7248\u672C\u6BD4\u6240\u9700\u7248\u672C\u820A\u3002\u7CFB\u7D71\u5C07\u9000\u56DE\u5230\u975C\u614B\u9023\u7D50\u7684 musl\uFF0C\u4F46 SQLite \u7684\u5728\u7DDA\u52A0\u8F09\u64F4\u5C55\u5728\u6B64\u6A21\u5F0F\u4E0B\u5C07\u7121\u6CD5\u5DE5\u4F5C\u3002"},"{% SQL %}Script executed successfully.":{de:"Skript erfolgreich ausgef\xFChrt.",es:"El script se ejecut\xF3 correctamente.",fr:"Script ex\xE9cut\xE9 avec succ\xE8s.",it:"Script eseguito con successo.",ja:"\u30B9\u30AF\u30EA\u30D7\u30C8\u304C\u6B63\u5E38\u306B\u5B9F\u884C\u3055\u308C\u307E\u3057\u305F\u3002",ko:"\uC2A4\uD06C\uB9BD\uD2B8\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uC2E4\uD589\uB418\uC5C8\uC2B5\uB2C8\uB2E4.","pt-BR":"Script executado com sucesso.",ru:"\u0421\u043A\u0440\u0438\u043F\u0442 \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D.","zh-CN":"\u811A\u672C\u6267\u884C\u6210\u529F\u3002","zh-TW":"\u8173\u672C\u57F7\u884C\u6210\u529F\u3002"},"{% SQL %}Statement executed successfully.":{de:"Anweisung erfolgreich ausgef\xFChrt.",es:"La declaraci\xF3n se ejecut\xF3 correctamente.",fr:"Instruction ex\xE9cut\xE9e avec succ\xE8s.",it:"Istruzione eseguita con successo.",ja:"\u30B9\u30C6\u30FC\u30C8\u30E1\u30F3\u30C8\u304C\u6B63\u5E38\u306B\u5B9F\u884C\u3055\u308C\u307E\u3057\u305F\u3002",ko:"\uBB38\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uC2E4\uD589\uB418\uC5C8\uC2B5\uB2C8\uB2E4.","pt-BR":"Instru\xE7\xE3o executada com sucesso.",ru:"\u0418\u043D\u0441\u0442\u0440\u0443\u043A\u0446\u0438\u044F \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0430 \u0443\u0441\u043F\u0435\u0448\u043D\u043E.","zh-CN":"\u8BED\u53E5\u6267\u884C\u6210\u529F\u3002","zh-TW":"\u8A9E\u53E5\u57F7\u884C\u6210\u529F\u3002"},"{% SQL %}Statement executed successfully. To view the output of a PRAGMA statement, use the pragma function, e.g. `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.":{de:"SQL-Anweisung erfolgreich ausgef\xFChrt. Um die Ausgabe der PRAGMA-Anweisungen anzuzeigen, verwenden Sie die Pragma-Funktion, z. B. `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.",es:"Sentencia SQL ejecutada con \xE9xito. Para ver la salida de las sentencias PRAGMA, utilice la funci\xF3n pragma, por ejemplo, `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.",fr:"Instruction SQL ex\xE9cut\xE9e avec succ\xE8s. Pour afficher la sortie des instructions PRAGMA, utilisez la fonction pragma, par exemple `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.",it:"Istruzione SQL eseguita con successo. Per visualizzare l'output delle istruzioni PRAGMA, utilizzare la funzione pragma, ad es. `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.",ja:"SQL\u30B9\u30C6\u30FC\u30C8\u30E1\u30F3\u30C8\u304C\u6B63\u5E38\u306B\u5B9F\u884C\u3055\u308C\u307E\u3057\u305F\u3002PRAGMA\u30B9\u30C6\u30FC\u30C8\u30E1\u30F3\u30C8\u306E\u51FA\u529B\u3092\u8868\u793A\u3059\u308B\u306B\u306F\u3001pragma\u95A2\u6570\u3092\u4F7F\u7528\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u4F8B\uFF1A`PRAGMA table_list` -> `SELECT * FROM pragma_table_list`\u3002",ko:"SQL \uBB38\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uC2E4\uD589\uB418\uC5C8\uC2B5\uB2C8\uB2E4. PRAGMA \uBB38\uC758 \uCD9C\uB825\uC744 \uBCF4\uB824\uBA74 \uD504\uB77C\uADF8\uB9C8 \uD568\uC218\uB97C \uC0AC\uC6A9\uD558\uC2ED\uC2DC\uC624. \uC608: `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.","pt-BR":"Instru\xE7\xE3o SQL executada com sucesso. Para visualizar a sa\xEDda das instru\xE7\xF5es PRAGMA, use a fun\xE7\xE3o pragma, por exemplo, `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.",ru:"SQL-\u0437\u0430\u043F\u0440\u043E\u0441 \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D. \u0427\u0442\u043E\u0431\u044B \u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442 \u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u043A\u043E\u043C\u0430\u043D\u0434\u044B PRAGMA, \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E pragma, \u043D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`.","zh-CN":"SQL \u8BED\u53E5\u6267\u884C\u6210\u529F\u3002\u8981\u67E5\u770B PRAGMA \u8BED\u53E5\u7684\u8F93\u51FA\uFF0C\u8BF7\u4F7F\u7528 pragma \u51FD\u6570\uFF0C\u4F8B\u5982 `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`\u3002","zh-TW":"SQL \u8A9E\u53E5\u57F7\u884C\u6210\u529F\u3002\u8981\u67E5\u770B PRAGMA \u8A9E\u53E5\u7684\u8F38\u51FA\uFF0C\u8ACB\u4F7F\u7528 pragma \u51FD\u6578\uFF0C\u4F8B\u5982 `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`\u3002"},"{{- filepath}} is not a directory.":{de:"'{{- filepath}}' ist kein Verzeichnis.",es:"'{{- filepath}}' no es un directorio.",fr:"'{{- filepath}}' n'est pas un r\xE9pertoire.",it:"'{{- filepath}}' non \xE8 una directory.",ja:"'{{- filepath}}' \u306F\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002",ko:"'{{- filepath}}' \uC740(\uB294) \uB514\uB809\uD130\uB9AC\uAC00 \uC544\uB2D9\uB2C8\uB2E4.","pt-BR":"'{{- filepath}}' n\xE3o \xE9 um diret\xF3rio.",ru:"'{{- filepath}}' \u043D\u0435 \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u0434\u0438\u0440\u0435\u043A\u0442\u043E\u0440\u0438\u0435\u0439.","zh-CN":"'{{- filepath}}' \u4E0D\u662F\u76EE\u5F55\u3002","zh-TW":"'{{- filepath}}' \u4E0D\u662F\u76EE\u9304\u3002"},"{{- filepath}} is not a file.":{de:"'{{- filepath}}' ist keine Datei.",es:"'{{- filepath}}' no es un archivo.",fr:"'{{- filepath}}' n'est pas un fichier.",it:"'{{- filepath}}' non \xE8 un file.",ja:"'{{- filepath}}' \u306F\u30D5\u30A1\u30A4\u30EB\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002",ko:"'{{- filepath}}' \uC740(\uB294) \uD30C\uC77C\uC774 \uC544\uB2D9\uB2C8\uB2E4.","pt-BR":"'{{- filepath}}' n\xE3o \xE9 um arquivo.",ru:"'{{- filepath}}' \u043D\u0435 \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u0444\u0430\u0439\u043B\u043E\u043C.","zh-CN":"'{{- filepath}}' \u4E0D\u662F\u6587\u4EF6\u3002","zh-TW":"'{{- filepath}}' \u4E0D\u662F\u6A94\u6848\u3002"},'{{- platformAndArch}} is not supported. Please request it on a <a href="{{- githubIssueLink }}">GitHub Issues</a>.':{de:'{{- platformAndArch}} wird nicht unterst\xFCtzt. Bitte fordern Sie es in einem <a href="{{- githubIssueLink }}">GitHub Issues</a> an.',es:'{{- platformAndArch}} no es compatible. Por favor, solic\xEDtalo en un <a href="{{- githubIssueLink }}">GitHub Issues</a>.',fr:`{{- platformAndArch}} n'est pas pris en charge. Veuillez le demander sur une <a href="{{- githubIssueLink }}">GitHub Issues</a>.`,it:'{{- platformAndArch}} non \xE8 supportato. Per favore, richiedilo in una <a href="{{- githubIssueLink }}">GitHub Issues</a>.',ja:'{{- platformAndArch}} \u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002 <a href="{{- githubIssueLink }}">GitHub Issues</a>\u3067\u30EA\u30AF\u30A8\u30B9\u30C8\u3092\u9001\u3063\u3066\u304F\u3060\u3055\u3044\u3002',ko:'{{- platformAndArch}}\uB294 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. <a href="{{- githubIssueLink }}">GitHub Issues</a>\uC5D0\uC11C \uC694\uCCAD\uD558\uC2ED\uC2DC\uC624.',"pt-BR":'{{- platformAndArch}} n\xE3o \xE9 suportado. Por favor, solicite no <a href="{{- githubIssueLink }}">GitHub Issues</a>.',ru:'{{- platformAndArch}} \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u0437\u0430\u043F\u0440\u043E\u0441\u0438\u0442\u0435 \u0435\u0433\u043E \u0432 <a href="{{- githubIssueLink }}">GitHub Issues</a>.',"zh-CN":'{{- platformAndArch}}\u4E0D\u53D7\u652F\u6301\u3002 \u8BF7\u5728<a href="{{- githubIssueLink }}">GitHub Issues</a>\u4E0A\u8BF7\u6C42\u3002',"zh-TW":'{{- platformAndArch}}\u4E0D\u53D7\u652F\u6301\u3002 \u8ACB\u5728<a href="{{- githubIssueLink }}">GitHub Issues</a>\u4E0A\u8ACB\u6C42\u3002'},"{{- vcRuntimeLink}} is missing. You can install it by downloading and running {{- exeLink}} (you can find other versions in {{- vcRedistUrl}}). It will take only 30 seconds.":{de:"Fehlt {{- vcRuntimeLink}}. Sie k\xF6nnen es installieren, indem Sie {{- exeLink}} herunterladen und ausf\xFChren (andere Versionen finden Sie unter {{- vcRedistUrl}}). Es dauert nur 30 Sekunden.",es:"Falta {{- vcRuntimeLink}}. Puedes instalarlo bajando y ejecutando {{- exeLink}} (puedes encontrar otras versiones en {{- vcRedistUrl}} si lo prefieres). Solo tomar\xE1 30 segundos.",fr:"{{- vcRuntimeLink}} est manquant. Vous pouvez l'installer en t\xE9l\xE9chargeant et ex\xE9cutant {{- exeLink}} (vous pouvez trouver d'autres versions sur {{- vcRedistUrl}} si vous le souhaitez). Cela ne prendra que 30 secondes.",it:"{{- vcRuntimeLink}} manca. Puoi installarlo scaricando ed eseguendo {{- exeLink}} (puoi trovare altre versioni in {{- vcRedistUrl}} se preferisci). Ci vorranno solo 30 secondi.",ja:"{{- vcRuntimeLink}}\u304C\u3042\u308A\u307E\u305B\u3093\u3002{{- exeLink}}\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9\u3057\u3066\u5B9F\u884C\u3059\u308B\u3053\u3068\u3067\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3067\u304D\u307E\u3059(\u4ED6\u306E\u30D0\u30FC\u30B8\u30E7\u30F3\u304C\u5FC5\u8981\u306A\u5834\u5408\u306F{{- vcRedistUrl}}\u3092\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044)\u3002\u305F\u3063\u305F30\u79D2\u3067\u5B8C\u4E86\u3057\u307E\u3059\u3002",ko:"{{- vcRuntimeLink}}\uC774 \uC5C6\uC2B5\uB2C8\uB2E4. {{- exeLink}}\uC744 \uB2E4\uC6B4\uB85C\uB4DC\uD558\uC5EC \uC2E4\uD589\uD558\uC5EC \uC124\uCE58\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4 (\uB2E4\uB978 \uBC84\uC804\uC774 \uD544\uC694\uD55C \uACBD\uC6B0 {{- vcRedistUrl}}\uC5D0\uC11C \uCC3E\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4). 30\uCD08\uB9CC \uAC78\uB9BD\uB2C8\uB2E4.","pt-BR":"{{- vcRuntimeLink}} est\xE1 faltando. Voc\xEA pode instal\xE1-lo baixando e executando {{- exeLink}} (voc\xEA pode encontrar outras vers\xF5es em {{- vcRedistUrl}}, se preferir). Isso levar\xE1 apenas 30 segundos.",ru:"{{- vcRuntimeLink}} \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442. \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0435\u0433\u043E, \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0432 \u0438 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0432 {{- exeLink}} (\u0432\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u043D\u0430\u0439\u0442\u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043D\u0430 {{- vcRedistUrl}}, \u0435\u0441\u043B\u0438 \u0445\u043E\u0442\u0438\u0442\u0435). \u042D\u0442\u043E \u0437\u0430\u0439\u043C\u0435\u0442 \u0432\u0441\u0435\u0433\u043E 30 \u0441\u0435\u043A\u0443\u043D\u0434.","zh-CN":"{{- vcRuntimeLink}} \u7F3A\u5931\u3002\u4F60\u53EF\u4EE5\u4E0B\u8F7D\u5E76\u8FD0\u884C{{- exeLink}}\u6765\u5B89\u88C5\u5B83\uFF08\u5982\u679C\u4F60\u613F\u610F\uFF0C\u53EF\u4EE5\u5728{{- vcRedistUrl}}\u4E2D\u627E\u5230\u5176\u5B83\u7248\u672C\uFF09\u3002\u53EA\u970030\u79D2.","zh-TW":"{{- vcRuntimeLink}} \u7F3A\u5931\u3002\u4F60\u53EF\u4EE5\u4E0B\u8F09\u4E26\u904B\u884C{{- exeLink}}\u4F86\u5B89\u88DD\u5B83\uFF08\u5982\u679C\u4F60\u9858\u610F\uFF0C\u53EF\u4EE5\u5728{{- vcRedistUrl}}\u4E2D\u627E\u5230\u5176\u4ED6\u7248\u672C\uFF09\u3002\u53EA\u9700\u898130\u79D2\u3002"},"{{count}} column":{de:"{{count}} Spalten",es:"{{count}} columna",fr:"{{count}} colonne",it:"{{count}} colonna",ja:"{{count}}\u5217",ko:"{{count}}\uAC1C\uC758 \uC5F4","pt-BR":"{{count}} coluna",ru:"{{count}} \u0441\u0442\u043E\u043B\u0431\u0435\u0446","zh-CN":"{{count}}\u5217","zh-TW":"{{count}}\u5217"},"{{count}} columns":{de:"{{count}} Spalten",es:"{{count}} columnas",fr:"{{count}} colonnes",it:"{{count}} colonne",ja:"{{count}}\u5217",ko:"{{count}}\uAC1C\uC758 \uC5F4","pt-BR":"{{count}} colunas",ru:"{{count}} \u0441\u0442\u043E\u043B\u0431\u0446\u044B","zh-CN":"{{count}}\u5217","zh-TW":"{{count}}\u5217"},"{{count}} record":{de:"{{count}} Datens\xE4tze",es:"{{count}} registro",fr:"{{count}} enregistrement",it:"{{count}} record",ja:"{{count}}\u30EC\u30B3\u30FC\u30C9",ko:"{{count}}\uAC1C\uC758 \uB808\uCF54\uB4DC","pt-BR":"{{count}} registro",ru:"{{count}} \u0437\u0430\u043F\u0438\u0441\u044C","zh-CN":"{{count}}\u6761\u8BB0\u5F55","zh-TW":"{{count}}\u7B46\u8A18\u9304"},"{{count}} records":{de:"{{count}} Datens\xE4tze",es:"{{count}} registros",fr:"{{count}} enregistrements",it:"{{count}} record",ja:"{{count}}\u30EC\u30B3\u30FC\u30C9",ko:"{{count}}\uAC1C\uC758 \uB808\uCF54\uB4DC","pt-BR":"{{count}} registros",ru:"{{count}} \u0437\u0430\u043F\u0438\u0441\u0438","zh-CN":"{{count}}\u6761\u8BB0\u5F55","zh-TW":"{{count}}\u7B46\u8A18\u9304"}};var yl=()=>{let t=we().get("ui.displayLanguage");if(t!=="automatic"&&kf.includes(t))return t;let n=tT.default.env.language.toLowerCase();return n==="ja"?"ja":n==="zh-cn"?"zh-CN":n==="es"?"es":n==="ru"?"ru":n==="pt-br"?"pt-BR":n==="fr"?"fr":n==="ko"?"ko":n==="de"?"de":n==="zh-tw"?"zh-TW":n==="it"?"it":"en"},rT=()=>{let t=yl();return Zh(t==="en"?[]:[t],eT)};var La=(i=>(i[i.none=0]="none",i[i.starUsDialog=2]="starUsDialog",i[i.tutorial=8]="tutorial",i))(La||{}),B_=t=>{let n=we(t.uri);return{"diagnostics.disableSyntaxCheck":n.get("diagnostics.disableSyntaxCheck"),"completion.functionCase":n.get("completion.functionCase")}},_a=class{#e;#t;#r;#n=[];#i=0;constructor(){this.#e=vr.default.workspace.fs.readFile(at(D.context.extensionUri,"webview","index.html")).then(n=>n.toString()),this.#t=ih(D.context),this.#r=Math.min(this.#t?.installedTimestamp??Number.MAX_SAFE_INTEGER,(()=>{let n=D.context.globalState.get("starMeDialog.condition.date"),e=Date.now();return n===void 0&&Z(D.context.globalState.update("starMeDialog.condition.date",e)),n??e})())}setDebugFlag(n){this.#i|=n}enqueueNextWebviewQueryParameter(n,e){this.#n.push([n,e])}#s(){return this.#i&8?!0:this.#t?.updated||this.#t?.installedTimestamp!==void 0&&Date.now()-this.#r>1e3*60*60*24||D.context.globalState.get("displayedTutorial")?!1:(Z(D.context.globalState.update("displayedTutorial",!0)),!0)}#o(n){let e={};try{e=Object.fromEntries(new URLSearchParams(n.uri.query).entries())}catch{}let i=this.#n.findIndex(([E])=>la(E,n.uri));return i!==-1&&(e={...e,...this.#n[i][1]},this.#n.splice(i,1)),e}async build(n,e,i,E){let[d,R,_]=await Promise.all([this.#e,n.p.editorPragma("database_label",[]),e("tableName",!1)]),I=d;I=sT(I,i.webview,D.context.extensionUri),I=wl(I,"Loading resources",D.t("Loading resources"));let S=vr.default.workspace.getConfiguration("editor"),C={};for(let w of Qh){let[b,M]=zh(w),G;b?G=D.context.workspaceState.get(`storage-${M}`):G=D.context.workspaceState.get(`storage/${n.uri.toString()}-${M}`),C[w]=G===void 0?void 0:{state:_l(G)}}return I=wl(I,/^(\s*)window\.editorVariables = .*$/m,"$1window.editorVariables = "+Jh({[vh]:yl(),[xh]:(this.#i&2)!==0||!(this.#t?.updated&&!D.context.globalState.raw.get(`whatsNewDialog.opened.${D.context.extension.packageJSON.version}`))&&Date.now()-this.#r>1e3*60*60*24*3&&D.context.globalState.get("starMeDialog.condition.editorLoadCount",0)>=5&&!D.context.globalState.get("starMeDialog.closed")&&!D.context.globalState.get("starMeDialog.showed")&&!D.context.globalState.get("showedStarMeDialog"),[Uh]:this.#s(),[Gh]:n.uri.scheme==="git",[Hh]:ki(n.uri),[Bh]:B_(n),[Fh]:D.context.globalState.get("feedbackAccepted")?2:1,[kh]:this.#o(n),[Yh]:R.unpack(),[Vh]:_,[Wh]:n.commentFile.read(),[$h]:D.context.globalState.get("hasShownCommentInfo",!1),[Xh]:Ch({acceptSuggestionOnEnter:S.get("acceptSuggestionOnEnter"),autoClosingBrackets:S.get("autoClosingBrackets"),autoClosingComments:S.get("autoClosingComments"),autoClosingDelete:S.get("autoClosingDelete"),autoClosingOvertype:S.get("autoClosingOvertype"),autoClosingQuotes:S.get("autoClosingQuotes"),autoIndent:S.get("autoIndent"),autoSurround:S.get("autoSurround"),bracketPairColorization:{enabled:S.get("bracketPairColorization.enabled"),independentColorPoolPerBracketType:S.get("bracketPairColorization.independentColorPoolPerBracketType")},columnSelection:S.get("columnSelection"),comments:{insertSpace:S.get("comments.insertSpace"),ignoreEmptyLines:S.get("comments.ignoreEmptyLines")},copyWithSyntaxHighlighting:S.get("copyWithSyntaxHighlighting"),cursorBlinking:S.get("cursorBlinking"),cursorSmoothCaretAnimation:S.get("cursorSmoothCaretAnimation"),cursorStyle:S.get("cursorStyle"),cursorSurroundingLines:S.get("cursorSurroundingLines"),cursorSurroundingLinesStyle:S.get("cursorSurroundingLinesStyle"),cursorWidth:S.get("cursorWidth"),dragAndDrop:S.get("dragAndDrop"),emptySelectionClipboard:S.get("emptySelectionClipboard"),fastScrollSensitivity:S.get("fastScrollSensitivity"),letterSpacing:S.get("letterSpacing"),lineHeight:S.get("lineHeight"),matchBrackets:S.get("matchBrackets"),matchOnWordStartOnly:S.get("suggest.matchOnWordStartOnly"),mouseWheelScrollSensitivity:S.get("mouseWheelScrollSensitivity"),mouseWheelZoom:S.get("mouseWheelZoom"),multiCursorPaste:S.get("multiCursorPaste"),quickSuggestionsDelay:S.get("quickSuggestionsDelay"),renderControlCharacters:S.get("renderControlCharacters"),renderFinalNewline:S.get("renderFinalNewline"),renderLineHighlight:S.get("renderLineHighlight"),renderWhitespace:S.get("renderWhitespace"),roundedSelection:S.get("roundedSelection"),smoothScrolling:S.get("smoothScrolling"),snippetSuggestions:S.get("snippetSuggestions"),suggest:{insertMode:S.get("suggest.insertMode")},tabCompletion:S.get("tabCompletion"),wordSeparators:S.get("wordSeparators")}),[qh]:n.fsPaths==="memory",[jh]:E.$$getValueOr(null),[Kh]:C})),I}},nT=async t=>{let n=vr.default.window.createWebviewPanel("sqlite3-editor.panel.formatterWelcome","SQLite3 Editor: Formatting",{viewColumn:vr.default.ViewColumn.Beside});n.webview.options={enableCommandUris:!0},n.webview.html=sT((await vr.default.workspace.fs.readFile(at(t,"webview","formatter-welcome.html"))).toString(),n.webview,t)},iT=async t=>{let n=vr.default.window.createWebviewPanel("sqlite3-editor.openSourceLicenses","SQLite3 Editor: Open Source Licenses",{viewColumn:vr.default.ViewColumn.Active},{enableFindWidget:!0});n.webview.html="<h3>Open Source Licenses</h3><pre>"+st((await vr.default.workspace.fs.readFile(at(t,"LICENSE-THIRD-PARTY.txt"))).toString()).replace(/^Name:\s*(.+)$/gm,"<h4>$1</h4>")+"</pre>"},sT=(t,n,e)=>t.replace(/((?:src|href)\s*=\s*")\.\/([^"]+)(")/gi,(i,E,d,R)=>E+n.asWebviewUri(at(e,"webview",d)).toString()+R);var Xr={$$zip:t=>{let n=Object.keys(t);if(n.length===0)return[];let e=t[n[0]].length,i=[];for(let E=0;E<e;E++){let d={};for(let R of n)d[R]=t[R][E];i.push(d)}return i},$$count:t=>{for(let n in t)if(Object.hasOwn(t,n))return t[n].length;return 0},$$takeOne:(t,n=0)=>{let e=Object.keys(t),i={};if(e.length===0)return{};if(!(n<0||n>=t[e[0]].length)){for(let E of e)i[E]=t[E][n];return i}}};var ze={changes:null,pre_stmt:null,allow_fewer_changes:!1,check_placeholders:null};var Ca=["ABORT","ACTION","ADD","AFTER","ALL","ALTER","ALWAYS","ANALYZE","AND","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRED","DEFERRABLE","DELETE","DESC","DETACH","DISTINCT","DO","DROP","END","EACH","ELSE","ESCAPE","EXCEPT","EXCLUSIVE","EXCLUDE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","GROUPS","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT"];function F_(t,n){function e(){this.constructor=t}e.prototype=n.prototype,t.prototype=new e}function wn(t,n,e,i){var E=Error.call(this,t);return Object.setPrototypeOf&&Object.setPrototypeOf(E,wn.prototype),E.expected=n,E.found=e,E.location=i,E.name="SyntaxError",E}F_(wn,Error);function bl(t,n,e){return e=e||" ",t.length>n?t:(n-=t.length,e+=e.repeat(n),t+e.slice(0,n))}wn.prototype.format=function(t){var n="Error: "+this.message;if(this.location){var e=null,i;for(i=0;i<t.length;i++)if(t[i].source===this.location.source){e=t[i].text.split(/\r\n|\n|\r/g);break}var E=this.location.start,d=this.location.source&&typeof this.location.source.offset=="function"?this.location.source.offset(E):E,R=this.location.source+":"+d.line+":"+d.column;if(e){var _=this.location.end,I=bl("",d.line.toString().length," "),S=e[E.line-1],C=E.line===_.line?_.column:S.length+1,w=C-E.column||1;n+=`
 --> `+R+`
`+I+` |
`+d.line+" | "+S+`
`+I+" | "+bl("",E.column-1," ")+bl("",w,"^")}else n+=`
 at `+R}return n};wn.buildMessage=function(t,n){var e={literal:function(S){return'"'+E(S.text)+'"'},class:function(S){var C=S.parts.map(function(w){return Array.isArray(w)?d(w[0])+"-"+d(w[1]):d(w)});return"["+(S.inverted?"^":"")+C.join("")+"]"},any:function(){return"any character"},end:function(){return"end of input"},other:function(S){return S.description}};function i(S){return S.charCodeAt(0).toString(16).toUpperCase()}function E(S){return S.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(C){return"\\x0"+i(C)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(C){return"\\x"+i(C)})}function d(S){return S.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(C){return"\\x0"+i(C)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(C){return"\\x"+i(C)})}function R(S){return e[S.type](S)}function _(S){var C=S.map(R),w,b;if(C.sort(),C.length>0){for(w=1,b=1;w<C.length;w++)C[w-1]!==C[w]&&(C[b]=C[w],b++);C.length=b}switch(C.length){case 1:return C[0];case 2:return C[0]+" or "+C[1];default:return C.slice(0,-1).join(", ")+", or "+C[C.length-1]}}function I(S){return S?'"'+E(S)+'"':"end of input"}return"Expected "+_(t)+" but "+I(n)+" found."};function Dl(t,n){n=n!==void 0?n:{};var e={},i=n.grammarSource,E={CreateTableStatement:oc,CreateViewStatement:oI,CreateIndexStatement:lI,CreateTriggerStatement:EI,ExtractFTS5ContentOptionValue:uI,IfNotExists:yi,FindAllCTENames:cI,FindAllFROMKeywords:dI,ReadUntilNextFROMKeyword:Ds,ReadUntilKeywordBoundary:tn,ExtractTableNames_FROM_Partial:fI,ExtractTableNames_FROM:yo,ExtractTableNames_TableOrSubquery:Fn,ExtractTableNames_JoinClause:lc,ExtractTableNames_JoinConstraint:bo,SelectCore:hI,WindowDefn:Do,OrderingTerm:Po,FrameSpec:Ec,ResultColumn:Mo,Expr:Ge,ExprNoAnd:uc,ExprRecursion:vo,ExprRecursionNoAnd:Ps,NonRecursiveExpr:xo,NameDot:kt,BinaryOperatorNoAnd:cc,TableOrSubquery:Hn,AsTableAlias:rn,JoinClause:dc,JoinOperator:bi,JoinConstraint:Uo,FilterClause:Go,OverClause:Bo,BindParameter:fc,UnaryOperator:Fo,GeneratedAlwaysAs:TI,ColumnInValues:mI,OrIsNull:Ho,NextLiteralValueOrSignedNumberOrExprInParens:pI,LiteralValue:Fr,LiteralValueList:AI,Temporary:Ms,ColumnDefinition:SI,LooseColumnDefinitionOrTableConstraint:ko,TableConstraint:RI,IndexedColumn:Yo,AscOrDesc:Vo,ForeignKeyClause:hc,ConflictClause:Tc,StringLiteral:mc,NumericLiteral:Wo,BlobLiteral:pc,Digit:nr,HexDigit:$o,NonLastRightParen:Xo,Identifier:xe,TableNameIdentifier:ir,IdentifierOrKeyword:Ac,Keyword:vs,TableNameKeyword:Sc,ReadUntilUnmatchingRightParenthesisOrComma:qo,ReadUntilUnmatchingRightParenthesis:Et,QuotedString:St,CharacterUsableInUnquotedIdentifierHead:kn,CharacterUsableInUnquotedIdentifierRest:Ot,b:x,Comment:wt,_:m},d=oc,R="create",_="table",I="(",S=",",C=")",w="view",b="as",M="unique",G="index",$="on",k="trigger",H="before",ie="after",P="instead",X="of",Q="delete",ee="insert",te="update",se="using",Oe="fts",Y="content",oe="=",W="if",q="not",ce="exists",pe="from",Me="indexed",Ie="by",nt="select",Xe="distinct",Zt="all",cr="where",er="group",Sp="having",Rp="window",Np="partition",Ip="order",io="collate",uE="nulls",gp="first",Op="last",_p="range",Lp="rows",Cp="groups",cE="between",so="unbounded",Si="preceding",ds="current",fs="row",ao="following",oo="and",hs="exclude",lo="no",wp="others",yp="ties",dE="*",bp="like",Dp="escape",Pp="glob",Mp="regexp",Eo="match",vp="isnull",xp="notnull",zr="null",uo="is",fE="in",Up="cast",Gp="case",co="when",hE="then",Bp="else",Fp="end",Hp="raise",TE="temp",fo=".",mE="||",pE=">=",AE="==",SE="!=",RE="<>",NE="<<",IE=">>",gE="<=",OE="or",ho="join",kp="filter",Yp="over",Vp="generated",Wp="always",$p="stored",Xp="virtual",_E="true",LE="false",CE="current_timestamp",wE="current_time",yE="current_date",qp="temporary",jp="constraint",bE="PRIMARY",Ts="KEY",DE="UNIQUE",PE="CHECK",ME="FOREIGN",Kp="asc",Jp="desc",Qp="references",ms="set",vE="default",xE="cascade",UE="restrict",GE="action",zp="deferrable",BE="initially",Zp="deferred",eA="immediate",tA="conflict",rA="rollback",nA="abort",iA="fail",sA="ignore",aA="replace",Ri="'",Kt="''",oA="0x",Ni="_",lA="e",EA="x'",FE='"',ps='""',HE="`",As="``",uA="[",cA="]",kE="--",YE="/*",Mn="*/",dA=/^[),]/,Ss=/^[^ \t\r\n'"[`(*]/,VE=/^[^ \t\r\n'"\]`)*]/,fA=/^[%-&*-+\-\/<->|]/,hA=/^[+\-~]/,Rs=/^[^)]/,WE=/^[+\-]/,vn=/^[^']/,TA=/^[0-9]/,mA=/^[0-9a-f]/i,$E=/^[^'"\]`,)]/,XE=/^[^'"\]`)]/,qE=/^[^"]/,jE=/^[^`]/,KE=/^[^\]]/,pA=/^[^ \-,;:!?.'"()[\]{}@*\/\\\n\r\t&%`\^+<=>|$0-9]/,AA=/^[^ \-,;:!?.'"()[\]{}@*\/\\\n\r\t&%`\^+<=>|$]/,SA=/^[a-zA-Z_]/,JE=/^[^\n]/,RA=/^[ \t\r\n]/,Ns=J("CREATE",!0),NA=J("TABLE",!0),He=J("(",!1),At=J(",",!1),Be=J(")",!1),Ze=nI(),IA=J("VIEW",!0),Nr=J("AS",!0),gA=J("UNIQUE",!0),OA=J("INDEX",!0),Zr=J("ON",!0),_A=J("TRIGGER",!0),LA=J("BEFORE",!0),CA=J("AFTER",!0),wA=J("INSTEAD",!0),QE=J("OF",!0),To=J("DELETE",!0),yA=J("INSERT",!0),mo=J("UPDATE",!0),Ii=J("USING",!0),bA=J("fts",!0),po=J("content",!0),Is=J("=",!1),DA=ct([")",","],!1,!1),PA=J("IF",!0),tr=J("NOT",!0),zE=J("EXISTS",!0),gs=ct([" ","	","\r",`
`,"'",'"',"[","`","(","*"],!0,!1),xn=J("FROM",!0),ZE=ct([" ","	","\r",`
`,"'",'"',"]","`",")","*"],!0,!1),Os=J("INDEXED",!0),gi=J("BY",!0),MA=J("SELECT",!0),eu=J("DISTINCT",!0),vA=J("ALL",!0),tu=J("WHERE",!0),ru=J("GROUP",!0),xA=J("HAVING",!0),UA=J("WINDOW",!0),GA=J("PARTITION",!0),BA=J("ORDER",!0),Ao=J("COLLATE",!0),nu=J("NULLS",!0),FA=J("FIRST",!0),HA=J("LAST",!0),kA=J("RANGE",!0),YA=J("ROWS",!0),VA=J("GROUPS",!0),iu=J("BETWEEN",!0),So=J("UNBOUNDED",!0),Oi=J("PRECEDING",!0),_s=J("CURRENT",!0),Ls=J("ROW",!0),Ro=J("FOLLOWING",!0),No=J("AND",!0),Cs=J("EXCLUDE",!0),Io=J("NO",!0),WA=J("OTHERS",!0),$A=J("TIES",!0),su=J("*",!1),XA=J("LIKE",!0),qA=J("ESCAPE",!0),jA=J("GLOB",!0),KA=J("REGEXP",!0),go=J("MATCH",!0),JA=J("ISNULL",!0),QA=J("NOTNULL",!0),en=J("NULL",!0),Oo=J("IS",!0),au=J("IN",!0),zA=J("CAST",!0),ZA=J("CASE",!0),_o=J("WHEN",!0),ou=J("THEN",!0),eS=J("ELSE",!0),tS=J("END",!0),rS=J("RAISE",!0),nS=J("temp",!0),Lo=J(".",!1),iS=J("||",!1),sS=J(">=",!1),aS=J("==",!1),oS=J("!=",!1),lS=J("<>",!1),ES=J("<<",!1),uS=J(">>",!1),cS=J("<=",!1),dS=ct([["%","&"],["*","+"],"-","/",["<",">"],"|"],!1,!1),lu=J("OR",!0),Co=J("JOIN",!0),fS=J("FILTER",!0),hS=J("OVER",!0),TS=ct(["+","-","~"],!1,!1),mS=J("GENERATED",!0),pS=J("ALWAYS",!0),ws=ct([")"],!0,!1),AS=J("STORED",!0),SS=J("VIRTUAL",!0),Eu=ct(["+","-"],!1,!1),uu=J("TRUE",!0),cu=J("FALSE",!0),du=J("CURRENT_TIMESTAMP",!0),fu=J("CURRENT_TIME",!0),hu=J("CURRENT_DATE",!0),RS=J("TEMPORARY",!0),NS=J("TEMP",!0),IS=J("CONSTRAINT",!0),gS=J("PRIMARY",!1),Tu=J("KEY",!1),OS=J("UNIQUE",!1),_S=J("CHECK",!1),LS=J("FOREIGN",!1),CS=J("ASC",!0),wS=J("DESC",!0),yS=J("REFERENCES",!0),ys=J("SET",!0),mu=J("DEFAULT",!0),pu=J("CASCADE",!0),Au=J("RESTRICT",!0),Su=J("ACTION",!0),bS=J("DEFERRABLE",!0),Ru=J("INITIALLY",!0),DS=J("DEFERRED",!0),PS=J("IMMEDIATE",!0),MS=J("CONFLICT",!0),vS=J("ROLLBACK",!0),xS=J("ABORT",!0),US=J("FAIL",!0),GS=J("IGNORE",!0),BS=J("REPLACE",!0),_i=J("'",!1),Un=J("''",!1),Gn=ct(["'"],!0,!1),FS=J("0x",!0),Li=J("_",!1),HS=J("e",!0),kS=J("x'",!0),YS=ct([["0","9"]],!1,!1),VS=ct([["0","9"],["a","f"]],!1,!0),Nu=ct(["'",'"',"]","`",",",")"],!0,!1),Iu=ct(["'",'"',"]","`",")"],!0,!1),gu=J('"',!1),Ou=J('""',!1),_u=ct(['"'],!0,!1),Lu=J("`",!1),Cu=J("``",!1),wu=ct(["`"],!0,!1),WS=J("[",!1),yu=ct(["]"],!0,!1),$S=J("]",!1),XS=ct([" ","-",",",";",":","!","?",".","'",'"',"(",")","[","]","{","}","@","*","/","\\",`
`,"\r","	","&","%","`","^","+","<","=",">","|","$",["0","9"]],!0,!1),qS=ct([" ","-",",",";",":","!","?",".","'",'"',"(",")","[","]","{","}","@","*","/","\\",`
`,"\r","	","&","%","`","^","+","<","=",">","|","$"],!0,!1),jS=ct([["a","z"],["A","Z"],"_"],!1,!1),KS=J("--",!1),bu=ct([`
`],!0,!1),JS=J("/*",!1),wo=J("*/",!1),QS=ct([" ","	","\r",`
`],!1,!1),zS=function(a,u,o){return{text:Le(),create:a,temporary:u,table:o}},ZS=function(a,u,o,s,l,c,f){return{createTable:a,ifNotExists:u,schemaName:o,tableName:s,afterTableName:l,columns:c,options:f}},eR=function(a,u,o){return{text:Le(),create:a,temporary:u,view:o}},tR=function(a,u,o,s,l,c){return{createView:a,ifNotExists:u,schemaName:o,viewName:s,as:l,select:c}},Du=function(a,u,o,s,l,c,f,h,T,A,p,N){return{beforeColumnName:A,columnName:p,afterColumnName:N}},rR=function(a,u,o,s,l,c,f,h,T,A,p){return{createIndex:a,ifNotExists:u,schemaName:o,indexName:s,afterIndexName:l,on:c,afterOn:f,tableName:h,afterTableName:T,columns:A,rest:p}},nR=function(a,u,o){return{text:Le(),create:a,temporary:u,trigger:o}},iR=function(a,u,o,s,l){return{type:"BEFORE",text:Le()}},sR=function(a,u,o,s,l){return{type:"AFTER",text:Le()}},aR=function(a,u,o,s,l){return{type:"INSTEAD OF",text:Le()}},oR=function(a,u,o,s,l,c,f){return{type:"DELETE",text:Le()}},lR=function(a,u,o,s,l,c,f){return{type:"INSERT",text:Le()}},Pu=function(a,u,o,s,l,c,f,h,T,A,p,N){return{beforeIdent:A,ident:p,afterIdent:N}},ER=function(a,u,o,s,l,c,f,h,T,A){return{of:h,afterOf:T,columns:A}},uR=function(a,u,o,s,l,c,f,h){return{type:"UPDATE",updateOf:h,text:Le()}},cR=function(a,u,o,s,l,c,f,h,T,A,p,N){return{createTrigger:a,ifNotExists:u,schemaName:o,triggerName:s,afterTriggerName:l,keyword1:c,afterKeyword1:f,keyword2:h,on:T,afterOn:A,tableName:p,rest:N}},dR=function(a){return a.name},Mu=function(a){return a.name},vu=function(){return null},xu=function(){return null},Uu=function(){return null},Gu=function(){return null},fR=function(a){return a.filter(u=>u!==null)},Bu=function(){return rI().end.offset},hR=function(a){return a},TR=function(a){return a.flatten()},mR=function(){return[]},pR=function(a,u){return[{schema:a?.name.name,table:u.name}]},AR=function(){return[]},SR=function(a,u){return[...a,...u.flat()]},RR=function(a,u){return{type:"on",on:a,expr:u}},NR=function(a){return{type:"using",using:a,columnNames}},IR=function(a){return{type:"DISTINCT",text:Le()}},gR=function(a){return{type:"ALL",text:Le()}},Fu=function(a,u,o,s,l){return{before:o,column:s,after:l}},_R=function(a,u,o,s,l,c){return{joinClause:l,after:c}},Hu=function(a,u,o,s,l,c,f){return{before:l,tableOrSubquery:c,after:f}},LR=function(a,u,o,s,l){return{from:s,table:l}},CR=function(a,u,o,s,l,c){return{where:l,expr:c}},ku=function(a,u,o,s,l,c,f,h,T){return{before:f,expr:h,after:T}},wR=function(a,u,o,s,l,c,f){return{groupBy:c,exprs:f}},yR=function(a,u,o,s,l,c,f,h,T){return{having:f,expr:h,afterExpr:T}},Yu=function(a,u,o,s,l,c,f,h,T,A,p,N,L,y){return{before:T,windowName:A,afterWindowName:p,as:N,windowDefn:L,after:y}},bR=function(a,u,o,s,l,c,f,h,T){return{window:h,definitions:T}},DR=function(a,u,o,s,l,c,f,h){return{select:a,option:u,resultColumns:o,from:s,where:l,groupBy:c,having:f,window:h}},Vu=function(a,u,o,s,l,c){return{before:s,expr:l,after:c}},PR=function(a,u,o,s){return{partitionBy:o,exprs:s}},Wu=function(a,u,o,s,l,c,f){return{before:l,orderingTerm:c,after:f}},MR=function(a,u,o,s,l){return{orderBy:s,orderingTerms:l}},vR=function(a,u,o,s,l,c){return{baseWindowName:a,afterBaseWindowName:u,partitionBy:o,orderBy:s,frameSpec:l,afterFrameSpec:c}},xR=function(a,u,o,s){return{collate:u,collationName:o,afterCollationName:s}},UR=function(a,u,o){return{type:"first",text:Le()}},GR=function(a,u,o){return{type:"last",text:Le()}},BR=function(a,u,o,s){return{expr:a,collate:u,ascOrDesc:o,nulls:s}},FR=function(){return Le()},HR=function(){return{type:"*"}},kR=function(a){return{type:"schema.*",schema:a}},YR=function(a,u,o,s){return{type:"expr alias",expr:a,afterExpr:u,as:o,alias:s}},VR=function(a){return{type:"expr",expr:a}},WR=function(){return Le()},$R=function(){return{text:Le(),name:Le()}},XR=function(a,u){return{text:Le(),name:a,dot:u}},$u=function(a,u,o,s,l,c){return{before:s,expr:l,after:c}},qR=function(a,u,o,s,l){return{type:"table-function",schema:a,tableFunctionName:u,afterTableFunctionName:o,exprs:s,alias:l}},jR=function(a,u,o,s,l){return{type:"indexed-by",indexedBy:s,indexName:l}},KR=function(a,u,o,s){return{type:"not-indexed",notIndexed:s}},JR=function(a,u,o,s){return{type:"table-name",schema:a,tableName:u,alias:o,indexed:s}},QR=function(a,u){return{type:"subquery",expr:a,alias:u}},zR=function(a,u,o){return{beforeAs:a,as:u,tableAlias:o}},Xu=function(a,u,o,s,l,c,f){return{beforeOperator:u,operator:o,afterOperator:s,joinedTableOrSubquery:l,afterJoinedTableOrSubquery:c,joinConstraint:f}},ZR=function(a,u){return{type:"join-clause",tableOrSubquery:a,join:u}},eN=function(){return Le()},tN=function(){return Le()},rN=function(a,u){return{type:"on",on:a,expr:u}},qu=function(a,u,o,s){return{before:u,ident:o,after:s}},nN=function(a,u){return{type:"using",using:a,columnNames:u}},iN=function(a,u,o,s,l){return{keyword:s,whitespace:l}},sN=function(a,u,o,s,l){return{keyword:s,whitespace:l}},aN=function(a,u,o,s){return{generatedAlwaysAs:a,expr:u,beforeOption:o,option:s?.keyword??"",afterOption:s?.whitespace??""}},oN=function(a,u,o,s,l,c,f){return{type:"=",before:s,list:[{before:"",literal:l,after:""}],orIsNull:f,after:c}},lN=function(a,u,o){return{type:"IS NULL",list:[],orIsNull:Le()}},ju=function(a,u,o,s,l,c,f,h){return{before:c,literal:f,after:h}},EN=function(a,u,o,s,l,c,f,h){return{type:"IN",inKeyword:s,afterIn:l,list:c,afterList:f,orIsNull:h}},uN=function(a,u,o,s){return{beforeColumn:a,column:u,afterColumn:o,...s}},cN=function(){return Le()},dN=function(a,u){return a==="-"?{type:u.type,value:-u.value}:u},fN=function(a){return{type:"expr",expr:a}},hN=function(a,u){return{literal:a,rest:u}},TN=function(){return{type:"null",value:null}},mN=function(){return{type:"boolean",value:!0}},pN=function(){return{type:"boolean",value:!1}},AN=function(){return{type:"CURRENT_TIMESTAMP",value:()=>new Date().toISOString().replace("Z","")}},SN=function(){return{type:"CURRENT_TIME",value:()=>new Date().toLocaleTimeString("en-US",{hour12:!1})}},RN=function(){return{type:"CURRENT_DATE",value:()=>new Date().toISOString().split("T")[0]}},NN=function(a,u,o){return{text:Le(),beforeColumnName:a,columnName:u,typeNameAndColumnConstraints:o}},IN=function(a,u,o){return{text:Le(),beforeColumnName:a,columnName:u,typeNameAndColumnConstraints:o}},gN=function(a,u,o){return{constraint:a,name:u,afterName:o}},ON=function(a){return{type:"primary key",text:Le()}},_N=function(a){return{type:"unique",text:Le()}},Ku=function(a,u,o,s,l){return{before:o,indexedColumn:s,after:l}},LN=function(a,u,o,s){return{type:"unique",constraint:a,option:u,indexedColumns:o,conflictConstraint:s}},CN=function(a,u,o,s,l){return{type:"check",check:u,beforeExpr:o,expr:s,afterExpr:l}},Ju=function(a,u,o,s,l){return{before:o,columnName:s,after:l}},wN=function(a,u,o,s,l){return{type:"foreign key",foreignKey:u,columnNames:o,beforeForeignKeyClause:s,foreignKeyClause:l}},yN=function(a){return{type:"column name",columnName:a}},bN=function(a){return{type:"expr",expr:a}},DN=function(a,u,o){return{collate:u,columnName:o}},PN=function(a,u,o){return{columnOrExpr:a,collate:u,ascOrDesc:o}},MN=function(){return{type:"asc",text:Le()}},vN=function(){return{type:"desc",text:Le()}},Qu=function(a,u,o,s,l){return{before:o,columnName:s,after:l}},zu=function(a,u,o){return{type:"on",text:Le()}},Zu=function(a,u,o,s){return{type:"match",text:Le()}},xN=function(a,u,o,s,l,c){return{type:"deferred",text:Le()}},UN=function(a,u,o,s,l,c){return{type:"immediate",text:Le()}},GN=function(a,u,o,s,l,c,f){return{not:l,deferrable:c,initially:f}},BN=function(a,u,o,s,l){return{references:a,foreignTable:u,columns:o,matches:s,deferrable:l}},FN=function(){return Le()},ec=function(){return"'"},HN=function(a){return{type:"string",value:a.join("")}},kN=function(){return{type:"integer",value:BigInt(Le().replace(/_/g,""))}},YN=function(){return/[e\.]/i.test(Le())?{type:"real",value:+Le().replace(/_/g,"")}:{type:"integer",value:BigInt(Le().replace(/_/g,""))}},tc=function(){return"'"},VN=function(a){return{type:"blob",value:a.length===0?new Uint8Array:new Uint8Array(a.join("").match(/.{1,2}/g).map(u=>parseInt(u,16)))}},WN=function(a){return a.ident},$N=function(a){return{text:Le(),name:a}},XN=function(a){return a.ident},qN=function(a){return{text:Le(),name:a}},jN=function(a){return a.ident},KN=function(a){return{text:Le(),name:a}},JN=function(a){return["ABORT","ACTION","ADD","AFTER","ALL","ALTER","ALWAYS","ANALYZE","AND","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRED","DEFERRABLE","DELETE","DESC","DETACH","DISTINCT","DO","DROP","END","EACH","ELSE","ESCAPE","EXCEPT","EXCLUSIVE","EXCLUDE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","GROUPS","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT"].includes(a.toUpperCase())},QN=function(a){return["ADD","ALL","ALTER","AND","AS","AUTOINCREMENT","BETWEEN","CASE","CHECK","COLLATE","COMMIT","CONSTRAINT","CREATE","DEFAULT","DEFERRABLE","DELETE","DISTINCT","DROP","ELSE","ESCAPE","EXCEPT","EXISTS","FOREIGN","FROM","GROUP","HAVING","IF","IN","INDEX","INSERT","INTERSECT","INTO","IS","ISNULL","JOIN","LIMIT","NOT","NOTHING","NOTNULL","NULL","ON","OR","ORDER","PRIMARY","REFERENCES","RETURNING","SELECT","SET","TABLE","THEN","TO","TRANSACTION","UNION","UNIQUE","UPDATE","USING","VALUES","WHEN","WHERE"].includes(a.toUpperCase())},rc=function(){return"'"},zN=function(a){return{text:Le(),ident:a.join("")}},nc=function(){return'"'},ZN=function(a){return{text:Le(),ident:a.join("")}},ic=function(){return"`"},eI=function(a){return{text:Le(),ident:a.join("")}},tI=function(a){return{text:Le(),ident:a}},r=n.peg$currPos|0,B=r,Bn=[{line:1,column:1}],rr=r,bs=n.peg$maxFailExpected||[],g=n.peg$silentFails|0,Ci;if(n.startRule){if(!(n.startRule in E))throw new Error(`Can't start parsing from rule "`+n.startRule+'".');d=E[n.startRule]}function Le(){return t.substring(B,r)}function oy(){return B}function ly(){return{source:i,start:B,end:r}}function rI(){return wi(B,r)}function Ey(a,u){throw u=u!==void 0?u:wi(B,r),ac([sI(a)],t.substring(B,r),u)}function uy(a,u){throw u=u!==void 0?u:wi(B,r),aI(a,u)}function J(a,u){return{type:"literal",text:a,ignoreCase:u}}function ct(a,u,o){return{type:"class",parts:a,inverted:u,ignoreCase:o}}function nI(){return{type:"any"}}function iI(){return{type:"end"}}function sI(a){return{type:"other",description:a}}function sc(a){var u=Bn[a],o;if(u)return u;if(a>=Bn.length)o=Bn.length-1;else for(o=a;!Bn[--o];);for(u=Bn[o],u={line:u.line,column:u.column};o<a;)t.charCodeAt(o)===10?(u.line++,u.column=1):u.column++,o++;return Bn[a]=u,u}function wi(a,u,o){var s=sc(a),l=sc(u),c={source:i,start:{offset:a,line:s.line,column:s.column},end:{offset:u,line:l.line,column:l.column}};return o&&i&&typeof i.offset=="function"&&(c.start=i.offset(c.start),c.end=i.offset(c.end)),c}function O(a){r<rr||(r>rr&&(rr=r,bs=[]),bs.push(a))}function aI(a,u){return new wn(a,null,null,u)}function ac(a,u,o){return new wn(wn.buildMessage(a,u),a,u,o)}function oc(){var a,u,o,s,l,c,f,h,T,A,p,N;for(a=r,u=r,o=r,s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(c=t.substr(r,6),c.toLowerCase()===R?r+=6:(c=e,g===0&&O(Ns)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();l=[l,c,f,h],s=l}else r=s,s=e;else r=s,s=e;if(s!==e?o=t.substring(o,r):o=s,o!==e){if(s=Ms(),s===e&&(s=null),l=r,c=r,f=t.substr(r,5),f.toLowerCase()===_?r+=5:(f=e,g===0&&O(NA)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();f=[f,h,T],c=f}else r=c,c=e;else r=c,c=e;c!==e?l=t.substring(l,r):l=c,l!==e?(B=u,u=zS(o,s,l)):(r=u,u=e)}else r=u,u=e;if(u!==e)if(o=yi(),o===e&&(o=null),s=kt(),s===e&&(s=null),l=ir(),l!==e){for(c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),t.charCodeAt(r)===40?(f=I,r++):(f=e,g===0&&O(He)),f!==e){for(h=r,T=[],A=ko();A!==e;)T.push(A),A=r,t.charCodeAt(r)===44?(p=S,r++):(p=e,g===0&&O(At)),p!==e?(p=ko(),p===e?(r=A,A=e):A=p):A=p;if(T.length<1?(r=h,h=e):h=T,h!==e)if(t.charCodeAt(r)===41?(T=C,r++):(T=e,g===0&&O(Be)),T!==e){for(A=r,p=[],t.length>r?(N=t.charAt(r),r++):(N=e,g===0&&O(Ze));N!==e;)p.push(N),t.length>r?(N=t.charAt(r),r++):(N=e,g===0&&O(Ze));A=t.substring(A,r),B=a,a=ZS(u,o,s,l,c,h,A)}else r=a,a=e;else r=a,a=e}else r=a,a=e}else r=a,a=e;else r=a,a=e;return a}function oI(){var a,u,o,s,l,c,f,h,T,A,p,N,L;for(a=r,u=r,o=r,s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(c=t.substr(r,6),c.toLowerCase()===R?r+=6:(c=e,g===0&&O(Ns)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();l=[l,c,f,h],s=l}else r=s,s=e;else r=s,s=e;if(s!==e?o=t.substring(o,r):o=s,o!==e){if(s=Ms(),s===e&&(s=null),l=r,c=r,f=t.substr(r,4),f.toLowerCase()===w?r+=4:(f=e,g===0&&O(IA)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();f=[f,h,T],c=f}else r=c,c=e;else r=c,c=e;c!==e?l=t.substring(l,r):l=c,l!==e?(B=u,u=eR(o,s,l)):(r=u,u=e)}else r=u,u=e;if(u!==e)if(o=yi(),o===e&&(o=null),s=kt(),s===e&&(s=null),l=ir(),l!==e){for(c=r,f=r,h=r,T=[],A=m();A!==e;)T.push(A),A=m();if(h=t.substring(h,r),T=t.substr(r,2),T.toLowerCase()===b?r+=2:(T=e,g===0&&O(Nr)),T!==e)if(A=x(),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();p=t.substring(p,r),h=[h,T,A,p],f=h}else r=f,f=e;else r=f,f=e;if(f!==e?c=t.substring(c,r):c=f,c!==e){for(f=r,h=[],t.length>r?(T=t.charAt(r),r++):(T=e,g===0&&O(Ze));T!==e;)h.push(T),t.length>r?(T=t.charAt(r),r++):(T=e,g===0&&O(Ze));f=t.substring(f,r),B=a,a=tR(u,o,s,l,c,f)}else r=a,a=e}else r=a,a=e;else r=a,a=e;return a}function lI(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j,le,ae,me,Ue,je;for(a=r,u=r,o=r,s=[],l=m();l!==e;)s.push(l),l=m();if(l=t.substr(r,6),l.toLowerCase()===R?r+=6:(l=e,g===0&&O(Ns)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=r,T=t.substr(r,6),T.toLowerCase()===M?r+=6:(T=e,g===0&&O(gA)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e;if(h===e&&(h=null),T=t.substr(r,5),T.toLowerCase()===G?r+=5:(T=e,g===0&&O(OA)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();s=[s,l,c,f,h,T,A,p],o=s}else r=o,o=e;else r=o,o=e}else r=o,o=e;else r=o,o=e;if(o!==e?u=t.substring(u,r):u=o,u!==e)if(o=yi(),o===e&&(o=null),s=kt(),s===e&&(s=null),l=ir(),l!==e){for(c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),f=t.substr(r,2),f.toLowerCase()===$?r+=2:(f=e,g===0&&O(Zr)),f!==e)if(h=x(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();if(T=t.substring(T,r),A=ir(),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();if(p=t.substring(p,r),t.charCodeAt(r)===40?(N=I,r++):(N=e,g===0&&O(He)),N!==e){for(L=r,y=[],v=r,j=r,le=[],ae=m();ae!==e;)le.push(ae),ae=m();if(j=t.substring(j,r),le=ir(),le!==e){for(ae=r,me=[],Ue=m();Ue!==e;)me.push(Ue),Ue=m();ae=t.substring(ae,r),B=v,v=Du(u,o,s,l,c,f,T,A,p,j,le,ae)}else r=v,v=e;for(;v!==e;)if(y.push(v),v=r,t.charCodeAt(r)===44?(j=S,r++):(j=e,g===0&&O(At)),j!==e){for(j=r,le=r,ae=[],me=m();me!==e;)ae.push(me),me=m();if(le=t.substring(le,r),ae=ir(),ae!==e){for(me=r,Ue=[],je=m();je!==e;)Ue.push(je),je=m();me=t.substring(me,r),B=j,j=Du(u,o,s,l,c,f,T,A,p,le,ae,me)}else r=j,j=e;j===e?(r=v,v=e):v=j}else v=j;if(y.length<1?(r=L,L=e):L=y,L!==e)if(t.charCodeAt(r)===41?(y=C,r++):(y=e,g===0&&O(Be)),y!==e){for(v=r,j=[],t.length>r?(le=t.charAt(r),r++):(le=e,g===0&&O(Ze));le!==e;)j.push(le),t.length>r?(le=t.charAt(r),r++):(le=e,g===0&&O(Ze));v=t.substring(v,r),B=a,a=rR(u,o,s,l,c,f,T,A,p,L,v)}else r=a,a=e;else r=a,a=e}else r=a,a=e}else r=a,a=e}else r=a,a=e;else r=a,a=e}else r=a,a=e;else r=a,a=e;return a}function EI(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j,le,ae,me,Ue,je,et,bt,Yn,xs;for(a=r,u=r,o=r,s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(c=t.substr(r,6),c.toLowerCase()===R?r+=6:(c=e,g===0&&O(Ns)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();l=[l,c,f,h],s=l}else r=s,s=e;else r=s,s=e;if(s!==e?o=t.substring(o,r):o=s,o!==e){if(s=Ms(),s===e&&(s=null),l=r,c=r,f=t.substr(r,7),f.toLowerCase()===k?r+=7:(f=e,g===0&&O(_A)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();f=[f,h,T],c=f}else r=c,c=e;else r=c,c=e;c!==e?l=t.substring(l,r):l=c,l!==e?(B=u,u=nR(o,s,l)):(r=u,u=e)}else r=u,u=e;if(u!==e)if(o=yi(),o===e&&(o=null),s=kt(),s===e&&(s=null),l=ir(),l!==e){for(c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),f=r,h=t.substr(r,6),h.toLowerCase()===H?r+=6:(h=e,g===0&&O(LA)),h!==e?(T=x(),T!==e?(B=f,f=iR(u,o,s,l,c)):(r=f,f=e)):(r=f,f=e),f===e&&(f=r,h=t.substr(r,5),h.toLowerCase()===ie?r+=5:(h=e,g===0&&O(CA)),h!==e?(T=x(),T!==e?(B=f,f=sR(u,o,s,l,c)):(r=f,f=e)):(r=f,f=e),f===e))if(f=r,h=t.substr(r,7),h.toLowerCase()===P?r+=7:(h=e,g===0&&O(wA)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();p=t.substr(r,2),p.toLowerCase()===X?r+=2:(p=e,g===0&&O(QE)),p!==e?(N=x(),N!==e?(B=f,f=aR(u,o,s,l,c)):(r=f,f=e)):(r=f,f=e)}else r=f,f=e;else r=f,f=e;for(f===e&&(f=null),h=r,T=[],A=m();A!==e;)T.push(A),A=m();if(h=t.substring(h,r),T=r,A=t.substr(r,6),A.toLowerCase()===Q?r+=6:(A=e,g===0&&O(To)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();B=T,T=oR(u,o,s,l,c,f,h)}else r=T,T=e;else r=T,T=e;if(T===e){if(T=r,A=t.substr(r,6),A.toLowerCase()===ee?r+=6:(A=e,g===0&&O(yA)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();B=T,T=lR(u,o,s,l,c,f,h)}else r=T,T=e;else r=T,T=e;if(T===e)if(T=r,A=t.substr(r,6),A.toLowerCase()===te?r+=6:(A=e,g===0&&O(mo)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();if(L=r,y=t.substr(r,2),y.toLowerCase()===X?r+=2:(y=e,g===0&&O(QE)),y!==e)if(v=x(),v!==e){for(j=r,le=[],ae=m();ae!==e;)le.push(ae),ae=m();for(j=t.substring(j,r),le=r,ae=[],me=r,Ue=r,je=[],et=m();et!==e;)je.push(et),et=m();if(Ue=t.substring(Ue,r),je=ir(),je!==e){for(et=r,bt=[],Yn=m();Yn!==e;)bt.push(Yn),Yn=m();et=t.substring(et,r),B=me,me=Pu(u,o,s,l,c,f,h,y,j,Ue,je,et)}else r=me,me=e;for(;me!==e;)if(ae.push(me),me=r,t.charCodeAt(r)===44?(Ue=S,r++):(Ue=e,g===0&&O(At)),Ue!==e){for(Ue=r,je=r,et=[],bt=m();bt!==e;)et.push(bt),bt=m();if(je=t.substring(je,r),et=ir(),et!==e){for(bt=r,Yn=[],xs=m();xs!==e;)Yn.push(xs),xs=m();bt=t.substring(bt,r),B=Ue,Ue=Pu(u,o,s,l,c,f,h,y,j,je,et,bt)}else r=Ue,Ue=e;Ue===e?(r=me,me=e):me=Ue}else me=Ue;ae.length<1?(r=le,le=e):le=ae,le!==e?(B=L,L=ER(u,o,s,l,c,f,h,y,j,le)):(r=L,L=e)}else r=L,L=e;else r=L,L=e;L===e&&(L=null),B=T,T=uR(u,o,s,l,c,f,h,L)}else r=T,T=e;else r=T,T=e}if(T!==e)if(A=t.substr(r,2),A.toLowerCase()===$?r+=2:(A=e,g===0&&O(Zr)),A!==e)if(p=x(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();if(N=t.substring(N,r),L=ir(),L!==e){for(y=r,v=[],t.length>r?(j=t.charAt(r),r++):(j=e,g===0&&O(Ze));j!==e;)v.push(j),t.length>r?(j=t.charAt(r),r++):(j=e,g===0&&O(Ze));y=t.substring(y,r),B=a,a=cR(u,o,s,l,c,f,h,T,A,N,L,y)}else r=a,a=e}else r=a,a=e;else r=a,a=e;else r=a,a=e}else r=a,a=e;else r=a,a=e;return a}function uI(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j,le,ae,me;for(a=r,u=[],o=St(),o===e&&(o=wt(),o===e&&(o=r,s=r,g++,l=r,c=t.substr(r,5),c.toLowerCase()===se?r+=5:(c=e,g===0&&O(Ii)),c!==e?(f=x(),f!==e?(c=[c,f],l=c):(r=l,l=e)):(r=l,l=e),g--,l===e?s=void 0:(r=s,s=e),s!==e?(l=tn(),l===e&&(t.length>r?(l=t.charAt(r),r++):(l=e,g===0&&O(Ze))),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e)));o!==e;)u.push(o),o=St(),o===e&&(o=wt(),o===e&&(o=r,s=r,g++,l=r,c=t.substr(r,5),c.toLowerCase()===se?r+=5:(c=e,g===0&&O(Ii)),c!==e?(f=x(),f!==e?(c=[c,f],l=c):(r=l,l=e)):(r=l,l=e),g--,l===e?s=void 0:(r=s,s=e),s!==e?(l=tn(),l===e&&(t.length>r?(l=t.charAt(r),r++):(l=e,g===0&&O(Ze))),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e)));if(o=t.substr(r,5),o.toLowerCase()===se?r+=5:(o=e,g===0&&O(Ii)),o!==e)if(s=x(),s!==e){if(l=[],c=m(),c!==e)for(;c!==e;)l.push(c),c=m();else l=e;if(l!==e)if(c=t.substr(r,3),c.toLowerCase()===Oe?r+=3:(c=e,g===0&&O(bA)),c!==e){if(f=[],h=nr(),h!==e)for(;h!==e;)f.push(h),h=nr();else f=e;if(f!==e)if(h=x(),h!==e){if(T=[],A=St(),A===e&&(A=wt(),A===e)){if(A=r,p=r,g++,N=r,L=t.substr(r,7),L.toLowerCase()===Y?r+=7:(L=e,g===0&&O(po)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();t.charCodeAt(r)===61?(j=oe,r++):(j=e,g===0&&O(Is)),j!==e?(L=[L,y,v,j],N=L):(r=N,N=e)}else r=N,N=e;else r=N,N=e;g--,N===e?p=void 0:(r=p,p=e),p!==e?(N=tn(),N===e&&(t.length>r?(N=t.charAt(r),r++):(N=e,g===0&&O(Ze))),N!==e?(p=[p,N],A=p):(r=A,A=e)):(r=A,A=e)}if(A!==e){for(;A!==e;)if(T.push(A),A=St(),A===e&&(A=wt(),A===e)){if(A=r,p=r,g++,N=r,L=t.substr(r,7),L.toLowerCase()===Y?r+=7:(L=e,g===0&&O(po)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();t.charCodeAt(r)===61?(j=oe,r++):(j=e,g===0&&O(Is)),j!==e?(L=[L,y,v,j],N=L):(r=N,N=e)}else r=N,N=e;else r=N,N=e;g--,N===e?p=void 0:(r=p,p=e),p!==e?(N=tn(),N===e&&(t.length>r?(N=t.charAt(r),r++):(N=e,g===0&&O(Ze))),N!==e?(p=[p,N],A=p):(r=A,A=e)):(r=A,A=e)}}else T=e;if(T!==e)if(A=t.substr(r,7),A.toLowerCase()===Y?r+=7:(A=e,g===0&&O(po)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();if(t.charCodeAt(r)===61?(L=oe,r++):(L=e,g===0&&O(Is)),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=xe(),v!==e){for(j=[],le=m();le!==e;)j.push(le),le=m();if(le=t.charAt(r),dA.test(le)?r++:(le=e,g===0&&O(DA)),le!==e){for(ae=[],t.length>r?(me=t.charAt(r),r++):(me=e,g===0&&O(Ze));me!==e;)ae.push(me),t.length>r?(me=t.charAt(r),r++):(me=e,g===0&&O(Ze));B=a,a=dR(v)}else r=a,a=e}else r=a,a=e}else r=a,a=e}else r=a,a=e;else r=a,a=e;else r=a,a=e}else r=a,a=e;else r=a,a=e}else r=a,a=e;else r=a,a=e}else r=a,a=e;else r=a,a=e;return a}function yi(){var a,u,o,s,l,c,f,h,T,A,p,N;if(a=r,u=r,o=t.substr(r,2),o.toLowerCase()===W?r+=2:(o=e,g===0&&O(PA)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();if(c=t.substr(r,3),c.toLowerCase()===q?r+=3:(c=e,g===0&&O(tr)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(T=t.substr(r,6),T.toLowerCase()===ce?r+=6:(T=e,g===0&&O(zE)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();o=[o,s,l,c,f,h,T,A,p],u=o}else r=u,u=e;else r=u,u=e}else r=u,u=e;else r=u,u=e}else r=u,u=e;else r=u,u=e;return u!==e?a=t.substring(a,r):a=u,a}function cI(){var a,u,o,s,l,c,f,h,T,A,p,N;if(a=r,u=[],o=r,s=xe(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();if(c=r,t.charCodeAt(r)===40?(f=I,r++):(f=e,g===0&&O(He)),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(T=Et(),t.charCodeAt(r)===41?(A=C,r++):(A=e,g===0&&O(Be)),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();f=[f,h,T,A,p],c=f}else r=c,c=e}else r=c,c=e;if(c===e&&(c=null),f=t.substr(r,2),f.toLowerCase()===b?r+=2:(f=e,g===0&&O(Nr)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();t.charCodeAt(r)===40?(A=I,r++):(A=e,g===0&&O(He)),A!==e?(B=o,o=Mu(s)):(r=o,o=e)}else r=o,o=e;else r=o,o=e}else r=o,o=e;if(o===e&&(o=r,s=St(),s!==e&&(B=o,s=vu()),o=s,o===e&&(o=r,s=wt(),s!==e&&(B=o,s=xu()),o=s,o===e))){if(o=r,s=[],l=t.charAt(r),Ss.test(l)?r++:(l=e,g===0&&O(gs)),l!==e)for(;l!==e;)s.push(l),l=t.charAt(r),Ss.test(l)?r++:(l=e,g===0&&O(gs));else s=e;s!==e&&(B=o,s=Uu()),o=s,o===e&&(o=r,t.length>r?(s=t.charAt(r),r++):(s=e,g===0&&O(Ze)),s!==e&&(B=o,s=Gu()),o=s)}for(;o!==e;){if(u.push(o),o=r,s=xe(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();if(c=r,t.charCodeAt(r)===40?(f=I,r++):(f=e,g===0&&O(He)),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(T=Et(),t.charCodeAt(r)===41?(A=C,r++):(A=e,g===0&&O(Be)),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();f=[f,h,T,A,p],c=f}else r=c,c=e}else r=c,c=e;if(c===e&&(c=null),f=t.substr(r,2),f.toLowerCase()===b?r+=2:(f=e,g===0&&O(Nr)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();t.charCodeAt(r)===40?(A=I,r++):(A=e,g===0&&O(He)),A!==e?(B=o,o=Mu(s)):(r=o,o=e)}else r=o,o=e;else r=o,o=e}else r=o,o=e;if(o===e&&(o=r,s=St(),s!==e&&(B=o,s=vu()),o=s,o===e&&(o=r,s=wt(),s!==e&&(B=o,s=xu()),o=s,o===e))){if(o=r,s=[],l=t.charAt(r),Ss.test(l)?r++:(l=e,g===0&&O(gs)),l!==e)for(;l!==e;)s.push(l),l=t.charAt(r),Ss.test(l)?r++:(l=e,g===0&&O(gs));else s=e;s!==e&&(B=o,s=Uu()),o=s,o===e&&(o=r,t.length>r?(s=t.charAt(r),r++):(s=e,g===0&&O(Ze)),s!==e&&(B=o,s=Gu()),o=s)}}return B=a,u=fR(u),a=u,a}function dI(){var a,u,o,s,l,c,f;for(a=r,u=Ds(),o=[],s=r,l=r,c=t.substr(r,4),c.toLowerCase()===pe?r+=4:(c=e,g===0&&O(xn)),c!==e?(f=x(),f!==e?(B=l,l=Bu()):(r=l,l=e)):(r=l,l=e),l!==e?(c=Ds(),s=l):(r=s,s=e);s!==e;)o.push(s),s=r,l=r,c=t.substr(r,4),c.toLowerCase()===pe?r+=4:(c=e,g===0&&O(xn)),c!==e?(f=x(),f!==e?(B=l,l=Bu()):(r=l,l=e)):(r=l,l=e),l!==e?(c=Ds(),s=l):(r=s,s=e);return B=a,a=hR(o),a}function Ds(){var a,u,o,s,l,c;for(a=[],u=St(),u===e&&(u=wt(),u===e&&(u=r,o=r,g++,s=r,l=t.substr(r,4),l.toLowerCase()===pe?r+=4:(l=e,g===0&&O(xn)),l!==e?(c=x(),c!==e?(l=[l,c],s=l):(r=s,s=e)):(r=s,s=e),g--,s===e?o=void 0:(r=o,o=e),o!==e?(s=tn(),s===e&&(t.length>r?(s=t.charAt(r),r++):(s=e,g===0&&O(Ze))),s!==e?(o=[o,s],u=o):(r=u,u=e)):(r=u,u=e)));u!==e;)a.push(u),u=St(),u===e&&(u=wt(),u===e&&(u=r,o=r,g++,s=r,l=t.substr(r,4),l.toLowerCase()===pe?r+=4:(l=e,g===0&&O(xn)),l!==e?(c=x(),c!==e?(l=[l,c],s=l):(r=s,s=e)):(r=s,s=e),g--,s===e?o=void 0:(r=o,o=e),o!==e?(s=tn(),s===e&&(t.length>r?(s=t.charAt(r),r++):(s=e,g===0&&O(Ze))),s!==e?(o=[o,s],u=o):(r=u,u=e)):(r=u,u=e)));return a}function tn(){var a,u;if(a=[],u=t.charAt(r),VE.test(u)?r++:(u=e,g===0&&O(ZE)),u!==e)for(;u!==e;)a.push(u),u=t.charAt(r),VE.test(u)?r++:(u=e,g===0&&O(ZE));else a=e;return a}function fI(){var a,u,o,s,l;if(a=r,u=yo(),u!==e){for(o=r,s=[],t.length>r?(l=t.charAt(r),r++):(l=e,g===0&&O(Ze));l!==e;)s.push(l),t.length>r?(l=t.charAt(r),r++):(l=e,g===0&&O(Ze));o=t.substring(o,r),a=u}else r=a,a=e;return a}function yo(){var a,u,o,s,l,c,f,h,T,A;for(a=r,u=r,o=[],s=m();s!==e;)o.push(s),s=m();if(u=t.substring(u,r),o=lc(),o!==e?a=o:(r=a,a=e),a===e){for(a=r,u=r,o=[],s=r,l=r,c=[],f=m();f!==e;)c.push(f),f=m();if(l=t.substring(l,r),c=Fn(),c!==e){for(f=r,h=[],T=m();T!==e;)h.push(T),T=m();f=t.substring(f,r),s=c}else r=s,s=e;for(;s!==e;)if(o.push(s),s=r,t.charCodeAt(r)===44?(l=S,r++):(l=e,g===0&&O(At)),l!==e){for(l=r,c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),f=Fn(),f!==e){for(h=r,T=[],A=m();A!==e;)T.push(A),A=m();h=t.substring(h,r),l=f}else r=l,l=e;l===e?(r=s,s=e):s=l}else s=l;o.length<1?(r=u,u=e):u=o,u!==e&&(B=a,u=TR(u)),a=u}return a}function Fn(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y;if(a=r,u=kt(),u===e&&(u=null),o=xe(),o!==e){for(s=r,l=[],c=m();c!==e;)l.push(c),c=m();s=t.substring(s,r),t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e?(c=Et(),t.charCodeAt(r)===41?(f=C,r++):(f=e,g===0&&O(Be)),f!==e?(h=rn(),h===e&&(h=null),B=a,a=mR()):(r=a,a=e)):(r=a,a=e)}else r=a,a=e;if(a===e){if(a=r,u=kt(),u===e&&(u=null),o=xe(),o!==e){for(s=rn(),s===e&&(s=null),l=r,c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),f=t.substr(r,7),f.toLowerCase()===Me?r+=7:(f=e,g===0&&O(Os)),f!==e)if(h=x(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();if(T=t.substring(T,r),A=t.substr(r,2),A.toLowerCase()===Ie?r+=2:(A=e,g===0&&O(gi)),A!==e)if(p=x(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),L=xe(),L!==e?(c=[c,f,h,T,A,p,N,L],l=c):(r=l,l=e)}else r=l,l=e;else r=l,l=e}else r=l,l=e;else r=l,l=e;if(l===e){for(l=r,c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),f=t.substr(r,3),f.toLowerCase()===q?r+=3:(f=e,g===0&&O(tr)),f!==e)if(h=x(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();if(T=t.substring(T,r),A=t.substr(r,7),A.toLowerCase()===Me?r+=7:(A=e,g===0&&O(Os)),A!==e)if(p=x(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),c=[c,f,h,T,A,p,N],l=c}else r=l,l=e;else r=l,l=e}else r=l,l=e;else r=l,l=e}l===e&&(l=null),B=a,a=pR(u,o)}else r=a,a=e;if(a===e){if(a=r,t.charCodeAt(r)===40?(u=I,r++):(u=e,g===0&&O(He)),u!==e){for(o=r,s=[],l=m();l!==e;)s.push(l),l=m();if(o=t.substring(o,r),s=yo(),s!==e){for(l=r,c=[],f=m();f!==e;)c.push(f),f=m();l=t.substring(l,r),t.charCodeAt(r)===41?(c=C,r++):(c=e,g===0&&O(Be)),c!==e?a=s:(r=a,a=e)}else r=a,a=e}else r=a,a=e;a===e&&(a=r,t.charCodeAt(r)===40?(u=I,r++):(u=e,g===0&&O(He)),u!==e?(o=Et(),t.charCodeAt(r)===41?(s=C,r++):(s=e,g===0&&O(Be)),s!==e?(l=rn(),l===e&&(l=null),B=a,a=AR()):(r=a,a=e)):(r=a,a=e))}}return a}function lc(){var a,u,o,s,l,c,f,h,T,A,p;if(a=r,u=Fn(),u!==e){for(o=[],s=r,l=r,c=[],f=m();f!==e;)c.push(f),f=m();if(l=t.substring(l,r),c=bi(),c!==e){for(f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),h=Fn(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),A=bo(),s=h}else r=s,s=e}else r=s,s=e;for(;s!==e;){for(o.push(s),s=r,l=r,c=[],f=m();f!==e;)c.push(f),f=m();if(l=t.substring(l,r),c=bi(),c!==e){for(f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),h=Fn(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),A=bo(),s=h}else r=s,s=e}else r=s,s=e}B=a,a=SR(u,o)}else r=a,a=e;return a}function bo(){var a,u,o,s,l,c,f;if(a=r,u=r,o=r,s=t.substr(r,2),s.toLowerCase()===$?r+=2:(s=e,g===0&&O(Zr)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;if(o!==e?u=t.substring(u,r):u=o,u!==e?(o=Ge(),o!==e?(B=a,a=RR(u,o)):(r=a,a=e)):(r=a,a=e),a===e){if(a=r,u=r,o=r,s=t.substr(r,5),s.toLowerCase()===se?r+=5:(s=e,g===0&&O(Ii)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;o!==e?u=t.substring(u,r):u=o,u!==e?(t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e?(s=Et(),t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e?(B=a,a=NR(u)):(r=a,a=e)):(r=a,a=e)):(r=a,a=e)}return a===e&&(a=null),a}function hI(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j,le,ae,me,Ue,je,et,bt;for(a=r,u=r,o=r,s=[],l=m();l!==e;)s.push(l),l=m();if(l=t.substr(r,6),l.toLowerCase()===nt?r+=6:(l=e,g===0&&O(MA)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();s=[s,l,c,f],o=s}else r=o,o=e;else r=o,o=e;if(o!==e?u=t.substring(u,r):u=o,u!==e){if(o=r,s=t.substr(r,8),s.toLowerCase()===Xe?r+=8:(s=e,g===0&&O(eu)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();B=o,o=IR(u)}else r=o,o=e;else r=o,o=e;if(o===e)if(o=r,s=t.substr(r,3),s.toLowerCase()===Zt?r+=3:(s=e,g===0&&O(vA)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();B=o,o=gR(u)}else r=o,o=e;else r=o,o=e;for(o===e&&(o=null),s=r,l=[],c=r,f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),h=Mo(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),B=c,c=Fu(u,o,f,h,T)}else r=c,c=e;for(;c!==e;)if(l.push(c),c=r,t.charCodeAt(r)===44?(f=S,r++):(f=e,g===0&&O(At)),f!==e){for(f=r,h=r,T=[],A=m();A!==e;)T.push(A),A=m();if(h=t.substring(h,r),T=Mo(),T!==e){for(A=r,p=[],N=m();N!==e;)p.push(N),N=m();A=t.substring(A,r),B=f,f=Fu(u,o,h,T,A)}else r=f,f=e;f===e?(r=c,c=e):c=f}else c=f;if(l.length<1?(r=s,s=e):s=l,s!==e){if(l=r,c=r,f=r,h=t.substr(r,4),h.toLowerCase()===pe?r+=4:(h=e,g===0&&O(xn)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();h=[h,T,A],f=h}else r=f,f=e;else r=f,f=e;if(f!==e?c=t.substring(c,r):c=f,c!==e){if(f=r,h=dc(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),B=f,f=_R(u,o,s,c,h,T)}else r=f,f=e;if(f===e){for(f=r,h=[],T=r,A=r,p=[],N=m();N!==e;)p.push(N),N=m();if(A=t.substring(A,r),p=Hn(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),B=T,T=Hu(u,o,s,c,A,p,N)}else r=T,T=e;for(;T!==e;)if(h.push(T),T=r,t.charCodeAt(r)===44?(A=S,r++):(A=e,g===0&&O(At)),A!==e){for(A=r,p=r,N=[],L=m();L!==e;)N.push(L),L=m();if(p=t.substring(p,r),N=Hn(),N!==e){for(L=r,y=[],v=m();v!==e;)y.push(v),v=m();L=t.substring(L,r),B=A,A=Hu(u,o,s,c,p,N,L)}else r=A,A=e;A===e?(r=T,T=e):T=A}else T=A;h.length<1?(r=f,f=e):f=h}f!==e?(B=l,l=LR(u,o,s,c,f)):(r=l,l=e)}else r=l,l=e;if(l===e&&(l=null),c=r,f=r,h=r,T=t.substr(r,5),T.toLowerCase()===cr?r+=5:(T=e,g===0&&O(tu)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e;if(h!==e?f=t.substring(f,r):f=h,f!==e?(h=Ge(),h!==e?(B=c,c=CR(u,o,s,l,f,h)):(r=c,c=e)):(r=c,c=e),c===e&&(c=null),f=r,h=r,T=r,A=t.substr(r,5),A.toLowerCase()===er?r+=5:(A=e,g===0&&O(ru)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();if(L=t.substr(r,2),L.toLowerCase()===Ie?r+=2:(L=e,g===0&&O(gi)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();A=[A,p,N,L,y,v],T=A}else r=T,T=e;else r=T,T=e}else r=T,T=e;else r=T,T=e;if(T!==e?h=t.substring(h,r):h=T,h!==e){for(T=r,A=[],p=r,N=r,L=[],y=m();y!==e;)L.push(y),y=m();if(N=t.substring(N,r),L=Ge(),L!==e){for(y=r,v=[],j=m();j!==e;)v.push(j),j=m();y=t.substring(y,r),B=p,p=ku(u,o,s,l,c,h,N,L,y)}else r=p,p=e;for(;p!==e;)if(A.push(p),p=r,t.charCodeAt(r)===44?(N=S,r++):(N=e,g===0&&O(At)),N!==e){for(N=r,L=r,y=[],v=m();v!==e;)y.push(v),v=m();if(L=t.substring(L,r),y=Ge(),y!==e){for(v=r,j=[],le=m();le!==e;)j.push(le),le=m();v=t.substring(v,r),B=N,N=ku(u,o,s,l,c,h,L,y,v)}else r=N,N=e;N===e?(r=p,p=e):p=N}else p=N;A.length<1?(r=T,T=e):T=A,T!==e?(B=f,f=wR(u,o,s,l,c,h,T)):(r=f,f=e)}else r=f,f=e;if(f===e&&(f=null),h=r,T=r,A=r,p=t.substr(r,6),p.toLowerCase()===Sp?r+=6:(p=e,g===0&&O(xA)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();p=[p,N,L],A=p}else r=A,A=e;else r=A,A=e;if(A!==e?T=t.substring(T,r):T=A,T!==e)if(A=Ge(),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();p=t.substring(p,r),B=h,h=yR(u,o,s,l,c,f,T,A,p)}else r=h,h=e;else r=h,h=e;if(h===e&&(h=null),T=r,A=r,p=r,N=t.substr(r,6),N.toLowerCase()===Rp?r+=6:(N=e,g===0&&O(UA)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();N=[N,L,y],p=N}else r=p,p=e;else r=p,p=e;if(p!==e?A=t.substring(A,r):A=p,A!==e){for(p=r,N=[],L=r,y=r,v=[],j=m();j!==e;)v.push(j),j=m();if(y=t.substring(y,r),v=xe(),v!==e){for(j=r,le=[],ae=m();ae!==e;)le.push(ae),ae=m();if(j=t.substring(j,r),le=r,ae=r,me=t.substr(r,2),me.toLowerCase()===b?r+=2:(me=e,g===0&&O(Nr)),me!==e)if(Ue=x(),Ue!==e){for(je=[],et=m();et!==e;)je.push(et),et=m();me=[me,Ue,je],ae=me}else r=ae,ae=e;else r=ae,ae=e;if(ae!==e?le=t.substring(le,r):le=ae,le!==e)if(ae=Do(),ae!==e){for(me=r,Ue=[],je=m();je!==e;)Ue.push(je),je=m();me=t.substring(me,r),B=L,L=Yu(u,o,s,l,c,f,h,A,y,v,j,le,ae,me)}else r=L,L=e;else r=L,L=e}else r=L,L=e;for(;L!==e;)if(N.push(L),L=r,t.charCodeAt(r)===44?(y=S,r++):(y=e,g===0&&O(At)),y!==e){for(y=r,v=r,j=[],le=m();le!==e;)j.push(le),le=m();if(v=t.substring(v,r),j=xe(),j!==e){for(le=r,ae=[],me=m();me!==e;)ae.push(me),me=m();if(le=t.substring(le,r),ae=r,me=r,Ue=t.substr(r,2),Ue.toLowerCase()===b?r+=2:(Ue=e,g===0&&O(Nr)),Ue!==e)if(je=x(),je!==e){for(et=[],bt=m();bt!==e;)et.push(bt),bt=m();Ue=[Ue,je,et],me=Ue}else r=me,me=e;else r=me,me=e;if(me!==e?ae=t.substring(ae,r):ae=me,ae!==e)if(me=Do(),me!==e){for(Ue=r,je=[],et=m();et!==e;)je.push(et),et=m();Ue=t.substring(Ue,r),B=y,y=Yu(u,o,s,l,c,f,h,A,v,j,le,ae,me,Ue)}else r=y,y=e;else r=y,y=e}else r=y,y=e;y===e?(r=L,L=e):L=y}else L=y;N.length<1?(r=p,p=e):p=N,p!==e?(B=T,T=bR(u,o,s,l,c,f,h,A,p)):(r=T,T=e)}else r=T,T=e;T===e&&(T=null),B=a,a=DR(u,o,s,l,c,f,h,T)}else r=a,a=e}else r=a,a=e;return a}function Do(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j;if(a=r,t.charCodeAt(r)===40?(u=I,r++):(u=e,g===0&&O(He)),u!==e){for(o=xe(),o===e&&(o=null),s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(s=t.substring(s,r),l=r,c=r,f=r,h=t.substr(r,9),h.toLowerCase()===Np?r+=9:(h=e,g===0&&O(GA)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=t.substr(r,2),p.toLowerCase()===Ie?r+=2:(p=e,g===0&&O(gi)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();h=[h,T,A,p,N,L],f=h}else r=f,f=e;else r=f,f=e}else r=f,f=e;else r=f,f=e;if(f!==e?c=t.substring(c,r):c=f,c!==e){for(f=r,h=[],T=r,A=r,p=[],N=m();N!==e;)p.push(N),N=m();if(A=t.substring(A,r),p=Ge(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),B=T,T=Vu(o,s,c,A,p,N)}else r=T,T=e;for(;T!==e;)if(h.push(T),T=r,t.charCodeAt(r)===44?(A=S,r++):(A=e,g===0&&O(At)),A!==e){for(A=r,p=r,N=[],L=m();L!==e;)N.push(L),L=m();if(p=t.substring(p,r),N=Ge(),N!==e){for(L=r,y=[],v=m();v!==e;)y.push(v),v=m();L=t.substring(L,r),B=A,A=Vu(o,s,c,p,N,L)}else r=A,A=e;A===e?(r=T,T=e):T=A}else T=A;h.length<1?(r=f,f=e):f=h,f!==e?(B=l,l=PR(o,s,c,f)):(r=l,l=e)}else r=l,l=e;if(l===e&&(l=null),c=r,f=r,h=r,T=t.substr(r,5),T.toLowerCase()===Ip?r+=5:(T=e,g===0&&O(BA)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();if(N=t.substr(r,2),N.toLowerCase()===Ie?r+=2:(N=e,g===0&&O(gi)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();T=[T,A,p,N,L,y],h=T}else r=h,h=e;else r=h,h=e}else r=h,h=e;else r=h,h=e;if(h!==e?f=t.substring(f,r):f=h,f!==e){for(h=r,T=[],A=r,p=r,N=[],L=m();L!==e;)N.push(L),L=m();if(p=t.substring(p,r),N=Po(),N!==e){for(L=r,y=[],v=m();v!==e;)y.push(v),v=m();L=t.substring(L,r),B=A,A=Wu(o,s,l,f,p,N,L)}else r=A,A=e;for(;A!==e;)if(T.push(A),A=r,t.charCodeAt(r)===44?(p=S,r++):(p=e,g===0&&O(At)),p!==e){for(p=r,N=r,L=[],y=m();y!==e;)L.push(y),y=m();if(N=t.substring(N,r),L=Po(),L!==e){for(y=r,v=[],j=m();j!==e;)v.push(j),j=m();y=t.substring(y,r),B=p,p=Wu(o,s,l,f,N,L,y)}else r=p,p=e;p===e?(r=A,A=e):A=p}else A=p;T.length<1?(r=h,h=e):h=T,h!==e?(B=c,c=MR(o,s,l,f,h)):(r=c,c=e)}else r=c,c=e;for(c===e&&(c=null),f=Ec(),f===e&&(f=null),h=r,T=[],A=m();A!==e;)T.push(A),A=m();h=t.substring(h,r),t.charCodeAt(r)===41?(T=C,r++):(T=e,g===0&&O(Be)),T!==e?(B=a,a=vR(o,s,l,c,f,h)):(r=a,a=e)}else r=a,a=e;return a}function Po(){var a,u,o,s,l,c,f,h,T,A,p,N;if(a=r,u=Ge(),u!==e){if(o=r,s=r,l=r,c=t.substr(r,7),c.toLowerCase()===io?r+=7:(c=e,g===0&&O(Ao)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();c=[c,f,h],l=c}else r=l,l=e;else r=l,l=e;if(l!==e?s=t.substring(s,r):s=l,s!==e)if(l=xe(),l!==e){for(c=r,f=[],h=m();h!==e;)f.push(h),h=m();c=t.substring(c,r),B=o,o=xR(u,s,l,c)}else r=o,o=e;else r=o,o=e;if(o===e&&(o=null),s=Vo(),s===e&&(s=null),l=r,c=t.substr(r,5),c.toLowerCase()===uE?r+=5:(c=e,g===0&&O(nu)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(T=t.substr(r,5),T.toLowerCase()===gp?r+=5:(T=e,g===0&&O(FA)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();B=l,l=UR(u,o,s)}else r=l,l=e;else r=l,l=e}else r=l,l=e;else r=l,l=e;if(l===e)if(l=r,c=t.substr(r,5),c.toLowerCase()===uE?r+=5:(c=e,g===0&&O(nu)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(T=t.substr(r,4),T.toLowerCase()===Op?r+=4:(T=e,g===0&&O(HA)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();B=l,l=GR(u,o,s)}else r=l,l=e;else r=l,l=e}else r=l,l=e;else r=l,l=e;l===e&&(l=null),B=a,a=BR(u,o,s,l)}else r=a,a=e;return a}function Ec(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j,le,ae;if(a=r,u=r,o=t.substr(r,5),o.toLowerCase()===_p?r+=5:(o=e,g===0&&O(kA)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;if(u===e){if(u=r,o=t.substr(r,4),o.toLowerCase()===Lp?r+=4:(o=e,g===0&&O(YA)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;if(u===e)if(u=r,o=t.substr(r,6),o.toLowerCase()===Cp?r+=6:(o=e,g===0&&O(VA)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e}if(u!==e){if(o=r,s=t.substr(r,7),s.toLowerCase()===cE?r+=7:(s=e,g===0&&O(iu)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();if(f=r,h=t.substr(r,9),h.toLowerCase()===so?r+=9:(h=e,g===0&&O(So)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=t.substr(r,9),p.toLowerCase()===Si?r+=9:(p=e,g===0&&O(Oi)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();h=[h,T,A,p,N,L],f=h}else r=f,f=e;else r=f,f=e}else r=f,f=e;else r=f,f=e;if(f===e){if(f=r,h=Ge(),h!==e)if(T=t.substr(r,9),T.toLowerCase()===Si?r+=9:(T=e,g===0&&O(Oi)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();h=[h,T,A,p],f=h}else r=f,f=e;else r=f,f=e;else r=f,f=e;if(f===e){if(f=r,h=t.substr(r,7),h.toLowerCase()===ds?r+=7:(h=e,g===0&&O(_s)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=t.substr(r,3),p.toLowerCase()===fs?r+=3:(p=e,g===0&&O(Ls)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();h=[h,T,A,p,N,L],f=h}else r=f,f=e;else r=f,f=e}else r=f,f=e;else r=f,f=e;if(f===e)if(f=r,h=Ge(),h!==e)if(T=t.substr(r,9),T.toLowerCase()===ao?r+=9:(T=e,g===0&&O(Ro)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();h=[h,T,A,p],f=h}else r=f,f=e;else r=f,f=e;else r=f,f=e}}if(f!==e)if(h=t.substr(r,3),h.toLowerCase()===oo?r+=3:(h=e,g===0&&O(No)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=r,N=Ge(),N!==e)if(L=t.substr(r,9),L.toLowerCase()===Si?r+=9:(L=e,g===0&&O(Oi)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();N=[N,L,y,v],p=N}else r=p,p=e;else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=t.substr(r,7),N.toLowerCase()===ds?r+=7:(N=e,g===0&&O(_s)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,3),v.toLowerCase()===fs?r+=3:(v=e,g===0&&O(Ls)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=Ge(),N!==e)if(L=t.substr(r,9),L.toLowerCase()===ao?r+=9:(L=e,g===0&&O(Ro)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();N=[N,L,y,v],p=N}else r=p,p=e;else r=p,p=e;else r=p,p=e;if(p===e)if(p=r,N=t.substr(r,9),N.toLowerCase()===so?r+=9:(N=e,g===0&&O(So)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,9),v.toLowerCase()===ao?r+=9:(v=e,g===0&&O(Ro)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e}}p!==e?(s=[s,l,c,f,h,T,A,p],o=s):(r=o,o=e)}else r=o,o=e;else r=o,o=e;else r=o,o=e}else r=o,o=e;else r=o,o=e;if(o===e){if(o=r,s=t.substr(r,9),s.toLowerCase()===so?r+=9:(s=e,g===0&&O(So)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();if(f=t.substr(r,9),f.toLowerCase()===Si?r+=9:(f=e,g===0&&O(Oi)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();s=[s,l,c,f,h,T],o=s}else r=o,o=e;else r=o,o=e}else r=o,o=e;else r=o,o=e;if(o===e){if(o=r,s=Ge(),s!==e)if(l=t.substr(r,9),l.toLowerCase()===Si?r+=9:(l=e,g===0&&O(Oi)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();s=[s,l,c,f],o=s}else r=o,o=e;else r=o,o=e;else r=o,o=e;if(o===e)if(o=r,s=t.substr(r,7),s.toLowerCase()===ds?r+=7:(s=e,g===0&&O(_s)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();if(f=t.substr(r,3),f.toLowerCase()===fs?r+=3:(f=e,g===0&&O(Ls)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();s=[s,l,c,f,h,T],o=s}else r=o,o=e;else r=o,o=e}else r=o,o=e;else r=o,o=e}}if(o!==e){if(s=r,l=t.substr(r,7),l.toLowerCase()===hs?r+=7:(l=e,g===0&&O(Cs)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=t.substr(r,2),h.toLowerCase()===lo?r+=2:(h=e,g===0&&O(Io)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=t.substr(r,6),p.toLowerCase()===wp?r+=6:(p=e,g===0&&O(WA)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();l=[l,c,f,h,T,A,p,N,L],s=l}else r=s,s=e;else r=s,s=e}else r=s,s=e;else r=s,s=e}else r=s,s=e;else r=s,s=e;if(s===e){if(s=r,l=t.substr(r,7),l.toLowerCase()===hs?r+=7:(l=e,g===0&&O(Cs)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=t.substr(r,7),h.toLowerCase()===ds?r+=7:(h=e,g===0&&O(_s)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=t.substr(r,3),p.toLowerCase()===fs?r+=3:(p=e,g===0&&O(Ls)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();l=[l,c,f,h,T,A,p,N,L],s=l}else r=s,s=e;else r=s,s=e}else r=s,s=e;else r=s,s=e}else r=s,s=e;else r=s,s=e;if(s===e){if(s=r,l=t.substr(r,7),l.toLowerCase()===hs?r+=7:(l=e,g===0&&O(Cs)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=t.substr(r,5),h.toLowerCase()===er?r+=5:(h=e,g===0&&O(ru)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();l=[l,c,f,h,T,A],s=l}else r=s,s=e;else r=s,s=e}else r=s,s=e;else r=s,s=e;if(s===e)if(s=r,l=t.substr(r,7),l.toLowerCase()===hs?r+=7:(l=e,g===0&&O(Cs)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=t.substr(r,4),h.toLowerCase()===yp?r+=4:(h=e,g===0&&O($A)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();l=[l,c,f,h,T,A],s=l}else r=s,s=e;else r=s,s=e}else r=s,s=e;else r=s,s=e}}s===e&&(s=null),B=a,a=FR()}else r=a,a=e}else r=a,a=e;return a}function Mo(){var a,u,o,s,l,c,f,h,T;if(a=r,t.charCodeAt(r)===42?(u=dE,r++):(u=e,g===0&&O(su)),u!==e&&(B=a,u=HR()),a=u,a===e&&(a=r,u=kt(),u!==e?(t.charCodeAt(r)===42?(o=dE,r++):(o=e,g===0&&O(su)),o!==e?(B=a,a=kR(u)):(r=a,a=e)):(r=a,a=e),a===e)){if(a=r,u=Ge(),u!==e){for(o=r,s=[],l=m();l!==e;)s.push(l),l=m();if(o=t.substring(o,r),s=r,l=r,c=t.substr(r,2),c.toLowerCase()===b?r+=2:(c=e,g===0&&O(Nr)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();c=[c,f,h],l=c}else r=l,l=e;else r=l,l=e;l!==e?s=t.substring(s,r):s=l,s===e&&(s=null),l=xe(),l!==e?(B=a,a=YR(u,o,s,l)):(r=a,a=e)}else r=a,a=e;a===e&&(a=r,u=Ge(),u!==e&&(B=a,u=VR(u)),a=u)}return a}function Ge(){var a,u,o,s,l,c,f;if(a=r,u=xo(),u!==e){for(o=r,s=r,g++,l=r,c=[],f=m();f!==e;)c.push(f),f=m();if(f=vo(),f!==e?(c=[c,f],l=c):(r=l,l=e),g--,l!==e?(r=s,s=void 0):s=e,s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();c=vo(),c!==e?(s=[s,l,c],o=s):(r=o,o=e)}else r=o,o=e;o===e&&(o=null),B=a,a=WR()}else r=a,a=e;return a}function uc(){var a,u,o,s,l,c,f;if(a=r,u=xo(),u!==e){for(o=r,s=r,g++,l=r,c=[],f=m();f!==e;)c.push(f),f=m();if(f=Ps(),f!==e?(c=[c,f],l=c):(r=l,l=e),g--,l!==e?(r=s,s=void 0):s=e,s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();c=Ps(),c!==e?(s=[s,l,c],o=s):(r=o,o=e)}else r=o,o=e;o===e&&(o=null),u=[u,o],a=u}else r=a,a=e;return a}function vo(){var a,u,o,s,l;if(a=r,u=t.substr(r,3),u.toLowerCase()===oo?r+=3:(u=e,g===0&&O(No)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();l=Ge(),l!==e?(u=[u,o,s,l],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e;return a===e&&(a=Ps()),a}function Ps(){var a,u,o,s,l,c,f,h,T,A,p,N,L;if(a=r,u=cc(),u!==e){for(o=[],s=m();s!==e;)o.push(s),s=m();s=Ge(),s!==e?(u=[u,o,s],a=u):(r=a,a=e)}else r=a,a=e;if(a===e){if(a=r,u=t.substr(r,7),u.toLowerCase()===io?r+=7:(u=e,g===0&&O(Ao)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();l=xe(),l!==e?(u=[u,o,s,l],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e;if(a===e){if(a=r,u=r,o=t.substr(r,3),o.toLowerCase()===q?r+=3:(o=e,g===0&&O(tr)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;if(u===e&&(u=null),o=r,s=t.substr(r,4),s.toLowerCase()===bp?r+=4:(s=e,g===0&&O(XA)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();if(f=Ge(),f!==e){for(h=r,T=[],A=m();A!==e;)T.push(A),A=m();if(A=t.substr(r,6),A.toLowerCase()===Dp?r+=6:(A=e,g===0&&O(qA)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();L=Ge(),L!==e?(T=[T,A,p,N,L],h=T):(r=h,h=e)}else r=h,h=e;else r=h,h=e;h===e&&(h=null),s=[s,l,c,f,h],o=s}else r=o,o=e}else r=o,o=e;else r=o,o=e;if(o===e)if(o=r,s=r,l=t.substr(r,4),l.toLowerCase()===Pp?r+=4:(l=e,g===0&&O(jA)),l!==e?(c=x(),c!==e?(l=[l,c],s=l):(r=s,s=e)):(r=s,s=e),s===e&&(s=r,l=t.substr(r,6),l.toLowerCase()===Mp?r+=6:(l=e,g===0&&O(KA)),l!==e?(c=x(),c!==e?(l=[l,c],s=l):(r=s,s=e)):(r=s,s=e),s===e&&(s=r,l=t.substr(r,5),l.toLowerCase()===Eo?r+=5:(l=e,g===0&&O(go)),l!==e?(c=x(),c!==e?(l=[l,c],s=l):(r=s,s=e)):(r=s,s=e))),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();c=Ge(),c!==e?(s=[s,l,c],o=s):(r=o,o=e)}else r=o,o=e;if(o!==e?(u=[u,o],a=u):(r=a,a=e),a===e&&(a=r,u=t.substr(r,6),u.toLowerCase()===vp?r+=6:(u=e,g===0&&O(JA)),u!==e?(o=x(),o!==e?(u=[u,o],a=u):(r=a,a=e)):(r=a,a=e),a===e&&(a=r,u=t.substr(r,7),u.toLowerCase()===xp?r+=7:(u=e,g===0&&O(QA)),u!==e?(o=x(),o!==e?(u=[u,o],a=u):(r=a,a=e)):(r=a,a=e),a===e))){if(a=r,u=t.substr(r,3),u.toLowerCase()===q?r+=3:(u=e,g===0&&O(tr)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();l=t.substr(r,4),l.toLowerCase()===zr?r+=4:(l=e,g===0&&O(en)),l!==e?(c=x(),c!==e?(u=[u,o,s,l,c],a=u):(r=a,a=e)):(r=a,a=e)}else r=a,a=e;else r=a,a=e;if(a===e){if(a=r,u=t.substr(r,2),u.toLowerCase()===uo?r+=2:(u=e,g===0&&O(Oo)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();if(l=r,c=t.substr(r,3),c.toLowerCase()===q?r+=3:(c=e,g===0&&O(tr)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();c=[c,f,h],l=c}else r=l,l=e;else r=l,l=e;if(l===e&&(l=null),c=r,f=t.substr(r,8),f.toLowerCase()===Xe?r+=8:(f=e,g===0&&O(eu)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();if(A=t.substr(r,4),A.toLowerCase()===pe?r+=4:(A=e,g===0&&O(xn)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();f=[f,h,T,A,p,N],c=f}else r=c,c=e;else r=c,c=e}else r=c,c=e;else r=c,c=e;c===e&&(c=null),f=Ge(),f!==e?(u=[u,o,s,l,c,f],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e;if(a===e){if(a=r,u=r,o=t.substr(r,3),o.toLowerCase()===q?r+=3:(o=e,g===0&&O(tr)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;if(u===e&&(u=null),o=t.substr(r,7),o.toLowerCase()===cE?r+=7:(o=e,g===0&&O(iu)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();if(c=uc(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=t.substr(r,3),h.toLowerCase()===oo?r+=3:(h=e,g===0&&O(No)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();p=Ge(),p!==e?(u=[u,o,s,l,c,f,h,T,A,p],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e}else r=a,a=e}else r=a,a=e;else r=a,a=e;if(a===e){if(a=r,u=r,o=t.substr(r,3),o.toLowerCase()===q?r+=3:(o=e,g===0&&O(tr)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;if(u===e&&(u=null),o=t.substr(r,2),o.toLowerCase()===fE?r+=2:(o=e,g===0&&O(au)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();if(c=r,t.charCodeAt(r)===40?(f=I,r++):(f=e,g===0&&O(He)),f!==e?(h=Et(),t.charCodeAt(r)===41?(T=C,r++):(T=e,g===0&&O(Be)),T!==e?(f=[f,h,T],c=f):(r=c,c=e)):(r=c,c=e),c===e){if(c=r,f=kt(),f===e&&(f=null),h=r,T=xe(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();t.charCodeAt(r)===40?(p=I,r++):(p=e,g===0&&O(He)),p!==e?(N=Et(),t.charCodeAt(r)===41?(L=C,r++):(L=e,g===0&&O(Be)),L!==e?(T=[T,A,p,N,L],h=T):(r=h,h=e)):(r=h,h=e)}else r=h,h=e;h===e&&(h=xe()),h!==e?(f=[f,h],c=f):(r=c,c=e)}c!==e?(u=[u,o,s,l,c],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e}}}}}}return a}function xo(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j,le,ae;if(a=Fr(),a===e){if(a=r,u=r,g++,o=r,s=Fo(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();c=Ge(),c!==e?(s=[s,l,c],o=s):(r=o,o=e)}else r=o,o=e;if(g--,o!==e?(r=u,u=void 0):u=e,u!==e)if(o=Fo(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();l=Ge(),l!==e?(u=[u,o,s,l],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e;if(a===e&&(a=fc(),a===e)){if(a=r,u=r,g++,o=r,s=xe(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();if(t.charCodeAt(r)===40?(c=I,r++):(c=e,g===0&&O(He)),c!==e)if(f=Et(),t.charCodeAt(r)===41?(h=C,r++):(h=e,g===0&&O(Be)),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();for(p=Go(),p!==e?(A=[A,p],T=A):(r=T,T=e),T===e&&(T=null),A=r,p=[],N=m();N!==e;)p.push(N),N=m();N=Bo(),N!==e?(p=[p,N],A=p):(r=A,A=e),A===e&&(A=null),s=[s,l,c,f,h,T,A],o=s}else r=o,o=e;else r=o,o=e}else r=o,o=e;if(g--,o!==e?(r=u,u=void 0):u=e,u!==e)if(o=xe(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();if(t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e)if(c=Et(),t.charCodeAt(r)===41?(f=C,r++):(f=e,g===0&&O(Be)),f!==e){for(h=r,T=[],A=m();A!==e;)T.push(A),A=m();for(A=Go(),A!==e?(T=[T,A],h=T):(r=h,h=e),h===e&&(h=null),T=r,A=[],p=m();p!==e;)A.push(p),p=m();p=Bo(),p!==e?(A=[A,p],T=A):(r=T,T=e),T===e&&(T=null),u=[u,o,s,l,c,f,h,T],a=u}else r=a,a=e;else r=a,a=e}else r=a,a=e;else r=a,a=e;if(a===e&&(a=r,t.charCodeAt(r)===40?(u=I,r++):(u=e,g===0&&O(He)),u!==e?(o=Et(),t.charCodeAt(r)===41?(s=C,r++):(s=e,g===0&&O(Be)),s!==e?(u=[u,o,s],a=u):(r=a,a=e)):(r=a,a=e),a===e)){if(a=r,u=t.substr(r,4),u.toLowerCase()===Up?r+=4:(u=e,g===0&&O(zA)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();if(t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();if(f=Ge(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(T=t.substr(r,2),T.toLowerCase()===b?r+=2:(T=e,g===0&&O(Nr)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();for(N=Et(),L=[],y=m();y!==e;)L.push(y),y=m();t.charCodeAt(r)===41?(y=C,r++):(y=e,g===0&&O(Be)),y!==e?(u=[u,o,s,l,c,f,h,T,A,p,N,L,y],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e}else r=a,a=e}else r=a,a=e}else r=a,a=e;else r=a,a=e;if(a===e){if(a=r,u=r,o=t.substr(r,3),o.toLowerCase()===q?r+=3:(o=e,g===0&&O(tr)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;if(u===e&&(u=null),o=r,s=t.substr(r,6),s.toLowerCase()===ce?r+=6:(s=e,g===0&&O(zE)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;if(o===e&&(o=null),t.charCodeAt(r)===40?(s=I,r++):(s=e,g===0&&O(He)),s!==e?(l=Et(),t.charCodeAt(r)===41?(c=C,r++):(c=e,g===0&&O(Be)),c!==e?(u=[u,o,s,l,c],a=u):(r=a,a=e)):(r=a,a=e),a===e){if(a=r,u=t.substr(r,4),u.toLowerCase()===Gp?r+=4:(u=e,g===0&&O(ZA)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();if(l=r,c=r,g++,f=r,h=t.substr(r,4),h.toLowerCase()===co?r+=4:(h=e,g===0&&O(_o)),h!==e?(T=x(),T!==e?(h=[h,T],f=h):(r=f,f=e)):(r=f,f=e),g--,f===e?c=void 0:(r=c,c=e),c!==e)if(f=Ge(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();c=[c,f,h],l=c}else r=l,l=e;else r=l,l=e;if(l===e&&(l=null),c=[],f=r,h=t.substr(r,4),h.toLowerCase()===co?r+=4:(h=e,g===0&&O(_o)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=Ge(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();if(L=t.substr(r,4),L.toLowerCase()===hE?r+=4:(L=e,g===0&&O(ou)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();if(j=Ge(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();h=[h,T,A,p,N,L,y,v,j,le],f=h}else r=f,f=e}else r=f,f=e;else r=f,f=e}else r=f,f=e}else r=f,f=e;else r=f,f=e;if(f!==e)for(;f!==e;)if(c.push(f),f=r,h=t.substr(r,4),h.toLowerCase()===co?r+=4:(h=e,g===0&&O(_o)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=Ge(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();if(L=t.substr(r,4),L.toLowerCase()===hE?r+=4:(L=e,g===0&&O(ou)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();if(j=Ge(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();h=[h,T,A,p,N,L,y,v,j,le],f=h}else r=f,f=e}else r=f,f=e;else r=f,f=e}else r=f,f=e}else r=f,f=e;else r=f,f=e;else c=e;if(c!==e){if(f=r,h=t.substr(r,4),h.toLowerCase()===Bp?r+=4:(h=e,g===0&&O(eS)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();if(p=Ge(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();h=[h,T,A,p,N],f=h}else r=f,f=e}else r=f,f=e;else r=f,f=e;f===e&&(f=null),h=t.substr(r,3),h.toLowerCase()===Fp?r+=3:(h=e,g===0&&O(tS)),h!==e?(T=x(),T!==e?(u=[u,o,s,l,c,f,h,T],a=u):(r=a,a=e)):(r=a,a=e)}else r=a,a=e}else r=a,a=e;else r=a,a=e;if(a===e&&(a=r,u=kt(),u===e&&(u=null),o=kt(),o===e&&(o=null),s=xe(),s!==e?(u=[u,o,s],a=u):(r=a,a=e),a===e))if(a=r,u=t.substr(r,5),u.toLowerCase()===Hp?r+=5:(u=e,g===0&&O(rS)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e?(c=Et(),t.charCodeAt(r)===41?(f=C,r++):(f=e,g===0&&O(Be)),f!==e?(u=[u,o,s,l,c,f],a=u):(r=a,a=e)):(r=a,a=e)}else r=a,a=e;else r=a,a=e}}}}}return a}function kt(){var a,u,o,s,l,c,f,h;if(a=r,u=r,o=t.substr(r,4),o.toLowerCase()===TE?r+=4:(o=e,g===0&&O(nS)),o!==e&&(B=u,o=$R()),u=o,u===e&&(u=xe()),u!==e){for(o=r,s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(t.charCodeAt(r)===46?(c=fo,r++):(c=e,g===0&&O(Lo)),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();l=[l,c,f],s=l}else r=s,s=e;s!==e?o=t.substring(o,r):o=s,o!==e?(B=a,a=XR(u,o)):(r=a,a=e)}else r=a,a=e;return a}function cc(){var a,u,o;return t.substr(r,2)===mE?(a=mE,r+=2):(a=e,g===0&&O(iS)),a===e&&(t.substr(r,2)===pE?(a=pE,r+=2):(a=e,g===0&&O(sS)),a===e&&(t.substr(r,2)===AE?(a=AE,r+=2):(a=e,g===0&&O(aS)),a===e&&(t.substr(r,2)===SE?(a=SE,r+=2):(a=e,g===0&&O(oS)),a===e&&(t.substr(r,2)===RE?(a=RE,r+=2):(a=e,g===0&&O(lS)),a===e&&(t.substr(r,2)===NE?(a=NE,r+=2):(a=e,g===0&&O(ES)),a===e&&(t.substr(r,2)===IE?(a=IE,r+=2):(a=e,g===0&&O(uS)),a===e&&(t.substr(r,2)===gE?(a=gE,r+=2):(a=e,g===0&&O(cS)),a===e&&(a=t.charAt(r),fA.test(a)?r++:(a=e,g===0&&O(dS)),a===e&&(a=r,u=t.substr(r,2),u.toLowerCase()===OE?r+=2:(u=e,g===0&&O(lu)),u!==e?(o=x(),o!==e?(u=[u,o],a=u):(r=a,a=e)):(r=a,a=e)))))))))),a}function Hn(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v;if(a=r,u=kt(),u===e&&(u=null),o=xe(),o!==e){for(s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(s=t.substring(s,r),t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e){for(c=r,f=[],h=r,T=r,A=[],p=m();p!==e;)A.push(p),p=m();if(T=t.substring(T,r),A=Ge(),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();p=t.substring(p,r),B=h,h=$u(u,o,s,T,A,p)}else r=h,h=e;for(;h!==e;)if(f.push(h),h=r,t.charCodeAt(r)===44?(T=S,r++):(T=e,g===0&&O(At)),T!==e){for(T=r,A=r,p=[],N=m();N!==e;)p.push(N),N=m();if(A=t.substring(A,r),p=Ge(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),B=T,T=$u(u,o,s,A,p,N)}else r=T,T=e;T===e?(r=h,h=e):h=T}else h=T;f.length<1?(r=c,c=e):c=f,c!==e?(t.charCodeAt(r)===41?(f=C,r++):(f=e,g===0&&O(Be)),f!==e?(h=rn(),h===e&&(h=null),B=a,a=qR(u,o,s,c,h)):(r=a,a=e)):(r=a,a=e)}else r=a,a=e}else r=a,a=e;if(a===e){if(a=r,u=kt(),u===e&&(u=null),o=xe(),o!==e){for(s=rn(),s===e&&(s=null),l=r,c=r,f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(T=t.substr(r,7),T.toLowerCase()===Me?r+=7:(T=e,g===0&&O(Os)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();if(N=t.substr(r,2),N.toLowerCase()===Ie?r+=2:(N=e,g===0&&O(gi)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();h=[h,T,A,p,N,L,y],f=h}else r=f,f=e;else r=f,f=e}else r=f,f=e;else r=f,f=e;if(f!==e?c=t.substring(c,r):c=f,c!==e?(f=xe(),f!==e?(B=l,l=jR(u,o,s,c,f)):(r=l,l=e)):(r=l,l=e),l===e){for(l=r,c=r,f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(T=t.substr(r,3),T.toLowerCase()===q?r+=3:(T=e,g===0&&O(tr)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();if(N=t.substr(r,7),N.toLowerCase()===Me?r+=7:(N=e,g===0&&O(Os)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();h=[h,T,A,p,N,L,y],f=h}else r=f,f=e;else r=f,f=e}else r=f,f=e;else r=f,f=e;f!==e?c=t.substring(c,r):c=f,c!==e&&(B=l,c=KR(u,o,s,c)),l=c}l===e&&(l=null),B=a,a=JR(u,o,s,l)}else r=a,a=e;a===e&&(a=r,t.charCodeAt(r)===40?(u=I,r++):(u=e,g===0&&O(He)),u!==e?(o=r,s=Et(),o=t.substring(o,r),t.charCodeAt(r)===41?(s=C,r++):(s=e,g===0&&O(Be)),s!==e?(l=rn(),l===e&&(l=null),B=a,a=QR(o,l)):(r=a,a=e)):(r=a,a=e))}return a}function rn(){var a,u,o,s,l,c,f,h;for(a=r,u=r,o=[],s=m();s!==e;)o.push(s),s=m();if(u=t.substring(u,r),o=r,s=r,l=t.substr(r,2),l.toLowerCase()===b?r+=2:(l=e,g===0&&O(Nr)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();l=[l,c,f],s=l}else r=s,s=e;else r=s,s=e;return s!==e?o=t.substring(o,r):o=s,o===e&&(o=null),s=xe(),s!==e?(B=a,a=zR(u,o,s)):(r=a,a=e),a}function dc(){var a,u,o,s,l,c,f,h,T,A,p;if(a=r,u=Hn(),u!==e){for(o=[],s=r,l=r,c=[],f=m();f!==e;)c.push(f),f=m();if(l=t.substring(l,r),c=bi(),c!==e){for(f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),h=Hn(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),A=Uo(),B=s,s=Xu(u,l,c,f,h,T,A)}else r=s,s=e}else r=s,s=e;for(;s!==e;){for(o.push(s),s=r,l=r,c=[],f=m();f!==e;)c.push(f),f=m();if(l=t.substring(l,r),c=bi(),c!==e){for(f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),h=Hn(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),A=Uo(),B=s,s=Xu(u,l,c,f,h,T,A)}else r=s,s=e}else r=s,s=e}B=a,a=ZR(u,o)}else r=a,a=e;return a}function bi(){var a,u,o,s,l,c,f;if(a=r,t.charCodeAt(r)===44?(u=S,r++):(u=e,g===0&&O(At)),u!==e&&(B=a,u=eN()),a=u,a===e){if(a=r,u=[],o=r,s=r,g++,l=r,c=t.substr(r,4),c.toLowerCase()===ho?r+=4:(c=e,g===0&&O(Co)),c!==e?(f=x(),f!==e?(c=[c,f],l=c):(r=l,l=e)):(r=l,l=e),g--,l===e?s=void 0:(r=s,s=e),s!==e)if(l=vs(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;for(;o!==e;)if(u.push(o),o=r,s=r,g++,l=r,c=t.substr(r,4),c.toLowerCase()===ho?r+=4:(c=e,g===0&&O(Co)),c!==e?(f=x(),f!==e?(c=[c,f],l=c):(r=l,l=e)):(r=l,l=e),g--,l===e?s=void 0:(r=s,s=e),s!==e)if(l=vs(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;o=t.substr(r,4),o.toLowerCase()===ho?r+=4:(o=e,g===0&&O(Co)),o!==e?(s=x(),s!==e?(B=a,a=tN()):(r=a,a=e)):(r=a,a=e)}return a}function Uo(){var a,u,o,s,l,c,f,h,T,A,p,N;if(a=r,u=r,o=r,s=t.substr(r,2),s.toLowerCase()===$?r+=2:(s=e,g===0&&O(Zr)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;if(o!==e?u=t.substring(u,r):u=o,u!==e?(o=Ge(),o!==e?(B=a,a=rN(u,o)):(r=a,a=e)):(r=a,a=e),a===e){if(a=r,u=r,o=r,s=t.substr(r,5),s.toLowerCase()===se?r+=5:(s=e,g===0&&O(Ii)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;if(o!==e?u=t.substring(u,r):u=o,u!==e)if(t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e){for(s=r,l=[],c=r,f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),h=xe(),h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),B=c,c=qu(u,f,h,T)}else r=c,c=e;for(;c!==e;)if(l.push(c),c=r,t.charCodeAt(r)===44?(f=S,r++):(f=e,g===0&&O(At)),f!==e){for(f=r,h=r,T=[],A=m();A!==e;)T.push(A),A=m();if(h=t.substring(h,r),T=xe(),T!==e){for(A=r,p=[],N=m();N!==e;)p.push(N),N=m();A=t.substring(A,r),B=f,f=qu(u,h,T,A)}else r=f,f=e;f===e?(r=c,c=e):c=f}else c=f;l.length<1?(r=s,s=e):s=l,s!==e?(t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e?(B=a,a=nN(u,s)):(r=a,a=e)):(r=a,a=e)}else r=a,a=e;else r=a,a=e}return a===e&&(a=null),a}function Go(){var a,u,o,s,l,c,f,h,T,A,p,N;if(a=r,u=t.substr(r,6),u.toLowerCase()===kp?r+=6:(u=e,g===0&&O(fS)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();if(t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();if(f=t.substr(r,5),f.toLowerCase()===cr?r+=5:(f=e,g===0&&O(tu)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();if(A=Ge(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();t.charCodeAt(r)===41?(N=C,r++):(N=e,g===0&&O(Be)),N!==e?(u=[u,o,s,l,c,f,h,T,A,p,N],a=u):(r=a,a=e)}else r=a,a=e}else r=a,a=e;else r=a,a=e}else r=a,a=e}else r=a,a=e;else r=a,a=e;return a}function Bo(){var a,u,o,s,l,c,f,h;if(a=r,u=t.substr(r,4),u.toLowerCase()===Yp?r+=4:(u=e,g===0&&O(hS)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();l=xe(),l===e&&(l=r,t.charCodeAt(r)===40?(c=I,r++):(c=e,g===0&&O(He)),c!==e?(f=Et(),t.charCodeAt(r)===41?(h=C,r++):(h=e,g===0&&O(Be)),h!==e?(c=[c,f,h],l=c):(r=l,l=e)):(r=l,l=e)),l!==e?(u=[u,o,s,l],a=u):(r=a,a=e)}else r=a,a=e;else r=a,a=e;return a}function fc(){var a,u,o;return a=r,u=r,g++,t.length>r?(o=t.charAt(r),r++):(o=e,g===0&&O(Ze)),g--,o===e?u=void 0:(r=u,u=e),u!==e?(t.length>r?(o=t.charAt(r),r++):(o=e,g===0&&O(Ze)),o!==e?(u=[u,o],a=u):(r=a,a=e)):(r=a,a=e),a}function Fo(){var a,u,o;return a=t.charAt(r),hA.test(a)?r++:(a=e,g===0&&O(TS)),a===e&&(a=r,u=t.substr(r,3),u.toLowerCase()===q?r+=3:(u=e,g===0&&O(tr)),u!==e?(o=x(),o!==e?(u=[u,o],a=u):(r=a,a=e)):(r=a,a=e)),a}function TI(){var a,u,o,s,l,c,f,h,T,A,p,N;for(a=r,u=r,o=r,s=[],l=m();l!==e;)s.push(l),l=m();if(l=r,c=t.substr(r,9),c.toLowerCase()===Vp?r+=9:(c=e,g===0&&O(mS)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(T=t.substr(r,6),T.toLowerCase()===Wp?r+=6:(T=e,g===0&&O(pS)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();c=[c,f,h,T,A,p],l=c}else r=l,l=e;else r=l,l=e}else r=l,l=e;else r=l,l=e;if(l===e&&(l=null),c=t.substr(r,2),c.toLowerCase()===b?r+=2:(c=e,g===0&&O(Nr)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();s=[s,l,c,f,h],o=s}else r=o,o=e;else r=o,o=e;if(o!==e?u=t.substring(u,r):u=o,u!==e)if(t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e){for(s=r,l=[],c=St(),c===e&&(c=wt(),c===e&&(c=t.charAt(r),Rs.test(c)?r++:(c=e,g===0&&O(ws)),c===e&&(c=Xo())));c!==e;)l.push(c),c=St(),c===e&&(c=wt(),c===e&&(c=t.charAt(r),Rs.test(c)?r++:(c=e,g===0&&O(ws)),c===e&&(c=Xo())));if(s=t.substring(s,r),t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e){for(c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),f=r,h=t.substr(r,6),h.toLowerCase()===$p?r+=6:(h=e,g===0&&O(AS)),h!==e)if(T=x(),T!==e){for(A=r,p=[],N=m();N!==e;)p.push(N),N=m();A=t.substring(A,r),B=f,f=iN(u,s,c,h,A)}else r=f,f=e;else r=f,f=e;if(f===e)if(f=r,h=t.substr(r,7),h.toLowerCase()===Xp?r+=7:(h=e,g===0&&O(SS)),h!==e)if(T=x(),T!==e){for(A=r,p=[],N=m();N!==e;)p.push(N),N=m();A=t.substring(A,r),B=f,f=sN(u,s,c,h,A)}else r=f,f=e;else r=f,f=e;f===e&&(f=null),B=a,a=aN(u,s,c,f)}else r=a,a=e}else r=a,a=e;else r=a,a=e;return a}function mI(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j;for(a=r,u=r,o=[],s=m();s!==e;)o.push(s),s=m();if(u=t.substring(u,r),o=xe(),o!==e){for(s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(s=t.substring(s,r),l=r,t.charCodeAt(r)===61?(c=oe,r++):(c=e,g===0&&O(Is)),c!==e){for(f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),h=r,T=Fr(),T!==e?h=t.substring(h,r):h=T,h!==e){for(T=r,A=[],p=m();p!==e;)A.push(p),p=m();T=t.substring(T,r),A=Ho(),A===e&&(A=null),B=l,l=oN(u,o,s,f,h,T,A)}else r=l,l=e}else r=l,l=e;if(l===e){if(l=r,c=t.substr(r,2),c.toLowerCase()===uo?r+=2:(c=e,g===0&&O(Oo)),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=t.substr(r,4),h.toLowerCase()===zr?r+=4:(h=e,g===0&&O(en)),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();B=l,l=lN(u,o,s)}else r=l,l=e}else r=l,l=e;if(l===e)if(l=r,c=t.substr(r,2),c.toLowerCase()===fE?r+=2:(c=e,g===0&&O(au)),c!==e){for(f=r,h=[],T=m();T!==e;)h.push(T),T=m();if(f=t.substring(f,r),t.charCodeAt(r)===40?(h=I,r++):(h=e,g===0&&O(He)),h!==e){for(T=[],A=r,p=r,N=[],L=m();L!==e;)N.push(L),L=m();if(p=t.substring(p,r),N=r,L=Fr(),L!==e?N=t.substring(N,r):N=L,N!==e){for(L=r,y=[],v=m();v!==e;)y.push(v),v=m();L=t.substring(L,r),B=A,A=ju(u,o,s,c,f,p,N,L)}else r=A,A=e;for(;A!==e;)if(T.push(A),A=r,t.charCodeAt(r)===44?(p=S,r++):(p=e,g===0&&O(At)),p!==e){for(p=r,N=r,L=[],y=m();y!==e;)L.push(y),y=m();if(N=t.substring(N,r),L=r,y=Fr(),y!==e?L=t.substring(L,r):L=y,L!==e){for(y=r,v=[],j=m();j!==e;)v.push(j),j=m();y=t.substring(y,r),B=p,p=ju(u,o,s,c,f,N,L,y)}else r=p,p=e;p===e?(r=A,A=e):A=p}else A=p;if(t.charCodeAt(r)===41?(A=C,r++):(A=e,g===0&&O(Be)),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();p=t.substring(p,r),N=Ho(),N===e&&(N=null),B=l,l=EN(u,o,s,c,f,T,p,N)}else r=l,l=e}else r=l,l=e}else r=l,l=e}l!==e?(B=a,a=uN(u,o,s,l)):(r=a,a=e)}else r=a,a=e;return a}function Ho(){var a,u,o,s,l,c,f,h,T,A;if(a=r,u=t.substr(r,2),u.toLowerCase()===OE?r+=2:(u=e,g===0&&O(lu)),u!==e){for(o=[],s=m();s!==e;)o.push(s),s=m();if(s=xe(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();if(c=t.substr(r,2),c.toLowerCase()===uo?r+=2:(c=e,g===0&&O(Oo)),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=t.substr(r,4),h.toLowerCase()===zr?r+=4:(h=e,g===0&&O(en)),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();B=a,a=cN()}else r=a,a=e}else r=a,a=e}else r=a,a=e}else r=a,a=e;return a}function pI(){var a,u,o,s,l;if(a=r,u=Fr(),u===e&&(u=r,o=t.charAt(r),WE.test(o)?r++:(o=e,g===0&&O(Eu)),o!==e?(s=Wo(),s!==e?(B=u,u=dN(o,s)):(r=u,u=e)):(r=u,u=e),u===e&&(u=r,t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e?(s=r,l=Et(),s=t.substring(s,r),t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e?(B=u,u=fN(s)):(r=u,u=e)):(r=u,u=e))),u!==e){for(o=r,s=[],t.length>r?(l=t.charAt(r),r++):(l=e,g===0&&O(Ze));l!==e;)s.push(l),t.length>r?(l=t.charAt(r),r++):(l=e,g===0&&O(Ze));o=t.substring(o,r),B=a,a=hN(u,o)}else r=a,a=e;return a}function Fr(){var a,u,o,s,l;return a=r,u=r,g++,o=r,s=t.substr(r,4),s.toLowerCase()===zr?r+=4:(s=e,g===0&&O(en)),s!==e?(l=Ot(),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e),g--,o===e?u=void 0:(r=u,u=e),u!==e?(o=t.substr(r,4),o.toLowerCase()===zr?r+=4:(o=e,g===0&&O(en)),o!==e?(B=a,a=TN()):(r=a,a=e)):(r=a,a=e),a===e&&(a=r,u=r,g++,o=r,s=t.substr(r,4),s.toLowerCase()===_E?r+=4:(s=e,g===0&&O(uu)),s!==e?(l=Ot(),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e),g--,o===e?u=void 0:(r=u,u=e),u!==e?(o=t.substr(r,4),o.toLowerCase()===_E?r+=4:(o=e,g===0&&O(uu)),o!==e?(B=a,a=mN()):(r=a,a=e)):(r=a,a=e),a===e&&(a=r,u=r,g++,o=r,s=t.substr(r,5),s.toLowerCase()===LE?r+=5:(s=e,g===0&&O(cu)),s!==e?(l=Ot(),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e),g--,o===e?u=void 0:(r=u,u=e),u!==e?(o=t.substr(r,5),o.toLowerCase()===LE?r+=5:(o=e,g===0&&O(cu)),o!==e?(B=a,a=pN()):(r=a,a=e)):(r=a,a=e),a===e&&(a=r,u=r,g++,o=r,s=t.substr(r,17),s.toLowerCase()===CE?r+=17:(s=e,g===0&&O(du)),s!==e?(l=Ot(),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e),g--,o===e?u=void 0:(r=u,u=e),u!==e?(o=t.substr(r,17),o.toLowerCase()===CE?r+=17:(o=e,g===0&&O(du)),o!==e?(B=a,a=AN()):(r=a,a=e)):(r=a,a=e),a===e&&(a=r,u=r,g++,o=r,s=t.substr(r,12),s.toLowerCase()===wE?r+=12:(s=e,g===0&&O(fu)),s!==e?(l=Ot(),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e),g--,o===e?u=void 0:(r=u,u=e),u!==e?(o=t.substr(r,12),o.toLowerCase()===wE?r+=12:(o=e,g===0&&O(fu)),o!==e?(B=a,a=SN()):(r=a,a=e)):(r=a,a=e),a===e&&(a=r,u=r,g++,o=r,s=t.substr(r,12),s.toLowerCase()===yE?r+=12:(s=e,g===0&&O(hu)),s!==e?(l=Ot(),l!==e?(s=[s,l],o=s):(r=o,o=e)):(r=o,o=e),g--,o===e?u=void 0:(r=u,u=e),u!==e?(o=t.substr(r,12),o.toLowerCase()===yE?r+=12:(o=e,g===0&&O(hu)),o!==e?(B=a,a=RN()):(r=a,a=e)):(r=a,a=e),a===e&&(a=pc(),a===e&&(a=mc(),a===e&&(a=Wo())))))))),a}function AI(){var a,u,o,s,l,c,f,h;for(a=r,u=[],o=r,s=[],l=m();l!==e;)s.push(l),l=m();if(l=Fr(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();o=l}else r=o,o=e;for(;o!==e;)if(u.push(o),o=r,t.charCodeAt(r)===44?(s=S,r++):(s=e,g===0&&O(At)),s!==e){for(s=r,l=[],c=m();c!==e;)l.push(c),c=m();if(c=Fr(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();s=c}else r=s,s=e;s===e?(r=o,o=e):o=s}else o=s;return u.length<1?(r=a,a=e):a=u,a}function Ms(){var a,u,o,s,l,c;if(a=r,u=r,o=t.substr(r,9),o.toLowerCase()===qp?r+=9:(o=e,g===0&&O(RS)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;if(u===e)if(u=r,o=t.substr(r,4),o.toLowerCase()===TE?r+=4:(o=e,g===0&&O(NS)),o!==e)if(s=x(),s!==e){for(l=[],c=m();c!==e;)l.push(c),c=m();o=[o,s,l],u=o}else r=u,u=e;else r=u,u=e;return u!==e?a=t.substring(a,r):a=u,a}function SI(){var a,u,o,s,l;for(a=r,u=r,o=[],s=m();s!==e;)o.push(s),s=m();return u=t.substring(u,r),o=xe(),o!==e?(s=r,l=qo(),s=t.substring(s,r),B=a,a=NN(u,o,s)):(r=a,a=e),a}function ko(){var a,u,o,s,l;for(a=r,u=r,o=[],s=m();s!==e;)o.push(s),s=m();return u=t.substring(u,r),o=Ac(),o!==e?(s=r,l=qo(),s=t.substring(s,r),B=a,a=IN(u,o,s)):(r=a,a=e),a}function RI(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y;if(a=r,u=r,o=r,s=r,l=t.substr(r,10),l.toLowerCase()===jp?r+=10:(l=e,g===0&&O(IS)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();l=[l,c,f],s=l}else r=s,s=e;else r=s,s=e;if(s!==e?o=t.substring(o,r):o=s,o!==e)if(s=xe(),s!==e){for(l=r,c=[],f=m();f!==e;)c.push(f),f=m();l=t.substring(l,r),B=u,u=gN(o,s,l)}else r=u,u=e;else r=u,u=e;if(u===e&&(u=null),o=r,s=r,t.substr(r,7)===bE?(l=bE,r+=7):(l=e,g===0&&O(gS)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(t.substr(r,3)===Ts?(h=Ts,r+=3):(h=e,g===0&&O(Tu)),h!==e)if(T=x(),T!==e){for(A=[],p=m();p!==e;)A.push(p),p=m();B=s,s=ON(u)}else r=s,s=e;else r=s,s=e}else r=s,s=e;else r=s,s=e;if(s===e)if(s=r,t.substr(r,6)===DE?(l=DE,r+=6):(l=e,g===0&&O(OS)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();B=s,s=_N(u)}else r=s,s=e;else r=s,s=e;if(s!==e)if(t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e){for(c=r,f=[],h=r,T=r,A=[],p=m();p!==e;)A.push(p),p=m();if(T=t.substring(T,r),A=Yo(),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();p=t.substring(p,r),B=h,h=Ku(u,s,T,A,p)}else r=h,h=e;for(;h!==e;)if(f.push(h),h=r,t.charCodeAt(r)===44?(T=S,r++):(T=e,g===0&&O(At)),T!==e){for(T=r,A=r,p=[],N=m();N!==e;)p.push(N),N=m();if(A=t.substring(A,r),p=Yo(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),B=T,T=Ku(u,s,A,p,N)}else r=T,T=e;T===e?(r=h,h=e):h=T}else h=T;if(f.length<1?(r=c,c=e):c=f,c!==e)if(t.charCodeAt(r)===41?(f=C,r++):(f=e,g===0&&O(Be)),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();T=Tc(),B=o,o=LN(u,s,c,T)}else r=o,o=e;else r=o,o=e}else r=o,o=e;else r=o,o=e;if(o===e){if(o=r,s=r,l=r,t.substr(r,5)===PE?(c=PE,r+=5):(c=e,g===0&&O(_S)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();c=[c,f,h],l=c}else r=l,l=e;else r=l,l=e;if(l!==e?s=t.substring(s,r):s=l,s!==e)if(t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e){for(c=r,f=[],h=m();h!==e;)f.push(h),h=m();if(c=t.substring(c,r),f=Ge(),f!==e){for(h=r,T=[],A=m();A!==e;)T.push(A),A=m();h=t.substring(h,r),t.charCodeAt(r)===41?(T=C,r++):(T=e,g===0&&O(Be)),T!==e?(B=o,o=CN(u,s,c,f,h)):(r=o,o=e)}else r=o,o=e}else r=o,o=e;else r=o,o=e;if(o===e){if(o=r,s=r,l=r,t.substr(r,7)===ME?(c=ME,r+=7):(c=e,g===0&&O(LS)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();if(t.substr(r,3)===Ts?(T=Ts,r+=3):(T=e,g===0&&O(Tu)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();c=[c,f,h,T,A,p],l=c}else r=l,l=e;else r=l,l=e}else r=l,l=e;else r=l,l=e;if(l!==e?s=t.substring(s,r):s=l,s!==e)if(t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e){for(c=r,f=[],h=r,T=r,A=[],p=m();p!==e;)A.push(p),p=m();if(T=t.substring(T,r),A=xe(),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();p=t.substring(p,r),B=h,h=Ju(u,s,T,A,p)}else r=h,h=e;for(;h!==e;)if(f.push(h),h=r,t.charCodeAt(r)===44?(T=S,r++):(T=e,g===0&&O(At)),T!==e){for(T=r,A=r,p=[],N=m();N!==e;)p.push(N),N=m();if(A=t.substring(A,r),p=xe(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),B=T,T=Ju(u,s,A,p,N)}else r=T,T=e;T===e?(r=h,h=e):h=T}else h=T;if(f.length<1?(r=c,c=e):c=f,c!==e)if(t.charCodeAt(r)===41?(f=C,r++):(f=e,g===0&&O(Be)),f!==e){for(h=r,T=[],A=m();A!==e;)T.push(A),A=m();h=t.substring(h,r),T=hc(),T!==e?(B=o,o=wN(u,s,c,h,T)):(r=o,o=e)}else r=o,o=e;else r=o,o=e}else r=o,o=e;else r=o,o=e}}return o!==e?(u=[u,o],a=u):(r=a,a=e),a}function Yo(){var a,u,o,s,l,c,f,h,T;if(a=r,u=r,o=xe(),o!==e&&(B=u,o=yN(o)),u=o,u===e&&(u=r,o=Ge(),o!==e&&(B=u,o=bN(o)),u=o),u!==e){if(o=r,s=r,l=r,c=t.substr(r,7),c.toLowerCase()===io?r+=7:(c=e,g===0&&O(Ao)),c!==e)if(f=x(),f!==e){for(h=[],T=m();T!==e;)h.push(T),T=m();c=[c,f,h],l=c}else r=l,l=e;else r=l,l=e;l!==e?s=t.substring(s,r):s=l,s!==e?(l=xe(),l!==e?(B=o,o=DN(u,s,l)):(r=o,o=e)):(r=o,o=e),o===e&&(o=null),s=Vo(),s===e&&(s=null),B=a,a=PN(u,o,s)}else r=a,a=e;return a}function Vo(){var a,u,o,s,l;if(a=r,u=t.substr(r,3),u.toLowerCase()===Kp?r+=3:(u=e,g===0&&O(CS)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();B=a,a=MN()}else r=a,a=e;else r=a,a=e;if(a===e)if(a=r,u=t.substr(r,4),u.toLowerCase()===Jp?r+=4:(u=e,g===0&&O(wS)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();B=a,a=vN()}else r=a,a=e;else r=a,a=e;return a}function hc(){var a,u,o,s,l,c,f,h,T,A,p,N,L,y,v,j,le,ae;if(a=r,u=r,o=r,s=t.substr(r,10),s.toLowerCase()===Qp?r+=10:(s=e,g===0&&O(yS)),s!==e)if(l=x(),l!==e){for(c=[],f=m();f!==e;)c.push(f),f=m();s=[s,l,c],o=s}else r=o,o=e;else r=o,o=e;if(o!==e?u=t.substring(u,r):u=o,u!==e)if(o=xe(),o!==e){if(s=r,t.charCodeAt(r)===40?(l=I,r++):(l=e,g===0&&O(He)),l!==e){for(c=r,f=[],h=r,T=r,A=[],p=m();p!==e;)A.push(p),p=m();if(T=t.substring(T,r),A=xe(),A!==e){for(p=r,N=[],L=m();L!==e;)N.push(L),L=m();p=t.substring(p,r),B=h,h=Qu(u,o,T,A,p)}else r=h,h=e;for(;h!==e;)if(f.push(h),h=r,t.charCodeAt(r)===44?(T=S,r++):(T=e,g===0&&O(At)),T!==e){for(T=r,A=r,p=[],N=m();N!==e;)p.push(N),N=m();if(A=t.substring(A,r),p=xe(),p!==e){for(N=r,L=[],y=m();y!==e;)L.push(y),y=m();N=t.substring(N,r),B=T,T=Qu(u,o,A,p,N)}else r=T,T=e;T===e?(r=h,h=e):h=T}else h=T;f.length<1?(r=c,c=e):c=f,c!==e?(t.charCodeAt(r)===41?(f=C,r++):(f=e,g===0&&O(Be)),f!==e?s=c:(r=s,s=e)):(r=s,s=e)}else r=s,s=e;if(s===e&&(s=null),l=[],c=r,f=t.substr(r,2),f.toLowerCase()===$?r+=2:(f=e,g===0&&O(Zr)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();if(A=r,p=t.substr(r,6),p.toLowerCase()===Q?r+=6:(p=e,g===0&&O(To)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();p=[p,N,L],A=p}else r=A,A=e;else r=A,A=e;if(A===e)if(A=r,p=t.substr(r,6),p.toLowerCase()===te?r+=6:(p=e,g===0&&O(mo)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();p=[p,N,L],A=p}else r=A,A=e;else r=A,A=e;if(A!==e){if(p=r,N=t.substr(r,3),N.toLowerCase()===ms?r+=3:(N=e,g===0&&O(ys)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,4),v.toLowerCase()===zr?r+=4:(v=e,g===0&&O(en)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=t.substr(r,3),N.toLowerCase()===ms?r+=3:(N=e,g===0&&O(ys)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,7),v.toLowerCase()===vE?r+=7:(v=e,g===0&&O(mu)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=t.substr(r,7),N.toLowerCase()===xE?r+=7:(N=e,g===0&&O(pu)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();N=[N,L,y],p=N}else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=t.substr(r,8),N.toLowerCase()===UE?r+=8:(N=e,g===0&&O(Au)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();N=[N,L,y],p=N}else r=p,p=e;else r=p,p=e;if(p===e)if(p=r,N=t.substr(r,2),N.toLowerCase()===lo?r+=2:(N=e,g===0&&O(Io)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,6),v.toLowerCase()===GE?r+=6:(v=e,g===0&&O(Su)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e}}}p!==e?(B=c,c=zu(u,o,s)):(r=c,c=e)}else r=c,c=e}else r=c,c=e;else r=c,c=e;if(c===e)if(c=r,f=t.substr(r,5),f.toLowerCase()===Eo?r+=5:(f=e,g===0&&O(go)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();A=xe(),A!==e?(B=c,c=Zu(u,o,s,A)):(r=c,c=e)}else r=c,c=e;else r=c,c=e;for(;c!==e;){if(l.push(c),c=r,f=t.substr(r,2),f.toLowerCase()===$?r+=2:(f=e,g===0&&O(Zr)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();if(A=r,p=t.substr(r,6),p.toLowerCase()===Q?r+=6:(p=e,g===0&&O(To)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();p=[p,N,L],A=p}else r=A,A=e;else r=A,A=e;if(A===e)if(A=r,p=t.substr(r,6),p.toLowerCase()===te?r+=6:(p=e,g===0&&O(mo)),p!==e)if(N=x(),N!==e){for(L=[],y=m();y!==e;)L.push(y),y=m();p=[p,N,L],A=p}else r=A,A=e;else r=A,A=e;if(A!==e){if(p=r,N=t.substr(r,3),N.toLowerCase()===ms?r+=3:(N=e,g===0&&O(ys)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,4),v.toLowerCase()===zr?r+=4:(v=e,g===0&&O(en)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=t.substr(r,3),N.toLowerCase()===ms?r+=3:(N=e,g===0&&O(ys)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,7),v.toLowerCase()===vE?r+=7:(v=e,g===0&&O(mu)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=t.substr(r,7),N.toLowerCase()===xE?r+=7:(N=e,g===0&&O(pu)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();N=[N,L,y],p=N}else r=p,p=e;else r=p,p=e;if(p===e){if(p=r,N=t.substr(r,8),N.toLowerCase()===UE?r+=8:(N=e,g===0&&O(Au)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();N=[N,L,y],p=N}else r=p,p=e;else r=p,p=e;if(p===e)if(p=r,N=t.substr(r,2),N.toLowerCase()===lo?r+=2:(N=e,g===0&&O(Io)),N!==e)if(L=x(),L!==e){for(y=[],v=m();v!==e;)y.push(v),v=m();if(v=t.substr(r,6),v.toLowerCase()===GE?r+=6:(v=e,g===0&&O(Su)),v!==e)if(j=x(),j!==e){for(le=[],ae=m();ae!==e;)le.push(ae),ae=m();N=[N,L,y,v,j,le],p=N}else r=p,p=e;else r=p,p=e}else r=p,p=e;else r=p,p=e}}}p!==e?(B=c,c=zu(u,o,s)):(r=c,c=e)}else r=c,c=e}else r=c,c=e;else r=c,c=e;if(c===e)if(c=r,f=t.substr(r,5),f.toLowerCase()===Eo?r+=5:(f=e,g===0&&O(go)),f!==e)if(h=x(),h!==e){for(T=[],A=m();A!==e;)T.push(A),A=m();A=xe(),A!==e?(B=c,c=Zu(u,o,s,A)):(r=c,c=e)}else r=c,c=e;else r=c,c=e}if(c=r,f=r,h=r,T=t.substr(r,3),T.toLowerCase()===q?r+=3:(T=e,g===0&&O(tr)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e;if(h!==e?f=t.substring(f,r):f=h,f===e&&(f=null),h=r,T=r,A=t.substr(r,10),A.toLowerCase()===zp?r+=10:(A=e,g===0&&O(bS)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();A=[A,p,N],T=A}else r=T,T=e;else r=T,T=e;if(T!==e?h=t.substring(h,r):h=T,h!==e){if(T=r,A=t.substr(r,9),A.toLowerCase()===BE?r+=9:(A=e,g===0&&O(Ru)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();if(L=t.substr(r,8),L.toLowerCase()===Zp?r+=8:(L=e,g===0&&O(DS)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();B=T,T=xN(u,o,s,l,f,h)}else r=T,T=e;else r=T,T=e}else r=T,T=e;else r=T,T=e;if(T===e)if(T=r,A=t.substr(r,9),A.toLowerCase()===BE?r+=9:(A=e,g===0&&O(Ru)),A!==e)if(p=x(),p!==e){for(N=[],L=m();L!==e;)N.push(L),L=m();if(L=t.substr(r,9),L.toLowerCase()===eA?r+=9:(L=e,g===0&&O(PS)),L!==e)if(y=x(),y!==e){for(v=[],j=m();j!==e;)v.push(j),j=m();B=T,T=UN(u,o,s,l,f,h)}else r=T,T=e;else r=T,T=e}else r=T,T=e;else r=T,T=e;T===e&&(T=null),B=c,c=GN(u,o,s,l,f,h,T)}else r=c,c=e;c===e&&(c=null),B=a,a=BN(u,o,s,l,c)}else r=a,a=e;else r=a,a=e;return a}function Tc(){var a,u,o,s,l,c,f,h,T,A,p,N;if(a=r,u=t.substr(r,2),u.toLowerCase()===$?r+=2:(u=e,g===0&&O(Zr)),u!==e)if(o=x(),o!==e){for(s=[],l=m();l!==e;)s.push(l),l=m();if(l=t.substr(r,8),l.toLowerCase()===tA?r+=8:(l=e,g===0&&O(MS)),l!==e)if(c=x(),c!==e){for(f=[],h=m();h!==e;)f.push(h),h=m();if(h=r,T=t.substr(r,8),T.toLowerCase()===rA?r+=8:(T=e,g===0&&O(vS)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e;if(h===e){if(h=r,T=t.substr(r,5),T.toLowerCase()===nA?r+=5:(T=e,g===0&&O(xS)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e;if(h===e){if(h=r,T=t.substr(r,4),T.toLowerCase()===iA?r+=4:(T=e,g===0&&O(US)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e;if(h===e){if(h=r,T=t.substr(r,6),T.toLowerCase()===sA?r+=6:(T=e,g===0&&O(GS)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e;if(h===e)if(h=r,T=t.substr(r,7),T.toLowerCase()===aA?r+=7:(T=e,g===0&&O(BS)),T!==e)if(A=x(),A!==e){for(p=[],N=m();N!==e;)p.push(N),N=m();T=[T,A,p],h=T}else r=h,h=e;else r=h,h=e}}}h!==e?(B=a,a=FN()):(r=a,a=e)}else r=a,a=e;else r=a,a=e}else r=a,a=e;else r=a,a=e;return a===e&&(a=null),a}function mc(){var a,u,o,s,l;if(a=r,t.charCodeAt(r)===39?(u=Ri,r++):(u=e,g===0&&O(_i)),u!==e){for(o=[],s=r,t.substr(r,2)===Kt?(l=Kt,r+=2):(l=e,g===0&&O(Un)),l!==e&&(B=s,l=ec()),s=l,s===e&&(s=t.charAt(r),vn.test(s)?r++:(s=e,g===0&&O(Gn)));s!==e;)o.push(s),s=r,t.substr(r,2)===Kt?(l=Kt,r+=2):(l=e,g===0&&O(Un)),l!==e&&(B=s,l=ec()),s=l,s===e&&(s=t.charAt(r),vn.test(s)?r++:(s=e,g===0&&O(Gn)));t.charCodeAt(r)===39?(s=Ri,r++):(s=e,g===0&&O(_i)),s!==e?(B=a,a=HN(o)):(r=a,a=e)}else r=a,a=e;return a}function Wo(){var a,u,o,s,l,c,f,h,T;if(a=r,u=t.substr(r,2),u.toLowerCase()===oA?r+=2:(u=e,g===0&&O(FS)),u!==e){for(o=r,s=[],l=$o();l!==e;)s.push(l),l=r,t.charCodeAt(r)===95?(c=Ni,r++):(c=e,g===0&&O(Li)),c===e&&(c=null),c=$o(),c===e?(r=l,l=e):l=c;s.length<1?(r=o,o=e):o=s,o!==e?(B=a,a=kN()):(r=a,a=e)}else r=a,a=e;if(a===e){for(a=r,u=r,o=r,s=[],l=nr();l!==e;)s.push(l),l=r,t.charCodeAt(r)===95?(c=Ni,r++):(c=e,g===0&&O(Li)),c===e&&(c=null),c=nr(),c===e?(r=l,l=e):l=c;if(s.length<1?(r=o,o=e):o=s,o!==e){if(s=r,t.charCodeAt(r)===46?(l=fo,r++):(l=e,g===0&&O(Lo)),l!==e){for(c=[],f=nr();f!==e;)c.push(f),f=r,t.charCodeAt(r)===95?(h=Ni,r++):(h=e,g===0&&O(Li)),h===e&&(h=null),h=nr(),h===e?(r=f,f=e):f=h;l=[l,c],s=l}else r=s,s=e;s===e&&(s=null),o=[o,s],u=o}else r=u,u=e;if(u===e)if(u=r,t.charCodeAt(r)===46?(o=fo,r++):(o=e,g===0&&O(Lo)),o!==e){for(s=r,l=[],c=nr();c!==e;)l.push(c),c=r,t.charCodeAt(r)===95?(f=Ni,r++):(f=e,g===0&&O(Li)),f===e&&(f=null),f=nr(),f===e?(r=c,c=e):c=f;l.length<1?(r=s,s=e):s=l,s!==e?(o=[o,s],u=o):(r=u,u=e)}else r=u,u=e;if(u!==e){if(o=r,s=t.charAt(r),s.toLowerCase()===lA?r++:(s=e,g===0&&O(HS)),s!==e){for(l=t.charAt(r),WE.test(l)?r++:(l=e,g===0&&O(Eu)),l===e&&(l=null),c=r,f=[],h=nr();h!==e;)f.push(h),h=r,t.charCodeAt(r)===95?(T=Ni,r++):(T=e,g===0&&O(Li)),T===e&&(T=null),T=nr(),T===e?(r=h,h=e):h=T;f.length<1?(r=c,c=e):c=f,c!==e?(s=[s,l,c],o=s):(r=o,o=e)}else r=o,o=e;o===e&&(o=null),B=a,a=YN()}else r=a,a=e}return a}function pc(){var a,u,o,s,l;if(a=r,u=t.substr(r,2),u.toLowerCase()===EA?r+=2:(u=e,g===0&&O(kS)),u!==e){for(o=[],s=r,t.substr(r,2)===Kt?(l=Kt,r+=2):(l=e,g===0&&O(Un)),l!==e&&(B=s,l=tc()),s=l,s===e&&(s=t.charAt(r),vn.test(s)?r++:(s=e,g===0&&O(Gn)));s!==e;)o.push(s),s=r,t.substr(r,2)===Kt?(l=Kt,r+=2):(l=e,g===0&&O(Un)),l!==e&&(B=s,l=tc()),s=l,s===e&&(s=t.charAt(r),vn.test(s)?r++:(s=e,g===0&&O(Gn)));t.charCodeAt(r)===39?(s=Ri,r++):(s=e,g===0&&O(_i)),s!==e?(B=a,a=VN(o)):(r=a,a=e)}else r=a,a=e;return a}function nr(){var a;return a=t.charAt(r),TA.test(a)?r++:(a=e,g===0&&O(YS)),a}function $o(){var a;return a=t.charAt(r),mA.test(a)?r++:(a=e,g===0&&O(VS)),a}function Xo(){var a,u,o,s,l,c;if(a=r,u=r,g++,o=r,t.charCodeAt(r)===41?(s=C,r++):(s=e,g===0&&O(Be)),s!==e){for(l=[],c=t.charAt(r),Rs.test(c)?r++:(c=e,g===0&&O(ws));c!==e;)l.push(c),c=t.charAt(r),Rs.test(c)?r++:(c=e,g===0&&O(ws));t.charCodeAt(r)===41?(c=C,r++):(c=e,g===0&&O(Be)),c!==e?(s=[s,l,c],o=s):(r=o,o=e)}else r=o,o=e;return g--,o!==e?(r=u,u=void 0):u=e,u!==e?(t.charCodeAt(r)===41?(o=C,r++):(o=e,g===0&&O(Be)),o!==e?a=o:(r=a,a=e)):(r=a,a=e),a}function xe(){var a,u,o,s,l,c,f,h;if(a=r,u=r,o=St(),o!==e&&(B=u,o=WN(o)),u=o,u===e)if(u=r,o=r,g++,s=vs(),g--,s===e?o=void 0:(r=o,o=e),o!==e){if(s=r,l=r,c=kn(),c!==e){for(f=[],h=Ot();h!==e;)f.push(h),h=Ot();c=[c,f],l=c}else r=l,l=e;l!==e?s=t.substring(s,r):s=l,s!==e?u=s:(r=u,u=e)}else r=u,u=e;return u!==e&&(B=a,u=$N(u)),a=u,a}function ir(){var a,u,o,s,l,c,f,h;if(a=r,u=r,o=St(),o!==e&&(B=u,o=XN(o)),u=o,u===e)if(u=r,o=r,g++,s=Sc(),g--,s===e?o=void 0:(r=o,o=e),o!==e){if(s=r,l=r,c=kn(),c!==e){for(f=[],h=Ot();h!==e;)f.push(h),h=Ot();c=[c,f],l=c}else r=l,l=e;l!==e?s=t.substring(s,r):s=l,s!==e?u=s:(r=u,u=e)}else r=u,u=e;return u!==e&&(B=a,u=qN(u)),a=u,a}function Ac(){var a,u,o,s,l,c,f;if(a=r,u=r,o=St(),o!==e&&(B=u,o=jN(o)),u=o,u===e){if(u=r,o=r,s=r,l=kn(),l!==e){for(c=[],f=Ot();f!==e;)c.push(f),f=Ot();l=[l,c],s=l}else r=s,s=e;s!==e?o=t.substring(o,r):o=s,o!==e?u=o:(r=u,u=e)}return u!==e&&(B=a,u=KN(u)),a=u,a}function vs(){var a,u,o,s,l,c;if(a=r,u=r,o=r,s=kn(),s!==e){for(l=[],c=Ot();c!==e;)l.push(c),c=Ot();s=[s,l],o=s}else r=o,o=e;return o!==e?u=t.substring(u,r):u=o,u!==e?(B=r,o=JN(u),o?o=void 0:o=e,o!==e?(s=x(),s!==e?(u=[u,o,s],a=u):(r=a,a=e)):(r=a,a=e)):(r=a,a=e),a}function Sc(){var a,u,o,s,l,c;if(a=r,u=r,o=r,s=kn(),s!==e){for(l=[],c=Ot();c!==e;)l.push(c),c=Ot();s=[s,l],o=s}else r=o,o=e;return o!==e?u=t.substring(u,r):u=o,u!==e?(B=r,o=QN(u),o?o=void 0:o=e,o!==e?(s=x(),s!==e?(u=[u,o,s],a=u):(r=a,a=e)):(r=a,a=e)):(r=a,a=e),a}function qo(){var a,u,o,s,l;for(a=[],u=St(),u===e&&(u=wt(),u===e&&(u=r,t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e?(s=Et(),t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e?(o=[o,s,l],u=o):(r=u,u=e)):(r=u,u=e),u===e&&(u=t.charAt(r),$E.test(u)?r++:(u=e,g===0&&O(Nu)))));u!==e;)a.push(u),u=St(),u===e&&(u=wt(),u===e&&(u=r,t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e?(s=Et(),t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e?(o=[o,s,l],u=o):(r=u,u=e)):(r=u,u=e),u===e&&(u=t.charAt(r),$E.test(u)?r++:(u=e,g===0&&O(Nu)))));return a}function Et(){var a,u,o,s,l;for(a=[],u=St(),u===e&&(u=wt(),u===e&&(u=r,t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e?(s=Et(),t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e?(o=[o,s,l],u=o):(r=u,u=e)):(r=u,u=e),u===e&&(u=t.charAt(r),XE.test(u)?r++:(u=e,g===0&&O(Iu)))));u!==e;)a.push(u),u=St(),u===e&&(u=wt(),u===e&&(u=r,t.charCodeAt(r)===40?(o=I,r++):(o=e,g===0&&O(He)),o!==e?(s=Et(),t.charCodeAt(r)===41?(l=C,r++):(l=e,g===0&&O(Be)),l!==e?(o=[o,s,l],u=o):(r=u,u=e)):(r=u,u=e),u===e&&(u=t.charAt(r),XE.test(u)?r++:(u=e,g===0&&O(Iu)))));return a}function St(){var a,u,o,s,l;if(a=r,t.charCodeAt(r)===39?(u=Ri,r++):(u=e,g===0&&O(_i)),u!==e){for(o=[],s=r,t.substr(r,2)===Kt?(l=Kt,r+=2):(l=e,g===0&&O(Un)),l!==e&&(B=s,l=rc()),s=l,s===e&&(s=t.charAt(r),vn.test(s)?r++:(s=e,g===0&&O(Gn)));s!==e;)o.push(s),s=r,t.substr(r,2)===Kt?(l=Kt,r+=2):(l=e,g===0&&O(Un)),l!==e&&(B=s,l=rc()),s=l,s===e&&(s=t.charAt(r),vn.test(s)?r++:(s=e,g===0&&O(Gn)));t.charCodeAt(r)===39?(s=Ri,r++):(s=e,g===0&&O(_i)),s!==e?(B=a,a=zN(o)):(r=a,a=e)}else r=a,a=e;if(a===e){if(a=r,t.charCodeAt(r)===34?(u=FE,r++):(u=e,g===0&&O(gu)),u!==e){for(o=[],s=r,t.substr(r,2)===ps?(l=ps,r+=2):(l=e,g===0&&O(Ou)),l!==e&&(B=s,l=nc()),s=l,s===e&&(s=t.charAt(r),qE.test(s)?r++:(s=e,g===0&&O(_u)));s!==e;)o.push(s),s=r,t.substr(r,2)===ps?(l=ps,r+=2):(l=e,g===0&&O(Ou)),l!==e&&(B=s,l=nc()),s=l,s===e&&(s=t.charAt(r),qE.test(s)?r++:(s=e,g===0&&O(_u)));t.charCodeAt(r)===34?(s=FE,r++):(s=e,g===0&&O(gu)),s!==e?(B=a,a=ZN(o)):(r=a,a=e)}else r=a,a=e;if(a===e){if(a=r,t.charCodeAt(r)===96?(u=HE,r++):(u=e,g===0&&O(Lu)),u!==e){for(o=[],s=r,t.substr(r,2)===As?(l=As,r+=2):(l=e,g===0&&O(Cu)),l!==e&&(B=s,l=ic()),s=l,s===e&&(s=t.charAt(r),jE.test(s)?r++:(s=e,g===0&&O(wu)));s!==e;)o.push(s),s=r,t.substr(r,2)===As?(l=As,r+=2):(l=e,g===0&&O(Cu)),l!==e&&(B=s,l=ic()),s=l,s===e&&(s=t.charAt(r),jE.test(s)?r++:(s=e,g===0&&O(wu)));t.charCodeAt(r)===96?(s=HE,r++):(s=e,g===0&&O(Lu)),s!==e?(B=a,a=eI(o)):(r=a,a=e)}else r=a,a=e;if(a===e)if(a=r,t.charCodeAt(r)===91?(u=uA,r++):(u=e,g===0&&O(WS)),u!==e){for(o=r,s=[],l=t.charAt(r),KE.test(l)?r++:(l=e,g===0&&O(yu));l!==e;)s.push(l),l=t.charAt(r),KE.test(l)?r++:(l=e,g===0&&O(yu));o=t.substring(o,r),t.charCodeAt(r)===93?(s=cA,r++):(s=e,g===0&&O($S)),s!==e?(B=a,a=tI(o)):(r=a,a=e)}else r=a,a=e}}return a}function kn(){var a;return a=t.charAt(r),pA.test(a)?r++:(a=e,g===0&&O(XS)),a}function Ot(){var a;return a=t.charAt(r),AA.test(a)?r++:(a=e,g===0&&O(qS)),a}function x(){var a,u;return a=r,g++,u=t.charAt(r),SA.test(u)?r++:(u=e,g===0&&O(jS)),g--,u===e?a=void 0:(r=a,a=e),a}function wt(){var a,u,o,s,l,c;if(a=r,t.substr(r,2)===kE?(u=kE,r+=2):(u=e,g===0&&O(KS)),u!==e){for(o=[],s=t.charAt(r),JE.test(s)?r++:(s=e,g===0&&O(bu));s!==e;)o.push(s),s=t.charAt(r),JE.test(s)?r++:(s=e,g===0&&O(bu));u=[u,o],a=u}else r=a,a=e;if(a===e)if(a=r,t.substr(r,2)===YE?(u=YE,r+=2):(u=e,g===0&&O(JS)),u!==e){for(o=[],s=r,l=r,g++,t.substr(r,2)===Mn?(c=Mn,r+=2):(c=e,g===0&&O(wo)),g--,c===e?l=void 0:(r=l,l=e),l!==e?(t.length>r?(c=t.charAt(r),r++):(c=e,g===0&&O(Ze)),c!==e?(l=[l,c],s=l):(r=s,s=e)):(r=s,s=e);s!==e;)o.push(s),s=r,l=r,g++,t.substr(r,2)===Mn?(c=Mn,r+=2):(c=e,g===0&&O(wo)),g--,c===e?l=void 0:(r=l,l=e),l!==e?(t.length>r?(c=t.charAt(r),r++):(c=e,g===0&&O(Ze)),c!==e?(l=[l,c],s=l):(r=s,s=e)):(r=s,s=e);t.substr(r,2)===Mn?(s=Mn,r+=2):(s=e,g===0&&O(wo)),s!==e?(u=[u,o,s],a=u):(r=a,a=e)}else r=a,a=e;return a}function m(){var a;return a=wt(),a===e&&(a=t.charAt(r),RA.test(a)?r++:(a=e,g===0&&O(QS))),a}if(Ci=d(),n.peg$library)return{peg$result:Ci,peg$currPos:r,peg$FAILED:e,peg$maxFailExpected:bs,peg$maxFailPos:rr};if(Ci!==e&&r===t.length)return Ci;throw Ci!==e&&r<t.length&&O(iI()),ac(bs,rr<t.length?t.charAt(rr):null,rr<t.length?wi(rr,rr+1):wi(rr,rr))}var Pl=(t,n)=>{try{return Dl(n,{startRule:t})}catch(e){throw new SyntaxError(`Failed to parse '${n}' as '${t}': ${Ne(e)}`)}},Ml=(t,n)=>{try{return Dl(n,{startRule:t})}catch{return null}};var H_=(t,n)=>dl(t,{$$maxLength:n,$$map:e=>Array.from(e,i=>i.toString(16).padStart(2,"0")).join("")}),aT=(t,n)=>t instanceof Uint8Array?`x'${H_(t,n)}'`:t===null?"NULL":typeof t=="string"?`'${dl(t,{$$maxLength:n,$$map:e=>e.replaceAll("'","''")})}'`:typeof t=="number"&&/^[+\-]?\d+$/.test(""+t)?""+t+".0":""+t,ke=(t,n=!0,e=!1)=>{if(t.includes("\0"))throw new Error("Invalid identifier");return!n&&(e&&t.toUpperCase()==="TEMP"||/^[a-z_]\w*$/i.test(t)&&!Ca.includes(t.toUpperCase()))?t:"`"+t.replaceAll("`","``")+"`"};var oT=async(t,n,e)=>(await t.query([`ATTACH DATABASE ? AS ${n}`,[e],"read_write",ze]),{dispose:async()=>{await t.query([`DETACH DATABASE ${n}`,[],"read_write",ze])}}),qi=class extends Error{},lT=async(t,n,e,i)=>{let E=`compare_${Math.floor(Math.random()*Number.MAX_SAFE_INTEGER)}`,d=`compare_output_${Math.floor(Math.random()*Number.MAX_SAFE_INTEGER)}`,R=await oT(t,E,n);try{let _=await oT(t,d,e);try{await t.query([`CREATE TABLE ${d}."diff-sqlite_schema" (__diff_type, type TEXT, name TEXT, tbl_name TEXT, sql TEXT);

INSERT INTO ${d}."diff-sqlite_schema"
SELECT '-' AS __diff_type, type, name, tbl_name, sql FROM main.sqlite_schema
EXCEPT
SELECT '-' AS __diff_type, type, name, tbl_name, sql FROM ${E}.sqlite_schema;

INSERT INTO ${d}."diff-sqlite_schema"
SELECT '+' AS __diff_type, type, name, tbl_name, sql FROM ${E}.sqlite_schema
EXCEPT
SELECT '+' AS __diff_type, type, name, tbl_name, sql FROM main.sqlite_schema;

INSERT INTO ${d}."diff-sqlite_schema"
SELECT ' ' AS __diff_type, type, name, tbl_name, sql FROM main.sqlite_schema
INTERSECT
SELECT ' ' AS __diff_type, type, name, tbl_name, sql FROM ${E}.sqlite_schema;`,[],"script",ze]);let I=Xr.$$zip((await t.query([`SELECT name FROM ${d}."diff-sqlite_schema" WHERE __diff_type = ' '
`,[],"read_only",ze])).unpack());for(let{name:S}of I){i?.report({message:`Comparing ${ke(S)}...`});let C=(await t.editorPragma("table_schema",["main",S])).unpack();if(C===null)throw new qi(`Table ${S} does not exist.`);await t.query([`CREATE TABLE ${d}.${ke(`diff-${S}`)} (__diff_type, ${C.columns.map(({name:b,type:M})=>ke(b)+" "+ke(M)).join(", ")});

INSERT INTO ${d}.${ke(`diff-${S}`)}
SELECT '-' AS __diff_type, * FROM main.${ke(S)}
EXCEPT
SELECT '-' AS __diff_type, * FROM ${E}.${ke(S)};

INSERT INTO ${d}.${ke(`diff-${S}`)}
SELECT '+' AS __diff_type, * FROM ${E}.${ke(S)}
EXCEPT
SELECT '+' AS __diff_type, * FROM main.${ke(S)};`,[],"script",ze]),(await t.query([`SELECT count(*) as count FROM ${d}.${ke(`diff-${S}`)}`,[],"read_only",ze])).unpack().count[0]>0n?await t.query([`UPDATE ${d}."diff-sqlite_schema" SET __diff_type = 'M' WHERE name = ? COLLATE NOCASE`,[S],"read_write",ze]):await t.query([`DROP TABLE ${d}.${ke(`diff-${S}`)}`,[],"read_write",ze]),i?.report({increment:100/I.length})}}finally{await _.dispose()}}finally{await R.dispose()}};var ET=Se(require("fs")),qr=Se(require("vscode"));var uT=async(t,n,e)=>{try{let i;if(e)i=e;else{let d=D.connManager.connections()[0];if(d===void 0){Z(qr.default.window.showErrorMessage(D.t("No database connection was found.")));return}i=d.p}let E;if(n)E=n;else{let d=(await qr.default.window.showOpenDialog({title:"Compare Database Against\u2026"}))?.[0];if(!d){Z(qr.default.window.showInformationMessage(D.t("Canceled{% comparing databases %}")));return}E=d}await qr.default.window.withProgress({title:D.t("Comparing databases..."),location:qr.default.ProgressLocation.Notification},async d=>{let R=await Qt.mount(E,D.tmpDir,i.executable),_=D.tmpDir.temporaryFile({extension:"sqlite"});t.push({dispose:()=>{ET.default.rmSync(_,{force:!0})}}),await lT(i,R.file,_,d),await vt(da(qr.default.Uri.file(_),{tableName:"diff-sqlite_schema",isComparePane:"true"}))})}catch(i){if(i instanceof qi){Z(qr.default.window.showErrorMessage(i.message));return}Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(26,i))}};var vl=(t,...n)=>`command:${encodeURIComponent(t)}?${encodeURIComponent(JSON.stringify(n))}`;var TT=require("node:child_process"),_t=Se(require("node:fs"),1),Fl=Se(require("node:path"),1);var cT=require("node:child_process"),xl=class extends Error{constructor(e,i,E){super((E?String(E)+`
`:"")+`exit code ${e}
${i.stderr}`,{cause:E});this.code=e;this.output=i}},Ul=class extends Error{constructor(e,i,E){super((E?String(E)+`
`:"")+`signal ${e}
${i.stderr}`,{cause:E});this.signal=e;this.output=i}},Gl=(t,{afterAddingCallbacks:n}={})=>{let e=null;return new Promise((i,E)=>{let d;t.once("error",_=>{d=_,e=setTimeout(()=>{e=null,E(_)},2e3)});let R={stdout:"",stderr:"",output:""};t.stdout?.on("data",_=>{let I=_.toString();R.stdout+=I,R.output+=I}),t.stderr?.on("data",_=>{let I=_.toString();R.stderr+=I,R.output+=I}),t.once("close",(_,I)=>{_===0?i(R):E(_!==null?new xl(_,R,d):new Ul(I,R,d))}),n?.()}).finally(()=>{e!==null&&clearTimeout(e)})},Bl=async(t,n,e,i)=>{try{let E=(0,cT.spawn)(t,n);return(await Gl(E,{afterAddingCallbacks:()=>{i!==void 0&&E.stdin.write(i),E.stdin.end()}})).stdout}catch{return e}};var dT=(t,n,e)=>{try{let i=_t.default.openSync(t,"r"),E=Buffer.alloc(n.length);return _t.default.readSync(i,E,0,n.length,e),_t.default.closeSync(i),E.equals(n)}catch{return!1}},mT=async t=>{try{try{await _t.default.promises.access(t,_t.default.constants.R_OK)}catch(n){return n}return(await V_(t))?.size===0?"sqlite3":dT(t,Buffer.from("** This file contains an SQLite 2"),0)?"sqlite2":dT(t,Buffer.from("SQLite format 3"),0)?"sqlite3":"file magic not found"}finally{}},V_=async t=>{try{return await _t.default.promises.stat(t)}catch{return}},W_=(t,n,e=50)=>{let i=Buffer.alloc(0),E=null;t.on("data",d=>{i=Buffer.concat([i,d]),E!==null&&clearTimeout(E),E=setTimeout(()=>{n(i),i=Buffer.alloc(0)},e)}),t.on("end",()=>{i.length!==0&&n(i)})},Ki=class extends Error{constructor(n){super(`Tried to send a request to a closed connection. Closed reason: ${n}`)}},ji=class extends Error{constructor(e,i){super(e);this.message=e;this.errorCode=i}},fT=Buffer.from("END"),hT=async t=>{let n=await _t.default.promises.readFile(t),e=0;for(;!n.subarray(-3).equals(fT);){if(e++>10)throw new Error("Unexpected end of file.");await new Promise(i=>setTimeout(i,100)),(await _t.default.promises.stat(t)).size>n.length&&(n=await _t.default.promises.readFile(t),e=0)}return n.subarray(0,-fT.length)},jr=class{path;#e;#t;constructor(n,e,i){this.path=n,this.#e=e,this.#t=i}exists(){return _t.default.existsSync(this.path)}spawnRaw(n,e,i){return(0,TT.spawn)(this.path,[n,...Object.entries(e).flatMap(([E,d])=>d===void 0?[]:[`--${E.replaceAll("_","-")}`,d])],i)}spawnOneOff(n,e,i){return Gl(this.spawnRaw(n,e,i))}async writeFileWithFallback(n,e,i){try{await _t.default.promises.writeFile(n,e);return}catch(d){this.#t.logLine(`writeFile failed: ${Ne(d)}`)}if(i!==void 0&&i.length>0)try{let d=Fl.default.resolve(n),R=await Promise.allSettled([...i].filter(_=>_.p.running&&_.fsPaths!=="memory"&&Object.values(_.fsPaths).some(I=>Fl.default.resolve(I.file)===d)).map(_=>_.p.request("disconnect_temporarily",[]).then(()=>_.p)));try{await _t.default.promises.writeFile(n,e)}finally{let _=[];for(let I of R)I.status==="fulfilled"?_.push(I.value.resume()):this.#t.showErrorMessageAndAskIfReport(40,String(I.reason));await Promise.all(_)}return}catch(d){this.#t.logLine(`writeFile fallback failed: ${Ne(d)}`)}else this.#t.logLine("Skipped writeFile fallback");let E=this.#e.temporaryFile({extension:"bin"});try{await _t.default.promises.writeFile(E,e),await this.spawnOneOff("copy-file",{src:E,dst:n})}finally{_t.default.rmSync(E,{force:!0})}}},wa=class{#e;#t;#r;#n=!1;#i=!0;get running(){return this.#i}executable;#s;#o;#l;constructor({executable:n,databasePath:e,tmpDir:i,onError:E,cwd:d,logger:R}){this.#t=i.temporaryFile({extension:"bin"}),this.#r=i.temporaryFile({extension:"bin"}),this.executable=n,this.#s=R,this.#e=n.spawnRaw("server",{request_body_filepath:this.#t,response_body_filepath:this.#r,database_filepath:e},{cwd:d}),this.#e.on("error",I=>{E(I)});let _="";W_(this.#e.stderr,I=>{let S=I.toString();this.#n==="error"?E(S):(this.#s.logLine(S),_+=S+`
`)}),this.#e.stdout.on("data",I=>{let S=I.toString().trim();switch(S){case"Success":{hT(this.#r).then(this.#o).catch(C=>E(C instanceof Error?C:new Error(Ne(C))));break}case"DatabaseBusy":case"PermissionDenied":case"DatabaseLocked":case"ReadOnly":case"SystemIoFailure":case"DatabaseCorrupt":case"DiskFull":case"NotADatabase":case"OtherError":hT(this.#r).then(C=>this.#l(new ji(C.toString(),S))).catch(C=>E(C instanceof Error?C:new Error(Ne(C))));break}}),this.#e.on("exit",(I,S)=>{this.#i=!1,this.#n===!1&&(this.#n="error",E(`Process exited: ${I??S}
${_}`))}),this.#e.once("close",()=>{this.#i=!1,_t.default.rmSync(this.#t,{force:!0}),_t.default.rmSync(this.#r,{force:!0})})}#a=new Array;#u=[];#c=[];addEventListener(n,e){n==="startLongQueryThatSupportInterruption"?this.#u.push(e):this.#c.push(e)}#E=!1;requestRaw(n,e,i,E){if(this.#n!==!1)throw new Ki(this.#n);let d=()=>{let R=()=>{};if(n==="handle"){let S=setTimeout(()=>{R=()=>{this.#c.forEach(C=>C())},this.#u.forEach(C=>C())},3e3);R=()=>{clearTimeout(S)}}let _=S=>{if(_=()=>{},R(),S(),n==="disconnect_temporarily"){this.#E=!0;return}this.#a.shift(),this.#a[0]?.()};this.#o=S=>{_(()=>{i(Object.assign(S,{unpack:()=>ta.unpack(S)}))})},this.#l=S=>{_(()=>{E(S)})},typeof e=="function"&&(e=e());let I;e instanceof Buffer||e instanceof Uint8Array?I=e:I=ea.pack(e),this.executable.writeFileWithFallback(this.#t,I).then(()=>{this.#e.stdin.write(n+`
`)},S=>{_(()=>{E(S instanceof ji?S:new ji(Ne(S),"OtherError"))})})};this.#a.push(d),this.#a.length===1&&this.#a[0]()}request(n,e){return new Promise((i,E)=>this.requestRaw(n,e,d=>{i(d)},E))}async query(n){let e=await this.request("handle",n);return{unpack:()=>{let i=e.unpack();if(!("records"in i))throw new Error("Unexpected response.");return i.records}}}async editorPragma(n,e){let i=await this.request("handle",[`EDITOR_PRAGMA ${n}`,e,"script",ze]);return{unpack:()=>{let E=i.unpack();if("records"in E)throw new Error("Unexpected response.");return E.data}}}interrupt(){this.#e.stdin.write(`interrupt
`)}resume(){if(!this.#E)throw new Error("the connection is not disconnected");this.#E=!1;let n=()=>{n=()=>{},this.#a.shift(),this.#a[0]?.()};return new Promise((e,i)=>{this.#o=E=>{n(),e()},this.#l=E=>{n(),i(E)},this.#e.stdin.write(`resume
`)})}dispose(){this.#n===!1&&(this.#n||="success",this.#e.stdin.write(`close
`))}_kill(){this.#e.kill()}};var Kr=Se(require("node:fs")),kl=Se(require("node:os")),ur=Se(require("node:path")),li=Se(require("vscode"));var pT=Se(require("node:os"),1),Ji=Se(require("node:path"),1),AT=(t,n,e,i)=>{let E=Ji.default.posix.extname(t.path),d=Ji.default.posix.basename(t.path),R=Ji.default.posix.dirname(t.path),_=Ji.default.posix.basename(R),I=C=>C.replaceAll("${fileBasename}",d).replaceAll("${fileBasenameNoExtension}",E.length===0?d:d.slice(0,-E.length)).replaceAll("${fileExtname}",E).replaceAll("${fileDirnameBasename}",_),S=C=>{let w;if(C.startsWith(w="${fileDirname}/"))return{type:"relativePath",prefix:w,basedir:t.with({path:R})};if(C.startsWith(w="${fileWorkspaceFolder}/")){let b=i.getWorkspaceFolder(t)?.uri;return b?{type:"relativePath",prefix:w,basedir:b}:{type:"error",error:n('The value of the configuration "sqlite3-editor.comment.filepath" starts with "${fileWorkspaceFolder}/", but no workspace folder is currently opened.')}}return C.startsWith(w="${userHome}")?{type:"relativePath",prefix:w,basedir:e.file(pT.default.homedir())}:{type:"absolutePath"}};return async C=>{C=C.replaceAll("\\","/").replaceAll("${pathSeparator}","/").replaceAll("${/}","/");let w,b=S(C);switch(b.type){case"relativePath":w=e.joinPath(b.basedir,I(C.slice(b.prefix.length)));break;case"absolutePath":w=e.file(I(C));break;case"error":return{ok:!1,error:b.error}}if(!w.path.endsWith(".md"))return{ok:!1,error:n('The resolved value of the configuration "sqlite3-editor.comment.filepath" must end with ".md"')};if(!i.isWritableFileSystem(w))return{ok:!1,error:n("The file {{- filepath}} is readonly.",{filepath:w.toString(!0)})};{let M=e.joinPath(w,".."),G=await i.stat(M);switch(G.type){case"directory":break;case"error":return{ok:!1,error:G.error};case"fileNotFound":return{ok:!1,error:n("The directory '{{- filepath}}' does not exist.",{filepath:M.toString(!0)})};case"file":case"other":return{ok:!1,error:n("{{- filepath}} is not a directory.",{filepath:M.toString(!0)})}}}{let M=await i.stat(w);switch(M.type){case"file":case"fileNotFound":break;case"directory":case"other":return{ok:!1,error:n("{{- filepath}} is not a file.",{filepath:w.toString(!0)})};case"error":return{ok:!1,error:M.error}}}return{ok:!0,uri:w}}};var Hl=Se(require("node:fs")),yn=Se(require("vscode"));var Qi=class t{#e=jn();#t=[];#r;static async file(n,e){let i=await AT(n,D.t,yn.default.Uri,{getWorkspaceFolder:yn.default.workspace.getWorkspaceFolder,stat:async E=>{try{let d=await yn.default.workspace.fs.stat(E);return d.type&yn.default.FileType.Directory?{type:"directory"}:d.type&yn.default.FileType.File?{type:"file"}:{type:"other"}}catch(d){return d instanceof yn.default.FileSystemError&&d.code==="FileNotFound"?{type:"fileNotFound"}:{type:"error",error:Ne(d)}}},isWritableFileSystem:E=>ki(E,{dangerouslyWriteToVirtualWorkspaces:!0})==="writable"})(we(n).get("comment.filepath"));return new t(i.ok?{type:"file",path:await Qt.mount(i.uri,D.tmpDir,e,{dangerouslyWriteToVirtualWorkspaces:!0})}:{type:"error",error:i.error})}static memory(){return new t({type:"memory"})}constructor(n){this.#t.push(this.#e),this.#r=n,n.type==="file"&&this.#t.push(Kn(n.path.file,{change:this.#e.fire,delete:this.#e.fire,move:this.#e.fire}))}dispose(){this.#t.reverse().forEach(n=>{n.dispose()}),this.#t.length=0}onModified(n){this.#e.event(n)}read(){switch(this.#r.type){case"memory":return{ok:!0,content:D.context.globalState.get("inMemoryDbComments",""),resolvedUriText:"<global state>"};case"error":return{ok:!1,error:this.#r.error};case"file":{let n=this.#r.path.uri.scheme==="file"?this.#r.path.uri.fsPath:this.#r.path.uri.toString(!0);return Hl.default.existsSync(this.#r.path.file)?{ok:!0,content:Hl.default.readFileSync(this.#r.path.file).toString(),resolvedUriText:n}:{ok:!0,content:"",resolvedUriText:n}}}}async write(n,e){switch(this.#r.type){case"memory":await D.context.globalState.update("inMemoryDbComments",n);break;case"error":break;case"file":if(!this.#r.path.file.endsWith(".md"))throw new Error(`'${this.#r.path.file}' does not end with ".md".`);await e.writeFileWithFallback(this.#r.path.file,n);break}}};var ya=class{#e=null;dispose(){this.#e?.dispose(),this.#e=null}async connect(n){let e={isGitDiff:n.scheme==="git",isVirtualWorkspace:!["file","git","untitled"].includes(n.scheme)};D.loggerAndReporter.logLine(`Connecting to ${n.toString(!0)}`);try{let i=[];{if(n.scheme==="untitled")return{errorHTML:D.t("Untitled files are not supported, as they cannot contain binary data."),uri:n,dispose:()=>{}};if(n.scheme==="showModifications")return{errorHTML:D.t("<code>File: Compare Active File with Saved</code> is not supported because this extension directly updates SQLite databases by executing SQL queries, bypassing VSCode's undo/redo functionality."),uri:n,dispose:()=>{}};if(n.scheme.startsWith("clipboardCompare"))return{errorHTML:D.t("<code>{{ featureName }}</code> is not supported.",{featureName:"File: Compare Active File with Clipboard"}),uri:n,dispose:()=>{}};if(n.scheme.startsWith("conflictResolution"))return{errorHTML:D.t("<code>{{ featureName }}</code> is not supported.",{featureName:"conflict resolution"}),uri:n,dispose:()=>{}};if(n.scheme==="sqlite")return{errorHTML:D.t("No file system provider was found for the resource <code>{{ uri }}</code>.",{uri:n.toString(!0)}),uri:n,dispose:()=>{}};if(n.scheme==="vsls")return{errorHTML:D.t("<code>{{ featureName }}</code> is not supported.",{featureName:"Live Share"}),uri:n,dispose:()=>{}};if(!n.path)return{errorHTML:`<p>${D.t("URIs with an empty path are not supported: {{- path }}",{path:n.toString(!0)})}</p>`,uri:n,dispose:()=>{}}}let E=n,d;if(we().get("executablePath")){if(Z(li.default.window.showInformationMessage("Using `sqlite3-editor.executablePath`.")),d=new jr(we().get("executablePath"),D.tmpDir,D.loggerAndReporter),!d.exists())return Z(li.default.window.showInformationMessage(D.t("The file specified in the configuration sqlite3-editor.executablePath ({{- executablePath }}) does not exist.",{executablePath:d.path}))),{errorHTML:`<p>${st(D.t("The file {{- file}} does not exist.",{file:d.path}))}</p>`,uri:E,dispose:()=>{}}}else{let $=(P,X)=>["win32-x64","win32-ia32","win32-arm64","linux-x64-gnu","linux-x64-musl","linux-arm64-gnu","linux-arm64-musl","linux-arm-gnu","darwin-x64","darwin-arm64"].includes(P)?D.t("The executable file {{- filepath }} is missing, which is needed to run the extension. If you have antivirus software, please check if it has deleted the file. Alternatively, you can compile the executable file from the source. Please refer to the 'Using User-Compiled SQLite' section in the README of this extension for instructions.",{filepath:X}):k(P),k=P=>D.t('{{- platformAndArch}} is not supported. Please request it on a <a href="{{- githubIssueLink }}">GitHub Issues</a>.',{platformAndArch:P,githubIssueLink:"https://github.com/yy0931/sqlite3-editor/issues/new"}),H=P=>{let X=D.context.asAbsolutePath(`bin_debug/${P}`);return Kr.default.existsSync(X)?X:D.context.asAbsolutePath(`bin/${P}`)},ie=async P=>{try{await P.spawnOneOff("version",{})}catch(X){return X}};switch(process.platform){case"win32":{if(d=new jr(H(`sqlite3-editor-${process.platform}-${process.arch}.exe`),D.tmpDir,D.loggerAndReporter),!d.exists())return{errorHTML:$(`${process.platform}-${process.arch}`,d.path),uri:E,dispose:()=>{}};let P=await ie(d),X=()=>{switch(process.arch){case"arm64":return'<a href="https://aka.ms/vs/17/release/vc_redist.arm64.exe">https://aka.ms/vs/17/release/vc_redist.arm64.exe</a>';case"ia32":return'<a href="https://aka.ms/vs/17/release/vc_redist.x86.exe">https://aka.ms/vs/17/release/vc_redist.x86.exe</a>';default:return'<a href="https://aka.ms/vs/17/release/vc_redist.x64.exe">https://aka.ms/vs/17/release/vc_redist.x64.exe</a>'}},Q='<a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist">VCRuntime</a>',ee='<a href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist">https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist</a>';if(Ne(P).includes("3221225781"))return{errorHTML:"STATUS_DLL_NOT_FOUND: "+D.t("{{- vcRuntimeLink}} is missing. You can install it by downloading and running {{- exeLink}} (you can find other versions in {{- vcRedistUrl}}). It will take only 30 seconds.",{vcRuntimeLink:Q,exeLink:X(),vcRedistUrl:ee}),uri:E,dispose:()=>{}};if(Ne(P).includes("3221225595"))return{errorHTML:"STATUS_INVALID_IMAGE_FORMAT: "+D.t("{{- vcRuntimeLink}} is missing. You can install it by downloading and running {{- exeLink}} (you can find other versions in {{- vcRedistUrl}}). It will take only 30 seconds.",{vcRuntimeLink:Q,exeLink:X(),vcRedistUrl:ee}),uri:E,dispose:()=>{}};if(Ne(P).includes("3221225794"))return{errorHTML:"STATUS_DLL_INIT_FAILED: "+D.t("Failed to load {{- vcRuntimeLink}}. Please try reinstalling it by downloading and running {{- exeLink}} (you can find other versions in {{- vcRedistUrl}}). If it does not work, please report the issue on GitHub.",{vcRuntimeLink:Q,exeLink:X(),vcRedistUrl:ee}),uri:E,dispose:()=>{}};if(Ne(P).includes("3221226330"))return{errorHTML:"STATUS_INVALID_IMAGE_WIN_64: "+D.t("This extension currently does not support 32-bit Windows."),uri:E,dispose:()=>{}};if(Ne(P).includes("3221225477"))return{errorHTML:"Process exited: STATUS_ACCESS_VIOLATION (0xC0000005)",uri:E,dispose:()=>{}};if(P&&process.arch==="arm64"&&kl.default.release().startsWith("6.1."))return{errorHTML:$(`${process.platform}-${process.arch}-windows7`,d.path),uri:E,dispose:()=>{}};if(Ne(P).includes("spawn EPERM")||Ne(P).includes("spawn UNKNOWN"))return{errorHTML:"Failed to spawn a process. Please try reinstalling the extension and reopening the VSCode window.<br />"+st(Ne(P)+(P instanceof Error&&"errno"in P?`
errno: `+String(P.errno):"")),uri:E,dispose:()=>{}};break}case"android":case"freebsd":case"netbsd":case"linux":{let P=Kr.default.existsSync("/lib/x86_64-linux-gnu/libc.so.6")?"gnu":"musl",X=H(`sqlite3-editor-linux-${process.arch}-gnu`),Q=H(`sqlite3-editor-linux-${process.arch}-musl`);if(d=new jr(P==="gnu"?X:Q,D.tmpDir,D.loggerAndReporter),!d.exists())return{errorHTML:$(`${process.platform}-${process.arch}-${P}`,d.path),uri:E,dispose:()=>{}};if(process.platform!=="linux"){let ee=await ie(d);if(ee)return{errorHTML:`<p>Tried running the binary for linux-${process.arch} but failed:</p><pre><code>${st(Ne(ee))}</code></pre><br />`+k(`${process.platform}-${process.arch}`),uri:E,dispose:()=>{}}}else if(P==="gnu"){let ee=await ie(d);if(ee&&/version `GLIBC_[^']+' not found/.test(Ne(ee)))if(Kr.default.existsSync(Q))D.context.globalState.get("muslFallbackMessageDisplayed",!1)||Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(29,`${D.t("Your system's glibc version is older than the required version. The system will fall back to the statically linked musl, but SQLite's run-time loadable extensions will not work in this mode.")}

Original error: ${Ne(ee)}

glibc: ${await Bl("getconf",["GNU_LIBC_VERSION"],"")}
OS: ${await Bl("uname",["-v"],"")}`).then(()=>{Z(D.context.globalState.update("muslFallbackMessageDisplayed",!0))})),d=new jr(Q,D.tmpDir,D.loggerAndReporter);else return{errorHTML:`<p>Tried running the binary for linux-${process.arch} but failed:</p><pre><code>${st(Ne(ee))}</code></pre><br />`+k(`${process.platform}-${process.arch}`),uri:E,dispose:()=>{}}}break}case"darwin":if(d=new jr(H(`sqlite3-editor-${process.platform}-${process.arch}`),D.tmpDir,D.loggerAndReporter),!d.exists())return{errorHTML:$(`${process.platform}-${process.arch}`,d.path),uri:E,dispose:()=>{}};break;default:return{errorHTML:k(`${process.platform}-${process.arch}`),uri:E,dispose:()=>{}}}}(process.platform==="linux"||process.platform==="darwin"||process.platform==="android")&&((()=>{try{return Kr.default.accessSync(d.path,Kr.default.constants.X_OK),!0}catch{return!1}})()||Kr.default.chmodSync(d.path,"755"));let R,_=()=>{if(R!=="memory")for(let $ of q_(R))$.dispose()};i.push({dispose:_});let I;if(E.scheme===Nt)e.dbms="sqlite3",R="memory",I=Qi.memory();else{let $=await Qt.mount(E,D.tmpDir,d),k=await mT($.file);if(e.dbms=typeof k=="string"?k:"no-read-access",typeof k!="string")return $.dispose(),{errorHTML:`<p>${D.t("No access to the database: {{rawErrorMessage}}",{rawErrorMessage:k.message+""})}</p><p><a href="${st(vl("sqlite3-editor.createDatabase",E.toString(!0)))}">${D.t("Create database")}</a></p>`,uri:E,dispose:()=>{}};if(k==="sqlite2")return $.dispose(),{errorHTML:D.t("SQLite 2 databases are not supported as it has no new releases since 2005. The following command may work for converting your database to SQLite 3. <code>{{shellCommand}}</code>",{shellCommand:`sqlite${Gi} ${Jn(E.fsPath)} .dump | sqlite3${Gi} new.db`}),uri:E,dispose:()=>{}};if(k==="file magic not found"){$.dispose();let ee=E.fsPath.endsWith(".duckdb")?'<hr /><p>Support for DuckDB was dropped in v1.0.91. Please refer to the <a href="https://marketplace.visualstudio.com/items/yy0931.vscode-sqlite3-editor/changelog">changelog</a> for further information.</p>':"";return{errorHTML:`<p>${D.t("The file does not contain a recognizable file magic. It may be an unsupported file format or an encrypted database.")}</p><p><a href="${st(vl("sqlite3-editor.reopenInTextEditor",E.toString(!0)))}">${D.t("Reopen in a text editor")}</a></p>${ee}`,uri:E,dispose:()=>{}}}let[H,ie,P,X,Q]=await Promise.all([Qt.mount(at(E,"..",ur.default.posix.basename(E.path)+"-journal"),ur.default.dirname($.file),d),Qt.mount(at(E,"..",ur.default.posix.basename(E.path)+"-wal"),ur.default.dirname($.file),d),Qt.mount(at(E,"..",ur.default.posix.basename(E.path)+"-wal2"),ur.default.dirname($.file),d),Qt.mount(at(E,"..",ur.default.posix.basename(E.path)+"-shm"),ur.default.dirname($.file),d),Qi.file(E,d)]);R={base:$,journal:H,wal:ie,wal2:P,shm:X},I=Q}i.push(I);let S=we(E),C;E.scheme===Nt&&this.#e!==null?C=this.#e:(C=new wa({executable:d,databasePath:R==="memory"?":memory:":R.base.file,tmpDir:D.tmpDir,onError:$=>{if(Ne($).includes("dyld: cannot load")&&process.platform==="darwin"&&+kl.default.release().split(".")[0]<=18){Z(li.default.window.showErrorMessage(`${Ne($)}
Note: You are running a macOS version older than 10.15 Catalina (released on October 7, 2019), which is not supported by the extension. We cannot support these versions because we lack access to them, and very few users use these older versions.`));return}if(R!=="memory"&&E.scheme==="file"&&$ instanceof Error&&$.message.trim().includes("unable to open database file")){let k=Ff(R.base.file);if(k!==null){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(6,k));return}}Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(6,$))},cwd:E.scheme==="file"&&Kr.default.existsSync(ur.default.dirname(E.fsPath))?ur.default.dirname(E.fsPath):void 0,logger:D.loggerAndReporter}),E.scheme===Nt?this.#e=C:(i.push(C),i.push({dispose:()=>{D.loggerAndReporter.logLine(`Disconnecting from ${E.toString(!0)}`)}})));for(let[$,k]of Object.entries({...S.get("runtimeLoadableExtensions.driver.sqlite3"),...S.get("connection.runtimeLoadableExtensions")}))if(RT($)?.test(E.toString(!0))){try{await C.editorPragma("load_extensions",k)}catch(H){throw Ne(H).includes("Dynamic loading not supported")&&Z(li.default.window.showErrorMessage(D.t("Run-time loadable extensions are not supported in environments using musl. If you have experience with musl-based Linux and Rust, please consider submitting a pull request to update the build script at https://github.com/yy0931/sqlite3-editor/blob/rust-backend/.github/workflows/ci.yml to resolve this issue."))),H}break}let w=async()=>{let $=we(E).get("pragma_foreign_key");await C.query([`PRAGMA foreign_keys = ${$}`,[],"read_write",ze])};await w(),i.push(li.default.workspace.onDidChangeConfiguration($=>{$.affectsConfiguration("sqlite3-editor.pragma_foreign_key")&&Z(w())}));{let $=we(E);for(let[k,[H,ie]]of Object.entries({...$.get("connectionSetupQueries.driver.sqlite3"),...$.get("connection.setupQueries")}).entries())if(typeof ie=="string"&&RT(H)?.test(E.toString(!0))){D.loggerAndReporter.logLine(`Executed the setup query #${k+1}: ${JSON.stringify(ie)}`),await C.query([ie,[],"script",ze]);break}}let b=jn(),M=jn(),G=jn();return i.push(b,M,G),R!=="memory"&&i.push(Kn(R.base.file,{change:b.fire,move:M.fire,delete:G.fire}),Kn(R.wal.file,{change:b.fire,move:null,delete:null}),Kn(R.wal2.file,{change:b.fire,move:null,delete:null})),{uri:E,fsPaths:R,dispose:()=>{for(let $ of i.reverse())$.dispose()},p:C,onDidDatabaseChange:b.event,onDidDatabaseFileMove:M.event,onDidDatabaseFileDelete:G.event,notifyDatabaseChange:b.fire,commentFile:I}}catch(i){throw Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(8,i)),i}}},RT=t=>{try{return new RegExp(t)}catch{return null}},q_=t=>Object.values(t);var zi=Se(require("vscode"));var NT=async()=>{let t=d=>{let R;if(R=/^(.*):(\d+)$/.exec(d)){let _=+R[2];if(_>=1)return{tableName:R[1],rowNumber:_}}if(/^\d+$/.test(d)){let _=+d;if(_>=1)return{rowNumber:_}}return{tableName:d}},n=await zi.default.window.showInputBox({title:"Go to Table/Row",placeHolder:"table, row, or table:row",validateInput(d){let{rowNumber:R,tableName:_}=t(d);return _!==void 0&&R!==void 0?{severity:zi.default.InputBoxValidationSeverity.Info,message:D.t("Go to table {{- tableName}} and row {{- rowNumber}}.",{tableName:_,rowNumber:R})}:R!==void 0?{severity:zi.default.InputBoxValidationSeverity.Info,message:D.t("Go to row {{- rowNumber}}.",{rowNumber:R})}:{severity:zi.default.InputBoxValidationSeverity.Info,message:D.t("Go to table {{- tableName}}.",{tableName:_})}}});if(n===void 0||n==="")return;let{rowNumber:e,tableName:i}=t(n),E=D.connManager.webviewPanels()[0]?.webview;E!==void 0&&await rt(E,4,i??null,e===void 0?null:e-1)};var Yl=Se(require("node:os")),Ei=Se(require("vscode"));var ba=class{#e=Ei.default.window.createOutputChannel("SQLite3 Editor",{log:!0});#t;logLine;dispose;reportError;constructor(n){this.#t={reportError(e,i){Z(Ei.default.env.openExternal(Ei.default.Uri.parse(`https://github.com/yy0931/sqlite3-editor/issues/new?title=${encodeURIComponent("runtime error")}&body=${encodeURIComponent(i+`
* extension version ${n.extension.packageJSON.version??""}
* error code ${e}`)}`)))}},this.reportError=this.#t.reportError.bind(this.#t),this.logLine=this.#e.appendLine.bind(this.#e),this.dispose=()=>{this.#e.dispose()}}async showErrorMessageAndAskIfReport(n,e){let i;e instanceof Error?(i=e.message,"errno"in e&&(i+=`
errno: ${e.errno}`),this.#e.error(e)):i=Ne(e),j_(i)===null||e instanceof Ki||e instanceof hn?Z(Ei.default.window.showErrorMessage(i)):await Ei.default.window.showErrorMessage(i)}showOutput(){this.#e.show()}},j_=t=>(t=(t+"").trim(),t.includes("attempt to write a readonly database")||t.includes("CHECK constraint failed")||t.includes("database disk image is malformed")||t.includes("database is locked")||t.includes("database or disk is full")||t.includes("disk I/O error")||t.includes("ENOENT: no such file or directory")||t.includes("file is not a database")||t.includes("malformed database schema")||t.includes("no space left on device")||t.includes("no such table")||t.includes("NOT NULL constraint failed:")||t.includes("StorageFull")||t.includes("there is already another table or index with this name")||t.includes("Unable to write into user settings.")||t.includes("UNIQUE constraint failed")||t.includes("unsupported file format")||/^\^\^\^.*sqlite3.OperationalError:.*syntax error/.test(t)||/default value of column .* is not constant/.test(t)||/Process exited: 1$/.test(t)||t.includes("already exists in")||t.includes("unable to open database file")||t.includes("Failed to create a temporary file:")||t.includes("Webview is disposed")||/\binterrupted\b/.test(t)||(t=t.replace(/Parameters:.+/sg,""),t=t.replace(/Traceback .+/sg,"[traceback]"),t=t.replace(/File\s*.*,\s*line/sg,"[filepath]"),t=t.replace(/\(.*\d+:\d+\)/sg,"[filepath]"),t=t.replace(/'\\[^']+\\[^']+\\[^']+'/sg,"[filepath]"),Yl.default.userInfo().username.length>3&&(t=t.replaceAll(Yl.default.userInfo().username,"[username]")),t.trim()==="[traceback]"||t.trim()==="")?null:t);var qe=Se(require("vscode"));var Da=class t{static uriToId(n){return n.scheme!=="sqlite3-editor-pop-out"||!n.path.startsWith("/")?null:n.path.slice(1)}static idToUri(n){return qe.default.Uri.from({scheme:"sqlite3-editor-pop-out",path:"/"+n})}#e=new Map;#t=new qe.default.EventEmitter;#r=[];constructor(){this.#r.push(qe.default.workspace.registerFileSystemProvider("sqlite3-editor-pop-out",{createDirectory(n){throw qe.default.FileSystemError.NoPermissions(n)},delete(n,e){throw qe.default.FileSystemError.NoPermissions(n)},readDirectory:n=>n.path==="/"?Array.from(this.#e.keys(),e=>[e,qe.default.FileType.File]):[],readFile:n=>{let e=t.uriToId(n);if(e===null)throw qe.default.FileSystemError.FileNotFound(n);let i=this.#e.get(e);if(i===void 0)throw qe.default.FileSystemError.FileNotFound(n);return i.value},rename(n,e,i){throw qe.default.FileSystemError.NoPermissions()},stat:n=>{let e=t.uriToId(n);if(e===null)throw qe.default.FileSystemError.FileNotFound(n);let i=this.#e.get(e);if(i===void 0)throw qe.default.FileSystemError.FileNotFound(n);return{ctime:i.ctime,mtime:i.mtime,size:i.value.byteLength,type:qe.default.FileType.File}},watch(n,e){return{dispose:()=>{}}},writeFile:async(n,e,i)=>{let E=t.uriToId(n);if(E===null)throw qe.default.FileSystemError.FileNotFound(n);let d=this.#e.get(E);if(d===void 0)throw i.create?qe.default.FileSystemError.NoPermissions(n):qe.default.FileSystemError.FileNotFound(n);this.#e.set(E,{...d,value:e,mtime:Date.now()}),d.onChange(new TextDecoder().decode(e)),await pt("sqlite3-editor.popOutEditor.commit",E)},copy(n,e,i){throw qe.default.FileSystemError.NoPermissions()},onDidChangeFile:this.#t.event},{isCaseSensitive:!0})),this.#r.push(qe.default.workspace.onDidChangeTextDocument(n=>{let{uri:e}=n.document;if(e.scheme!=="sqlite3-editor-pop-out")return;let i=t.uriToId(e);if(i===null)return;let E=this.#e.get(i);if(E===void 0)return;let d=n.document.getText();this.#e.set(i,{...E,value:new TextEncoder().encode(d)}),E.onChange(d)})),this.#r.push(qe.default.languages.registerCodeLensProvider({scheme:"sqlite3-editor-pop-out"},{provideCodeLenses(n){return[{command:{title:D.t("The SQL query is committed when you save the contents in the editor."),command:"sqlite3-editor.noop",arguments:[]},range:n.lineAt(0).range,isResolved:!0}]}}))}isFocused(){return qe.default.window.activeTextEditor?.document.uri.scheme==="sqlite3-editor-pop-out"}async create(n,e,i,E){let d=n,R=t.idToUri(d);this.#e.has(d)&&(this.#e.delete(d),this.#t.fire([{type:qe.default.FileChangeType.Deleted,uri:R}]));let _=Date.now();this.#e.set(d,{value:new TextEncoder().encode(e),ctime:_,mtime:_,onChange:i,webviewPanel:E}),this.#t.fire([{type:qe.default.FileChangeType.Created,uri:R}]),this.#r.push(E.onDidDispose(()=>{Z(this.remove(n))})),await qe.default.window.showTextDocument(R,{viewColumn:qe.default.ViewColumn.Beside})}update(n,e){let i=n,E=this.#e.get(i);if(E===void 0||new TextDecoder().decode(E.value)===e)return;let d=t.idToUri(i);[...pl()].some(R=>R.isDirty&&R.input.uri.toString()===d.toString())||(this.#e.set(i,{...E,value:new TextEncoder().encode(e),mtime:Date.now()}),this.#t.fire([{type:qe.default.FileChangeType.Changed,uri:d}]))}async remove(n){let e=n,i=t.idToUri(e);this.#e.delete(e)&&this.#t.fire([{type:qe.default.FileChangeType.Deleted,uri:i}]);let E=i.toString();await qe.default.window.tabGroups.close([...new Set([...pl()].filter(d=>d.input.uri.toString()===E))])}getWebviewPanel(n){let e=n,i=this.#e.get(e);return i===void 0?null:i.webviewPanel}async commit(n){if(n===void 0){if(qe.default.window.activeTextEditor===void 0)return;let i=t.uriToId(qe.default.window.activeTextEditor.document.uri);if(i===null)return;n=i}let e=this.getWebviewPanel(n);e!==null&&await rt(e.webview,22)}dispose(){this.#r.forEach(n=>{n.dispose()}),this.#r.length=0}};var Rr=Se(require("vscode"));var J_=t=>{let n=/^(CtrlCmd \+ |)(Shift \+ |)(Alt \+ |)(.*?)$/.exec(t);if(n===null)return null;let[e,i,E,d,R]=n;return{$$ctrlCmd:i!=="",$$shift:E!=="",$$alt:d!=="",$$code:R}},IT=(t,n,e)=>{let i=J_(t);if(!i)return{$$text:e,$$parts:null,$$separator:null};let E=[],d,R=i.$$code.replace(/\bKey([A-Z])\b/,"$1").replace(/\bDigit(\d)\b/,"$1").replace("ArrowUp","\u2191").replace("ArrowRight","\u2192").replace("ArrowDown","\u2193").replace("ArrowLeft","\u2190").replace("Slash","/");return n?(i.$$ctrlCmd&&E.push("\u2318"),i.$$shift&&E.push("\u21E7"),i.$$alt&&E.push("\u2325"),d=" ",R=R.replace("Escape","Esc").replace("Enter","\u21A9")):(i.$$ctrlCmd&&E.push("Ctrl"),i.$$shift&&E.push("Shift"),i.$$alt&&E.push("Alt"),d=" + "),E.push(R),{$$text:E.join(d),$$parts:E,$$separator:d}};var ui=Se(require("vscode"));var Vl=(t,n)=>[{command:{title:"$(plug) Connect",command:"sqlite3-editor.connect",arguments:[t]},range:n,isResolved:!0},{command:{title:"$(open-preview) Connect and Open Panel",command:"sqlite3-editor.connectAndOpenPanel",arguments:[t]},range:n,isResolved:!0}],Pa=class{provideCodeLenses(n){if(n.languageId!=="query-editor")try{let e=ar(n.lineAt(0).text);if(e===null)return;let i=new ui.default.Range(n.positionAt(0),n.positionAt(e[0].length));return Vl(n,i)}catch(e){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(17,e))}}},Ma=class{onDidChangeCodeLenses;#e=[];constructor(){let n=new ui.default.EventEmitter;this.#e.push(n),this.onDidChangeCodeLenses=n.event,this.#e.push(D.connManager.onDidChange(()=>{n.fire()})),this.#e.push(ui.default.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration("sqlite3-editor.codeLens")&&n.fire()}))}dispose(){this.#e.forEach(n=>{n.dispose()}),this.#e.length=0}async provideCodeLenses(n){try{let e=ar(n.lineAt(0).text);if(e===null)return;let i=new ui.default.Range(n.positionAt(0),n.positionAt(e[0].length)),E=mt(n);if(E===void 0)return;if(E.scheme!==Nt&&!await _r(E))return Vl(n,i);let d=D.connManager.connections(E)[0];return d===void 0?Vl(n,i):[...(we().get("codeLens.hideExecuteAndSelectButtons")?[]:(await d.p.request("code_lens",()=>[n.getText()])).unpack()).map(_=>{let I=mr(_.start,_.end);I.isSingleLine||(I=n.lineAt(I.start.line).range);let S;switch(_.kind){case"Select":S=`$(play) Select${_.cte_identifier===null?"":" "+_.cte_identifier}`;break;case"Explain":S=`$(play) Explain${_.cte_identifier===null?"":" "+_.cte_identifier}`;break;case"Other":S=`$(play) Execute${_.cte_identifier===null?"":" "+_.cte_identifier}`;break}return{command:{title:`${S} (${IT("Shift + Enter",process.platform==="darwin","").$$text})`,command:"sqlite3-editor.execute",arguments:[_],tooltip:_.stmt_executed},isResolved:!0,range:I}}),...D.connManager.webviewPanels(E).length===0?[{command:{title:"$(open-preview) Open Panel",command:"sqlite3-editor.openPanel",arguments:[],tooltip:""},range:i,isResolved:!0}]:[]]}catch(e){Ne(e).includes("Illegal value for `line`")?Z(ui.default.window.showWarningMessage(Ne(e))):Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(16,e))}}};var ci={abs:{args:"(X)",docs:"The abs(X) function returns the absolute value of the numeric argument X. Abs(X) returns NULL if X is NULL. Abs(X) returns 0.0 if X is a string or blob that cannot be converted to a numeric value. If X is the integer -9223372036854775808 then abs(X) throws an integer overflow error since there is no equivalent positive 64-bit two complement value."},changes:{args:"()",docs:"The changes() function returns the number of database rows that were changed or inserted or deleted by the most recently completed INSERT, DELETE, or UPDATE statement, exclusive of statements in lower-level triggers. The changes() SQL function is a wrapper around the [sqlite3\\_changes64()](https://www.sqlite.org/c3ref/changes.html) C/C++ function and hence follows the same rules for counting changes."},char:{args:"(X1,X2,...,XN)",docs:"The char(X1,X2,...,XN) function returns a string composed of characters having the unicode code point values of integers X1 through XN, respectively."},coalesce:{args:"(X,Y,...)",docs:"The coalesce() function returns a copy of its first non-NULL argument, or NULL if all arguments are NULL. Coalesce() must have at least 2 arguments."},concat:{args:"(X,...)",docs:"The concat(...) function returns a string which is the concatenation of the string representation of all of its non-NULL arguments. If all arguments are NULL, then concat() returns an empty string."},concat_ws:{args:"(SEP,X,...)",docs:"The concat\\_ws(SEP,...) function returns a string that is the concatenation of all non-null arguments beyond the first argument, using the text value of the first argument as a separator. If the first argument is NULL, then concat\\_ws() returns NULL. If all arguments other than the first are NULL, then concat\\_ws() returns an empty string."},format:{args:"(FORMAT,...)",docs:"The format(FORMAT,...) SQL function works like the [sqlite3\\_mprintf()](https://www.sqlite.org/c3ref/mprintf.html) C-language function and the printf() function from the standard C library. The first argument is a format string that specifies how to construct the output string using values taken from subsequent arguments. If the FORMAT argument is missing or NULL then the result is NULL. The %n format is silently ignored and does not consume an argument. The %p format is an alias for %X. The %z format is interchangeable with %s. If there are too few arguments in the argument list, missing arguments are assumed to have a NULL value, which is translated into 0 or 0.0 for numeric formats or an empty string for %s. See the [built-in printf()](https://www.sqlite.org/printf.html) documentation for additional information."},glob:{args:"(X,Y)",docs:`The glob(X,Y) function is equivalent to the expression "**Y GLOB X**". Note that the X and Y arguments are reversed in the glob() function relative to the infix [GLOB](https://www.sqlite.org/lang_expr.html#glob) operator. Y is the string and X is the pattern. So, for example, the following expressions are equivalent:

>      name GLOB '\\*helium\\*'
>      glob('\\*helium\\*',name)
>   

If the [sqlite3\\_create\\_function()](https://www.sqlite.org/c3ref/create_function.html) interface is used to override the glob(X,Y) function with an alternative implementation then the [GLOB](https://www.sqlite.org/lang_expr.html#glob) operator will invoke the alternative implementation.`},hex:{args:"(X)",docs:`The hex() function interprets its argument as a BLOB and returns a string which is the upper-case hexadecimal rendering of the content of that blob.

If the argument _X_ in "hex(_X_)" is an integer or floating point number, then "interprets its argument as a BLOB" means that the binary number is first converted into a UTF8 text representation, then that text is interpreted as a BLOB. Hence, "hex(12345678)" renders as "3132333435363738" not the binary representation of the integer value "0000000000BC614E".

See also: [unhex()](https://www.sqlite.org/lang_corefunc.html#unhex)`},ifnull:{args:"(X,Y)",docs:"The ifnull() function returns a copy of its first non-NULL argument, or NULL if both arguments are NULL. Ifnull() must have exactly 2 arguments. The ifnull() function is equivalent to [coalesce()](https://www.sqlite.org/lang_corefunc.html#coalesce) with two arguments."},iif:{args:"(X,Y,Z?)",docs:`The iif(B1,V1,...,BN,VN) function takes arguments in pairs. The first argument of each pair is a Boolean and the second argument is a value to return if the Boolean is true. The iif() function returns the value associated with the first true Boolean. If the number of arguments to iif() is odd, then the last argument is a value that returned if all prior Boolean arguments are false. If the number of arguments is even and all Boolean arguments are false, then NULL is returned. The iif() function requires at least two arguments. The iif() function is really a short-hand notation for a [CASE expression](https://www.sqlite.org/lang_expr.html#case). For example, the iif(X,Y,Z) function is logically equivalent to and generates the same [bytecode](https://www.sqlite.org/opcode.html) as the [CASE expression](https://www.sqlite.org/lang_expr.html#case) "CASE WHEN X THEN Y ELSE Z END". The if() function is just an alternative spelling for iif().

The iif() function uses short-circuit evaluation. Arguments are only evaluated if necessary to compute the final result. So, for example, if one of the value arguments involves an expensive computation (such as an elaborate subquery) but the corresponding Boolean is false, the expensive computation never occurs. Similarly, Boolean arguments past the first one that is true are never evaluated.

The iif() function originally required exactly three arguments. The two-argument version of iif() and the ability to spell the function as "if()" where features added in SQLite version 3.48.0 (2025-01-14) The ability to accept more than 3 arguments was added in SQLite version 3.49.0 (2025-02-06).`},if:{args:"(X,Y,Z?)",docs:`The iif(B1,V1,...,BN,VN) function takes arguments in pairs. The first argument of each pair is a Boolean and the second argument is a value to return if the Boolean is true. The iif() function returns the value associated with the first true Boolean. If the number of arguments to iif() is odd, then the last argument is a value that returned if all prior Boolean arguments are false. If the number of arguments is even and all Boolean arguments are false, then NULL is returned. The iif() function requires at least two arguments. The iif() function is really a short-hand notation for a [CASE expression](https://www.sqlite.org/lang_expr.html#case). For example, the iif(X,Y,Z) function is logically equivalent to and generates the same [bytecode](https://www.sqlite.org/opcode.html) as the [CASE expression](https://www.sqlite.org/lang_expr.html#case) "CASE WHEN X THEN Y ELSE Z END". The if() function is just an alternative spelling for iif().

The iif() function uses short-circuit evaluation. Arguments are only evaluated if necessary to compute the final result. So, for example, if one of the value arguments involves an expensive computation (such as an elaborate subquery) but the corresponding Boolean is false, the expensive computation never occurs. Similarly, Boolean arguments past the first one that is true are never evaluated.

The iif() function originally required exactly three arguments. The two-argument version of iif() and the ability to spell the function as "if()" where features added in SQLite version 3.48.0 (2025-01-14) The ability to accept more than 3 arguments was added in SQLite version 3.49.0 (2025-02-06).`},instr:{args:"(X,Y)",docs:"The instr(X,Y) function finds the first occurrence of string Y within string X and returns the number of prior characters plus 1, or 0 if Y is nowhere found within X. Or, if X and Y are both BLOBs, then instr(X,Y) returns one more than the number bytes prior to the first occurrence of Y, or 0 if Y does not occur anywhere within X. If both arguments X and Y to instr(X,Y) are non-NULL and are not BLOBs then both are interpreted as strings. If either X or Y are NULL in instr(X,Y) then the result is NULL."},last_insert_rowid:{args:"()",docs:"The last\\_insert\\_rowid() function returns the [ROWID](https://www.sqlite.org/lang_createtable.html#rowid) of the last row insert from the database connection which invoked the function. The last\\_insert\\_rowid() SQL function is a wrapper around the [sqlite3\\_last\\_insert\\_rowid()](https://www.sqlite.org/c3ref/last_insert_rowid.html) C/C++ interface function."},length:{args:"(X)",docs:`For a string value X, the length(X) function returns the number of Unicode code points (not bytes) in input string X prior to the first U+0000 character. Since SQLite strings do not normally contain NUL characters, the length(X) function will usually return the total number of characters in the string X. For a blob value X, length(X) returns the number of bytes in the blob. If X is NULL then length(X) is NULL. If X is numeric then length(X) returns the length of a string representation of X.

Note that for strings, the length(X) function returns the _character_ or _code-point_ length of the string, not the byte length. The character length is the number of characters in the string. The character length is always different from the byte length for UTF-16 strings, and can be different from the byte length for UTF-8 strings if the string contains multi-byte characters. Use the [octet\\_length()](https://www.sqlite.org/lang_corefunc.html#octet_length) function to find the byte length of a string.

For BLOB values, length(X) always returns the byte-length of the BLOB.

For string values, length(X) must read the entire string into memory in order to compute the character length. But for BLOB values, reading the whole string into memory is not necessary as SQLite already knows how many bytes are in the BLOB. Hence, for multi-megabyte values, the length(X) function is usually much faster for BLOBs than for strings, since it does not need to load the value into memory.`},like:{args:"(X,Y,Z)",docs:`The like() function is used to implement the "**Y LIKE X \\[ESCAPE Z\\]**" expression. If the optional ESCAPE clause is present, then the like() function is invoked with three arguments. Otherwise, it is invoked with two arguments only. Note that the X and Y parameters are reversed in the like() function relative to the infix [LIKE](https://www.sqlite.org/lang_expr.html#like) operator. X is the pattern and Y is the string to match against that pattern. Hence, the following expressions are equivalent:

>      name LIKE '%neon%'
>      like('%neon%',name)
>   

The [sqlite3\\_create\\_function()](https://www.sqlite.org/c3ref/create_function.html) interface can be used to override the like() function and thereby change the operation of the [LIKE](https://www.sqlite.org/lang_expr.html#like) operator. When overriding the like() function, it may be important to override both the two and three argument versions of the like() function. Otherwise, different code may be called to implement the [LIKE](https://www.sqlite.org/lang_expr.html#like) operator depending on whether or not an ESCAPE clause was specified.`},likelihood:{args:"(X,Y)",docs:"The likelihood(X,Y) function returns argument X unchanged. The value Y in likelihood(X,Y) must be a floating point constant between 0.0 and 1.0, inclusive. The likelihood(X) function is a no-op that the code generator optimizes away so that it consumes no CPU cycles during run-time (that is, during calls to [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html)). The purpose of the likelihood(X,Y) function is to provide a hint to the query planner that the argument X is a boolean that is true with a probability of approximately Y. The [unlikely(X)](https://www.sqlite.org/lang_corefunc.html#unlikely) function is short-hand for likelihood(X,0.0625). The [likely(X)](https://www.sqlite.org/lang_corefunc.html#likely) function is short-hand for likelihood(X,0.9375)."},likely:{args:"(X)",docs:"The likely(X) function returns the argument X unchanged. The likely(X) function is a no-op that the code generator optimizes away so that it consumes no CPU cycles at run-time (that is, during calls to [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html)). The purpose of the likely(X) function is to provide a hint to the query planner that the argument X is a boolean value that is usually true. The likely(X) function is equivalent to [likelihood](https://www.sqlite.org/lang_corefunc.html#likelihood)(X,0.9375). See also: [unlikely(X)](https://www.sqlite.org/lang_corefunc.html#unlikely)."},load_extension:{args:"(X,Y)",docs:`The load\\_extension(X,Y) function loads [SQLite extensions](https://www.sqlite.org/loadext.html) out of the shared library file named X using the entry point Y. The result of load\\_extension() is always a NULL. If Y is omitted then the default entry point name is used. The load\\_extension() function raises an exception if the extension fails to load or initialize correctly.

The load\\_extension() function will fail if the extension attempts to modify or delete an SQL function or collating sequence. The extension can add new functions or collating sequences, but cannot modify or delete existing functions or collating sequences because those functions and/or collating sequences might be used elsewhere in the currently running SQL statement. To load an extension that changes or deletes functions or collating sequences, use the [sqlite3\\_load\\_extension()](https://www.sqlite.org/c3ref/load_extension.html) C-language API.

For security reasons, extension loading is disabled by default and must be enabled by a prior call to [sqlite3\\_enable\\_load\\_extension()](https://www.sqlite.org/c3ref/enable_load_extension.html).`},lower:{args:"(X)",docs:"The lower(X) function returns a copy of string X with all ASCII characters converted to lower case. The default built-in lower() function works for ASCII characters only. To do case conversions on non-ASCII characters, load the ICU extension."},ltrim:{args:"(X,Y)",docs:"The ltrim(X,Y) function returns a string formed by removing any and all characters that appear in Y from the left side of X. If the Y argument is omitted, ltrim(X) removes spaces from the left side of X."},max:{args:"(X)",docs:"The max() aggregate function returns the maximum value of all values in the group. The maximum value is the value that would be returned last in an ORDER BY on the same column. Aggregate max() returns NULL if and only if there are no non-NULL values in the group."},min:{args:"(X)",docs:"The min() aggregate function returns the minimum non-NULL value of all values in the group. The minimum value is the first non-NULL value that would appear in an ORDER BY of the column. Aggregate min() returns NULL if and only if there are no non-NULL values in the group."},nullif:{args:"(X,Y)",docs:"The nullif(X,Y) function returns its first argument if the arguments are different and NULL if the arguments are the same. The nullif(X,Y) function searches its arguments from left to right for an argument that defines a collating function and uses that collating function for all string comparisons. If neither argument to nullif() defines a collating function then the BINARY collating function is used."},octet_length:{args:"(X)",docs:`The octet\\_length(X) function returns the number of bytes in the encoding of text string X. If X is NULL then octet\\_length(X) returns NULL. If X is a BLOB value, then octet\\_length(X) is the same as [length(X)](https://www.sqlite.org/lang_corefunc.html#length). If X is a numeric value, then octet\\_length(X) returns the number of bytes in a text rendering of that number.

Because octet\\_length(X) returns the number of bytes in X, not the number of characters or code-points, the value returned depends on the database encoding. The octet\\_length() function can return different answers for the same input string if the database encoding is UTF16 instead of UTF8.

If argument X is a table column and the value is of type text or blob, then octet\\_length(X) avoids reading the content of X from disk, as the byte length can be computed from metadata. Thus, octet\\_length(X) is efficient even if X is a column containing a multi-megabyte text or blob value.`},printf:{args:"(FORMAT,...)",docs:"The printf() SQL function is an alias for the [format() SQL function](https://www.sqlite.org/lang_corefunc.html#format). The format() SQL function was originally named printf(). But the name was later changed to format() for compatibility with other database engines. The printf() name is retained as an alias so as not to break legacy code."},quote:{args:"(X)",docs:"The quote(X) function returns the text of an SQL literal which is the value of its argument suitable for inclusion into an SQL statement. Strings are surrounded by single-quotes with escapes on interior quotes as needed. BLOBs are encoded as hexadecimal literals. Strings with embedded NUL characters cannot be represented as string literals in SQL and hence the returned string literal is truncated prior to the first NUL."},random:{args:"()",docs:"The random() function returns a pseudo-random integer between -9223372036854775808 and +9223372036854775807."},randomblob:{args:"(N)",docs:`The randomblob(N) function return an N-byte blob containing pseudo-random bytes. If N is less than 1 then a 1-byte random blob is returned.

Hint: applications can generate globally unique identifiers using this function together with [hex()](https://www.sqlite.org/lang_corefunc.html#hex) and/or [lower()](https://www.sqlite.org/lang_corefunc.html#lower) like this:

> hex(randomblob(16))  
>   
> lower(hex(randomblob(16)))`},replace:{args:"(X,Y,Z)",docs:"The replace(X,Y,Z) function returns a string formed by substituting string Z for every occurrence of string Y in string X. The [BINARY](https://www.sqlite.org/datatype3.html#collation) collating sequence is used for comparisons. If Y is an empty string then return X unchanged. If Z is not initially a string, it is cast to a UTF-8 string prior to processing."},round:{args:"(X,Y)",docs:"The round(X,Y) function returns a floating-point value X rounded to Y digits to the right of the decimal point. If the Y argument is omitted or negative, it is taken to be 0."},rtrim:{args:"(X,Y)",docs:"The rtrim(X,Y) function returns a string formed by removing any and all characters that appear in Y from the right side of X. If the Y argument is omitted, rtrim(X) removes spaces from the right side of X."},sign:{args:"(X)",docs:"The sign(X) function returns -1, 0, or +1 if the argument X is a numeric value that is negative, zero, or positive, respectively. If the argument to sign(X) is NULL or is a string or blob that cannot be losslessly converted into a number, then sign(X) returns NULL."},soundex:{args:"(X)",docs:'The soundex(X) function returns a string that is the soundex encoding of the string X. The string "?000" is returned if the argument is NULL or contains no ASCII alphabetic characters. This function is omitted from SQLite by default. It is only available if the [SQLITE\\_SOUNDEX](https://www.sqlite.org/compile.html#soundex) compile-time option is used when SQLite is built.'},sqlite_compileoption_get:{args:"(N)",docs:"The sqlite\\_compileoption\\_get() SQL function is a wrapper around the [sqlite3\\_compileoption\\_get()](https://www.sqlite.org/c3ref/compileoption_get.html) C/C++ function. This routine returns the N-th compile-time option used to build SQLite or NULL if N is out of range. See also the [compile\\_options pragma](https://www.sqlite.org/pragma.html#pragma_compile_options)."},sqlite_compileoption_used:{args:"(X)",docs:"The sqlite\\_compileoption\\_used() SQL function is a wrapper around the [sqlite3\\_compileoption\\_used()](https://www.sqlite.org/c3ref/compileoption_get.html) C/C++ function. When the argument X to sqlite\\_compileoption\\_used(X) is a string which is the name of a compile-time option, this routine returns true (1) or false (0) depending on whether or not that option was used during the build."},sqlite_offset:{args:"(X)",docs:`The sqlite\\_offset(X) function returns the byte offset in the database file for the beginning of the record from which value would be read. If X is not a column in an ordinary table, then sqlite\\_offset(X) returns NULL. The value returned by sqlite\\_offset(X) might reference either the original table or an index, depending on the query. If the value X would normally be extracted from an index, the sqlite\\_offset(X) returns the offset to the corresponding index record. If the value X would be extracted from the original table, then sqlite\\_offset(X) returns the offset to the table record.

The sqlite\\_offset(X) SQL function is only available if SQLite is built using the [\\-DSQLITE\\_ENABLE\\_OFFSET\\_SQL\\_FUNC](https://www.sqlite.org/compile.html#enable_offset_sql_func) compile-time option.`},sqlite_source_id:{args:"()",docs:"The sqlite\\_source\\_id() function returns a string that identifies the specific version of the source code that was used to build the SQLite library. The string returned by sqlite\\_source\\_id() is the date and time that the source code was checked in followed by the SHA3-256 hash for that check-in. This function is an SQL wrapper around the [sqlite3\\_sourceid()](https://www.sqlite.org/c3ref/libversion.html) C interface."},sqlite_version:{args:"()",docs:"The sqlite\\_version() function returns the version string for the SQLite library that is running. This function is an SQL wrapper around the [sqlite3\\_libversion()](https://www.sqlite.org/c3ref/libversion.html) C-interface."},substr:{args:"(X,Y)",docs:`The substr(X,Y,Z) function returns a substring of input string X that begins with the Y-th character and which is Z characters long. If Z is omitted then substr(X,Y) returns all characters through the end of the string X beginning with the Y-th. The left-most character of X is number 1. If Y is negative then the first character of the substring is found by counting from the right rather than the left. If Z is negative then the abs(Z) characters preceding the Y-th character are returned. If X is a string then characters indices refer to actual UTF-8 characters. If X is a BLOB then the indices refer to bytes.

"substring()" is an alias for "substr()" beginning with SQLite version 3.34.`},substring:{args:"(X,Y)",docs:`The substr(X,Y,Z) function returns a substring of input string X that begins with the Y-th character and which is Z characters long. If Z is omitted then substr(X,Y) returns all characters through the end of the string X beginning with the Y-th. The left-most character of X is number 1. If Y is negative then the first character of the substring is found by counting from the right rather than the left. If Z is negative then the abs(Z) characters preceding the Y-th character are returned. If X is a string then characters indices refer to actual UTF-8 characters. If X is a BLOB then the indices refer to bytes.

"substring()" is an alias for "substr()" beginning with SQLite version 3.34.`},total_changes:{args:"()",docs:"The total\\_changes() function returns the number of row changes caused by INSERT, UPDATE or DELETE statements since the current database connection was opened. This function is a wrapper around the [sqlite3\\_total\\_changes64()](https://www.sqlite.org/c3ref/total_changes.html) C/C++ interface."},trim:{args:"(X,Y)",docs:"The trim(X,Y) function returns a string formed by removing any and all characters that appear in Y from both ends of X. If the Y argument is omitted, trim(X) removes spaces from both ends of X."},typeof:{args:"(X)",docs:'The typeof(X) function returns a string that indicates the [datatype](https://www.sqlite.org/datatype3.html) of the expression X: "null", "integer", "real", "text", or "blob".'},unhex:{args:"(X,Y)",docs:`The unhex(X,Y) function returns a BLOB value which is the decoding of the hexadecimal string X. If X contains any characters that are not hexadecimal digits and which are not in Y, then unhex(X,Y) returns NULL. If Y is omitted, it is understood to be an empty string and hence X must be a pure hexadecimal string. All hexadecimal digits in X must occur in pairs, with both digits of each pair beginning immediately adjacent to one another, or else unhex(X,Y) returns NULL. If either parameter X or Y is NULL, then unhex(X,Y) returns NULL. The X input may contain an arbitrary mix of upper and lower case hexadecimal digits. Hexadecimal digits in Y have no affect on the translation of X. Only characters in Y that are not hexadecimal digits are ignored in X.

See also: [hex()](https://www.sqlite.org/lang_corefunc.html#hex)`},unicode:{args:"(X)",docs:"The unicode(X) function returns the numeric unicode code point corresponding to the first character of the string X. If the argument to unicode(X) is not a string then the result is undefined."},unlikely:{args:"(X)",docs:"The unlikely(X) function returns the argument X unchanged. The unlikely(X) function is a no-op that the code generator optimizes away so that it consumes no CPU cycles at run-time (that is, during calls to [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html)). The purpose of the unlikely(X) function is to provide a hint to the query planner that the argument X is a boolean value that is usually not true. The unlikely(X) function is equivalent to [likelihood](https://www.sqlite.org/lang_corefunc.html#likelihood)(X, 0.0625)."},upper:{args:"(X)",docs:"The upper(X) function returns a copy of input string X in which all lower-case ASCII characters are converted to their upper-case equivalent."},zeroblob:{args:"(N)",docs:"The zeroblob(N) function returns a BLOB consisting of N bytes of 0x00. SQLite manages these zeroblobs very efficiently. Zeroblobs can be used to reserve space for a BLOB that is later written using [incremental BLOB I/O](https://www.sqlite.org/c3ref/blob_open.html). This SQL function is implemented using the [sqlite3\\_result\\_zeroblob()](https://www.sqlite.org/c3ref/result_blob.html) routine from the C/C++ interface."},date:{args:"(time-value, modifier, modifier, ...)",docs:`1\\. Overview SQLite supports seven [scalar](https://www.sqlite.org/lang_corefunc.html) date and time functions as follows:*   **date(**_time-value, modifier, modifier, ..._**)**
*   **time(**_time-value, modifier, modifier, ..._**)**
*   **datetime(**_time-value, modifier, modifier, ..._**)**
*   **julianday(**_time-value, modifier, modifier, ..._**)**
*   **unixepoch(**_time-value, modifier, modifier, ..._**)**
*   **strftime(**_format, time-value, modifier, modifier, ..._**)**
*   **timediff(**_time-value, time-value_**)**
The first six date and time functions take an optional [time-value](https://www.sqlite.org/lang_datefunc.html#tmval) as an argument, followed by zero or more [modifiers](https://www.sqlite.org/lang_datefunc.html#dtmods). The strftime() function also takes a format string as its first argument. The timediff() function takes exactly two arguments which are both [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). SQLite does not have a dedicated date/time datatype. Instead, date and time values can stored as any of the following:

<table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a></td><td>A text string that is one of the ISO 8601 date/time values shown in <a href="about:blank#tmval">items 1 through 10 below</a>. Example: <tt>'2025-05-29 14:16:00'</tt></td></tr><tr><td><a href="http://en.wikipedia.org/wiki/Julian_day">Julian&nbsp;day&nbsp;number</a></td><td>The number of days including fractional days since -4713-11-24 12:00:00 Example: <tt>2460825.09444444</tt></td></tr><tr><td><a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a></td><td>The number of seconds including fractional seconds since 1970-01-01 00:00:00 Example: <tt>1748528160</tt></td></tr></tbody></table>

These three formats are collectively known as [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). All of the date time functions accept time-values as either ISO-8601 text or as Julian day numbers. They can also be made to accept unix timestamps by adding optional modifiers arguments ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod). Since the timediff() function does not accept modifiers, it can only use ISO-8601 and julian day number time-values. The **date()** function returns the date as text in this format: YYYY-MM-DD. The **time()** function returns the time as text in formatted as HH:MM:SS or as HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **datetime()** function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **julianday()** function returns the [Julian day](http://en.wikipedia.org/wiki/Julian_day) - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. ([Proleptic Gregorian calendar](http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)). The **unixepoch()** function returns a unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. The unixepoch() function normally returns an integer number of seconds, but with the optional [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) it will return a floating point number which is the fractional number of seconds. The **strftime()** function returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the [strftime() function](http://opengroup.org/onlinepubs/007908799/xsh/strftime.html) from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions as of version 3.46.0 (2024-05-23). Earlier versions of SQLite might not support all substitutions. If an undefined or unsupported substitution is seen, the result is NULL.

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td></td><td width="10"></td><td></td></tr><tr><td>%d</td><td></td><td>day of month: 01-31</td></tr><tr><td>%e</td><td></td><td>day of month without leading zero: 1-31</td></tr><tr><td>%f</td><td></td><td>fractional seconds: SS.SSS</td></tr><tr><td>%F</td><td></td><td>ISO 8601 date: YYYY-MM-DD</td></tr><tr><td>%G</td><td></td><td>ISO 8601 year corresponding to %V</td></tr><tr><td>%g</td><td></td><td>2-digit ISO 8601 year corresponding to %V</td></tr><tr><td>%H</td><td></td><td>hour: 00-24</td></tr><tr><td>%I</td><td></td><td>hour for 12-hour clock: 01-12</td></tr><tr><td>%j</td><td></td><td>day of year: 001-366</td></tr><tr><td>%J</td><td></td><td>Julian day number (fractional)</td></tr><tr><td>%k</td><td></td><td>hour without leading zero: 0-24</td></tr><tr><td>%l</td><td></td><td>%I without leading zero: 1-12</td></tr><tr><td>%m</td><td></td><td>month: 01-12</td></tr><tr><td>%M</td><td></td><td>minute: 00-59</td></tr><tr><td>%p</td><td></td><td>"AM" or "PM" depending on the hour</td></tr><tr><td>%P</td><td></td><td>"am" or "pm" depending on the hour</td></tr><tr><td>%R</td><td></td><td>ISO 8601 time: HH:MM</td></tr><tr><td>%s</td><td></td><td>seconds since 1970-01-01</td></tr><tr><td>%S</td><td></td><td>seconds: 00-59</td></tr><tr><td>%T</td><td></td><td>ISO 8601 time: HH:MM:SS</td></tr><tr><td>%U</td><td></td><td>week of year (00-53) - week 01 starts on the first Sunday</td></tr><tr><td>%u</td><td></td><td>day of week 1-7 with Monday==1</td></tr><tr><td>%V</td><td></td><td>ISO 8601 week of year</td></tr><tr><td>%w</td><td></td><td>day of week 0-6 with Sunday==0</td></tr><tr><td>%W</td><td></td><td>week of year (00-53) - week 01 starts on the first Monday</td></tr><tr><td>%Y</td><td></td><td>year: 0000-9999</td></tr><tr><td>%%</td><td></td><td>%</td></tr></tbody></table>

Other date and time functions can be expressed in terms of strftime():

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><b>Function</b></td><td width="30"></td><td><b>Equivalent strftime()</b></td></tr><tr><td>date(...)</td><td></td><td>strftime('%F', ...)</td></tr><tr><td>time(...)</td><td></td><td>strftime('%T', ...)</td></tr><tr><td>datetime(...)</td><td></td><td>strftime('%F %T', ...)</td></tr><tr><td>julianday(...)</td><td></td><td><nobr>CAST(strftime('%J', ...) as REAL)</nobr></td></tr><tr><td>unixepoch(...)</td><td></td><td><nobr>CAST(strftime('%s', ...) as INT)</nobr></td></tr></tbody></table>

The date(), time(), and datetime() functions all return text, and so their strftime() equivalents are exact. However, the julianday() and unixepoch() functions return numeric values. Their strftime() equivalents return a string that is the text representation of the corresponding number. The main reasons for providing functions other than strftime() are for convenience and for efficiency. The julianday() and unixepoch() functions return real and integer values respectively, and do not incur the format conversion costs or inexactitude resulting from use of the '%J' or '%s' format specifiers with the strftime() function. The **timediff(A,B)** function returns a string that describes the amount of time that must be added to B in order to reach time A. The format of the timediff() result is designed to be human-readable. The format is: (+|-)YYYY-MM-DD HH:MM:SS.SSS This time difference string is also an allowed modifier for the other date/time functions. The following invariant holds for time-values A and B: datetime(A) = datetime(B, timediff(A,B)) The length of months and years vary. February is shorter than March. Leap years are longer than non-leap years. The output from timediff() takes this all into account. The timediff() function is intended to provide a human-friendly description of the time span. If you want to know the number of days or seconds between two dates, A and B, then you can always do one of these: SELECT julianday(B) - julianday(A);  
SELECT unixepoch(B) - unixepoch(A); The timediff(A,B) might return the same result even for values A and B that span a different number of days - depending on the starting date. For example, both of the following two timediff() calls return the same result ("-0000-01-00 00:00:00.000") even though the first timespan is 28 days and the seconds is 31 days: SELECT timediff('2023-02-15','2023-03-15');  
SELECT timediff('2023-03-15','2023-04-15'); Summary: If you want a human-friendly time span, use timediff(). If you want a precise time difference (in days or seconds) use the difference between two julianday() or unixepoch() calls. 2\\. Time ValuesA time-value can be in any of the following formats shown below. The value is usually a string, though it can be an integer or floating point number in the case of format 12.*   _YYYY-MM-DD_
*   _YYYY-MM-DD HH:MM_
*   _YYYY-MM-DD HH:MM:SS_
*   _YYYY-MM-DD HH:MM:SS.SSS_
*   _YYYY-MM-DD_**T**_HH:MM_
*   _YYYY-MM-DD_**T**_HH:MM:SS_
*   _YYYY-MM-DD_**T**_HH:MM:SS.SSS_
*   _HH:MM_
*   _HH:MM:SS_
*   _HH:MM:SS.SSS_
*   **now**
*   _DDDDDDDDDD_
In formats 5 through 7, the "T" is a literal character separating the date and the time, as required by [ISO-8601](http://www.w3c.org/TR/NOTE-datetime). Formats 8 through 10 that specify only a time assume a date of 2000-01-01. Format 11, the string 'now', is converted into the current date and time as obtained from the xCurrentTime method of the [sqlite3\\_vfs](https://www.sqlite.org/c3ref/vfs.html) object in use. The 'now' argument to date and time functions always returns exactly the same value for multiple invocations within the same [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html) call. [Universal Coordinated Time (UTC)](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. Format 12 is the [Julian day number](http://en.wikipedia.org/wiki/Julian_day) expressed as an integer or floating point value. Format 12 might also be interpreted as a unix timestamp if it is immediately followed either the ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod) modifier. Formats 2 through 10 may be optionally followed by a timezone indicator of the form "_\\[+-\\]HH:MM_" or just "_Z_". The date and time functions use UTC or "zulu" time internally, and so the "Z" suffix is a no-op. Any non-zero "HH:MM" suffix is subtracted from the indicated date and time in order to compute zulu time. For example, all of the following time-values are equivalent: 2013-10-07 08:23:19.120  
2013-10-07T08:23:19.120Z  
2013-10-07 04:23:19.120-04:00  
2456572.84952685 In formats 4, 7, and 10, the fractional seconds value SS.SSS can have one or more digits following the decimal point. Exactly three digits are shown in the examples because only the first three digits are significant to the result, but the input string can have fewer or more than three digits and the date/time functions will still operate correctly. Similarly, format 12 is shown with 10 significant digits, but the date/time functions will really accept as many or as few digits as are necessary to represent the Julian day number. [ISO-8601](http://www.w3c.org/TR/NOTE-datetime) supports a wide variety of alternative date/time formats, but SQLite only supports the ones specifically enumerated above. In all functions other than timediff(), the time-value (and all modifiers) may be omitted, in which case a time value of 'now' is assumed. 3\\. ModifiersFor all date/time functions other than timediff(), the time-value argument can be followed by zero or more modifiers that alter date and/or time. Each modifier is a transformation that is applied to the time-value to its left. Modifiers are applied from left to right; order is important. The available modifiers are as follows.*   NNN days
*   NNN hours
*   NNN minutes
*   NNN seconds
*   NNN months
*   NNN years
*   \xB1HH:MM
*   \xB1HH:MM:SS
*   \xB1HH:MM:SS.SSS
*   \xB1YYYY-MM-DD
*   \xB1YYYY-MM-DD HH:MM
*   \xB1YYYY-MM-DD HH:MM:SS
*   \xB1YYYY-MM-DD HH:MM:SS.SSS
*   ceiling
*   floor
*   start of month
*   start of year
*   start of day
*   weekday N
*   unixepoch
*   julianday
*   auto
*   localtime
*   utc
*   subsec
*   subsecond
The first thirteen modifiers (1 through 13) add the specified amount of time to the date and time specified by the arguments to its left. The 's' character at the end of the modifier names in 1 through 6 is optional. The NNN value can be any floating point number, with an optional '+' or '-' prefix. The **time shift modifiers** (7 through 13) move the time-value by the number of years, months, days, hours, minutes, and/or seconds specified. An initial "+" or "-" is required for formats 10 through 13 but is optional for formats 7, 8, and 9. The changes are applies from left to right. First the year is shifted by YYYY, then the month by MM, and then day by DD, and so forth. The timediff(A,B) function returns a time shift in format 13 that shifts the time-value B into A.Because the length of a month or year changes from one month or year to the next, ambiguities can arise when shifting a date by months and/or years. For example, what is the date one year after 2024-02-29? Is it 2025-02-28 or 2025-03-01? Or what is the date that is two months after 2023-12-31? Is it 2024-02-29 or 2024-03-02? There is no consensus on how to resolve this ambiguity, so the "**ceiling**" and "**floor**" modifiers (14 and 15) are available to let the programmer decide. If the next modifier after a time shift is "ceiling", then any ambiguity in the date is resolved by choosing the later date. The "floor" modifier resolves ambiguities by resolving to the last day of the previous month. The default behavior is "ceiling". The "**start of**" modifiers (16 through 18) shift the date backwards to the beginning of the subject month, year or day.The "**weekday**" modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the "weekday" modifier leaves the date unchanged. The "**unixepoch**" modifier (20) only works if it immediately follows a time-value in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as [Unix Time](http://en.wikipedia.org/wiki/Unix_time) - the number of seconds since 1970. If the "unixepoch" modifier does not follow a time-value of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the "unixepoch" modifier from prior DDDDDDDDDD then the behavior is undefined. The "**julianday**" modifier must immediately follow the initial time-value which must be of the form DDDDDDDDD. Any other use of the 'julianday' modifier is an error and causes the function to return NULL. The 'julianday' modifier forces the time-value number to be interpreted as a julian-day number. As this is the default behavior, the 'julianday' modifier is scarcely more than a no-op. The only difference is that adding 'julianday' forces the DDDDDDDDD time-value format, and causes a NULL to be returned if any other time-value format is used. The "**auto**" modifier must immediately follow the initial time-value. If the time-value is numeric (the DDDDDDDDDD format) then the 'auto' modifier causes the time-value to interpreted as either a julian day number or a unix timestamp, depending on its magnitude. If the value is between 0.0 and 5373484.499999, then it is interpreted as a julian day number (corresponding to dates between -4713-11-24 12:00:00 and 9999-12-31 23:59:59, inclusive). For numeric values outside of the range of valid julian day numbers, but within the range of -210866760000 to 253402300799, the 'auto' modifier causes the value to be interpreted as a unix timestamp. Other numeric values are out of range and cause a NULL return. The 'auto' modifier is a no-op for ISO 8601 text time-values. The "auto" modifier is designed to work with time-values even in cases where it is not known which time-value format is stored in the database file, or in cases where the same column stores time-values in different formats on different rows. The 'auto' modifier will automatically select the appropriate format. However, there is some ambiguity. Unix timestamps for the first 63 days of 1970 will be interpreted as julian day numbers. The 'auto' modifier is very useful when the dataset is guaranteed to contain no dates within that range, but should be avoided for applications that might make use of dates in the opening months of 1970. The "**localtime**" modifier assumes the time-value to its left is in Universal Coordinated Time (UTC) and adjusts that time value so that it is in localtime. If "localtime" follows a time that is not UTC, then the behavior is undefined. The "**utc**" modifier is the opposite of "localtime". "utc" assumes that the time-value to its left is in the local timezone and adjusts that time-value to be in UTC. If the time to the left is not in localtime, then the result of "utc" is undefined. The "**subsecond**" modifier (which may be abbreviated as just "**subsec**") increases the resolution of the output for [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm), [time()](https://www.sqlite.org/lang_datefunc.html#dttm), and [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), and for the "%s" format string in [strftime()](https://www.sqlite.org/lang_datefunc.html#strftm). The "subsecond" modifier has no effect on other date/time functions. The current implemention increases the resolution from seconds to milliseconds, but this might increase to a higher resolution in future releases of SQLite. When "subsec" is used with [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm) or [time()](https://www.sqlite.org/lang_datefunc.html#dttm), the seconds field at the end is followed by a decimal point and one or more digits to show fractional seconds. When "subsec" is used with [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), the result is a floating point value which is the number of seconds and fractional seconds since 1970-01-01. The "subsecond" and "subsec" modifiers have the special property that they can occur as the first argument to date/time functions (or as the first argument after the format string for strftime()). When this happens, the time-value that is normally in the first argument is understood to be "now". For example, a short cut to get the current time in seconds since 1970 with millisecond precision is to say: SELECT unixepoch('subsec'); 4\\. ExamplesCompute the current date. SELECT date();Compute the last day of the current month.SELECT date('now','start of month','+1 month','-1 day'); Compute the date and time given a unix timestamp 1092941466. SELECT datetime(1092941466, 'unixepoch');  
SELECT datetime(1092941466, 'auto'); -- Does not work for early 1970! Compute the date and time given a unix timestamp 1092941466, and compensate for your local timezone. SELECT datetime(1092941466, 'unixepoch', 'localtime'); Compute the current unix timestamp. SELECT unixepoch();  
SELECT strftime('%s'); Compute the number of days since the signing of the US Declaration of Independence. SELECT julianday('now') - julianday('1776-07-04'); Compute the number of seconds since a particular moment in 2004: SELECT unixepoch() - unixepoch('2004-01-01 02:34:56'); Compute the date of the first Tuesday in October for the current year. SELECT date('now','start of year','+9 months','weekday 2'); Compute the time since the unix epoch in seconds with millisecond precision: SELECT (julianday('now') - 2440587.5)\\*86400.0;  
SELECT unixepoch('now','subsec'); Compute how old Abraham Lincoln would be if he were still alive today: SELECT timediff('now','1809-02-12'); 5\\. Caveats And BugsThe computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime\\_r() is used to assist in the calculation of local time. The localtime\\_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.These functions only work for dates between 0000-01-01 00:00:00 and 9999-12-31 23:59:59 (julian day numbers 1721059.5 through 5373484.5). For dates outside that range, the results of these functions are undefined.Non-Vista Windows platforms only support one set of DST rules. Vista only supports two. Therefore, on these platforms, historical DST calculations will be incorrect. For example, in the US, in 2007 the DST rules changed. Non-Vista Windows platforms apply the new 2007 DST rules to all previous years as well. Vista does somewhat better getting results correct back to 1986, when the rules were also changed.All internal computations assume the [Gregorian calendar](http://en.wikipedia.org/wiki/Gregorian_calendar) system. They also assume that every day is exactly 86400 seconds in duration; no leap seconds are incorporated.`},time:{args:"(time-value, modifier, modifier, ...)",docs:`1\\. Overview SQLite supports seven [scalar](https://www.sqlite.org/lang_corefunc.html) date and time functions as follows:*   **date(**_time-value, modifier, modifier, ..._**)**
*   **time(**_time-value, modifier, modifier, ..._**)**
*   **datetime(**_time-value, modifier, modifier, ..._**)**
*   **julianday(**_time-value, modifier, modifier, ..._**)**
*   **unixepoch(**_time-value, modifier, modifier, ..._**)**
*   **strftime(**_format, time-value, modifier, modifier, ..._**)**
*   **timediff(**_time-value, time-value_**)**
The first six date and time functions take an optional [time-value](https://www.sqlite.org/lang_datefunc.html#tmval) as an argument, followed by zero or more [modifiers](https://www.sqlite.org/lang_datefunc.html#dtmods). The strftime() function also takes a format string as its first argument. The timediff() function takes exactly two arguments which are both [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). SQLite does not have a dedicated date/time datatype. Instead, date and time values can stored as any of the following:

<table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a></td><td>A text string that is one of the ISO 8601 date/time values shown in <a href="about:blank#tmval">items 1 through 10 below</a>. Example: <tt>'2025-05-29 14:16:00'</tt></td></tr><tr><td><a href="http://en.wikipedia.org/wiki/Julian_day">Julian&nbsp;day&nbsp;number</a></td><td>The number of days including fractional days since -4713-11-24 12:00:00 Example: <tt>2460825.09444444</tt></td></tr><tr><td><a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a></td><td>The number of seconds including fractional seconds since 1970-01-01 00:00:00 Example: <tt>1748528160</tt></td></tr></tbody></table>

These three formats are collectively known as [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). All of the date time functions accept time-values as either ISO-8601 text or as Julian day numbers. They can also be made to accept unix timestamps by adding optional modifiers arguments ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod). Since the timediff() function does not accept modifiers, it can only use ISO-8601 and julian day number time-values. The **date()** function returns the date as text in this format: YYYY-MM-DD. The **time()** function returns the time as text in formatted as HH:MM:SS or as HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **datetime()** function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **julianday()** function returns the [Julian day](http://en.wikipedia.org/wiki/Julian_day) - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. ([Proleptic Gregorian calendar](http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)). The **unixepoch()** function returns a unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. The unixepoch() function normally returns an integer number of seconds, but with the optional [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) it will return a floating point number which is the fractional number of seconds. The **strftime()** function returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the [strftime() function](http://opengroup.org/onlinepubs/007908799/xsh/strftime.html) from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions as of version 3.46.0 (2024-05-23). Earlier versions of SQLite might not support all substitutions. If an undefined or unsupported substitution is seen, the result is NULL.

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td></td><td width="10"></td><td></td></tr><tr><td>%d</td><td></td><td>day of month: 01-31</td></tr><tr><td>%e</td><td></td><td>day of month without leading zero: 1-31</td></tr><tr><td>%f</td><td></td><td>fractional seconds: SS.SSS</td></tr><tr><td>%F</td><td></td><td>ISO 8601 date: YYYY-MM-DD</td></tr><tr><td>%G</td><td></td><td>ISO 8601 year corresponding to %V</td></tr><tr><td>%g</td><td></td><td>2-digit ISO 8601 year corresponding to %V</td></tr><tr><td>%H</td><td></td><td>hour: 00-24</td></tr><tr><td>%I</td><td></td><td>hour for 12-hour clock: 01-12</td></tr><tr><td>%j</td><td></td><td>day of year: 001-366</td></tr><tr><td>%J</td><td></td><td>Julian day number (fractional)</td></tr><tr><td>%k</td><td></td><td>hour without leading zero: 0-24</td></tr><tr><td>%l</td><td></td><td>%I without leading zero: 1-12</td></tr><tr><td>%m</td><td></td><td>month: 01-12</td></tr><tr><td>%M</td><td></td><td>minute: 00-59</td></tr><tr><td>%p</td><td></td><td>"AM" or "PM" depending on the hour</td></tr><tr><td>%P</td><td></td><td>"am" or "pm" depending on the hour</td></tr><tr><td>%R</td><td></td><td>ISO 8601 time: HH:MM</td></tr><tr><td>%s</td><td></td><td>seconds since 1970-01-01</td></tr><tr><td>%S</td><td></td><td>seconds: 00-59</td></tr><tr><td>%T</td><td></td><td>ISO 8601 time: HH:MM:SS</td></tr><tr><td>%U</td><td></td><td>week of year (00-53) - week 01 starts on the first Sunday</td></tr><tr><td>%u</td><td></td><td>day of week 1-7 with Monday==1</td></tr><tr><td>%V</td><td></td><td>ISO 8601 week of year</td></tr><tr><td>%w</td><td></td><td>day of week 0-6 with Sunday==0</td></tr><tr><td>%W</td><td></td><td>week of year (00-53) - week 01 starts on the first Monday</td></tr><tr><td>%Y</td><td></td><td>year: 0000-9999</td></tr><tr><td>%%</td><td></td><td>%</td></tr></tbody></table>

Other date and time functions can be expressed in terms of strftime():

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><b>Function</b></td><td width="30"></td><td><b>Equivalent strftime()</b></td></tr><tr><td>date(...)</td><td></td><td>strftime('%F', ...)</td></tr><tr><td>time(...)</td><td></td><td>strftime('%T', ...)</td></tr><tr><td>datetime(...)</td><td></td><td>strftime('%F %T', ...)</td></tr><tr><td>julianday(...)</td><td></td><td><nobr>CAST(strftime('%J', ...) as REAL)</nobr></td></tr><tr><td>unixepoch(...)</td><td></td><td><nobr>CAST(strftime('%s', ...) as INT)</nobr></td></tr></tbody></table>

The date(), time(), and datetime() functions all return text, and so their strftime() equivalents are exact. However, the julianday() and unixepoch() functions return numeric values. Their strftime() equivalents return a string that is the text representation of the corresponding number. The main reasons for providing functions other than strftime() are for convenience and for efficiency. The julianday() and unixepoch() functions return real and integer values respectively, and do not incur the format conversion costs or inexactitude resulting from use of the '%J' or '%s' format specifiers with the strftime() function. The **timediff(A,B)** function returns a string that describes the amount of time that must be added to B in order to reach time A. The format of the timediff() result is designed to be human-readable. The format is: (+|-)YYYY-MM-DD HH:MM:SS.SSS This time difference string is also an allowed modifier for the other date/time functions. The following invariant holds for time-values A and B: datetime(A) = datetime(B, timediff(A,B)) The length of months and years vary. February is shorter than March. Leap years are longer than non-leap years. The output from timediff() takes this all into account. The timediff() function is intended to provide a human-friendly description of the time span. If you want to know the number of days or seconds between two dates, A and B, then you can always do one of these: SELECT julianday(B) - julianday(A);  
SELECT unixepoch(B) - unixepoch(A); The timediff(A,B) might return the same result even for values A and B that span a different number of days - depending on the starting date. For example, both of the following two timediff() calls return the same result ("-0000-01-00 00:00:00.000") even though the first timespan is 28 days and the seconds is 31 days: SELECT timediff('2023-02-15','2023-03-15');  
SELECT timediff('2023-03-15','2023-04-15'); Summary: If you want a human-friendly time span, use timediff(). If you want a precise time difference (in days or seconds) use the difference between two julianday() or unixepoch() calls. 2\\. Time ValuesA time-value can be in any of the following formats shown below. The value is usually a string, though it can be an integer or floating point number in the case of format 12.*   _YYYY-MM-DD_
*   _YYYY-MM-DD HH:MM_
*   _YYYY-MM-DD HH:MM:SS_
*   _YYYY-MM-DD HH:MM:SS.SSS_
*   _YYYY-MM-DD_**T**_HH:MM_
*   _YYYY-MM-DD_**T**_HH:MM:SS_
*   _YYYY-MM-DD_**T**_HH:MM:SS.SSS_
*   _HH:MM_
*   _HH:MM:SS_
*   _HH:MM:SS.SSS_
*   **now**
*   _DDDDDDDDDD_
In formats 5 through 7, the "T" is a literal character separating the date and the time, as required by [ISO-8601](http://www.w3c.org/TR/NOTE-datetime). Formats 8 through 10 that specify only a time assume a date of 2000-01-01. Format 11, the string 'now', is converted into the current date and time as obtained from the xCurrentTime method of the [sqlite3\\_vfs](https://www.sqlite.org/c3ref/vfs.html) object in use. The 'now' argument to date and time functions always returns exactly the same value for multiple invocations within the same [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html) call. [Universal Coordinated Time (UTC)](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. Format 12 is the [Julian day number](http://en.wikipedia.org/wiki/Julian_day) expressed as an integer or floating point value. Format 12 might also be interpreted as a unix timestamp if it is immediately followed either the ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod) modifier. Formats 2 through 10 may be optionally followed by a timezone indicator of the form "_\\[+-\\]HH:MM_" or just "_Z_". The date and time functions use UTC or "zulu" time internally, and so the "Z" suffix is a no-op. Any non-zero "HH:MM" suffix is subtracted from the indicated date and time in order to compute zulu time. For example, all of the following time-values are equivalent: 2013-10-07 08:23:19.120  
2013-10-07T08:23:19.120Z  
2013-10-07 04:23:19.120-04:00  
2456572.84952685 In formats 4, 7, and 10, the fractional seconds value SS.SSS can have one or more digits following the decimal point. Exactly three digits are shown in the examples because only the first three digits are significant to the result, but the input string can have fewer or more than three digits and the date/time functions will still operate correctly. Similarly, format 12 is shown with 10 significant digits, but the date/time functions will really accept as many or as few digits as are necessary to represent the Julian day number. [ISO-8601](http://www.w3c.org/TR/NOTE-datetime) supports a wide variety of alternative date/time formats, but SQLite only supports the ones specifically enumerated above. In all functions other than timediff(), the time-value (and all modifiers) may be omitted, in which case a time value of 'now' is assumed. 3\\. ModifiersFor all date/time functions other than timediff(), the time-value argument can be followed by zero or more modifiers that alter date and/or time. Each modifier is a transformation that is applied to the time-value to its left. Modifiers are applied from left to right; order is important. The available modifiers are as follows.*   NNN days
*   NNN hours
*   NNN minutes
*   NNN seconds
*   NNN months
*   NNN years
*   \xB1HH:MM
*   \xB1HH:MM:SS
*   \xB1HH:MM:SS.SSS
*   \xB1YYYY-MM-DD
*   \xB1YYYY-MM-DD HH:MM
*   \xB1YYYY-MM-DD HH:MM:SS
*   \xB1YYYY-MM-DD HH:MM:SS.SSS
*   ceiling
*   floor
*   start of month
*   start of year
*   start of day
*   weekday N
*   unixepoch
*   julianday
*   auto
*   localtime
*   utc
*   subsec
*   subsecond
The first thirteen modifiers (1 through 13) add the specified amount of time to the date and time specified by the arguments to its left. The 's' character at the end of the modifier names in 1 through 6 is optional. The NNN value can be any floating point number, with an optional '+' or '-' prefix. The **time shift modifiers** (7 through 13) move the time-value by the number of years, months, days, hours, minutes, and/or seconds specified. An initial "+" or "-" is required for formats 10 through 13 but is optional for formats 7, 8, and 9. The changes are applies from left to right. First the year is shifted by YYYY, then the month by MM, and then day by DD, and so forth. The timediff(A,B) function returns a time shift in format 13 that shifts the time-value B into A.Because the length of a month or year changes from one month or year to the next, ambiguities can arise when shifting a date by months and/or years. For example, what is the date one year after 2024-02-29? Is it 2025-02-28 or 2025-03-01? Or what is the date that is two months after 2023-12-31? Is it 2024-02-29 or 2024-03-02? There is no consensus on how to resolve this ambiguity, so the "**ceiling**" and "**floor**" modifiers (14 and 15) are available to let the programmer decide. If the next modifier after a time shift is "ceiling", then any ambiguity in the date is resolved by choosing the later date. The "floor" modifier resolves ambiguities by resolving to the last day of the previous month. The default behavior is "ceiling". The "**start of**" modifiers (16 through 18) shift the date backwards to the beginning of the subject month, year or day.The "**weekday**" modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the "weekday" modifier leaves the date unchanged. The "**unixepoch**" modifier (20) only works if it immediately follows a time-value in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as [Unix Time](http://en.wikipedia.org/wiki/Unix_time) - the number of seconds since 1970. If the "unixepoch" modifier does not follow a time-value of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the "unixepoch" modifier from prior DDDDDDDDDD then the behavior is undefined. The "**julianday**" modifier must immediately follow the initial time-value which must be of the form DDDDDDDDD. Any other use of the 'julianday' modifier is an error and causes the function to return NULL. The 'julianday' modifier forces the time-value number to be interpreted as a julian-day number. As this is the default behavior, the 'julianday' modifier is scarcely more than a no-op. The only difference is that adding 'julianday' forces the DDDDDDDDD time-value format, and causes a NULL to be returned if any other time-value format is used. The "**auto**" modifier must immediately follow the initial time-value. If the time-value is numeric (the DDDDDDDDDD format) then the 'auto' modifier causes the time-value to interpreted as either a julian day number or a unix timestamp, depending on its magnitude. If the value is between 0.0 and 5373484.499999, then it is interpreted as a julian day number (corresponding to dates between -4713-11-24 12:00:00 and 9999-12-31 23:59:59, inclusive). For numeric values outside of the range of valid julian day numbers, but within the range of -210866760000 to 253402300799, the 'auto' modifier causes the value to be interpreted as a unix timestamp. Other numeric values are out of range and cause a NULL return. The 'auto' modifier is a no-op for ISO 8601 text time-values. The "auto" modifier is designed to work with time-values even in cases where it is not known which time-value format is stored in the database file, or in cases where the same column stores time-values in different formats on different rows. The 'auto' modifier will automatically select the appropriate format. However, there is some ambiguity. Unix timestamps for the first 63 days of 1970 will be interpreted as julian day numbers. The 'auto' modifier is very useful when the dataset is guaranteed to contain no dates within that range, but should be avoided for applications that might make use of dates in the opening months of 1970. The "**localtime**" modifier assumes the time-value to its left is in Universal Coordinated Time (UTC) and adjusts that time value so that it is in localtime. If "localtime" follows a time that is not UTC, then the behavior is undefined. The "**utc**" modifier is the opposite of "localtime". "utc" assumes that the time-value to its left is in the local timezone and adjusts that time-value to be in UTC. If the time to the left is not in localtime, then the result of "utc" is undefined. The "**subsecond**" modifier (which may be abbreviated as just "**subsec**") increases the resolution of the output for [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm), [time()](https://www.sqlite.org/lang_datefunc.html#dttm), and [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), and for the "%s" format string in [strftime()](https://www.sqlite.org/lang_datefunc.html#strftm). The "subsecond" modifier has no effect on other date/time functions. The current implemention increases the resolution from seconds to milliseconds, but this might increase to a higher resolution in future releases of SQLite. When "subsec" is used with [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm) or [time()](https://www.sqlite.org/lang_datefunc.html#dttm), the seconds field at the end is followed by a decimal point and one or more digits to show fractional seconds. When "subsec" is used with [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), the result is a floating point value which is the number of seconds and fractional seconds since 1970-01-01. The "subsecond" and "subsec" modifiers have the special property that they can occur as the first argument to date/time functions (or as the first argument after the format string for strftime()). When this happens, the time-value that is normally in the first argument is understood to be "now". For example, a short cut to get the current time in seconds since 1970 with millisecond precision is to say: SELECT unixepoch('subsec'); 4\\. ExamplesCompute the current date. SELECT date();Compute the last day of the current month.SELECT date('now','start of month','+1 month','-1 day'); Compute the date and time given a unix timestamp 1092941466. SELECT datetime(1092941466, 'unixepoch');  
SELECT datetime(1092941466, 'auto'); -- Does not work for early 1970! Compute the date and time given a unix timestamp 1092941466, and compensate for your local timezone. SELECT datetime(1092941466, 'unixepoch', 'localtime'); Compute the current unix timestamp. SELECT unixepoch();  
SELECT strftime('%s'); Compute the number of days since the signing of the US Declaration of Independence. SELECT julianday('now') - julianday('1776-07-04'); Compute the number of seconds since a particular moment in 2004: SELECT unixepoch() - unixepoch('2004-01-01 02:34:56'); Compute the date of the first Tuesday in October for the current year. SELECT date('now','start of year','+9 months','weekday 2'); Compute the time since the unix epoch in seconds with millisecond precision: SELECT (julianday('now') - 2440587.5)\\*86400.0;  
SELECT unixepoch('now','subsec'); Compute how old Abraham Lincoln would be if he were still alive today: SELECT timediff('now','1809-02-12'); 5\\. Caveats And BugsThe computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime\\_r() is used to assist in the calculation of local time. The localtime\\_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.These functions only work for dates between 0000-01-01 00:00:00 and 9999-12-31 23:59:59 (julian day numbers 1721059.5 through 5373484.5). For dates outside that range, the results of these functions are undefined.Non-Vista Windows platforms only support one set of DST rules. Vista only supports two. Therefore, on these platforms, historical DST calculations will be incorrect. For example, in the US, in 2007 the DST rules changed. Non-Vista Windows platforms apply the new 2007 DST rules to all previous years as well. Vista does somewhat better getting results correct back to 1986, when the rules were also changed.All internal computations assume the [Gregorian calendar](http://en.wikipedia.org/wiki/Gregorian_calendar) system. They also assume that every day is exactly 86400 seconds in duration; no leap seconds are incorporated.`},datetime:{args:"(time-value, modifier, modifier, ...)",docs:`1\\. Overview SQLite supports seven [scalar](https://www.sqlite.org/lang_corefunc.html) date and time functions as follows:*   **date(**_time-value, modifier, modifier, ..._**)**
*   **time(**_time-value, modifier, modifier, ..._**)**
*   **datetime(**_time-value, modifier, modifier, ..._**)**
*   **julianday(**_time-value, modifier, modifier, ..._**)**
*   **unixepoch(**_time-value, modifier, modifier, ..._**)**
*   **strftime(**_format, time-value, modifier, modifier, ..._**)**
*   **timediff(**_time-value, time-value_**)**
The first six date and time functions take an optional [time-value](https://www.sqlite.org/lang_datefunc.html#tmval) as an argument, followed by zero or more [modifiers](https://www.sqlite.org/lang_datefunc.html#dtmods). The strftime() function also takes a format string as its first argument. The timediff() function takes exactly two arguments which are both [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). SQLite does not have a dedicated date/time datatype. Instead, date and time values can stored as any of the following:

<table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a></td><td>A text string that is one of the ISO 8601 date/time values shown in <a href="about:blank#tmval">items 1 through 10 below</a>. Example: <tt>'2025-05-29 14:16:00'</tt></td></tr><tr><td><a href="http://en.wikipedia.org/wiki/Julian_day">Julian&nbsp;day&nbsp;number</a></td><td>The number of days including fractional days since -4713-11-24 12:00:00 Example: <tt>2460825.09444444</tt></td></tr><tr><td><a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a></td><td>The number of seconds including fractional seconds since 1970-01-01 00:00:00 Example: <tt>1748528160</tt></td></tr></tbody></table>

These three formats are collectively known as [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). All of the date time functions accept time-values as either ISO-8601 text or as Julian day numbers. They can also be made to accept unix timestamps by adding optional modifiers arguments ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod). Since the timediff() function does not accept modifiers, it can only use ISO-8601 and julian day number time-values. The **date()** function returns the date as text in this format: YYYY-MM-DD. The **time()** function returns the time as text in formatted as HH:MM:SS or as HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **datetime()** function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **julianday()** function returns the [Julian day](http://en.wikipedia.org/wiki/Julian_day) - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. ([Proleptic Gregorian calendar](http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)). The **unixepoch()** function returns a unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. The unixepoch() function normally returns an integer number of seconds, but with the optional [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) it will return a floating point number which is the fractional number of seconds. The **strftime()** function returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the [strftime() function](http://opengroup.org/onlinepubs/007908799/xsh/strftime.html) from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions as of version 3.46.0 (2024-05-23). Earlier versions of SQLite might not support all substitutions. If an undefined or unsupported substitution is seen, the result is NULL.

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td></td><td width="10"></td><td></td></tr><tr><td>%d</td><td></td><td>day of month: 01-31</td></tr><tr><td>%e</td><td></td><td>day of month without leading zero: 1-31</td></tr><tr><td>%f</td><td></td><td>fractional seconds: SS.SSS</td></tr><tr><td>%F</td><td></td><td>ISO 8601 date: YYYY-MM-DD</td></tr><tr><td>%G</td><td></td><td>ISO 8601 year corresponding to %V</td></tr><tr><td>%g</td><td></td><td>2-digit ISO 8601 year corresponding to %V</td></tr><tr><td>%H</td><td></td><td>hour: 00-24</td></tr><tr><td>%I</td><td></td><td>hour for 12-hour clock: 01-12</td></tr><tr><td>%j</td><td></td><td>day of year: 001-366</td></tr><tr><td>%J</td><td></td><td>Julian day number (fractional)</td></tr><tr><td>%k</td><td></td><td>hour without leading zero: 0-24</td></tr><tr><td>%l</td><td></td><td>%I without leading zero: 1-12</td></tr><tr><td>%m</td><td></td><td>month: 01-12</td></tr><tr><td>%M</td><td></td><td>minute: 00-59</td></tr><tr><td>%p</td><td></td><td>"AM" or "PM" depending on the hour</td></tr><tr><td>%P</td><td></td><td>"am" or "pm" depending on the hour</td></tr><tr><td>%R</td><td></td><td>ISO 8601 time: HH:MM</td></tr><tr><td>%s</td><td></td><td>seconds since 1970-01-01</td></tr><tr><td>%S</td><td></td><td>seconds: 00-59</td></tr><tr><td>%T</td><td></td><td>ISO 8601 time: HH:MM:SS</td></tr><tr><td>%U</td><td></td><td>week of year (00-53) - week 01 starts on the first Sunday</td></tr><tr><td>%u</td><td></td><td>day of week 1-7 with Monday==1</td></tr><tr><td>%V</td><td></td><td>ISO 8601 week of year</td></tr><tr><td>%w</td><td></td><td>day of week 0-6 with Sunday==0</td></tr><tr><td>%W</td><td></td><td>week of year (00-53) - week 01 starts on the first Monday</td></tr><tr><td>%Y</td><td></td><td>year: 0000-9999</td></tr><tr><td>%%</td><td></td><td>%</td></tr></tbody></table>

Other date and time functions can be expressed in terms of strftime():

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><b>Function</b></td><td width="30"></td><td><b>Equivalent strftime()</b></td></tr><tr><td>date(...)</td><td></td><td>strftime('%F', ...)</td></tr><tr><td>time(...)</td><td></td><td>strftime('%T', ...)</td></tr><tr><td>datetime(...)</td><td></td><td>strftime('%F %T', ...)</td></tr><tr><td>julianday(...)</td><td></td><td><nobr>CAST(strftime('%J', ...) as REAL)</nobr></td></tr><tr><td>unixepoch(...)</td><td></td><td><nobr>CAST(strftime('%s', ...) as INT)</nobr></td></tr></tbody></table>

The date(), time(), and datetime() functions all return text, and so their strftime() equivalents are exact. However, the julianday() and unixepoch() functions return numeric values. Their strftime() equivalents return a string that is the text representation of the corresponding number. The main reasons for providing functions other than strftime() are for convenience and for efficiency. The julianday() and unixepoch() functions return real and integer values respectively, and do not incur the format conversion costs or inexactitude resulting from use of the '%J' or '%s' format specifiers with the strftime() function. The **timediff(A,B)** function returns a string that describes the amount of time that must be added to B in order to reach time A. The format of the timediff() result is designed to be human-readable. The format is: (+|-)YYYY-MM-DD HH:MM:SS.SSS This time difference string is also an allowed modifier for the other date/time functions. The following invariant holds for time-values A and B: datetime(A) = datetime(B, timediff(A,B)) The length of months and years vary. February is shorter than March. Leap years are longer than non-leap years. The output from timediff() takes this all into account. The timediff() function is intended to provide a human-friendly description of the time span. If you want to know the number of days or seconds between two dates, A and B, then you can always do one of these: SELECT julianday(B) - julianday(A);  
SELECT unixepoch(B) - unixepoch(A); The timediff(A,B) might return the same result even for values A and B that span a different number of days - depending on the starting date. For example, both of the following two timediff() calls return the same result ("-0000-01-00 00:00:00.000") even though the first timespan is 28 days and the seconds is 31 days: SELECT timediff('2023-02-15','2023-03-15');  
SELECT timediff('2023-03-15','2023-04-15'); Summary: If you want a human-friendly time span, use timediff(). If you want a precise time difference (in days or seconds) use the difference between two julianday() or unixepoch() calls. 2\\. Time ValuesA time-value can be in any of the following formats shown below. The value is usually a string, though it can be an integer or floating point number in the case of format 12.*   _YYYY-MM-DD_
*   _YYYY-MM-DD HH:MM_
*   _YYYY-MM-DD HH:MM:SS_
*   _YYYY-MM-DD HH:MM:SS.SSS_
*   _YYYY-MM-DD_**T**_HH:MM_
*   _YYYY-MM-DD_**T**_HH:MM:SS_
*   _YYYY-MM-DD_**T**_HH:MM:SS.SSS_
*   _HH:MM_
*   _HH:MM:SS_
*   _HH:MM:SS.SSS_
*   **now**
*   _DDDDDDDDDD_
In formats 5 through 7, the "T" is a literal character separating the date and the time, as required by [ISO-8601](http://www.w3c.org/TR/NOTE-datetime). Formats 8 through 10 that specify only a time assume a date of 2000-01-01. Format 11, the string 'now', is converted into the current date and time as obtained from the xCurrentTime method of the [sqlite3\\_vfs](https://www.sqlite.org/c3ref/vfs.html) object in use. The 'now' argument to date and time functions always returns exactly the same value for multiple invocations within the same [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html) call. [Universal Coordinated Time (UTC)](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. Format 12 is the [Julian day number](http://en.wikipedia.org/wiki/Julian_day) expressed as an integer or floating point value. Format 12 might also be interpreted as a unix timestamp if it is immediately followed either the ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod) modifier. Formats 2 through 10 may be optionally followed by a timezone indicator of the form "_\\[+-\\]HH:MM_" or just "_Z_". The date and time functions use UTC or "zulu" time internally, and so the "Z" suffix is a no-op. Any non-zero "HH:MM" suffix is subtracted from the indicated date and time in order to compute zulu time. For example, all of the following time-values are equivalent: 2013-10-07 08:23:19.120  
2013-10-07T08:23:19.120Z  
2013-10-07 04:23:19.120-04:00  
2456572.84952685 In formats 4, 7, and 10, the fractional seconds value SS.SSS can have one or more digits following the decimal point. Exactly three digits are shown in the examples because only the first three digits are significant to the result, but the input string can have fewer or more than three digits and the date/time functions will still operate correctly. Similarly, format 12 is shown with 10 significant digits, but the date/time functions will really accept as many or as few digits as are necessary to represent the Julian day number. [ISO-8601](http://www.w3c.org/TR/NOTE-datetime) supports a wide variety of alternative date/time formats, but SQLite only supports the ones specifically enumerated above. In all functions other than timediff(), the time-value (and all modifiers) may be omitted, in which case a time value of 'now' is assumed. 3\\. ModifiersFor all date/time functions other than timediff(), the time-value argument can be followed by zero or more modifiers that alter date and/or time. Each modifier is a transformation that is applied to the time-value to its left. Modifiers are applied from left to right; order is important. The available modifiers are as follows.*   NNN days
*   NNN hours
*   NNN minutes
*   NNN seconds
*   NNN months
*   NNN years
*   \xB1HH:MM
*   \xB1HH:MM:SS
*   \xB1HH:MM:SS.SSS
*   \xB1YYYY-MM-DD
*   \xB1YYYY-MM-DD HH:MM
*   \xB1YYYY-MM-DD HH:MM:SS
*   \xB1YYYY-MM-DD HH:MM:SS.SSS
*   ceiling
*   floor
*   start of month
*   start of year
*   start of day
*   weekday N
*   unixepoch
*   julianday
*   auto
*   localtime
*   utc
*   subsec
*   subsecond
The first thirteen modifiers (1 through 13) add the specified amount of time to the date and time specified by the arguments to its left. The 's' character at the end of the modifier names in 1 through 6 is optional. The NNN value can be any floating point number, with an optional '+' or '-' prefix. The **time shift modifiers** (7 through 13) move the time-value by the number of years, months, days, hours, minutes, and/or seconds specified. An initial "+" or "-" is required for formats 10 through 13 but is optional for formats 7, 8, and 9. The changes are applies from left to right. First the year is shifted by YYYY, then the month by MM, and then day by DD, and so forth. The timediff(A,B) function returns a time shift in format 13 that shifts the time-value B into A.Because the length of a month or year changes from one month or year to the next, ambiguities can arise when shifting a date by months and/or years. For example, what is the date one year after 2024-02-29? Is it 2025-02-28 or 2025-03-01? Or what is the date that is two months after 2023-12-31? Is it 2024-02-29 or 2024-03-02? There is no consensus on how to resolve this ambiguity, so the "**ceiling**" and "**floor**" modifiers (14 and 15) are available to let the programmer decide. If the next modifier after a time shift is "ceiling", then any ambiguity in the date is resolved by choosing the later date. The "floor" modifier resolves ambiguities by resolving to the last day of the previous month. The default behavior is "ceiling". The "**start of**" modifiers (16 through 18) shift the date backwards to the beginning of the subject month, year or day.The "**weekday**" modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the "weekday" modifier leaves the date unchanged. The "**unixepoch**" modifier (20) only works if it immediately follows a time-value in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as [Unix Time](http://en.wikipedia.org/wiki/Unix_time) - the number of seconds since 1970. If the "unixepoch" modifier does not follow a time-value of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the "unixepoch" modifier from prior DDDDDDDDDD then the behavior is undefined. The "**julianday**" modifier must immediately follow the initial time-value which must be of the form DDDDDDDDD. Any other use of the 'julianday' modifier is an error and causes the function to return NULL. The 'julianday' modifier forces the time-value number to be interpreted as a julian-day number. As this is the default behavior, the 'julianday' modifier is scarcely more than a no-op. The only difference is that adding 'julianday' forces the DDDDDDDDD time-value format, and causes a NULL to be returned if any other time-value format is used. The "**auto**" modifier must immediately follow the initial time-value. If the time-value is numeric (the DDDDDDDDDD format) then the 'auto' modifier causes the time-value to interpreted as either a julian day number or a unix timestamp, depending on its magnitude. If the value is between 0.0 and 5373484.499999, then it is interpreted as a julian day number (corresponding to dates between -4713-11-24 12:00:00 and 9999-12-31 23:59:59, inclusive). For numeric values outside of the range of valid julian day numbers, but within the range of -210866760000 to 253402300799, the 'auto' modifier causes the value to be interpreted as a unix timestamp. Other numeric values are out of range and cause a NULL return. The 'auto' modifier is a no-op for ISO 8601 text time-values. The "auto" modifier is designed to work with time-values even in cases where it is not known which time-value format is stored in the database file, or in cases where the same column stores time-values in different formats on different rows. The 'auto' modifier will automatically select the appropriate format. However, there is some ambiguity. Unix timestamps for the first 63 days of 1970 will be interpreted as julian day numbers. The 'auto' modifier is very useful when the dataset is guaranteed to contain no dates within that range, but should be avoided for applications that might make use of dates in the opening months of 1970. The "**localtime**" modifier assumes the time-value to its left is in Universal Coordinated Time (UTC) and adjusts that time value so that it is in localtime. If "localtime" follows a time that is not UTC, then the behavior is undefined. The "**utc**" modifier is the opposite of "localtime". "utc" assumes that the time-value to its left is in the local timezone and adjusts that time-value to be in UTC. If the time to the left is not in localtime, then the result of "utc" is undefined. The "**subsecond**" modifier (which may be abbreviated as just "**subsec**") increases the resolution of the output for [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm), [time()](https://www.sqlite.org/lang_datefunc.html#dttm), and [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), and for the "%s" format string in [strftime()](https://www.sqlite.org/lang_datefunc.html#strftm). The "subsecond" modifier has no effect on other date/time functions. The current implemention increases the resolution from seconds to milliseconds, but this might increase to a higher resolution in future releases of SQLite. When "subsec" is used with [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm) or [time()](https://www.sqlite.org/lang_datefunc.html#dttm), the seconds field at the end is followed by a decimal point and one or more digits to show fractional seconds. When "subsec" is used with [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), the result is a floating point value which is the number of seconds and fractional seconds since 1970-01-01. The "subsecond" and "subsec" modifiers have the special property that they can occur as the first argument to date/time functions (or as the first argument after the format string for strftime()). When this happens, the time-value that is normally in the first argument is understood to be "now". For example, a short cut to get the current time in seconds since 1970 with millisecond precision is to say: SELECT unixepoch('subsec'); 4\\. ExamplesCompute the current date. SELECT date();Compute the last day of the current month.SELECT date('now','start of month','+1 month','-1 day'); Compute the date and time given a unix timestamp 1092941466. SELECT datetime(1092941466, 'unixepoch');  
SELECT datetime(1092941466, 'auto'); -- Does not work for early 1970! Compute the date and time given a unix timestamp 1092941466, and compensate for your local timezone. SELECT datetime(1092941466, 'unixepoch', 'localtime'); Compute the current unix timestamp. SELECT unixepoch();  
SELECT strftime('%s'); Compute the number of days since the signing of the US Declaration of Independence. SELECT julianday('now') - julianday('1776-07-04'); Compute the number of seconds since a particular moment in 2004: SELECT unixepoch() - unixepoch('2004-01-01 02:34:56'); Compute the date of the first Tuesday in October for the current year. SELECT date('now','start of year','+9 months','weekday 2'); Compute the time since the unix epoch in seconds with millisecond precision: SELECT (julianday('now') - 2440587.5)\\*86400.0;  
SELECT unixepoch('now','subsec'); Compute how old Abraham Lincoln would be if he were still alive today: SELECT timediff('now','1809-02-12'); 5\\. Caveats And BugsThe computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime\\_r() is used to assist in the calculation of local time. The localtime\\_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.These functions only work for dates between 0000-01-01 00:00:00 and 9999-12-31 23:59:59 (julian day numbers 1721059.5 through 5373484.5). For dates outside that range, the results of these functions are undefined.Non-Vista Windows platforms only support one set of DST rules. Vista only supports two. Therefore, on these platforms, historical DST calculations will be incorrect. For example, in the US, in 2007 the DST rules changed. Non-Vista Windows platforms apply the new 2007 DST rules to all previous years as well. Vista does somewhat better getting results correct back to 1986, when the rules were also changed.All internal computations assume the [Gregorian calendar](http://en.wikipedia.org/wiki/Gregorian_calendar) system. They also assume that every day is exactly 86400 seconds in duration; no leap seconds are incorporated.`},julianday:{args:"(time-value, modifier, modifier, ...)",docs:`1\\. Overview SQLite supports seven [scalar](https://www.sqlite.org/lang_corefunc.html) date and time functions as follows:*   **date(**_time-value, modifier, modifier, ..._**)**
*   **time(**_time-value, modifier, modifier, ..._**)**
*   **datetime(**_time-value, modifier, modifier, ..._**)**
*   **julianday(**_time-value, modifier, modifier, ..._**)**
*   **unixepoch(**_time-value, modifier, modifier, ..._**)**
*   **strftime(**_format, time-value, modifier, modifier, ..._**)**
*   **timediff(**_time-value, time-value_**)**
The first six date and time functions take an optional [time-value](https://www.sqlite.org/lang_datefunc.html#tmval) as an argument, followed by zero or more [modifiers](https://www.sqlite.org/lang_datefunc.html#dtmods). The strftime() function also takes a format string as its first argument. The timediff() function takes exactly two arguments which are both [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). SQLite does not have a dedicated date/time datatype. Instead, date and time values can stored as any of the following:

<table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a></td><td>A text string that is one of the ISO 8601 date/time values shown in <a href="about:blank#tmval">items 1 through 10 below</a>. Example: <tt>'2025-05-29 14:16:00'</tt></td></tr><tr><td><a href="http://en.wikipedia.org/wiki/Julian_day">Julian&nbsp;day&nbsp;number</a></td><td>The number of days including fractional days since -4713-11-24 12:00:00 Example: <tt>2460825.09444444</tt></td></tr><tr><td><a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a></td><td>The number of seconds including fractional seconds since 1970-01-01 00:00:00 Example: <tt>1748528160</tt></td></tr></tbody></table>

These three formats are collectively known as [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). All of the date time functions accept time-values as either ISO-8601 text or as Julian day numbers. They can also be made to accept unix timestamps by adding optional modifiers arguments ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod). Since the timediff() function does not accept modifiers, it can only use ISO-8601 and julian day number time-values. The **date()** function returns the date as text in this format: YYYY-MM-DD. The **time()** function returns the time as text in formatted as HH:MM:SS or as HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **datetime()** function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **julianday()** function returns the [Julian day](http://en.wikipedia.org/wiki/Julian_day) - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. ([Proleptic Gregorian calendar](http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)). The **unixepoch()** function returns a unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. The unixepoch() function normally returns an integer number of seconds, but with the optional [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) it will return a floating point number which is the fractional number of seconds. The **strftime()** function returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the [strftime() function](http://opengroup.org/onlinepubs/007908799/xsh/strftime.html) from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions as of version 3.46.0 (2024-05-23). Earlier versions of SQLite might not support all substitutions. If an undefined or unsupported substitution is seen, the result is NULL.

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td></td><td width="10"></td><td></td></tr><tr><td>%d</td><td></td><td>day of month: 01-31</td></tr><tr><td>%e</td><td></td><td>day of month without leading zero: 1-31</td></tr><tr><td>%f</td><td></td><td>fractional seconds: SS.SSS</td></tr><tr><td>%F</td><td></td><td>ISO 8601 date: YYYY-MM-DD</td></tr><tr><td>%G</td><td></td><td>ISO 8601 year corresponding to %V</td></tr><tr><td>%g</td><td></td><td>2-digit ISO 8601 year corresponding to %V</td></tr><tr><td>%H</td><td></td><td>hour: 00-24</td></tr><tr><td>%I</td><td></td><td>hour for 12-hour clock: 01-12</td></tr><tr><td>%j</td><td></td><td>day of year: 001-366</td></tr><tr><td>%J</td><td></td><td>Julian day number (fractional)</td></tr><tr><td>%k</td><td></td><td>hour without leading zero: 0-24</td></tr><tr><td>%l</td><td></td><td>%I without leading zero: 1-12</td></tr><tr><td>%m</td><td></td><td>month: 01-12</td></tr><tr><td>%M</td><td></td><td>minute: 00-59</td></tr><tr><td>%p</td><td></td><td>"AM" or "PM" depending on the hour</td></tr><tr><td>%P</td><td></td><td>"am" or "pm" depending on the hour</td></tr><tr><td>%R</td><td></td><td>ISO 8601 time: HH:MM</td></tr><tr><td>%s</td><td></td><td>seconds since 1970-01-01</td></tr><tr><td>%S</td><td></td><td>seconds: 00-59</td></tr><tr><td>%T</td><td></td><td>ISO 8601 time: HH:MM:SS</td></tr><tr><td>%U</td><td></td><td>week of year (00-53) - week 01 starts on the first Sunday</td></tr><tr><td>%u</td><td></td><td>day of week 1-7 with Monday==1</td></tr><tr><td>%V</td><td></td><td>ISO 8601 week of year</td></tr><tr><td>%w</td><td></td><td>day of week 0-6 with Sunday==0</td></tr><tr><td>%W</td><td></td><td>week of year (00-53) - week 01 starts on the first Monday</td></tr><tr><td>%Y</td><td></td><td>year: 0000-9999</td></tr><tr><td>%%</td><td></td><td>%</td></tr></tbody></table>

Other date and time functions can be expressed in terms of strftime():

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><b>Function</b></td><td width="30"></td><td><b>Equivalent strftime()</b></td></tr><tr><td>date(...)</td><td></td><td>strftime('%F', ...)</td></tr><tr><td>time(...)</td><td></td><td>strftime('%T', ...)</td></tr><tr><td>datetime(...)</td><td></td><td>strftime('%F %T', ...)</td></tr><tr><td>julianday(...)</td><td></td><td><nobr>CAST(strftime('%J', ...) as REAL)</nobr></td></tr><tr><td>unixepoch(...)</td><td></td><td><nobr>CAST(strftime('%s', ...) as INT)</nobr></td></tr></tbody></table>

The date(), time(), and datetime() functions all return text, and so their strftime() equivalents are exact. However, the julianday() and unixepoch() functions return numeric values. Their strftime() equivalents return a string that is the text representation of the corresponding number. The main reasons for providing functions other than strftime() are for convenience and for efficiency. The julianday() and unixepoch() functions return real and integer values respectively, and do not incur the format conversion costs or inexactitude resulting from use of the '%J' or '%s' format specifiers with the strftime() function. The **timediff(A,B)** function returns a string that describes the amount of time that must be added to B in order to reach time A. The format of the timediff() result is designed to be human-readable. The format is: (+|-)YYYY-MM-DD HH:MM:SS.SSS This time difference string is also an allowed modifier for the other date/time functions. The following invariant holds for time-values A and B: datetime(A) = datetime(B, timediff(A,B)) The length of months and years vary. February is shorter than March. Leap years are longer than non-leap years. The output from timediff() takes this all into account. The timediff() function is intended to provide a human-friendly description of the time span. If you want to know the number of days or seconds between two dates, A and B, then you can always do one of these: SELECT julianday(B) - julianday(A);  
SELECT unixepoch(B) - unixepoch(A); The timediff(A,B) might return the same result even for values A and B that span a different number of days - depending on the starting date. For example, both of the following two timediff() calls return the same result ("-0000-01-00 00:00:00.000") even though the first timespan is 28 days and the seconds is 31 days: SELECT timediff('2023-02-15','2023-03-15');  
SELECT timediff('2023-03-15','2023-04-15'); Summary: If you want a human-friendly time span, use timediff(). If you want a precise time difference (in days or seconds) use the difference between two julianday() or unixepoch() calls. 2\\. Time ValuesA time-value can be in any of the following formats shown below. The value is usually a string, though it can be an integer or floating point number in the case of format 12.*   _YYYY-MM-DD_
*   _YYYY-MM-DD HH:MM_
*   _YYYY-MM-DD HH:MM:SS_
*   _YYYY-MM-DD HH:MM:SS.SSS_
*   _YYYY-MM-DD_**T**_HH:MM_
*   _YYYY-MM-DD_**T**_HH:MM:SS_
*   _YYYY-MM-DD_**T**_HH:MM:SS.SSS_
*   _HH:MM_
*   _HH:MM:SS_
*   _HH:MM:SS.SSS_
*   **now**
*   _DDDDDDDDDD_
In formats 5 through 7, the "T" is a literal character separating the date and the time, as required by [ISO-8601](http://www.w3c.org/TR/NOTE-datetime). Formats 8 through 10 that specify only a time assume a date of 2000-01-01. Format 11, the string 'now', is converted into the current date and time as obtained from the xCurrentTime method of the [sqlite3\\_vfs](https://www.sqlite.org/c3ref/vfs.html) object in use. The 'now' argument to date and time functions always returns exactly the same value for multiple invocations within the same [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html) call. [Universal Coordinated Time (UTC)](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. Format 12 is the [Julian day number](http://en.wikipedia.org/wiki/Julian_day) expressed as an integer or floating point value. Format 12 might also be interpreted as a unix timestamp if it is immediately followed either the ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod) modifier. Formats 2 through 10 may be optionally followed by a timezone indicator of the form "_\\[+-\\]HH:MM_" or just "_Z_". The date and time functions use UTC or "zulu" time internally, and so the "Z" suffix is a no-op. Any non-zero "HH:MM" suffix is subtracted from the indicated date and time in order to compute zulu time. For example, all of the following time-values are equivalent: 2013-10-07 08:23:19.120  
2013-10-07T08:23:19.120Z  
2013-10-07 04:23:19.120-04:00  
2456572.84952685 In formats 4, 7, and 10, the fractional seconds value SS.SSS can have one or more digits following the decimal point. Exactly three digits are shown in the examples because only the first three digits are significant to the result, but the input string can have fewer or more than three digits and the date/time functions will still operate correctly. Similarly, format 12 is shown with 10 significant digits, but the date/time functions will really accept as many or as few digits as are necessary to represent the Julian day number. [ISO-8601](http://www.w3c.org/TR/NOTE-datetime) supports a wide variety of alternative date/time formats, but SQLite only supports the ones specifically enumerated above. In all functions other than timediff(), the time-value (and all modifiers) may be omitted, in which case a time value of 'now' is assumed. 3\\. ModifiersFor all date/time functions other than timediff(), the time-value argument can be followed by zero or more modifiers that alter date and/or time. Each modifier is a transformation that is applied to the time-value to its left. Modifiers are applied from left to right; order is important. The available modifiers are as follows.*   NNN days
*   NNN hours
*   NNN minutes
*   NNN seconds
*   NNN months
*   NNN years
*   \xB1HH:MM
*   \xB1HH:MM:SS
*   \xB1HH:MM:SS.SSS
*   \xB1YYYY-MM-DD
*   \xB1YYYY-MM-DD HH:MM
*   \xB1YYYY-MM-DD HH:MM:SS
*   \xB1YYYY-MM-DD HH:MM:SS.SSS
*   ceiling
*   floor
*   start of month
*   start of year
*   start of day
*   weekday N
*   unixepoch
*   julianday
*   auto
*   localtime
*   utc
*   subsec
*   subsecond
The first thirteen modifiers (1 through 13) add the specified amount of time to the date and time specified by the arguments to its left. The 's' character at the end of the modifier names in 1 through 6 is optional. The NNN value can be any floating point number, with an optional '+' or '-' prefix. The **time shift modifiers** (7 through 13) move the time-value by the number of years, months, days, hours, minutes, and/or seconds specified. An initial "+" or "-" is required for formats 10 through 13 but is optional for formats 7, 8, and 9. The changes are applies from left to right. First the year is shifted by YYYY, then the month by MM, and then day by DD, and so forth. The timediff(A,B) function returns a time shift in format 13 that shifts the time-value B into A.Because the length of a month or year changes from one month or year to the next, ambiguities can arise when shifting a date by months and/or years. For example, what is the date one year after 2024-02-29? Is it 2025-02-28 or 2025-03-01? Or what is the date that is two months after 2023-12-31? Is it 2024-02-29 or 2024-03-02? There is no consensus on how to resolve this ambiguity, so the "**ceiling**" and "**floor**" modifiers (14 and 15) are available to let the programmer decide. If the next modifier after a time shift is "ceiling", then any ambiguity in the date is resolved by choosing the later date. The "floor" modifier resolves ambiguities by resolving to the last day of the previous month. The default behavior is "ceiling". The "**start of**" modifiers (16 through 18) shift the date backwards to the beginning of the subject month, year or day.The "**weekday**" modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the "weekday" modifier leaves the date unchanged. The "**unixepoch**" modifier (20) only works if it immediately follows a time-value in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as [Unix Time](http://en.wikipedia.org/wiki/Unix_time) - the number of seconds since 1970. If the "unixepoch" modifier does not follow a time-value of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the "unixepoch" modifier from prior DDDDDDDDDD then the behavior is undefined. The "**julianday**" modifier must immediately follow the initial time-value which must be of the form DDDDDDDDD. Any other use of the 'julianday' modifier is an error and causes the function to return NULL. The 'julianday' modifier forces the time-value number to be interpreted as a julian-day number. As this is the default behavior, the 'julianday' modifier is scarcely more than a no-op. The only difference is that adding 'julianday' forces the DDDDDDDDD time-value format, and causes a NULL to be returned if any other time-value format is used. The "**auto**" modifier must immediately follow the initial time-value. If the time-value is numeric (the DDDDDDDDDD format) then the 'auto' modifier causes the time-value to interpreted as either a julian day number or a unix timestamp, depending on its magnitude. If the value is between 0.0 and 5373484.499999, then it is interpreted as a julian day number (corresponding to dates between -4713-11-24 12:00:00 and 9999-12-31 23:59:59, inclusive). For numeric values outside of the range of valid julian day numbers, but within the range of -210866760000 to 253402300799, the 'auto' modifier causes the value to be interpreted as a unix timestamp. Other numeric values are out of range and cause a NULL return. The 'auto' modifier is a no-op for ISO 8601 text time-values. The "auto" modifier is designed to work with time-values even in cases where it is not known which time-value format is stored in the database file, or in cases where the same column stores time-values in different formats on different rows. The 'auto' modifier will automatically select the appropriate format. However, there is some ambiguity. Unix timestamps for the first 63 days of 1970 will be interpreted as julian day numbers. The 'auto' modifier is very useful when the dataset is guaranteed to contain no dates within that range, but should be avoided for applications that might make use of dates in the opening months of 1970. The "**localtime**" modifier assumes the time-value to its left is in Universal Coordinated Time (UTC) and adjusts that time value so that it is in localtime. If "localtime" follows a time that is not UTC, then the behavior is undefined. The "**utc**" modifier is the opposite of "localtime". "utc" assumes that the time-value to its left is in the local timezone and adjusts that time-value to be in UTC. If the time to the left is not in localtime, then the result of "utc" is undefined. The "**subsecond**" modifier (which may be abbreviated as just "**subsec**") increases the resolution of the output for [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm), [time()](https://www.sqlite.org/lang_datefunc.html#dttm), and [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), and for the "%s" format string in [strftime()](https://www.sqlite.org/lang_datefunc.html#strftm). The "subsecond" modifier has no effect on other date/time functions. The current implemention increases the resolution from seconds to milliseconds, but this might increase to a higher resolution in future releases of SQLite. When "subsec" is used with [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm) or [time()](https://www.sqlite.org/lang_datefunc.html#dttm), the seconds field at the end is followed by a decimal point and one or more digits to show fractional seconds. When "subsec" is used with [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), the result is a floating point value which is the number of seconds and fractional seconds since 1970-01-01. The "subsecond" and "subsec" modifiers have the special property that they can occur as the first argument to date/time functions (or as the first argument after the format string for strftime()). When this happens, the time-value that is normally in the first argument is understood to be "now". For example, a short cut to get the current time in seconds since 1970 with millisecond precision is to say: SELECT unixepoch('subsec'); 4\\. ExamplesCompute the current date. SELECT date();Compute the last day of the current month.SELECT date('now','start of month','+1 month','-1 day'); Compute the date and time given a unix timestamp 1092941466. SELECT datetime(1092941466, 'unixepoch');  
SELECT datetime(1092941466, 'auto'); -- Does not work for early 1970! Compute the date and time given a unix timestamp 1092941466, and compensate for your local timezone. SELECT datetime(1092941466, 'unixepoch', 'localtime'); Compute the current unix timestamp. SELECT unixepoch();  
SELECT strftime('%s'); Compute the number of days since the signing of the US Declaration of Independence. SELECT julianday('now') - julianday('1776-07-04'); Compute the number of seconds since a particular moment in 2004: SELECT unixepoch() - unixepoch('2004-01-01 02:34:56'); Compute the date of the first Tuesday in October for the current year. SELECT date('now','start of year','+9 months','weekday 2'); Compute the time since the unix epoch in seconds with millisecond precision: SELECT (julianday('now') - 2440587.5)\\*86400.0;  
SELECT unixepoch('now','subsec'); Compute how old Abraham Lincoln would be if he were still alive today: SELECT timediff('now','1809-02-12'); 5\\. Caveats And BugsThe computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime\\_r() is used to assist in the calculation of local time. The localtime\\_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.These functions only work for dates between 0000-01-01 00:00:00 and 9999-12-31 23:59:59 (julian day numbers 1721059.5 through 5373484.5). For dates outside that range, the results of these functions are undefined.Non-Vista Windows platforms only support one set of DST rules. Vista only supports two. Therefore, on these platforms, historical DST calculations will be incorrect. For example, in the US, in 2007 the DST rules changed. Non-Vista Windows platforms apply the new 2007 DST rules to all previous years as well. Vista does somewhat better getting results correct back to 1986, when the rules were also changed.All internal computations assume the [Gregorian calendar](http://en.wikipedia.org/wiki/Gregorian_calendar) system. They also assume that every day is exactly 86400 seconds in duration; no leap seconds are incorporated.`},unixepoch:{args:"(time-value, modifier, modifier, ...)",docs:`1\\. Overview SQLite supports seven [scalar](https://www.sqlite.org/lang_corefunc.html) date and time functions as follows:*   **date(**_time-value, modifier, modifier, ..._**)**
*   **time(**_time-value, modifier, modifier, ..._**)**
*   **datetime(**_time-value, modifier, modifier, ..._**)**
*   **julianday(**_time-value, modifier, modifier, ..._**)**
*   **unixepoch(**_time-value, modifier, modifier, ..._**)**
*   **strftime(**_format, time-value, modifier, modifier, ..._**)**
*   **timediff(**_time-value, time-value_**)**
The first six date and time functions take an optional [time-value](https://www.sqlite.org/lang_datefunc.html#tmval) as an argument, followed by zero or more [modifiers](https://www.sqlite.org/lang_datefunc.html#dtmods). The strftime() function also takes a format string as its first argument. The timediff() function takes exactly two arguments which are both [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). SQLite does not have a dedicated date/time datatype. Instead, date and time values can stored as any of the following:

<table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a></td><td>A text string that is one of the ISO 8601 date/time values shown in <a href="about:blank#tmval">items 1 through 10 below</a>. Example: <tt>'2025-05-29 14:16:00'</tt></td></tr><tr><td><a href="http://en.wikipedia.org/wiki/Julian_day">Julian&nbsp;day&nbsp;number</a></td><td>The number of days including fractional days since -4713-11-24 12:00:00 Example: <tt>2460825.09444444</tt></td></tr><tr><td><a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a></td><td>The number of seconds including fractional seconds since 1970-01-01 00:00:00 Example: <tt>1748528160</tt></td></tr></tbody></table>

These three formats are collectively known as [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). All of the date time functions accept time-values as either ISO-8601 text or as Julian day numbers. They can also be made to accept unix timestamps by adding optional modifiers arguments ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod). Since the timediff() function does not accept modifiers, it can only use ISO-8601 and julian day number time-values. The **date()** function returns the date as text in this format: YYYY-MM-DD. The **time()** function returns the time as text in formatted as HH:MM:SS or as HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **datetime()** function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **julianday()** function returns the [Julian day](http://en.wikipedia.org/wiki/Julian_day) - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. ([Proleptic Gregorian calendar](http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)). The **unixepoch()** function returns a unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. The unixepoch() function normally returns an integer number of seconds, but with the optional [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) it will return a floating point number which is the fractional number of seconds. The **strftime()** function returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the [strftime() function](http://opengroup.org/onlinepubs/007908799/xsh/strftime.html) from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions as of version 3.46.0 (2024-05-23). Earlier versions of SQLite might not support all substitutions. If an undefined or unsupported substitution is seen, the result is NULL.

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td></td><td width="10"></td><td></td></tr><tr><td>%d</td><td></td><td>day of month: 01-31</td></tr><tr><td>%e</td><td></td><td>day of month without leading zero: 1-31</td></tr><tr><td>%f</td><td></td><td>fractional seconds: SS.SSS</td></tr><tr><td>%F</td><td></td><td>ISO 8601 date: YYYY-MM-DD</td></tr><tr><td>%G</td><td></td><td>ISO 8601 year corresponding to %V</td></tr><tr><td>%g</td><td></td><td>2-digit ISO 8601 year corresponding to %V</td></tr><tr><td>%H</td><td></td><td>hour: 00-24</td></tr><tr><td>%I</td><td></td><td>hour for 12-hour clock: 01-12</td></tr><tr><td>%j</td><td></td><td>day of year: 001-366</td></tr><tr><td>%J</td><td></td><td>Julian day number (fractional)</td></tr><tr><td>%k</td><td></td><td>hour without leading zero: 0-24</td></tr><tr><td>%l</td><td></td><td>%I without leading zero: 1-12</td></tr><tr><td>%m</td><td></td><td>month: 01-12</td></tr><tr><td>%M</td><td></td><td>minute: 00-59</td></tr><tr><td>%p</td><td></td><td>"AM" or "PM" depending on the hour</td></tr><tr><td>%P</td><td></td><td>"am" or "pm" depending on the hour</td></tr><tr><td>%R</td><td></td><td>ISO 8601 time: HH:MM</td></tr><tr><td>%s</td><td></td><td>seconds since 1970-01-01</td></tr><tr><td>%S</td><td></td><td>seconds: 00-59</td></tr><tr><td>%T</td><td></td><td>ISO 8601 time: HH:MM:SS</td></tr><tr><td>%U</td><td></td><td>week of year (00-53) - week 01 starts on the first Sunday</td></tr><tr><td>%u</td><td></td><td>day of week 1-7 with Monday==1</td></tr><tr><td>%V</td><td></td><td>ISO 8601 week of year</td></tr><tr><td>%w</td><td></td><td>day of week 0-6 with Sunday==0</td></tr><tr><td>%W</td><td></td><td>week of year (00-53) - week 01 starts on the first Monday</td></tr><tr><td>%Y</td><td></td><td>year: 0000-9999</td></tr><tr><td>%%</td><td></td><td>%</td></tr></tbody></table>

Other date and time functions can be expressed in terms of strftime():

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><b>Function</b></td><td width="30"></td><td><b>Equivalent strftime()</b></td></tr><tr><td>date(...)</td><td></td><td>strftime('%F', ...)</td></tr><tr><td>time(...)</td><td></td><td>strftime('%T', ...)</td></tr><tr><td>datetime(...)</td><td></td><td>strftime('%F %T', ...)</td></tr><tr><td>julianday(...)</td><td></td><td><nobr>CAST(strftime('%J', ...) as REAL)</nobr></td></tr><tr><td>unixepoch(...)</td><td></td><td><nobr>CAST(strftime('%s', ...) as INT)</nobr></td></tr></tbody></table>

The date(), time(), and datetime() functions all return text, and so their strftime() equivalents are exact. However, the julianday() and unixepoch() functions return numeric values. Their strftime() equivalents return a string that is the text representation of the corresponding number. The main reasons for providing functions other than strftime() are for convenience and for efficiency. The julianday() and unixepoch() functions return real and integer values respectively, and do not incur the format conversion costs or inexactitude resulting from use of the '%J' or '%s' format specifiers with the strftime() function. The **timediff(A,B)** function returns a string that describes the amount of time that must be added to B in order to reach time A. The format of the timediff() result is designed to be human-readable. The format is: (+|-)YYYY-MM-DD HH:MM:SS.SSS This time difference string is also an allowed modifier for the other date/time functions. The following invariant holds for time-values A and B: datetime(A) = datetime(B, timediff(A,B)) The length of months and years vary. February is shorter than March. Leap years are longer than non-leap years. The output from timediff() takes this all into account. The timediff() function is intended to provide a human-friendly description of the time span. If you want to know the number of days or seconds between two dates, A and B, then you can always do one of these: SELECT julianday(B) - julianday(A);  
SELECT unixepoch(B) - unixepoch(A); The timediff(A,B) might return the same result even for values A and B that span a different number of days - depending on the starting date. For example, both of the following two timediff() calls return the same result ("-0000-01-00 00:00:00.000") even though the first timespan is 28 days and the seconds is 31 days: SELECT timediff('2023-02-15','2023-03-15');  
SELECT timediff('2023-03-15','2023-04-15'); Summary: If you want a human-friendly time span, use timediff(). If you want a precise time difference (in days or seconds) use the difference between two julianday() or unixepoch() calls. 2\\. Time ValuesA time-value can be in any of the following formats shown below. The value is usually a string, though it can be an integer or floating point number in the case of format 12.*   _YYYY-MM-DD_
*   _YYYY-MM-DD HH:MM_
*   _YYYY-MM-DD HH:MM:SS_
*   _YYYY-MM-DD HH:MM:SS.SSS_
*   _YYYY-MM-DD_**T**_HH:MM_
*   _YYYY-MM-DD_**T**_HH:MM:SS_
*   _YYYY-MM-DD_**T**_HH:MM:SS.SSS_
*   _HH:MM_
*   _HH:MM:SS_
*   _HH:MM:SS.SSS_
*   **now**
*   _DDDDDDDDDD_
In formats 5 through 7, the "T" is a literal character separating the date and the time, as required by [ISO-8601](http://www.w3c.org/TR/NOTE-datetime). Formats 8 through 10 that specify only a time assume a date of 2000-01-01. Format 11, the string 'now', is converted into the current date and time as obtained from the xCurrentTime method of the [sqlite3\\_vfs](https://www.sqlite.org/c3ref/vfs.html) object in use. The 'now' argument to date and time functions always returns exactly the same value for multiple invocations within the same [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html) call. [Universal Coordinated Time (UTC)](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. Format 12 is the [Julian day number](http://en.wikipedia.org/wiki/Julian_day) expressed as an integer or floating point value. Format 12 might also be interpreted as a unix timestamp if it is immediately followed either the ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod) modifier. Formats 2 through 10 may be optionally followed by a timezone indicator of the form "_\\[+-\\]HH:MM_" or just "_Z_". The date and time functions use UTC or "zulu" time internally, and so the "Z" suffix is a no-op. Any non-zero "HH:MM" suffix is subtracted from the indicated date and time in order to compute zulu time. For example, all of the following time-values are equivalent: 2013-10-07 08:23:19.120  
2013-10-07T08:23:19.120Z  
2013-10-07 04:23:19.120-04:00  
2456572.84952685 In formats 4, 7, and 10, the fractional seconds value SS.SSS can have one or more digits following the decimal point. Exactly three digits are shown in the examples because only the first three digits are significant to the result, but the input string can have fewer or more than three digits and the date/time functions will still operate correctly. Similarly, format 12 is shown with 10 significant digits, but the date/time functions will really accept as many or as few digits as are necessary to represent the Julian day number. [ISO-8601](http://www.w3c.org/TR/NOTE-datetime) supports a wide variety of alternative date/time formats, but SQLite only supports the ones specifically enumerated above. In all functions other than timediff(), the time-value (and all modifiers) may be omitted, in which case a time value of 'now' is assumed. 3\\. ModifiersFor all date/time functions other than timediff(), the time-value argument can be followed by zero or more modifiers that alter date and/or time. Each modifier is a transformation that is applied to the time-value to its left. Modifiers are applied from left to right; order is important. The available modifiers are as follows.*   NNN days
*   NNN hours
*   NNN minutes
*   NNN seconds
*   NNN months
*   NNN years
*   \xB1HH:MM
*   \xB1HH:MM:SS
*   \xB1HH:MM:SS.SSS
*   \xB1YYYY-MM-DD
*   \xB1YYYY-MM-DD HH:MM
*   \xB1YYYY-MM-DD HH:MM:SS
*   \xB1YYYY-MM-DD HH:MM:SS.SSS
*   ceiling
*   floor
*   start of month
*   start of year
*   start of day
*   weekday N
*   unixepoch
*   julianday
*   auto
*   localtime
*   utc
*   subsec
*   subsecond
The first thirteen modifiers (1 through 13) add the specified amount of time to the date and time specified by the arguments to its left. The 's' character at the end of the modifier names in 1 through 6 is optional. The NNN value can be any floating point number, with an optional '+' or '-' prefix. The **time shift modifiers** (7 through 13) move the time-value by the number of years, months, days, hours, minutes, and/or seconds specified. An initial "+" or "-" is required for formats 10 through 13 but is optional for formats 7, 8, and 9. The changes are applies from left to right. First the year is shifted by YYYY, then the month by MM, and then day by DD, and so forth. The timediff(A,B) function returns a time shift in format 13 that shifts the time-value B into A.Because the length of a month or year changes from one month or year to the next, ambiguities can arise when shifting a date by months and/or years. For example, what is the date one year after 2024-02-29? Is it 2025-02-28 or 2025-03-01? Or what is the date that is two months after 2023-12-31? Is it 2024-02-29 or 2024-03-02? There is no consensus on how to resolve this ambiguity, so the "**ceiling**" and "**floor**" modifiers (14 and 15) are available to let the programmer decide. If the next modifier after a time shift is "ceiling", then any ambiguity in the date is resolved by choosing the later date. The "floor" modifier resolves ambiguities by resolving to the last day of the previous month. The default behavior is "ceiling". The "**start of**" modifiers (16 through 18) shift the date backwards to the beginning of the subject month, year or day.The "**weekday**" modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the "weekday" modifier leaves the date unchanged. The "**unixepoch**" modifier (20) only works if it immediately follows a time-value in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as [Unix Time](http://en.wikipedia.org/wiki/Unix_time) - the number of seconds since 1970. If the "unixepoch" modifier does not follow a time-value of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the "unixepoch" modifier from prior DDDDDDDDDD then the behavior is undefined. The "**julianday**" modifier must immediately follow the initial time-value which must be of the form DDDDDDDDD. Any other use of the 'julianday' modifier is an error and causes the function to return NULL. The 'julianday' modifier forces the time-value number to be interpreted as a julian-day number. As this is the default behavior, the 'julianday' modifier is scarcely more than a no-op. The only difference is that adding 'julianday' forces the DDDDDDDDD time-value format, and causes a NULL to be returned if any other time-value format is used. The "**auto**" modifier must immediately follow the initial time-value. If the time-value is numeric (the DDDDDDDDDD format) then the 'auto' modifier causes the time-value to interpreted as either a julian day number or a unix timestamp, depending on its magnitude. If the value is between 0.0 and 5373484.499999, then it is interpreted as a julian day number (corresponding to dates between -4713-11-24 12:00:00 and 9999-12-31 23:59:59, inclusive). For numeric values outside of the range of valid julian day numbers, but within the range of -210866760000 to 253402300799, the 'auto' modifier causes the value to be interpreted as a unix timestamp. Other numeric values are out of range and cause a NULL return. The 'auto' modifier is a no-op for ISO 8601 text time-values. The "auto" modifier is designed to work with time-values even in cases where it is not known which time-value format is stored in the database file, or in cases where the same column stores time-values in different formats on different rows. The 'auto' modifier will automatically select the appropriate format. However, there is some ambiguity. Unix timestamps for the first 63 days of 1970 will be interpreted as julian day numbers. The 'auto' modifier is very useful when the dataset is guaranteed to contain no dates within that range, but should be avoided for applications that might make use of dates in the opening months of 1970. The "**localtime**" modifier assumes the time-value to its left is in Universal Coordinated Time (UTC) and adjusts that time value so that it is in localtime. If "localtime" follows a time that is not UTC, then the behavior is undefined. The "**utc**" modifier is the opposite of "localtime". "utc" assumes that the time-value to its left is in the local timezone and adjusts that time-value to be in UTC. If the time to the left is not in localtime, then the result of "utc" is undefined. The "**subsecond**" modifier (which may be abbreviated as just "**subsec**") increases the resolution of the output for [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm), [time()](https://www.sqlite.org/lang_datefunc.html#dttm), and [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), and for the "%s" format string in [strftime()](https://www.sqlite.org/lang_datefunc.html#strftm). The "subsecond" modifier has no effect on other date/time functions. The current implemention increases the resolution from seconds to milliseconds, but this might increase to a higher resolution in future releases of SQLite. When "subsec" is used with [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm) or [time()](https://www.sqlite.org/lang_datefunc.html#dttm), the seconds field at the end is followed by a decimal point and one or more digits to show fractional seconds. When "subsec" is used with [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), the result is a floating point value which is the number of seconds and fractional seconds since 1970-01-01. The "subsecond" and "subsec" modifiers have the special property that they can occur as the first argument to date/time functions (or as the first argument after the format string for strftime()). When this happens, the time-value that is normally in the first argument is understood to be "now". For example, a short cut to get the current time in seconds since 1970 with millisecond precision is to say: SELECT unixepoch('subsec'); 4\\. ExamplesCompute the current date. SELECT date();Compute the last day of the current month.SELECT date('now','start of month','+1 month','-1 day'); Compute the date and time given a unix timestamp 1092941466. SELECT datetime(1092941466, 'unixepoch');  
SELECT datetime(1092941466, 'auto'); -- Does not work for early 1970! Compute the date and time given a unix timestamp 1092941466, and compensate for your local timezone. SELECT datetime(1092941466, 'unixepoch', 'localtime'); Compute the current unix timestamp. SELECT unixepoch();  
SELECT strftime('%s'); Compute the number of days since the signing of the US Declaration of Independence. SELECT julianday('now') - julianday('1776-07-04'); Compute the number of seconds since a particular moment in 2004: SELECT unixepoch() - unixepoch('2004-01-01 02:34:56'); Compute the date of the first Tuesday in October for the current year. SELECT date('now','start of year','+9 months','weekday 2'); Compute the time since the unix epoch in seconds with millisecond precision: SELECT (julianday('now') - 2440587.5)\\*86400.0;  
SELECT unixepoch('now','subsec'); Compute how old Abraham Lincoln would be if he were still alive today: SELECT timediff('now','1809-02-12'); 5\\. Caveats And BugsThe computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime\\_r() is used to assist in the calculation of local time. The localtime\\_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.These functions only work for dates between 0000-01-01 00:00:00 and 9999-12-31 23:59:59 (julian day numbers 1721059.5 through 5373484.5). For dates outside that range, the results of these functions are undefined.Non-Vista Windows platforms only support one set of DST rules. Vista only supports two. Therefore, on these platforms, historical DST calculations will be incorrect. For example, in the US, in 2007 the DST rules changed. Non-Vista Windows platforms apply the new 2007 DST rules to all previous years as well. Vista does somewhat better getting results correct back to 1986, when the rules were also changed.All internal computations assume the [Gregorian calendar](http://en.wikipedia.org/wiki/Gregorian_calendar) system. They also assume that every day is exactly 86400 seconds in duration; no leap seconds are incorporated.`},strftime:{args:"(format, time-value, modifier, modifier, ...)",docs:`1\\. Overview SQLite supports seven [scalar](https://www.sqlite.org/lang_corefunc.html) date and time functions as follows:*   **date(**_time-value, modifier, modifier, ..._**)**
*   **time(**_time-value, modifier, modifier, ..._**)**
*   **datetime(**_time-value, modifier, modifier, ..._**)**
*   **julianday(**_time-value, modifier, modifier, ..._**)**
*   **unixepoch(**_time-value, modifier, modifier, ..._**)**
*   **strftime(**_format, time-value, modifier, modifier, ..._**)**
*   **timediff(**_time-value, time-value_**)**
The first six date and time functions take an optional [time-value](https://www.sqlite.org/lang_datefunc.html#tmval) as an argument, followed by zero or more [modifiers](https://www.sqlite.org/lang_datefunc.html#dtmods). The strftime() function also takes a format string as its first argument. The timediff() function takes exactly two arguments which are both [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). SQLite does not have a dedicated date/time datatype. Instead, date and time values can stored as any of the following:

<table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a></td><td>A text string that is one of the ISO 8601 date/time values shown in <a href="about:blank#tmval">items 1 through 10 below</a>. Example: <tt>'2025-05-29 14:16:00'</tt></td></tr><tr><td><a href="http://en.wikipedia.org/wiki/Julian_day">Julian&nbsp;day&nbsp;number</a></td><td>The number of days including fractional days since -4713-11-24 12:00:00 Example: <tt>2460825.09444444</tt></td></tr><tr><td><a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a></td><td>The number of seconds including fractional seconds since 1970-01-01 00:00:00 Example: <tt>1748528160</tt></td></tr></tbody></table>

These three formats are collectively known as [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). All of the date time functions accept time-values as either ISO-8601 text or as Julian day numbers. They can also be made to accept unix timestamps by adding optional modifiers arguments ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod). Since the timediff() function does not accept modifiers, it can only use ISO-8601 and julian day number time-values. The **date()** function returns the date as text in this format: YYYY-MM-DD. The **time()** function returns the time as text in formatted as HH:MM:SS or as HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **datetime()** function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **julianday()** function returns the [Julian day](http://en.wikipedia.org/wiki/Julian_day) - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. ([Proleptic Gregorian calendar](http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)). The **unixepoch()** function returns a unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. The unixepoch() function normally returns an integer number of seconds, but with the optional [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) it will return a floating point number which is the fractional number of seconds. The **strftime()** function returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the [strftime() function](http://opengroup.org/onlinepubs/007908799/xsh/strftime.html) from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions as of version 3.46.0 (2024-05-23). Earlier versions of SQLite might not support all substitutions. If an undefined or unsupported substitution is seen, the result is NULL.

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td></td><td width="10"></td><td></td></tr><tr><td>%d</td><td></td><td>day of month: 01-31</td></tr><tr><td>%e</td><td></td><td>day of month without leading zero: 1-31</td></tr><tr><td>%f</td><td></td><td>fractional seconds: SS.SSS</td></tr><tr><td>%F</td><td></td><td>ISO 8601 date: YYYY-MM-DD</td></tr><tr><td>%G</td><td></td><td>ISO 8601 year corresponding to %V</td></tr><tr><td>%g</td><td></td><td>2-digit ISO 8601 year corresponding to %V</td></tr><tr><td>%H</td><td></td><td>hour: 00-24</td></tr><tr><td>%I</td><td></td><td>hour for 12-hour clock: 01-12</td></tr><tr><td>%j</td><td></td><td>day of year: 001-366</td></tr><tr><td>%J</td><td></td><td>Julian day number (fractional)</td></tr><tr><td>%k</td><td></td><td>hour without leading zero: 0-24</td></tr><tr><td>%l</td><td></td><td>%I without leading zero: 1-12</td></tr><tr><td>%m</td><td></td><td>month: 01-12</td></tr><tr><td>%M</td><td></td><td>minute: 00-59</td></tr><tr><td>%p</td><td></td><td>"AM" or "PM" depending on the hour</td></tr><tr><td>%P</td><td></td><td>"am" or "pm" depending on the hour</td></tr><tr><td>%R</td><td></td><td>ISO 8601 time: HH:MM</td></tr><tr><td>%s</td><td></td><td>seconds since 1970-01-01</td></tr><tr><td>%S</td><td></td><td>seconds: 00-59</td></tr><tr><td>%T</td><td></td><td>ISO 8601 time: HH:MM:SS</td></tr><tr><td>%U</td><td></td><td>week of year (00-53) - week 01 starts on the first Sunday</td></tr><tr><td>%u</td><td></td><td>day of week 1-7 with Monday==1</td></tr><tr><td>%V</td><td></td><td>ISO 8601 week of year</td></tr><tr><td>%w</td><td></td><td>day of week 0-6 with Sunday==0</td></tr><tr><td>%W</td><td></td><td>week of year (00-53) - week 01 starts on the first Monday</td></tr><tr><td>%Y</td><td></td><td>year: 0000-9999</td></tr><tr><td>%%</td><td></td><td>%</td></tr></tbody></table>

Other date and time functions can be expressed in terms of strftime():

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><b>Function</b></td><td width="30"></td><td><b>Equivalent strftime()</b></td></tr><tr><td>date(...)</td><td></td><td>strftime('%F', ...)</td></tr><tr><td>time(...)</td><td></td><td>strftime('%T', ...)</td></tr><tr><td>datetime(...)</td><td></td><td>strftime('%F %T', ...)</td></tr><tr><td>julianday(...)</td><td></td><td><nobr>CAST(strftime('%J', ...) as REAL)</nobr></td></tr><tr><td>unixepoch(...)</td><td></td><td><nobr>CAST(strftime('%s', ...) as INT)</nobr></td></tr></tbody></table>

The date(), time(), and datetime() functions all return text, and so their strftime() equivalents are exact. However, the julianday() and unixepoch() functions return numeric values. Their strftime() equivalents return a string that is the text representation of the corresponding number. The main reasons for providing functions other than strftime() are for convenience and for efficiency. The julianday() and unixepoch() functions return real and integer values respectively, and do not incur the format conversion costs or inexactitude resulting from use of the '%J' or '%s' format specifiers with the strftime() function. The **timediff(A,B)** function returns a string that describes the amount of time that must be added to B in order to reach time A. The format of the timediff() result is designed to be human-readable. The format is: (+|-)YYYY-MM-DD HH:MM:SS.SSS This time difference string is also an allowed modifier for the other date/time functions. The following invariant holds for time-values A and B: datetime(A) = datetime(B, timediff(A,B)) The length of months and years vary. February is shorter than March. Leap years are longer than non-leap years. The output from timediff() takes this all into account. The timediff() function is intended to provide a human-friendly description of the time span. If you want to know the number of days or seconds between two dates, A and B, then you can always do one of these: SELECT julianday(B) - julianday(A);  
SELECT unixepoch(B) - unixepoch(A); The timediff(A,B) might return the same result even for values A and B that span a different number of days - depending on the starting date. For example, both of the following two timediff() calls return the same result ("-0000-01-00 00:00:00.000") even though the first timespan is 28 days and the seconds is 31 days: SELECT timediff('2023-02-15','2023-03-15');  
SELECT timediff('2023-03-15','2023-04-15'); Summary: If you want a human-friendly time span, use timediff(). If you want a precise time difference (in days or seconds) use the difference between two julianday() or unixepoch() calls. 2\\. Time ValuesA time-value can be in any of the following formats shown below. The value is usually a string, though it can be an integer or floating point number in the case of format 12.*   _YYYY-MM-DD_
*   _YYYY-MM-DD HH:MM_
*   _YYYY-MM-DD HH:MM:SS_
*   _YYYY-MM-DD HH:MM:SS.SSS_
*   _YYYY-MM-DD_**T**_HH:MM_
*   _YYYY-MM-DD_**T**_HH:MM:SS_
*   _YYYY-MM-DD_**T**_HH:MM:SS.SSS_
*   _HH:MM_
*   _HH:MM:SS_
*   _HH:MM:SS.SSS_
*   **now**
*   _DDDDDDDDDD_
In formats 5 through 7, the "T" is a literal character separating the date and the time, as required by [ISO-8601](http://www.w3c.org/TR/NOTE-datetime). Formats 8 through 10 that specify only a time assume a date of 2000-01-01. Format 11, the string 'now', is converted into the current date and time as obtained from the xCurrentTime method of the [sqlite3\\_vfs](https://www.sqlite.org/c3ref/vfs.html) object in use. The 'now' argument to date and time functions always returns exactly the same value for multiple invocations within the same [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html) call. [Universal Coordinated Time (UTC)](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. Format 12 is the [Julian day number](http://en.wikipedia.org/wiki/Julian_day) expressed as an integer or floating point value. Format 12 might also be interpreted as a unix timestamp if it is immediately followed either the ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod) modifier. Formats 2 through 10 may be optionally followed by a timezone indicator of the form "_\\[+-\\]HH:MM_" or just "_Z_". The date and time functions use UTC or "zulu" time internally, and so the "Z" suffix is a no-op. Any non-zero "HH:MM" suffix is subtracted from the indicated date and time in order to compute zulu time. For example, all of the following time-values are equivalent: 2013-10-07 08:23:19.120  
2013-10-07T08:23:19.120Z  
2013-10-07 04:23:19.120-04:00  
2456572.84952685 In formats 4, 7, and 10, the fractional seconds value SS.SSS can have one or more digits following the decimal point. Exactly three digits are shown in the examples because only the first three digits are significant to the result, but the input string can have fewer or more than three digits and the date/time functions will still operate correctly. Similarly, format 12 is shown with 10 significant digits, but the date/time functions will really accept as many or as few digits as are necessary to represent the Julian day number. [ISO-8601](http://www.w3c.org/TR/NOTE-datetime) supports a wide variety of alternative date/time formats, but SQLite only supports the ones specifically enumerated above. In all functions other than timediff(), the time-value (and all modifiers) may be omitted, in which case a time value of 'now' is assumed. 3\\. ModifiersFor all date/time functions other than timediff(), the time-value argument can be followed by zero or more modifiers that alter date and/or time. Each modifier is a transformation that is applied to the time-value to its left. Modifiers are applied from left to right; order is important. The available modifiers are as follows.*   NNN days
*   NNN hours
*   NNN minutes
*   NNN seconds
*   NNN months
*   NNN years
*   \xB1HH:MM
*   \xB1HH:MM:SS
*   \xB1HH:MM:SS.SSS
*   \xB1YYYY-MM-DD
*   \xB1YYYY-MM-DD HH:MM
*   \xB1YYYY-MM-DD HH:MM:SS
*   \xB1YYYY-MM-DD HH:MM:SS.SSS
*   ceiling
*   floor
*   start of month
*   start of year
*   start of day
*   weekday N
*   unixepoch
*   julianday
*   auto
*   localtime
*   utc
*   subsec
*   subsecond
The first thirteen modifiers (1 through 13) add the specified amount of time to the date and time specified by the arguments to its left. The 's' character at the end of the modifier names in 1 through 6 is optional. The NNN value can be any floating point number, with an optional '+' or '-' prefix. The **time shift modifiers** (7 through 13) move the time-value by the number of years, months, days, hours, minutes, and/or seconds specified. An initial "+" or "-" is required for formats 10 through 13 but is optional for formats 7, 8, and 9. The changes are applies from left to right. First the year is shifted by YYYY, then the month by MM, and then day by DD, and so forth. The timediff(A,B) function returns a time shift in format 13 that shifts the time-value B into A.Because the length of a month or year changes from one month or year to the next, ambiguities can arise when shifting a date by months and/or years. For example, what is the date one year after 2024-02-29? Is it 2025-02-28 or 2025-03-01? Or what is the date that is two months after 2023-12-31? Is it 2024-02-29 or 2024-03-02? There is no consensus on how to resolve this ambiguity, so the "**ceiling**" and "**floor**" modifiers (14 and 15) are available to let the programmer decide. If the next modifier after a time shift is "ceiling", then any ambiguity in the date is resolved by choosing the later date. The "floor" modifier resolves ambiguities by resolving to the last day of the previous month. The default behavior is "ceiling". The "**start of**" modifiers (16 through 18) shift the date backwards to the beginning of the subject month, year or day.The "**weekday**" modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the "weekday" modifier leaves the date unchanged. The "**unixepoch**" modifier (20) only works if it immediately follows a time-value in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as [Unix Time](http://en.wikipedia.org/wiki/Unix_time) - the number of seconds since 1970. If the "unixepoch" modifier does not follow a time-value of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the "unixepoch" modifier from prior DDDDDDDDDD then the behavior is undefined. The "**julianday**" modifier must immediately follow the initial time-value which must be of the form DDDDDDDDD. Any other use of the 'julianday' modifier is an error and causes the function to return NULL. The 'julianday' modifier forces the time-value number to be interpreted as a julian-day number. As this is the default behavior, the 'julianday' modifier is scarcely more than a no-op. The only difference is that adding 'julianday' forces the DDDDDDDDD time-value format, and causes a NULL to be returned if any other time-value format is used. The "**auto**" modifier must immediately follow the initial time-value. If the time-value is numeric (the DDDDDDDDDD format) then the 'auto' modifier causes the time-value to interpreted as either a julian day number or a unix timestamp, depending on its magnitude. If the value is between 0.0 and 5373484.499999, then it is interpreted as a julian day number (corresponding to dates between -4713-11-24 12:00:00 and 9999-12-31 23:59:59, inclusive). For numeric values outside of the range of valid julian day numbers, but within the range of -210866760000 to 253402300799, the 'auto' modifier causes the value to be interpreted as a unix timestamp. Other numeric values are out of range and cause a NULL return. The 'auto' modifier is a no-op for ISO 8601 text time-values. The "auto" modifier is designed to work with time-values even in cases where it is not known which time-value format is stored in the database file, or in cases where the same column stores time-values in different formats on different rows. The 'auto' modifier will automatically select the appropriate format. However, there is some ambiguity. Unix timestamps for the first 63 days of 1970 will be interpreted as julian day numbers. The 'auto' modifier is very useful when the dataset is guaranteed to contain no dates within that range, but should be avoided for applications that might make use of dates in the opening months of 1970. The "**localtime**" modifier assumes the time-value to its left is in Universal Coordinated Time (UTC) and adjusts that time value so that it is in localtime. If "localtime" follows a time that is not UTC, then the behavior is undefined. The "**utc**" modifier is the opposite of "localtime". "utc" assumes that the time-value to its left is in the local timezone and adjusts that time-value to be in UTC. If the time to the left is not in localtime, then the result of "utc" is undefined. The "**subsecond**" modifier (which may be abbreviated as just "**subsec**") increases the resolution of the output for [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm), [time()](https://www.sqlite.org/lang_datefunc.html#dttm), and [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), and for the "%s" format string in [strftime()](https://www.sqlite.org/lang_datefunc.html#strftm). The "subsecond" modifier has no effect on other date/time functions. The current implemention increases the resolution from seconds to milliseconds, but this might increase to a higher resolution in future releases of SQLite. When "subsec" is used with [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm) or [time()](https://www.sqlite.org/lang_datefunc.html#dttm), the seconds field at the end is followed by a decimal point and one or more digits to show fractional seconds. When "subsec" is used with [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), the result is a floating point value which is the number of seconds and fractional seconds since 1970-01-01. The "subsecond" and "subsec" modifiers have the special property that they can occur as the first argument to date/time functions (or as the first argument after the format string for strftime()). When this happens, the time-value that is normally in the first argument is understood to be "now". For example, a short cut to get the current time in seconds since 1970 with millisecond precision is to say: SELECT unixepoch('subsec'); 4\\. ExamplesCompute the current date. SELECT date();Compute the last day of the current month.SELECT date('now','start of month','+1 month','-1 day'); Compute the date and time given a unix timestamp 1092941466. SELECT datetime(1092941466, 'unixepoch');  
SELECT datetime(1092941466, 'auto'); -- Does not work for early 1970! Compute the date and time given a unix timestamp 1092941466, and compensate for your local timezone. SELECT datetime(1092941466, 'unixepoch', 'localtime'); Compute the current unix timestamp. SELECT unixepoch();  
SELECT strftime('%s'); Compute the number of days since the signing of the US Declaration of Independence. SELECT julianday('now') - julianday('1776-07-04'); Compute the number of seconds since a particular moment in 2004: SELECT unixepoch() - unixepoch('2004-01-01 02:34:56'); Compute the date of the first Tuesday in October for the current year. SELECT date('now','start of year','+9 months','weekday 2'); Compute the time since the unix epoch in seconds with millisecond precision: SELECT (julianday('now') - 2440587.5)\\*86400.0;  
SELECT unixepoch('now','subsec'); Compute how old Abraham Lincoln would be if he were still alive today: SELECT timediff('now','1809-02-12'); 5\\. Caveats And BugsThe computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime\\_r() is used to assist in the calculation of local time. The localtime\\_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.These functions only work for dates between 0000-01-01 00:00:00 and 9999-12-31 23:59:59 (julian day numbers 1721059.5 through 5373484.5). For dates outside that range, the results of these functions are undefined.Non-Vista Windows platforms only support one set of DST rules. Vista only supports two. Therefore, on these platforms, historical DST calculations will be incorrect. For example, in the US, in 2007 the DST rules changed. Non-Vista Windows platforms apply the new 2007 DST rules to all previous years as well. Vista does somewhat better getting results correct back to 1986, when the rules were also changed.All internal computations assume the [Gregorian calendar](http://en.wikipedia.org/wiki/Gregorian_calendar) system. They also assume that every day is exactly 86400 seconds in duration; no leap seconds are incorporated.`},timediff:{args:"(time-value, time-value)",docs:`1\\. Overview SQLite supports seven [scalar](https://www.sqlite.org/lang_corefunc.html) date and time functions as follows:*   **date(**_time-value, modifier, modifier, ..._**)**
*   **time(**_time-value, modifier, modifier, ..._**)**
*   **datetime(**_time-value, modifier, modifier, ..._**)**
*   **julianday(**_time-value, modifier, modifier, ..._**)**
*   **unixepoch(**_time-value, modifier, modifier, ..._**)**
*   **strftime(**_format, time-value, modifier, modifier, ..._**)**
*   **timediff(**_time-value, time-value_**)**
The first six date and time functions take an optional [time-value](https://www.sqlite.org/lang_datefunc.html#tmval) as an argument, followed by zero or more [modifiers](https://www.sqlite.org/lang_datefunc.html#dtmods). The strftime() function also takes a format string as its first argument. The timediff() function takes exactly two arguments which are both [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). SQLite does not have a dedicated date/time datatype. Instead, date and time values can stored as any of the following:

<table border="0" cellspacing="0" cellpadding="0"><tbody><tr><td><a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a></td><td>A text string that is one of the ISO 8601 date/time values shown in <a href="about:blank#tmval">items 1 through 10 below</a>. Example: <tt>'2025-05-29 14:16:00'</tt></td></tr><tr><td><a href="http://en.wikipedia.org/wiki/Julian_day">Julian&nbsp;day&nbsp;number</a></td><td>The number of days including fractional days since -4713-11-24 12:00:00 Example: <tt>2460825.09444444</tt></td></tr><tr><td><a href="https://en.wikipedia.org/wiki/Unix_time">Unix timestamp</a></td><td>The number of seconds including fractional seconds since 1970-01-01 00:00:00 Example: <tt>1748528160</tt></td></tr></tbody></table>

These three formats are collectively known as [time-values](https://www.sqlite.org/lang_datefunc.html#tmval). All of the date time functions accept time-values as either ISO-8601 text or as Julian day numbers. They can also be made to accept unix timestamps by adding optional modifiers arguments ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod). Since the timediff() function does not accept modifiers, it can only use ISO-8601 and julian day number time-values. The **date()** function returns the date as text in this format: YYYY-MM-DD. The **time()** function returns the time as text in formatted as HH:MM:SS or as HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **datetime()** function returns the date and time formatted as YYYY-MM-DD HH:MM:SS or as YYYY-MM-DD HH:MM:SS.SSS if the [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) is used. The **julianday()** function returns the [Julian day](http://en.wikipedia.org/wiki/Julian_day) - the fractional number of days since noon in Greenwich on November 24, 4714 B.C. ([Proleptic Gregorian calendar](http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar)). The **unixepoch()** function returns a unix timestamp - the number of seconds since 1970-01-01 00:00:00 UTC. The unixepoch() function normally returns an integer number of seconds, but with the optional [subsec modifier](https://www.sqlite.org/lang_datefunc.html#subsec) it will return a floating point number which is the fractional number of seconds. The **strftime()** function returns the date formatted according to the format string specified as the first argument. The format string supports the most common substitutions found in the [strftime() function](http://opengroup.org/onlinepubs/007908799/xsh/strftime.html) from the standard C library plus two new substitutions, %f and %J. The following is a complete list of valid strftime() substitutions as of version 3.46.0 (2024-05-23). Earlier versions of SQLite might not support all substitutions. If an undefined or unsupported substitution is seen, the result is NULL.

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td></td><td width="10"></td><td></td></tr><tr><td>%d</td><td></td><td>day of month: 01-31</td></tr><tr><td>%e</td><td></td><td>day of month without leading zero: 1-31</td></tr><tr><td>%f</td><td></td><td>fractional seconds: SS.SSS</td></tr><tr><td>%F</td><td></td><td>ISO 8601 date: YYYY-MM-DD</td></tr><tr><td>%G</td><td></td><td>ISO 8601 year corresponding to %V</td></tr><tr><td>%g</td><td></td><td>2-digit ISO 8601 year corresponding to %V</td></tr><tr><td>%H</td><td></td><td>hour: 00-24</td></tr><tr><td>%I</td><td></td><td>hour for 12-hour clock: 01-12</td></tr><tr><td>%j</td><td></td><td>day of year: 001-366</td></tr><tr><td>%J</td><td></td><td>Julian day number (fractional)</td></tr><tr><td>%k</td><td></td><td>hour without leading zero: 0-24</td></tr><tr><td>%l</td><td></td><td>%I without leading zero: 1-12</td></tr><tr><td>%m</td><td></td><td>month: 01-12</td></tr><tr><td>%M</td><td></td><td>minute: 00-59</td></tr><tr><td>%p</td><td></td><td>"AM" or "PM" depending on the hour</td></tr><tr><td>%P</td><td></td><td>"am" or "pm" depending on the hour</td></tr><tr><td>%R</td><td></td><td>ISO 8601 time: HH:MM</td></tr><tr><td>%s</td><td></td><td>seconds since 1970-01-01</td></tr><tr><td>%S</td><td></td><td>seconds: 00-59</td></tr><tr><td>%T</td><td></td><td>ISO 8601 time: HH:MM:SS</td></tr><tr><td>%U</td><td></td><td>week of year (00-53) - week 01 starts on the first Sunday</td></tr><tr><td>%u</td><td></td><td>day of week 1-7 with Monday==1</td></tr><tr><td>%V</td><td></td><td>ISO 8601 week of year</td></tr><tr><td>%w</td><td></td><td>day of week 0-6 with Sunday==0</td></tr><tr><td>%W</td><td></td><td>week of year (00-53) - week 01 starts on the first Monday</td></tr><tr><td>%Y</td><td></td><td>year: 0000-9999</td></tr><tr><td>%%</td><td></td><td>%</td></tr></tbody></table>

Other date and time functions can be expressed in terms of strftime():

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td><b>Function</b></td><td width="30"></td><td><b>Equivalent strftime()</b></td></tr><tr><td>date(...)</td><td></td><td>strftime('%F', ...)</td></tr><tr><td>time(...)</td><td></td><td>strftime('%T', ...)</td></tr><tr><td>datetime(...)</td><td></td><td>strftime('%F %T', ...)</td></tr><tr><td>julianday(...)</td><td></td><td><nobr>CAST(strftime('%J', ...) as REAL)</nobr></td></tr><tr><td>unixepoch(...)</td><td></td><td><nobr>CAST(strftime('%s', ...) as INT)</nobr></td></tr></tbody></table>

The date(), time(), and datetime() functions all return text, and so their strftime() equivalents are exact. However, the julianday() and unixepoch() functions return numeric values. Their strftime() equivalents return a string that is the text representation of the corresponding number. The main reasons for providing functions other than strftime() are for convenience and for efficiency. The julianday() and unixepoch() functions return real and integer values respectively, and do not incur the format conversion costs or inexactitude resulting from use of the '%J' or '%s' format specifiers with the strftime() function. The **timediff(A,B)** function returns a string that describes the amount of time that must be added to B in order to reach time A. The format of the timediff() result is designed to be human-readable. The format is: (+|-)YYYY-MM-DD HH:MM:SS.SSS This time difference string is also an allowed modifier for the other date/time functions. The following invariant holds for time-values A and B: datetime(A) = datetime(B, timediff(A,B)) The length of months and years vary. February is shorter than March. Leap years are longer than non-leap years. The output from timediff() takes this all into account. The timediff() function is intended to provide a human-friendly description of the time span. If you want to know the number of days or seconds between two dates, A and B, then you can always do one of these: SELECT julianday(B) - julianday(A);  
SELECT unixepoch(B) - unixepoch(A); The timediff(A,B) might return the same result even for values A and B that span a different number of days - depending on the starting date. For example, both of the following two timediff() calls return the same result ("-0000-01-00 00:00:00.000") even though the first timespan is 28 days and the seconds is 31 days: SELECT timediff('2023-02-15','2023-03-15');  
SELECT timediff('2023-03-15','2023-04-15'); Summary: If you want a human-friendly time span, use timediff(). If you want a precise time difference (in days or seconds) use the difference between two julianday() or unixepoch() calls. 2\\. Time ValuesA time-value can be in any of the following formats shown below. The value is usually a string, though it can be an integer or floating point number in the case of format 12.*   _YYYY-MM-DD_
*   _YYYY-MM-DD HH:MM_
*   _YYYY-MM-DD HH:MM:SS_
*   _YYYY-MM-DD HH:MM:SS.SSS_
*   _YYYY-MM-DD_**T**_HH:MM_
*   _YYYY-MM-DD_**T**_HH:MM:SS_
*   _YYYY-MM-DD_**T**_HH:MM:SS.SSS_
*   _HH:MM_
*   _HH:MM:SS_
*   _HH:MM:SS.SSS_
*   **now**
*   _DDDDDDDDDD_
In formats 5 through 7, the "T" is a literal character separating the date and the time, as required by [ISO-8601](http://www.w3c.org/TR/NOTE-datetime). Formats 8 through 10 that specify only a time assume a date of 2000-01-01. Format 11, the string 'now', is converted into the current date and time as obtained from the xCurrentTime method of the [sqlite3\\_vfs](https://www.sqlite.org/c3ref/vfs.html) object in use. The 'now' argument to date and time functions always returns exactly the same value for multiple invocations within the same [sqlite3\\_step()](https://www.sqlite.org/c3ref/step.html) call. [Universal Coordinated Time (UTC)](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) is used. Format 12 is the [Julian day number](http://en.wikipedia.org/wiki/Julian_day) expressed as an integer or floating point value. Format 12 might also be interpreted as a unix timestamp if it is immediately followed either the ['auto'](https://www.sqlite.org/lang_datefunc.html#automod) or ['unixepoch'](https://www.sqlite.org/lang_datefunc.html#jdmod) modifier. Formats 2 through 10 may be optionally followed by a timezone indicator of the form "_\\[+-\\]HH:MM_" or just "_Z_". The date and time functions use UTC or "zulu" time internally, and so the "Z" suffix is a no-op. Any non-zero "HH:MM" suffix is subtracted from the indicated date and time in order to compute zulu time. For example, all of the following time-values are equivalent: 2013-10-07 08:23:19.120  
2013-10-07T08:23:19.120Z  
2013-10-07 04:23:19.120-04:00  
2456572.84952685 In formats 4, 7, and 10, the fractional seconds value SS.SSS can have one or more digits following the decimal point. Exactly three digits are shown in the examples because only the first three digits are significant to the result, but the input string can have fewer or more than three digits and the date/time functions will still operate correctly. Similarly, format 12 is shown with 10 significant digits, but the date/time functions will really accept as many or as few digits as are necessary to represent the Julian day number. [ISO-8601](http://www.w3c.org/TR/NOTE-datetime) supports a wide variety of alternative date/time formats, but SQLite only supports the ones specifically enumerated above. In all functions other than timediff(), the time-value (and all modifiers) may be omitted, in which case a time value of 'now' is assumed. 3\\. ModifiersFor all date/time functions other than timediff(), the time-value argument can be followed by zero or more modifiers that alter date and/or time. Each modifier is a transformation that is applied to the time-value to its left. Modifiers are applied from left to right; order is important. The available modifiers are as follows.*   NNN days
*   NNN hours
*   NNN minutes
*   NNN seconds
*   NNN months
*   NNN years
*   \xB1HH:MM
*   \xB1HH:MM:SS
*   \xB1HH:MM:SS.SSS
*   \xB1YYYY-MM-DD
*   \xB1YYYY-MM-DD HH:MM
*   \xB1YYYY-MM-DD HH:MM:SS
*   \xB1YYYY-MM-DD HH:MM:SS.SSS
*   ceiling
*   floor
*   start of month
*   start of year
*   start of day
*   weekday N
*   unixepoch
*   julianday
*   auto
*   localtime
*   utc
*   subsec
*   subsecond
The first thirteen modifiers (1 through 13) add the specified amount of time to the date and time specified by the arguments to its left. The 's' character at the end of the modifier names in 1 through 6 is optional. The NNN value can be any floating point number, with an optional '+' or '-' prefix. The **time shift modifiers** (7 through 13) move the time-value by the number of years, months, days, hours, minutes, and/or seconds specified. An initial "+" or "-" is required for formats 10 through 13 but is optional for formats 7, 8, and 9. The changes are applies from left to right. First the year is shifted by YYYY, then the month by MM, and then day by DD, and so forth. The timediff(A,B) function returns a time shift in format 13 that shifts the time-value B into A.Because the length of a month or year changes from one month or year to the next, ambiguities can arise when shifting a date by months and/or years. For example, what is the date one year after 2024-02-29? Is it 2025-02-28 or 2025-03-01? Or what is the date that is two months after 2023-12-31? Is it 2024-02-29 or 2024-03-02? There is no consensus on how to resolve this ambiguity, so the "**ceiling**" and "**floor**" modifiers (14 and 15) are available to let the programmer decide. If the next modifier after a time shift is "ceiling", then any ambiguity in the date is resolved by choosing the later date. The "floor" modifier resolves ambiguities by resolving to the last day of the previous month. The default behavior is "ceiling". The "**start of**" modifiers (16 through 18) shift the date backwards to the beginning of the subject month, year or day.The "**weekday**" modifier advances the date forward, if necessary, to the next date where the weekday number is N. Sunday is 0, Monday is 1, and so forth. If the date is already on the desired weekday, the "weekday" modifier leaves the date unchanged. The "**unixepoch**" modifier (20) only works if it immediately follows a time-value in the DDDDDDDDDD format. This modifier causes the DDDDDDDDDD to be interpreted not as a Julian day number as it normally would be, but as [Unix Time](http://en.wikipedia.org/wiki/Unix_time) - the number of seconds since 1970. If the "unixepoch" modifier does not follow a time-value of the form DDDDDDDDDD which expresses the number of seconds since 1970 or if other modifiers separate the "unixepoch" modifier from prior DDDDDDDDDD then the behavior is undefined. The "**julianday**" modifier must immediately follow the initial time-value which must be of the form DDDDDDDDD. Any other use of the 'julianday' modifier is an error and causes the function to return NULL. The 'julianday' modifier forces the time-value number to be interpreted as a julian-day number. As this is the default behavior, the 'julianday' modifier is scarcely more than a no-op. The only difference is that adding 'julianday' forces the DDDDDDDDD time-value format, and causes a NULL to be returned if any other time-value format is used. The "**auto**" modifier must immediately follow the initial time-value. If the time-value is numeric (the DDDDDDDDDD format) then the 'auto' modifier causes the time-value to interpreted as either a julian day number or a unix timestamp, depending on its magnitude. If the value is between 0.0 and 5373484.499999, then it is interpreted as a julian day number (corresponding to dates between -4713-11-24 12:00:00 and 9999-12-31 23:59:59, inclusive). For numeric values outside of the range of valid julian day numbers, but within the range of -210866760000 to 253402300799, the 'auto' modifier causes the value to be interpreted as a unix timestamp. Other numeric values are out of range and cause a NULL return. The 'auto' modifier is a no-op for ISO 8601 text time-values. The "auto" modifier is designed to work with time-values even in cases where it is not known which time-value format is stored in the database file, or in cases where the same column stores time-values in different formats on different rows. The 'auto' modifier will automatically select the appropriate format. However, there is some ambiguity. Unix timestamps for the first 63 days of 1970 will be interpreted as julian day numbers. The 'auto' modifier is very useful when the dataset is guaranteed to contain no dates within that range, but should be avoided for applications that might make use of dates in the opening months of 1970. The "**localtime**" modifier assumes the time-value to its left is in Universal Coordinated Time (UTC) and adjusts that time value so that it is in localtime. If "localtime" follows a time that is not UTC, then the behavior is undefined. The "**utc**" modifier is the opposite of "localtime". "utc" assumes that the time-value to its left is in the local timezone and adjusts that time-value to be in UTC. If the time to the left is not in localtime, then the result of "utc" is undefined. The "**subsecond**" modifier (which may be abbreviated as just "**subsec**") increases the resolution of the output for [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm), [time()](https://www.sqlite.org/lang_datefunc.html#dttm), and [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), and for the "%s" format string in [strftime()](https://www.sqlite.org/lang_datefunc.html#strftm). The "subsecond" modifier has no effect on other date/time functions. The current implemention increases the resolution from seconds to milliseconds, but this might increase to a higher resolution in future releases of SQLite. When "subsec" is used with [datetime()](https://www.sqlite.org/lang_datefunc.html#dttm) or [time()](https://www.sqlite.org/lang_datefunc.html#dttm), the seconds field at the end is followed by a decimal point and one or more digits to show fractional seconds. When "subsec" is used with [unixepoch()](https://www.sqlite.org/lang_datefunc.html#uepch), the result is a floating point value which is the number of seconds and fractional seconds since 1970-01-01. The "subsecond" and "subsec" modifiers have the special property that they can occur as the first argument to date/time functions (or as the first argument after the format string for strftime()). When this happens, the time-value that is normally in the first argument is understood to be "now". For example, a short cut to get the current time in seconds since 1970 with millisecond precision is to say: SELECT unixepoch('subsec'); 4\\. ExamplesCompute the current date. SELECT date();Compute the last day of the current month.SELECT date('now','start of month','+1 month','-1 day'); Compute the date and time given a unix timestamp 1092941466. SELECT datetime(1092941466, 'unixepoch');  
SELECT datetime(1092941466, 'auto'); -- Does not work for early 1970! Compute the date and time given a unix timestamp 1092941466, and compensate for your local timezone. SELECT datetime(1092941466, 'unixepoch', 'localtime'); Compute the current unix timestamp. SELECT unixepoch();  
SELECT strftime('%s'); Compute the number of days since the signing of the US Declaration of Independence. SELECT julianday('now') - julianday('1776-07-04'); Compute the number of seconds since a particular moment in 2004: SELECT unixepoch() - unixepoch('2004-01-01 02:34:56'); Compute the date of the first Tuesday in October for the current year. SELECT date('now','start of year','+9 months','weekday 2'); Compute the time since the unix epoch in seconds with millisecond precision: SELECT (julianday('now') - 2440587.5)\\*86400.0;  
SELECT unixepoch('now','subsec'); Compute how old Abraham Lincoln would be if he were still alive today: SELECT timediff('now','1809-02-12'); 5\\. Caveats And BugsThe computation of local time depends heavily on the whim of politicians and is thus difficult to get correct for all locales. In this implementation, the standard C library function localtime\\_r() is used to assist in the calculation of local time. The localtime\\_r() C function normally only works for years between 1970 and 2037. For dates outside this range, SQLite attempts to map the year into an equivalent year within this range, do the calculation, then map the year back.These functions only work for dates between 0000-01-01 00:00:00 and 9999-12-31 23:59:59 (julian day numbers 1721059.5 through 5373484.5). For dates outside that range, the results of these functions are undefined.Non-Vista Windows platforms only support one set of DST rules. Vista only supports two. Therefore, on these platforms, historical DST calculations will be incorrect. For example, in the US, in 2007 the DST rules changed. Non-Vista Windows platforms apply the new 2007 DST rules to all previous years as well. Vista does somewhat better getting results correct back to 1986, when the rules were also changed.All internal computations assume the [Gregorian calendar](http://en.wikipedia.org/wiki/Gregorian_calendar) system. They also assume that every day is exactly 86400 seconds in duration; no leap seconds are incorporated.`},avg:{args:"(X)",docs:"The avg() function returns the average value of all non-NULL _X_ within a group. String and BLOB values that do not look like numbers are interpreted as 0. The result of avg() is always a floating point value whenever there is at least one non-NULL input even if all inputs are integers. The result of avg() is NULL if there are no non-NULL inputs. The result of avg() is computed as [total()](https://www.sqlite.org/lang_aggfunc.html#sumunc)/[count()](https://www.sqlite.org/lang_aggfunc.html#count) so all of the constraints that apply to [total()](https://www.sqlite.org/lang_aggfunc.html#sumunc) also apply to avg()."},count:{args:"(*)",docs:"The count(X) function returns a count of the number of times that _X_ is not NULL in a group. The count(\\*) function (with no arguments) returns the total number of rows in the group."},group_concat:{args:"(X,Y)",docs:`The group\\_concat() function returns a string which is the concatenation of all non-NULL values of _X_. If parameter _Y_ is present then it is used as the separator between instances of _X_.A comma (",") is used as the separator if _Y_ is omitted.

The string\\_agg(X,Y) function is an alias for group\\_concat(X,Y). String\\_agg() is compatible with PostgreSQL and SQL-Server and group\\_concat() is compatible with MySQL.

The order of the concatenated elements is arbitrary unless an ORDER BY argument is included immediately after the last parameter.`},string_agg:{args:"(X,Y)",docs:`The group\\_concat() function returns a string which is the concatenation of all non-NULL values of _X_. If parameter _Y_ is present then it is used as the separator between instances of _X_.A comma (",") is used as the separator if _Y_ is omitted.

The string\\_agg(X,Y) function is an alias for group\\_concat(X,Y). String\\_agg() is compatible with PostgreSQL and SQL-Server and group\\_concat() is compatible with MySQL.

The order of the concatenated elements is arbitrary unless an ORDER BY argument is included immediately after the last parameter.`},sum:{args:"(X)",docs:`The sum() and total() aggregate functions return the sum of all non-NULL values in the group. If there are no non-NULL input rows then sum() returns NULL but total() returns 0.0. NULL is not normally a helpful result for the sum of no rows but the SQL standard requires it and most other SQL database engines implement sum() that way so SQLite does it in the same way in order to be compatible. The non-standard total() function is provided as a convenient way to work around this design problem in the SQL language.

The result of total() is always a floating point value. The result of sum() is an integer value if all non-NULL inputs are integers. If any input to sum() is neither an integer nor a NULL, then sum() returns a floating point value which is an approximation of the mathematical sum.

Sum() will throw an "integer overflow" exception if all inputs are integers or NULL and an integer overflow occurs at any point during the computation. No overflow error is ever raised if any prior input was a floating point value. Total() never throws an integer overflow.

When summing floating-point values, if the magnitudes of the values differ wildly then the resulting sum might be imprecise due to the fact that [IEEE 754 floating point values are approximations](https://www.sqlite.org/floatingpoint.html#fpapprox). Use the decimal\\_sum(X) aggregate in the [decimal extension](https://www.sqlite.org/floatingpoint.html#decext) to obtain an exact summation of floating point numbers. Consider this test case:

> CREATE TABLE t1(x REAL);
> INSERT INTO t1 VALUES(1.55e+308),(1.23),(3.2e-16),(-1.23),(-1.55e308);
> SELECT sum(x), decimal\\_sum(x) FROM t1;

The large values \xB11.55e+308 cancel each other out, but the cancellation does not occur until the end of the sum and in the meantime the large +1.55e+308 swamps the tiny 3.2e-16 value. The end result is an imprecise result for the sum(). The decimal\\_sum() aggregate generates an exact answer, at the cost of additional CPU and memory usage. Note also that decimal\\_sum() is not built into the SQLite core; it is a [loadable extension](https://www.sqlite.org/loadext.html).

If sum of inputs is too large to represent as a IEEE 754 floating point value, then a +Infinity or -Infinity result may be returned. If very large values with differing signs are used such that the SUM() or TOTAL() function is unable to determine if the correct result is +Infinity or -Infinity or some other value in between, then the result is NULL. Hence, for example, the following query returns NULL:

> WITH t1(x) AS (VALUES(1.0),(-9e+999),(2.0),(+9e+999),(3.0))
>  SELECT sum(x) FROM t1;`},total:{args:"(X)",docs:`The sum() and total() aggregate functions return the sum of all non-NULL values in the group. If there are no non-NULL input rows then sum() returns NULL but total() returns 0.0. NULL is not normally a helpful result for the sum of no rows but the SQL standard requires it and most other SQL database engines implement sum() that way so SQLite does it in the same way in order to be compatible. The non-standard total() function is provided as a convenient way to work around this design problem in the SQL language.

The result of total() is always a floating point value. The result of sum() is an integer value if all non-NULL inputs are integers. If any input to sum() is neither an integer nor a NULL, then sum() returns a floating point value which is an approximation of the mathematical sum.

Sum() will throw an "integer overflow" exception if all inputs are integers or NULL and an integer overflow occurs at any point during the computation. No overflow error is ever raised if any prior input was a floating point value. Total() never throws an integer overflow.

When summing floating-point values, if the magnitudes of the values differ wildly then the resulting sum might be imprecise due to the fact that [IEEE 754 floating point values are approximations](https://www.sqlite.org/floatingpoint.html#fpapprox). Use the decimal\\_sum(X) aggregate in the [decimal extension](https://www.sqlite.org/floatingpoint.html#decext) to obtain an exact summation of floating point numbers. Consider this test case:

> CREATE TABLE t1(x REAL);
> INSERT INTO t1 VALUES(1.55e+308),(1.23),(3.2e-16),(-1.23),(-1.55e308);
> SELECT sum(x), decimal\\_sum(x) FROM t1;

The large values \xB11.55e+308 cancel each other out, but the cancellation does not occur until the end of the sum and in the meantime the large +1.55e+308 swamps the tiny 3.2e-16 value. The end result is an imprecise result for the sum(). The decimal\\_sum() aggregate generates an exact answer, at the cost of additional CPU and memory usage. Note also that decimal\\_sum() is not built into the SQLite core; it is a [loadable extension](https://www.sqlite.org/loadext.html).

If sum of inputs is too large to represent as a IEEE 754 floating point value, then a +Infinity or -Infinity result may be returned. If very large values with differing signs are used such that the SUM() or TOTAL() function is unable to determine if the correct result is +Infinity or -Infinity or some other value in between, then the result is NULL. Hence, for example, the following query returns NULL:

> WITH t1(x) AS (VALUES(1.0),(-9e+999),(2.0),(+9e+999),(3.0))
>  SELECT sum(x) FROM t1;`},row_number:{args:"()",docs:"The number of the row within the current partition. Rows are numbered starting from 1 in the order defined by the ORDER BY clause in the window definition, or in arbitrary order otherwise."},rank:{args:"()",docs:"The row\\_number() of the first peer in each group - the rank of the current row with gaps. If there is no ORDER BY clause, then all rows are considered peers and this function always returns 1."},dense_rank:{args:"()",docs:"The number of the current row's peer group within its partition - the rank of the current row without gaps. Rows are numbered starting from 1 in the order defined by the ORDER BY clause in the window definition. If there is no ORDER BY clause, then all rows are considered peers and this function always returns 1."},percent_rank:{args:"()",docs:"Despite the name, this function always returns a value between 0.0 and 1.0 equal to (_rank_ - 1)/(_partition-rows_ - 1), where _rank_ is the value returned by built-in window function rank() and _partition-rows_ is the total number of rows in the partition. If the partition contains only one row, this function returns 0.0."},cume_dist:{args:"()",docs:"The cumulative distribution. Calculated as _row-number_/_partition-rows_, where _row-number_ is the value returned by row\\_number() for the last peer in the group and _partition-rows_ the number of rows in the partition."},ntile:{args:"(N)",docs:"Argument _N_ is handled as an integer. This function divides the partition into N groups as evenly as possible and assigns an integer between 1 and _N_ to each group, in the order defined by the ORDER BY clause, or in arbitrary order otherwise. If necessary, larger groups occur first. This function returns the integer value assigned to the group that the current row is a part of."},lag:{args:"(expr, offset, default)",docs:`The first form of the lag() function returns the result of evaluating expression _expr_ against the previous row in the partition. Or, if there is no previous row (because the current row is the first), NULL.

If the _offset_ argument is provided, then it must be a non-negative integer. In this case the value returned is the result of evaluating _expr_ against the row _offset_ rows before the current row within the partition. If _offset_ is 0, then _expr_ is evaluated against the current row. If there is no row _offset_ rows before the current row, NULL is returned.

If _default_ is also provided, then it is returned instead of NULL if the row identified by _offset_ does not exist.`},lead:{args:"(expr, offset, default)",docs:`The first form of the lead() function returns the result of evaluating expression _expr_ against the next row in the partition. Or, if there is no next row (because the current row is the last), NULL.

If the _offset_ argument is provided, then it must be a non-negative integer. In this case the value returned is the result of evaluating _expr_ against the row _offset_ rows after the current row within the partition. If _offset_ is 0, then _expr_ is evaluated against the current row. If there is no row _offset_ rows after the current row, NULL is returned.

If _default_ is also provided, then it is returned instead of NULL if the row identified by _offset_ does not exist.`},first_value:{args:"(expr)",docs:"This built-in window function calculates the window frame for each row in the same way as an aggregate window function. It returns the value of _expr_ evaluated against the first row in the window frame for each row."},last_value:{args:"(expr)",docs:"This built-in window function calculates the window frame for each row in the same way as an aggregate window function. It returns the value of _expr_ evaluated against the last row in the window frame for each row."},nth_value:{args:"(expr, N)",docs:"This built-in window function calculates the window frame for each row in the same way as an aggregate window function. It returns the value of _expr_ evaluated against the row _N_ of the window frame. Rows are numbered within the window frame starting from 1 in the order defined by the ORDER BY clause if one is present, or in arbitrary order otherwise. If there is no _N_th row in the partition, then NULL is returned."},acos:{args:"(X)",docs:"Return the arccosine of X. The result is in radians."},acosh:{args:"(X)",docs:"Return the hyperbolic arccosine of X."},asin:{args:"(X)",docs:"Return the arcsine of X. The result is in radians."},asinh:{args:"(X)",docs:"Return the hyperbolic arcsine of X."},atan:{args:"(X)",docs:"Return the arctangent of X. The result is in radians."},atan2:{args:"(Y,X)",docs:"Return the arctangent of Y/X. The result is in radians. The result is placed into correct quadrant depending on the signs of X and Y."},atanh:{args:"(X)",docs:"Return the hyperbolic arctangent of X."},ceil:{args:"(X)",docs:"Return the first representable integer value greater than or equal to X. For positive values of X, this routine rounds away from zero. For negative values of X, this routine rounds toward zero."},ceiling:{args:"(X)",docs:"Return the first representable integer value greater than or equal to X. For positive values of X, this routine rounds away from zero. For negative values of X, this routine rounds toward zero."},cos:{args:"(X)",docs:"Return the cosine of X. X is in radians."},cosh:{args:"(X)",docs:"Return the hyperbolic cosine of X."},degrees:{args:"(X)",docs:"Convert value X from radians into degrees."},exp:{args:"(X)",docs:"Compute _e_ (Euler's number, approximately 2.71828182845905) raised to the power X."},floor:{args:"(X)",docs:"Return the first representable integer value less than or equal to X. For positive numbers, this function rounds toward zero. For negative numbers, this function rounds away from zero."},ln:{args:"(X)",docs:"Return the natural logarithm of X."},log:{args:"(B,X)",docs:`Return the base-10 logarithm for X. Or, for the two-argument version, return the base-B logarithm of X.

Compatibility note: SQLite works like PostgreSQL in that the log() function computes a base-10 logarithm. Most other SQL database engines compute a natural logarithm for log(). In the two-argument version of log(B,X), the first argument is the base and the second argument is the operand. This is the same as in PostgreSQL and MySQL, but is reversed from SQL Server which uses the second argument as the base and the first argument as the operand.`},log10:{args:"(X)",docs:`Return the base-10 logarithm for X. Or, for the two-argument version, return the base-B logarithm of X.

Compatibility note: SQLite works like PostgreSQL in that the log() function computes a base-10 logarithm. Most other SQL database engines compute a natural logarithm for log(). In the two-argument version of log(B,X), the first argument is the base and the second argument is the operand. This is the same as in PostgreSQL and MySQL, but is reversed from SQL Server which uses the second argument as the base and the first argument as the operand.`},log2:{args:"(X)",docs:"Return the logarithm base-2 for the number X."},mod:{args:"(X,Y)",docs:"Return the remainder after dividing X by Y. This is similar to the '%' operator, except that it works for non-integer arguments."},pi:{args:"()",docs:"Return an approximation for \u03C0."},pow:{args:"(X,Y)",docs:"Compute X raised to the power Y."},power:{args:"(X,Y)",docs:"Compute X raised to the power Y."},radians:{args:"(X)",docs:"Convert X from degrees into radians."},sin:{args:"(X)",docs:"Return the sine of X. X is in radians."},sinh:{args:"(X)",docs:"Return the hyperbolic sine of X."},sqrt:{args:"(X)",docs:"Return the square root of X. NULL is returned if X is negative."},tan:{args:"(X)",docs:"Return the tangent of X. X is in radians."},tanh:{args:"(X)",docs:"Return the hyperbolic tangent of X."},trunc:{args:"(X)",docs:"Return the representable integer in between X and 0 (inclusive) that is furthest away from zero. Or, in other words, return the integer part of X, rounding toward zero. The trunc() function is similar to [ceiling(X)](https://www.sqlite.org/lang_mathfunc.html#ceil) and [floor(X)](https://www.sqlite.org/lang_mathfunc.html#floor) except that it always rounds toward zero whereas ceiling(X) and floor(X) round up and down, respectively."},json:{args:"(json)",docs:`The json(X) function verifies that its argument X is a valid JSON string or JSONB blob and returns a minified version of that JSON string with all unnecessary whitespace removed. If X is not a well-formed JSON string or JSONB blob, then this routine throws an error. If the input is JSON5 text, then it is converted into canonical RFC-8259 text prior to being returned. If the argument X to json(X) contains JSON objects with duplicate labels, then it is undefined whether or not the duplicates are preserved. The current implementation preserves duplicates. However, future enhancements to this routine may choose to silently remove duplicates. Example:*   json(' { "this" : "is", "a": \\[ "test" \\] } ') \u2192 '{"this":"is","a":\\["test"\\]}'`},jsonb:{args:"(json)",docs:`The json(X) function verifies that its argument X is a valid JSON string or JSONB blob and returns a minified version of that JSON string with all unnecessary whitespace removed. If X is not a well-formed JSON string or JSONB blob, then this routine throws an error. If the input is JSON5 text, then it is converted into canonical RFC-8259 text prior to being returned. If the argument X to json(X) contains JSON objects with duplicate labels, then it is undefined whether or not the duplicates are preserved. The current implementation preserves duplicates. However, future enhancements to this routine may choose to silently remove duplicates. Example:*   json(' { "this" : "is", "a": \\[ "test" \\] } ') \u2192 '{"this":"is","a":\\["test"\\]}'`},json_array:{args:"(value1, value2, ...)",docs:`The json\\_array() SQL function accepts zero or more arguments and returns a well-formed JSON array that is composed from those arguments. If any argument to json\\_array() is a BLOB then an error is thrown. An argument with SQL type TEXT is normally converted into a quoted JSON string. However, if the argument is the output from another json1 function, then it is stored as JSON. This allows calls to json\\_array() and [json\\_object()](https://www.sqlite.org/json1.html#jobj) to be nested. The [json()](https://www.sqlite.org/json1.html#jmini) function can also be used to force strings to be recognized as JSON. Examples:*   json\\_array(1,2,'3',4) \u2192 '\\[1,2,"3",4\\]'
*   json\\_array('\\[1,2\\]') \u2192 '\\["\\[1,2\\]"\\]'
*   json\\_array(json\\_array(1,2)) \u2192 '\\[\\[1,2\\]\\]'
*   json\\_array(1,null,'3','\\[4,5\\]','{"six":7.7}') \u2192 '\\[1,null,"3","\\[4,5\\]","{\\\\"six\\\\":7.7}"\\]'
*   json\\_array(1,null,'3',json('\\[4,5\\]'),json('{"six":7.7}')) \u2192 '\\[1,null,"3",\\[4,5\\],{"six":7.7}\\]'`},jsonb_array:{args:"(value1, value2, ...)",docs:`The json\\_array() SQL function accepts zero or more arguments and returns a well-formed JSON array that is composed from those arguments. If any argument to json\\_array() is a BLOB then an error is thrown. An argument with SQL type TEXT is normally converted into a quoted JSON string. However, if the argument is the output from another json1 function, then it is stored as JSON. This allows calls to json\\_array() and [json\\_object()](https://www.sqlite.org/json1.html#jobj) to be nested. The [json()](https://www.sqlite.org/json1.html#jmini) function can also be used to force strings to be recognized as JSON. Examples:*   json\\_array(1,2,'3',4) \u2192 '\\[1,2,"3",4\\]'
*   json\\_array('\\[1,2\\]') \u2192 '\\["\\[1,2\\]"\\]'
*   json\\_array(json\\_array(1,2)) \u2192 '\\[\\[1,2\\]\\]'
*   json\\_array(1,null,'3','\\[4,5\\]','{"six":7.7}') \u2192 '\\[1,null,"3","\\[4,5\\]","{\\\\"six\\\\":7.7}"\\]'
*   json\\_array(1,null,'3',json('\\[4,5\\]'),json('{"six":7.7}')) \u2192 '\\[1,null,"3",\\[4,5\\],{"six":7.7}\\]'`},json_array_length:{args:"(json, path?)",docs:`The json\\_array\\_length(X) function returns the number of elements in the JSON array X, or 0 if X is some kind of JSON value other than an array. The json\\_array\\_length(X,P) locates the array at path P within X and returns the length of that array, or 0 if path P locates an element in X that is not a JSON array, and NULL if path P does not locate any element of X. Errors are thrown if either X is not well-formed JSON or if P is not a well-formed path. Examples:*   json\\_array\\_length('\\[1,2,3,4\\]') \u2192 4
*   json\\_array\\_length('\\[1,2,3,4\\]', '$') \u2192 4
*   json\\_array\\_length('\\[1,2,3,4\\]', '$\\[2\\]') \u2192 0
*   json\\_array\\_length('{"one":\\[1,2,3\\]}') \u2192 0
*   json\\_array\\_length('{"one":\\[1,2,3\\]}', '$.one') \u2192 3
*   json\\_array\\_length('{"one":\\[1,2,3\\]}', '$.two') \u2192 NULL`},json_error_position:{args:"(json)",docs:"The json\\_error\\_position(X) function returns 0 if the input X is a well-formed JSON or JSON5 string. If the input X contains one or more syntax errors, then this function returns the character position of the first syntax error. The left-most character is position 1. If the input X is a BLOB, then this routine returns 0 if X is a well-formed JSONB blob. If the return value is positive, then it represents the _approximate_ 1-based position in the BLOB of the first detected error. The json\\_error\\_position() function was added with SQLite version 3.42.0 (2023-05-16)."},json_extract:{args:"(json, path1, path2, ...)",docs:`The json\\_extract(X,P1,P2,...) extracts and returns one or more values from the well-formed JSON at X. If only a single path P1 is provided, then the SQL datatype of the result is NULL for a JSON null, INTEGER or REAL for a JSON numeric value, an INTEGER zero for a JSON false value, an INTEGER one for a JSON true value, the dequoted text for a JSON string value, and a text representation for JSON object and array values. If there are multiple path arguments (P1, P2, and so forth) then this routine returns SQLite text which is a well-formed JSON array holding the various values. Examples:*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$') \u2192 '{"a":2,"c":\\[4,5,{"f":7}\\]}'
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.c') \u2192 '\\[4,5,{"f":7}\\]'
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.c\\[2\\]') \u2192 '{"f":7}'
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.c\\[2\\].f') \u2192 7
*   json\\_extract('{"a":2,"c":\\[4,5\\],"f":7}','$.c','$.a') \u2192 '\\[\\[4,5\\],2\\]'
*   json\\_extract('{"a":2,"c":\\[4,5\\],"f":7}','$.c\\[#-1\\]') \u2192 5
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.x') \u2192 NULL
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.x', '$.a') \u2192 '\\[null,2\\]'
*   json\\_extract('{"a":"xyz"}', '$.a') \u2192 'xyz'
*   json\\_extract('{"a":null}', '$.a') \u2192 NULL
There is a subtle incompatibility between the json\\_extract() function in SQLite and the json\\_extract() function in MySQL. The MySQL version of json\\_extract() always returns JSON. The SQLite version of json\\_extract() only returns JSON if there are two or more PATH arguments (because the result is then a JSON array) or if the single PATH argument references an array or object. In SQLite, if json\\_extract() has only a single PATH argument and that PATH references a JSON null or a string or a numeric value, then json\\_extract() returns the corresponding SQL NULL, TEXT, INTEGER, or REAL value. The difference between MySQL json\\_extract() and SQLite json\\_extract() really only stands out when accessing individual values within the JSON that are strings or NULLs. The following table demonstrates the difference:

| Operation | SQLite Result | MySQL Result |
| --- | --- | --- |
| json\\_extract('{"a":null,"b":"xyz"}','$.a') | NULL | 'null' |
| json\\_extract('{"a":null,"b":"xyz"}','$.b') | 'xyz' | '"xyz"' |`},jsonb_extract:{args:"(json, path1, path2, ...)",docs:`The json\\_extract(X,P1,P2,...) extracts and returns one or more values from the well-formed JSON at X. If only a single path P1 is provided, then the SQL datatype of the result is NULL for a JSON null, INTEGER or REAL for a JSON numeric value, an INTEGER zero for a JSON false value, an INTEGER one for a JSON true value, the dequoted text for a JSON string value, and a text representation for JSON object and array values. If there are multiple path arguments (P1, P2, and so forth) then this routine returns SQLite text which is a well-formed JSON array holding the various values. Examples:*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$') \u2192 '{"a":2,"c":\\[4,5,{"f":7}\\]}'
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.c') \u2192 '\\[4,5,{"f":7}\\]'
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.c\\[2\\]') \u2192 '{"f":7}'
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.c\\[2\\].f') \u2192 7
*   json\\_extract('{"a":2,"c":\\[4,5\\],"f":7}','$.c','$.a') \u2192 '\\[\\[4,5\\],2\\]'
*   json\\_extract('{"a":2,"c":\\[4,5\\],"f":7}','$.c\\[#-1\\]') \u2192 5
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.x') \u2192 NULL
*   json\\_extract('{"a":2,"c":\\[4,5,{"f":7}\\]}', '$.x', '$.a') \u2192 '\\[null,2\\]'
*   json\\_extract('{"a":"xyz"}', '$.a') \u2192 'xyz'
*   json\\_extract('{"a":null}', '$.a') \u2192 NULL
There is a subtle incompatibility between the json\\_extract() function in SQLite and the json\\_extract() function in MySQL. The MySQL version of json\\_extract() always returns JSON. The SQLite version of json\\_extract() only returns JSON if there are two or more PATH arguments (because the result is then a JSON array) or if the single PATH argument references an array or object. In SQLite, if json\\_extract() has only a single PATH argument and that PATH references a JSON null or a string or a numeric value, then json\\_extract() returns the corresponding SQL NULL, TEXT, INTEGER, or REAL value. The difference between MySQL json\\_extract() and SQLite json\\_extract() really only stands out when accessing individual values within the JSON that are strings or NULLs. The following table demonstrates the difference:

| Operation | SQLite Result | MySQL Result |
| --- | --- | --- |
| json\\_extract('{"a":null,"b":"xyz"}','$.a') | NULL | 'null' |
| json\\_extract('{"a":null,"b":"xyz"}','$.b') | 'xyz' | '"xyz"' |`},json_insert:{args:"(json, path1, value1, path2, value2, ...)",docs:`The json\\_insert(), json\\_replace, and json\\_set() functions all take a single JSON value as their first argument followed by zero or more pairs of path and value arguments, and return a new JSON string formed by updating the input JSON by the path/value pairs. The functions differ only in how they deal with creating new values and overwriting preexisting values.

| Function | Overwrite if already exists? | Create if does not exist? |
| --- | --- | --- |
| json\\_insert() | No | Yes |
| json\\_replace() | Yes | No |
| json\\_set() | Yes | Yes |

The json\\_insert(), json\\_replace(), and json\\_set() functions always take an odd number of arguments. The first argument is always the original JSON to be edited. Subsequent arguments occur in pairs with the first element of each pair being a path and the second element being the value to insert or replace or set on that path. Edits occur sequentially from left to right. Changes caused by prior edits can affect the path search for subsequent edits. If the value of a path/value pair is an SQLite TEXT value, then it is normally inserted as a quoted JSON string, even if the string looks like valid JSON. However, if the value is the result of another json function (such as [json()](https://www.sqlite.org/json1.html#jmini) or [json\\_array()](https://www.sqlite.org/json1.html#jarray) or [json\\_object()](https://www.sqlite.org/json1.html#jobj)) or if it is the result of [the -> operator](https://www.sqlite.org/json1.html#jptr), then it is interpreted as JSON and is inserted as JSON retaining all of its substructure. Values that are the result of [the ->> operator](https://www.sqlite.org/json1.html#jptr) are always interpreted as TEXT and are inserted as a JSON string even if they look like valid JSON. These routines throw an error if the first JSON argument is not well-formed or if any PATH argument is not well-formed or if any argument is a BLOB. To append an element onto the end of an array, using json\\_insert() with an array index of "#". Examples:*   json\\_insert('\\[1,2,3,4\\]','$\\[#\\]',99) \u2192 '\\[1,2,3,4,99\\]'
*   json\\_insert('\\[1,\\[2,3\\],4\\]','$\\[1\\]\\[#\\]',99) \u2192 '\\[1,\\[2,3,99\\],4\\]'
Other examples:*   json\\_insert('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":2,"c":4}'
*   json\\_insert('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_replace('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_replace('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_set('{"a":2,"c":4}', '$.c', '\\[97,96\\]') \u2192 '{"a":2,"c":"\\[97,96\\]"}'
*   json\\_set('{"a":2,"c":4}', '$.c', json('\\[97,96\\]')) \u2192 '{"a":2,"c":\\[97,96\\]}'
*   json\\_set('{"a":2,"c":4}', '$.c', json\\_array(97,96)) \u2192 '{"a":2,"c":\\[97,96\\]}'`},json_set:{args:"(json, path1, value1, path2, value2, ...)",docs:`The json\\_insert(), json\\_replace, and json\\_set() functions all take a single JSON value as their first argument followed by zero or more pairs of path and value arguments, and return a new JSON string formed by updating the input JSON by the path/value pairs. The functions differ only in how they deal with creating new values and overwriting preexisting values.

| Function | Overwrite if already exists? | Create if does not exist? |
| --- | --- | --- |
| json\\_insert() | No | Yes |
| json\\_replace() | Yes | No |
| json\\_set() | Yes | Yes |

The json\\_insert(), json\\_replace(), and json\\_set() functions always take an odd number of arguments. The first argument is always the original JSON to be edited. Subsequent arguments occur in pairs with the first element of each pair being a path and the second element being the value to insert or replace or set on that path. Edits occur sequentially from left to right. Changes caused by prior edits can affect the path search for subsequent edits. If the value of a path/value pair is an SQLite TEXT value, then it is normally inserted as a quoted JSON string, even if the string looks like valid JSON. However, if the value is the result of another json function (such as [json()](https://www.sqlite.org/json1.html#jmini) or [json\\_array()](https://www.sqlite.org/json1.html#jarray) or [json\\_object()](https://www.sqlite.org/json1.html#jobj)) or if it is the result of [the -> operator](https://www.sqlite.org/json1.html#jptr), then it is interpreted as JSON and is inserted as JSON retaining all of its substructure. Values that are the result of [the ->> operator](https://www.sqlite.org/json1.html#jptr) are always interpreted as TEXT and are inserted as a JSON string even if they look like valid JSON. These routines throw an error if the first JSON argument is not well-formed or if any PATH argument is not well-formed or if any argument is a BLOB. To append an element onto the end of an array, using json\\_insert() with an array index of "#". Examples:*   json\\_insert('\\[1,2,3,4\\]','$\\[#\\]',99) \u2192 '\\[1,2,3,4,99\\]'
*   json\\_insert('\\[1,\\[2,3\\],4\\]','$\\[1\\]\\[#\\]',99) \u2192 '\\[1,\\[2,3,99\\],4\\]'
Other examples:*   json\\_insert('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":2,"c":4}'
*   json\\_insert('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_replace('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_replace('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_set('{"a":2,"c":4}', '$.c', '\\[97,96\\]') \u2192 '{"a":2,"c":"\\[97,96\\]"}'
*   json\\_set('{"a":2,"c":4}', '$.c', json('\\[97,96\\]')) \u2192 '{"a":2,"c":\\[97,96\\]}'
*   json\\_set('{"a":2,"c":4}', '$.c', json\\_array(97,96)) \u2192 '{"a":2,"c":\\[97,96\\]}'`},jsonb_insert:{args:"(json, path1, value1, path2, value2, ...)",docs:`The json\\_insert(), json\\_replace, and json\\_set() functions all take a single JSON value as their first argument followed by zero or more pairs of path and value arguments, and return a new JSON string formed by updating the input JSON by the path/value pairs. The functions differ only in how they deal with creating new values and overwriting preexisting values.

| Function | Overwrite if already exists? | Create if does not exist? |
| --- | --- | --- |
| json\\_insert() | No | Yes |
| json\\_replace() | Yes | No |
| json\\_set() | Yes | Yes |

The json\\_insert(), json\\_replace(), and json\\_set() functions always take an odd number of arguments. The first argument is always the original JSON to be edited. Subsequent arguments occur in pairs with the first element of each pair being a path and the second element being the value to insert or replace or set on that path. Edits occur sequentially from left to right. Changes caused by prior edits can affect the path search for subsequent edits. If the value of a path/value pair is an SQLite TEXT value, then it is normally inserted as a quoted JSON string, even if the string looks like valid JSON. However, if the value is the result of another json function (such as [json()](https://www.sqlite.org/json1.html#jmini) or [json\\_array()](https://www.sqlite.org/json1.html#jarray) or [json\\_object()](https://www.sqlite.org/json1.html#jobj)) or if it is the result of [the -> operator](https://www.sqlite.org/json1.html#jptr), then it is interpreted as JSON and is inserted as JSON retaining all of its substructure. Values that are the result of [the ->> operator](https://www.sqlite.org/json1.html#jptr) are always interpreted as TEXT and are inserted as a JSON string even if they look like valid JSON. These routines throw an error if the first JSON argument is not well-formed or if any PATH argument is not well-formed or if any argument is a BLOB. To append an element onto the end of an array, using json\\_insert() with an array index of "#". Examples:*   json\\_insert('\\[1,2,3,4\\]','$\\[#\\]',99) \u2192 '\\[1,2,3,4,99\\]'
*   json\\_insert('\\[1,\\[2,3\\],4\\]','$\\[1\\]\\[#\\]',99) \u2192 '\\[1,\\[2,3,99\\],4\\]'
Other examples:*   json\\_insert('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":2,"c":4}'
*   json\\_insert('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_replace('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_replace('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_set('{"a":2,"c":4}', '$.c', '\\[97,96\\]') \u2192 '{"a":2,"c":"\\[97,96\\]"}'
*   json\\_set('{"a":2,"c":4}', '$.c', json('\\[97,96\\]')) \u2192 '{"a":2,"c":\\[97,96\\]}'
*   json\\_set('{"a":2,"c":4}', '$.c', json\\_array(97,96)) \u2192 '{"a":2,"c":\\[97,96\\]}'`},jsonb_set:{args:"(json, path1, value1, path2, value2, ...)",docs:`The json\\_insert(), json\\_replace, and json\\_set() functions all take a single JSON value as their first argument followed by zero or more pairs of path and value arguments, and return a new JSON string formed by updating the input JSON by the path/value pairs. The functions differ only in how they deal with creating new values and overwriting preexisting values.

| Function | Overwrite if already exists? | Create if does not exist? |
| --- | --- | --- |
| json\\_insert() | No | Yes |
| json\\_replace() | Yes | No |
| json\\_set() | Yes | Yes |

The json\\_insert(), json\\_replace(), and json\\_set() functions always take an odd number of arguments. The first argument is always the original JSON to be edited. Subsequent arguments occur in pairs with the first element of each pair being a path and the second element being the value to insert or replace or set on that path. Edits occur sequentially from left to right. Changes caused by prior edits can affect the path search for subsequent edits. If the value of a path/value pair is an SQLite TEXT value, then it is normally inserted as a quoted JSON string, even if the string looks like valid JSON. However, if the value is the result of another json function (such as [json()](https://www.sqlite.org/json1.html#jmini) or [json\\_array()](https://www.sqlite.org/json1.html#jarray) or [json\\_object()](https://www.sqlite.org/json1.html#jobj)) or if it is the result of [the -> operator](https://www.sqlite.org/json1.html#jptr), then it is interpreted as JSON and is inserted as JSON retaining all of its substructure. Values that are the result of [the ->> operator](https://www.sqlite.org/json1.html#jptr) are always interpreted as TEXT and are inserted as a JSON string even if they look like valid JSON. These routines throw an error if the first JSON argument is not well-formed or if any PATH argument is not well-formed or if any argument is a BLOB. To append an element onto the end of an array, using json\\_insert() with an array index of "#". Examples:*   json\\_insert('\\[1,2,3,4\\]','$\\[#\\]',99) \u2192 '\\[1,2,3,4,99\\]'
*   json\\_insert('\\[1,\\[2,3\\],4\\]','$\\[1\\]\\[#\\]',99) \u2192 '\\[1,\\[2,3,99\\],4\\]'
Other examples:*   json\\_insert('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":2,"c":4}'
*   json\\_insert('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_replace('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_replace('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_set('{"a":2,"c":4}', '$.c', '\\[97,96\\]') \u2192 '{"a":2,"c":"\\[97,96\\]"}'
*   json\\_set('{"a":2,"c":4}', '$.c', json('\\[97,96\\]')) \u2192 '{"a":2,"c":\\[97,96\\]}'
*   json\\_set('{"a":2,"c":4}', '$.c', json\\_array(97,96)) \u2192 '{"a":2,"c":\\[97,96\\]}'`},json_object:{args:"(label1, value1, label2, value2, ...)",docs:`The json\\_object() SQL function accepts zero or more pairs of arguments and returns a well-formed JSON object that is composed from those arguments. The first argument of each pair is the label and the second argument of each pair is the value. If any argument to json\\_object() is a BLOB then an error is thrown. The json\\_object() function currently allows duplicate labels without complaint, though this might change in a future enhancement. An argument with SQL type TEXT it is normally converted into a quoted JSON string even if the input text is well-formed JSON. However, if the argument is the direct result from another JSON function or [the -> operator](https://www.sqlite.org/json1.html#jptr) (but not [the ->> operator](https://www.sqlite.org/json1.html#jptr)), then it is treated as JSON and all of its JSON type information and substructure is preserved. This allows calls to json\\_object() and [json\\_array()](https://www.sqlite.org/json1.html#jarray) to be nested. The [json()](https://www.sqlite.org/json1.html#jmini) function can also be used to force strings to be recognized as JSON. Examples:*   json\\_object('a',2,'c',4) \u2192 '{"a":2,"c":4}'
*   json\\_object('a',2,'c','{e:5}') \u2192 '{"a":2,"c":"{e:5}"}'
*   json\\_object('a',2,'c',json\\_object('e',5)) \u2192 '{"a":2,"c":{"e":5}}'`},jsonb_object:{args:"(label1, value1, label2, value2, ...)",docs:`The json\\_object() SQL function accepts zero or more pairs of arguments and returns a well-formed JSON object that is composed from those arguments. The first argument of each pair is the label and the second argument of each pair is the value. If any argument to json\\_object() is a BLOB then an error is thrown. The json\\_object() function currently allows duplicate labels without complaint, though this might change in a future enhancement. An argument with SQL type TEXT it is normally converted into a quoted JSON string even if the input text is well-formed JSON. However, if the argument is the direct result from another JSON function or [the -> operator](https://www.sqlite.org/json1.html#jptr) (but not [the ->> operator](https://www.sqlite.org/json1.html#jptr)), then it is treated as JSON and all of its JSON type information and substructure is preserved. This allows calls to json\\_object() and [json\\_array()](https://www.sqlite.org/json1.html#jarray) to be nested. The [json()](https://www.sqlite.org/json1.html#jmini) function can also be used to force strings to be recognized as JSON. Examples:*   json\\_object('a',2,'c',4) \u2192 '{"a":2,"c":4}'
*   json\\_object('a',2,'c','{e:5}') \u2192 '{"a":2,"c":"{e:5}"}'
*   json\\_object('a',2,'c',json\\_object('e',5)) \u2192 '{"a":2,"c":{"e":5}}'`},json_patch:{args:"(json1, json2)",docs:`The json\\_patch(T,P) SQL function runs the [RFC-7396](https://tools.ietf.org/html/rfc7396) MergePatch algorithm to apply patch P against input T. The patched copy of T is returned. MergePatch can add, modify, or delete elements of a JSON Object, and so for JSON Objects, the json\\_patch() routine is a generalized replacement for [json\\_set()](https://www.sqlite.org/json1.html#jset) and [json\\_remove()](https://www.sqlite.org/json1.html#jrm). However, MergePatch treats JSON Array objects as atomic. MergePatch cannot append to an Array nor modify individual elements of an Array. It can only insert, replace, or delete the whole Array as a single unit. Hence, json\\_patch() is not as useful when dealing with JSON that includes Arrays, especially Arrays with lots of substructure. Examples:*   json\\_patch('{"a":1,"b":2}','{"c":3,"d":4}') \u2192 '{"a":1,"b":2,"c":3,"d":4}'
*   json\\_patch('{"a":\\[1,2\\],"b":2}','{"a":9}') \u2192 '{"a":9,"b":2}'
*   json\\_patch('{"a":\\[1,2\\],"b":2}','{"a":null}') \u2192 '{"b":2}'
*   json\\_patch('{"a":1,"b":2}','{"a":9,"b":null,"c":8}') \u2192 '{"a":9,"c":8}'
*   json\\_patch('{"a":{"x":1,"y":2},"b":3}','{"a":{"y":9},"c":8}') \u2192 '{"a":{"x":1,"y":9},"b":3,"c":8}'`},jsonb_patch:{args:"(json1, json2)",docs:`The json\\_patch(T,P) SQL function runs the [RFC-7396](https://tools.ietf.org/html/rfc7396) MergePatch algorithm to apply patch P against input T. The patched copy of T is returned. MergePatch can add, modify, or delete elements of a JSON Object, and so for JSON Objects, the json\\_patch() routine is a generalized replacement for [json\\_set()](https://www.sqlite.org/json1.html#jset) and [json\\_remove()](https://www.sqlite.org/json1.html#jrm). However, MergePatch treats JSON Array objects as atomic. MergePatch cannot append to an Array nor modify individual elements of an Array. It can only insert, replace, or delete the whole Array as a single unit. Hence, json\\_patch() is not as useful when dealing with JSON that includes Arrays, especially Arrays with lots of substructure. Examples:*   json\\_patch('{"a":1,"b":2}','{"c":3,"d":4}') \u2192 '{"a":1,"b":2,"c":3,"d":4}'
*   json\\_patch('{"a":\\[1,2\\],"b":2}','{"a":9}') \u2192 '{"a":9,"b":2}'
*   json\\_patch('{"a":\\[1,2\\],"b":2}','{"a":null}') \u2192 '{"b":2}'
*   json\\_patch('{"a":1,"b":2}','{"a":9,"b":null,"c":8}') \u2192 '{"a":9,"c":8}'
*   json\\_patch('{"a":{"x":1,"y":2},"b":3}','{"a":{"y":9},"c":8}') \u2192 '{"a":{"x":1,"y":9},"b":3,"c":8}'`},json_pretty:{args:"()",docs:"The json\\_pretty() function works like [json()](https://www.sqlite.org/json1.html#jmini) except that it adds extra whitespace to make the JSON result easier for humans to read. The first argument is the JSON or JSONB that is to be pretty-printed. The optional second argument is a text string that is used for indentation. If the second argument is omitted or is NULL, then indentation is four spaces per level. The json\\_pretty() function was added with SQLite version 3.46.0 (2024-05-23)."},json_remove:{args:"(json, path, ...)",docs:`The json\\_remove(X,P,...) function takes a single JSON value as its first argument followed by zero or more path arguments. The json\\_remove(X,P,...) function returns a copy of the X parameter with all the elements identified by path arguments removed. Paths that select elements not found in X are silently ignored. Removals occurs sequentially from left to right. Changes caused by prior removals can affect the path search for subsequent arguments. If the json\\_remove(X) function is called with no path arguments, then it returns the input X reformatted, with excess whitespace removed. The json\\_remove() function throws an error if the first argument is not well-formed JSON or if any later argument is not a well-formed path. Examples:*   json\\_remove('\\[0,1,2,3,4\\]','$\\[2\\]') \u2192 '\\[0,1,3,4\\]'
*   json\\_remove('\\[0,1,2,3,4\\]','$\\[2\\]','$\\[0\\]') \u2192 '\\[1,3,4\\]'
*   json\\_remove('\\[0,1,2,3,4\\]','$\\[0\\]','$\\[2\\]') \u2192 '\\[1,2,4\\]'
*   json\\_remove('\\[0,1,2,3,4\\]','$\\[#-1\\]','$\\[0\\]') \u2192 '\\[1,2,3\\]'
*   json\\_remove('{"x":25,"y":42}') \u2192 '{"x":25,"y":42}'
*   json\\_remove('{"x":25,"y":42}','$.z') \u2192 '{"x":25,"y":42}'
*   json\\_remove('{"x":25,"y":42}','$.y') \u2192 '{"x":25}'
*   json\\_remove('{"x":25,"y":42}','$') \u2192 NULL`},jsonb_remove:{args:"(json, path, ...)",docs:`The json\\_remove(X,P,...) function takes a single JSON value as its first argument followed by zero or more path arguments. The json\\_remove(X,P,...) function returns a copy of the X parameter with all the elements identified by path arguments removed. Paths that select elements not found in X are silently ignored. Removals occurs sequentially from left to right. Changes caused by prior removals can affect the path search for subsequent arguments. If the json\\_remove(X) function is called with no path arguments, then it returns the input X reformatted, with excess whitespace removed. The json\\_remove() function throws an error if the first argument is not well-formed JSON or if any later argument is not a well-formed path. Examples:*   json\\_remove('\\[0,1,2,3,4\\]','$\\[2\\]') \u2192 '\\[0,1,3,4\\]'
*   json\\_remove('\\[0,1,2,3,4\\]','$\\[2\\]','$\\[0\\]') \u2192 '\\[1,3,4\\]'
*   json\\_remove('\\[0,1,2,3,4\\]','$\\[0\\]','$\\[2\\]') \u2192 '\\[1,2,4\\]'
*   json\\_remove('\\[0,1,2,3,4\\]','$\\[#-1\\]','$\\[0\\]') \u2192 '\\[1,2,3\\]'
*   json\\_remove('{"x":25,"y":42}') \u2192 '{"x":25,"y":42}'
*   json\\_remove('{"x":25,"y":42}','$.z') \u2192 '{"x":25,"y":42}'
*   json\\_remove('{"x":25,"y":42}','$.y') \u2192 '{"x":25}'
*   json\\_remove('{"x":25,"y":42}','$') \u2192 NULL`},json_type:{args:"(json, path?)",docs:`The json\\_type(X) function returns the "type" of the outermost element of X. The json\\_type(X,P) function returns the "type" of the element in X that is selected by path P. The "type" returned by json\\_type() is one of the following SQL text values: 'null', 'true', 'false', 'integer', 'real', 'text', 'array', or 'object'. If the path P in json\\_type(X,P) selects an element that does not exist in X, then this function returns NULL. The json\\_type() function throws an error if its first argument is not well-formed JSON or JSONB or if its second argument is not a well-formed JSON path. Examples:*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}') \u2192 'object'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$') \u2192 'object'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a') \u2192 'array'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a\\[0\\]') \u2192 'integer'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a\\[1\\]') \u2192 'real'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a\\[2\\]') \u2192 'true'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a\\[3\\]') \u2192 'false'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a\\[4\\]') \u2192 'null'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a\\[5\\]') \u2192 'text'
*   json\\_type('{"a":\\[2,3.5,true,false,null,"x"\\]}','$.a\\[6\\]') \u2192 NULL`},json_valid:{args:"(json)",docs:`The json\\_valid(X,Y) function return 1 if the argument X is well-formed JSON, or returns 0 if X is not well-formed. The Y parameter is an integer bitmask that defines what is meant by "well-formed". The following bits of Y are currently defined:*   **0x01** \u2192 The input is text that strictly complies with canonical RFC-8259 JSON, without any extensions.
*   **0x02** \u2192 The input is text that is JSON with [JSON5](https://www.sqlite.org/json1.html#json5) extensions described above.
*   **0x04** \u2192 The input is a BLOB that superficially appears to be [JSONB](https://www.sqlite.org/json1.html#jsonbx).
*   **0x08** \u2192 The input is a BLOB that strictly conforms to the internal [JSONB](https://www.sqlite.org/json1.html#jsonbx) format.
By combining bits, the following useful values of Y can be derived:*   **1** \u2192 X is RFC-8259 JSON text
*   **2** \u2192 X is [JSON5](https://www.sqlite.org/json1.html#json5) text
*   **4** \u2192 X is probably [JSONB](https://www.sqlite.org/json1.html#jsonbx)
*   **5** \u2192 X is RFC-8259 JSON text or [JSONB](https://www.sqlite.org/json1.html#jsonbx)
*   **6** \u2192 X is [JSON5](https://www.sqlite.org/json1.html#json5) text or [JSONB](https://www.sqlite.org/json1.html#jsonbx) \u2190 _This is probably the value you want_
*   **8** \u2192 X is strictly conforming [JSONB](https://www.sqlite.org/json1.html#jsonbx)
*   **9** \u2192 X is RFC-8259 or strictly conforming [JSONB](https://www.sqlite.org/json1.html#jsonbx)
*   **10** \u2192 X is JSON5 or strictly conforming [JSONB](https://www.sqlite.org/json1.html#jsonbx)
The Y parameter is optional. If omitted, it defaults to 1, which means that the default behavior is to return true only if the input X is strictly conforming RFC-8259 JSON text without any extensions. This makes the one-argument version of json\\_valid() compatible with older versions of SQLite, prior to the addition of support for [JSON5](https://www.sqlite.org/json1.html#json5) and [JSONB](https://www.sqlite.org/json1.html#jsonbx). The difference between 0x04 and 0x08 bits in the Y parameter is that 0x04 only examines the outer wrapper of the BLOB to see if it superficially looks like [JSONB](https://www.sqlite.org/json1.html#jsonbx). This is sufficient for must purposes and is very fast. The 0x08 bit does a thorough examination of all internal details of the BLOB. The 0x08 bit takes time that is linear in the size of the X input and is much slower. The 0x04 bit is recommended for most purposes. If you just want to know if a value is a plausible input to one of the other JSON functions, a Y value of 6 is probably what you want to use. Any Y value less than 1 or greater than 15 raises an error, for the latest version of json\\_valid(). However, future versions of json\\_valid() might be enhanced to accept flag values outside of this range, having new meanings that we have not yet thought of. If either X or Y inputs to json\\_valid() are NULL, then the function returns NULL. Examples:*   json\\_valid('{"x":35}') \u2192 1
*   json\\_valid('{x:35}') \u2192 0
*   json\\_valid('{x:35}',6) \u2192 1
*   json\\_valid('{"x":35') \u2192 0
*   json\\_valid(NULL) \u2192 NULL`},json_quote:{args:"(value)",docs:`The json\\_quote(X) function converts the SQL value X (a number or a string) into its corresponding JSON representation. If X is a JSON value returned by another JSON function, then this function is a no-op. Examples:*   json\\_quote(3.14159) \u2192 3.14159
*   json\\_quote('verdant') \u2192 '"verdant"'
*   json\\_quote('\\[1\\]') \u2192 '"\\[1\\]"'
*   json\\_quote(json('\\[1\\]')) \u2192 '\\[1\\]'
*   json\\_quote('\\[1,') \u2192 '"\\[1,"'`},json_each:{args:"(json, path?)",docs:`The json\\_each(X) and json\\_tree(X) [table-valued functions](https://www.sqlite.org/vtab.html#tabfunc2) walk the JSON value provided as their first argument and return one row for each element. The json\\_each(X) function only walks the immediate children of the top-level array or object, or just the top-level element itself if the top-level element is a primitive value. The json\\_tree(X) function recursively walks through the JSON substructure starting with the top-level element. The json\\_each(X,P) and json\\_tree(X,P) functions work just like their one-argument counterparts except that they treat the element identified by path P as the top-level element. The schema for the table returned by json\\_each() and json\\_tree() is as follows:

CREATE TABLE json\\_tree(
    key ANY,             -- key for current element relative to its parent
    value ANY,           -- value for the current element
    type TEXT,           -- 'object','array','string','integer', etc.
    atom ANY,            -- value for primitive types, null for array & object
    id INTEGER,          -- integer ID for this element
    parent INTEGER,      -- integer ID for the parent of this element
    fullkey TEXT,        -- full path describing the current element
    path TEXT,           -- path to the container of the current row
    json JSON HIDDEN,    -- 1st input parameter: the raw JSON
    root TEXT HIDDEN     -- 2nd input parameter: the PATH at which to start
);

The "key" column is the integer array index for elements of a JSON array and the text label for elements of a JSON object. The key column is NULL in all other cases. The "atom" column is the SQL value corresponding to primitive elements - elements other than JSON arrays and objects. The "atom" column is NULL for a JSON array or object. The "value" column is the same as the "atom" column for primitive JSON elements but takes on the text JSON value for arrays and objects. The "type" column is an SQL text value taken from ('null', 'true', 'false', 'integer', 'real', 'text', 'array', 'object') according to the type of the current JSON element. The "id" column is an integer that identifies a specific JSON element within the complete JSON string. The "id" integer is an internal housekeeping number, the computation of which might change in future releases. The only guarantee is that the "id" column will be different for every row. The "parent" column is always NULL for json\\_each(). For json\\_tree(), the "parent" column is the "id" integer for the parent of the current element, or NULL for the top-level JSON element or the element identified by the root path in the second argument. The "fullkey" column is a text path that uniquely identifies the current row element within the original JSON string. The complete key to the true top-level element is returned even if an alternative starting point is provided by the "root" argument. The "path" column is the path to the array or object container that holds the current row, or the path to the current row in the case where the iteration starts on a primitive type and thus only provides a single row of output. 4.23.1. Examples using json\\_each() and json\\_tree()Suppose the table "CREATE TABLE user(name,phone)" stores zero or more phone numbers as a JSON array object in the user.phone field. To find all users who have any phone number with a 704 area code:

SELECT DISTINCT user.name
  FROM user, json\\_each(user.phone)
 WHERE json\\_each.value LIKE '704-%';

Now suppose the user.phone field contains plain text if the user has only a single phone number and a JSON array if the user has multiple phone numbers. The same question is posed: "Which users have a phone number in the 704 area code?" But now the json\\_each() function can only be called for those users that have two or more phone numbers since json\\_each() requires well-formed JSON as its first argument:

SELECT name FROM user WHERE phone LIKE '704-%'
UNION
SELECT user.name
  FROM user, json\\_each(user.phone)
 WHERE json\\_valid(user.phone)
   AND json\\_each.value LIKE '704-%';

Consider a different database with "CREATE TABLE big(json JSON)". To see a complete line-by-line decomposition of the data:

SELECT big.rowid, fullkey, value
  FROM big, json\\_tree(big.json)
 WHERE json\\_tree.type NOT IN ('object','array');

In the previous, the "type NOT IN ('object','array')" term of the WHERE clause suppresses containers and only lets through leaf elements. The same effect could be achieved this way:

SELECT big.rowid, fullkey, atom
  FROM big, json\\_tree(big.json)
 WHERE atom IS NOT NULL;

Suppose each entry in the BIG table is a JSON object with a '$.id' field that is a unique identifier and a '$.partlist' field that can be a deeply nested object. You want to find the id of every entry that contains one or more references to uuid '6fa5181e-5721-11e5-a04e-57f3d7b32808' anywhere in its '$.partlist'.

SELECT DISTINCT json\\_extract(big.json,'$.id')
  FROM big, json\\_tree(big.json, '$.partlist')
 WHERE json\\_tree.key='uuid'
   AND json\\_tree.value='6fa5181e-5721-11e5-a04e-57f3d7b32808';

`},json_tree:{args:"(json, path?)",docs:`The json\\_each(X) and json\\_tree(X) [table-valued functions](https://www.sqlite.org/vtab.html#tabfunc2) walk the JSON value provided as their first argument and return one row for each element. The json\\_each(X) function only walks the immediate children of the top-level array or object, or just the top-level element itself if the top-level element is a primitive value. The json\\_tree(X) function recursively walks through the JSON substructure starting with the top-level element. The json\\_each(X,P) and json\\_tree(X,P) functions work just like their one-argument counterparts except that they treat the element identified by path P as the top-level element. The schema for the table returned by json\\_each() and json\\_tree() is as follows:

CREATE TABLE json\\_tree(
    key ANY,             -- key for current element relative to its parent
    value ANY,           -- value for the current element
    type TEXT,           -- 'object','array','string','integer', etc.
    atom ANY,            -- value for primitive types, null for array & object
    id INTEGER,          -- integer ID for this element
    parent INTEGER,      -- integer ID for the parent of this element
    fullkey TEXT,        -- full path describing the current element
    path TEXT,           -- path to the container of the current row
    json JSON HIDDEN,    -- 1st input parameter: the raw JSON
    root TEXT HIDDEN     -- 2nd input parameter: the PATH at which to start
);

The "key" column is the integer array index for elements of a JSON array and the text label for elements of a JSON object. The key column is NULL in all other cases. The "atom" column is the SQL value corresponding to primitive elements - elements other than JSON arrays and objects. The "atom" column is NULL for a JSON array or object. The "value" column is the same as the "atom" column for primitive JSON elements but takes on the text JSON value for arrays and objects. The "type" column is an SQL text value taken from ('null', 'true', 'false', 'integer', 'real', 'text', 'array', 'object') according to the type of the current JSON element. The "id" column is an integer that identifies a specific JSON element within the complete JSON string. The "id" integer is an internal housekeeping number, the computation of which might change in future releases. The only guarantee is that the "id" column will be different for every row. The "parent" column is always NULL for json\\_each(). For json\\_tree(), the "parent" column is the "id" integer for the parent of the current element, or NULL for the top-level JSON element or the element identified by the root path in the second argument. The "fullkey" column is a text path that uniquely identifies the current row element within the original JSON string. The complete key to the true top-level element is returned even if an alternative starting point is provided by the "root" argument. The "path" column is the path to the array or object container that holds the current row, or the path to the current row in the case where the iteration starts on a primitive type and thus only provides a single row of output. 4.23.1. Examples using json\\_each() and json\\_tree()Suppose the table "CREATE TABLE user(name,phone)" stores zero or more phone numbers as a JSON array object in the user.phone field. To find all users who have any phone number with a 704 area code:

SELECT DISTINCT user.name
  FROM user, json\\_each(user.phone)
 WHERE json\\_each.value LIKE '704-%';

Now suppose the user.phone field contains plain text if the user has only a single phone number and a JSON array if the user has multiple phone numbers. The same question is posed: "Which users have a phone number in the 704 area code?" But now the json\\_each() function can only be called for those users that have two or more phone numbers since json\\_each() requires well-formed JSON as its first argument:

SELECT name FROM user WHERE phone LIKE '704-%'
UNION
SELECT user.name
  FROM user, json\\_each(user.phone)
 WHERE json\\_valid(user.phone)
   AND json\\_each.value LIKE '704-%';

Consider a different database with "CREATE TABLE big(json JSON)". To see a complete line-by-line decomposition of the data:

SELECT big.rowid, fullkey, value
  FROM big, json\\_tree(big.json)
 WHERE json\\_tree.type NOT IN ('object','array');

In the previous, the "type NOT IN ('object','array')" term of the WHERE clause suppresses containers and only lets through leaf elements. The same effect could be achieved this way:

SELECT big.rowid, fullkey, atom
  FROM big, json\\_tree(big.json)
 WHERE atom IS NOT NULL;

Suppose each entry in the BIG table is a JSON object with a '$.id' field that is a unique identifier and a '$.partlist' field that can be a deeply nested object. You want to find the id of every entry that contains one or more references to uuid '6fa5181e-5721-11e5-a04e-57f3d7b32808' anywhere in its '$.partlist'.

SELECT DISTINCT json\\_extract(big.json,'$.id')
  FROM big, json\\_tree(big.json, '$.partlist')
 WHERE json\\_tree.key='uuid'
   AND json\\_tree.value='6fa5181e-5721-11e5-a04e-57f3d7b32808';

`},json_group_array:{args:"(value)",docs:'The json\\_group\\_array(X) function is an [aggregate SQL function](https://www.sqlite.org/lang_aggfunc.html) that returns a JSON array comprised of all X values in the aggregation. Similarly, the json\\_group\\_object(NAME,VALUE) function returns a JSON object comprised of all NAME/VALUE pairs in the aggregation. The "jsonb\\_" variants are the same except that they return their result in the binary [JSONB](https://www.sqlite.org/json1.html#jsonbx) format.'},jsonb_group_array:{args:"(value)",docs:'The json\\_group\\_array(X) function is an [aggregate SQL function](https://www.sqlite.org/lang_aggfunc.html) that returns a JSON array comprised of all X values in the aggregation. Similarly, the json\\_group\\_object(NAME,VALUE) function returns a JSON object comprised of all NAME/VALUE pairs in the aggregation. The "jsonb\\_" variants are the same except that they return their result in the binary [JSONB](https://www.sqlite.org/json1.html#jsonbx) format.'},json_group_object:{args:"(label, value)",docs:'The json\\_group\\_array(X) function is an [aggregate SQL function](https://www.sqlite.org/lang_aggfunc.html) that returns a JSON array comprised of all X values in the aggregation. Similarly, the json\\_group\\_object(NAME,VALUE) function returns a JSON object comprised of all NAME/VALUE pairs in the aggregation. The "jsonb\\_" variants are the same except that they return their result in the binary [JSONB](https://www.sqlite.org/json1.html#jsonbx) format.'},jsonb_group_object:{args:"(name, value)",docs:'The json\\_group\\_array(X) function is an [aggregate SQL function](https://www.sqlite.org/lang_aggfunc.html) that returns a JSON array comprised of all X values in the aggregation. Similarly, the json\\_group\\_object(NAME,VALUE) function returns a JSON object comprised of all NAME/VALUE pairs in the aggregation. The "jsonb\\_" variants are the same except that they return their result in the binary [JSONB](https://www.sqlite.org/json1.html#jsonbx) format.'},json_replace:{args:"(json, path1, value1, path2, value2, ...)",docs:`The json\\_insert(), json\\_replace, and json\\_set() functions all take a single JSON value as their first argument followed by zero or more pairs of path and value arguments, and return a new JSON string formed by updating the input JSON by the path/value pairs. The functions differ only in how they deal with creating new values and overwriting preexisting values.

| Function | Overwrite if already exists? | Create if does not exist? |
| --- | --- | --- |
| json\\_insert() | No | Yes |
| json\\_replace() | Yes | No |
| json\\_set() | Yes | Yes |

The json\\_insert(), json\\_replace(), and json\\_set() functions always take an odd number of arguments. The first argument is always the original JSON to be edited. Subsequent arguments occur in pairs with the first element of each pair being a path and the second element being the value to insert or replace or set on that path. Edits occur sequentially from left to right. Changes caused by prior edits can affect the path search for subsequent edits. If the value of a path/value pair is an SQLite TEXT value, then it is normally inserted as a quoted JSON string, even if the string looks like valid JSON. However, if the value is the result of another json function (such as [json()](https://www.sqlite.org/json1.html#jmini) or [json\\_array()](https://www.sqlite.org/json1.html#jarray) or [json\\_object()](https://www.sqlite.org/json1.html#jobj)) or if it is the result of [the -> operator](https://www.sqlite.org/json1.html#jptr), then it is interpreted as JSON and is inserted as JSON retaining all of its substructure. Values that are the result of [the ->> operator](https://www.sqlite.org/json1.html#jptr) are always interpreted as TEXT and are inserted as a JSON string even if they look like valid JSON. These routines throw an error if the first JSON argument is not well-formed or if any PATH argument is not well-formed or if any argument is a BLOB. To append an element onto the end of an array, using json\\_insert() with an array index of "#". Examples:*   json\\_insert('\\[1,2,3,4\\]','$\\[#\\]',99) \u2192 '\\[1,2,3,4,99\\]'
*   json\\_insert('\\[1,\\[2,3\\],4\\]','$\\[1\\]\\[#\\]',99) \u2192 '\\[1,\\[2,3,99\\],4\\]'
Other examples:*   json\\_insert('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":2,"c":4}'
*   json\\_insert('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_replace('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_replace('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_set('{"a":2,"c":4}', '$.c', '\\[97,96\\]') \u2192 '{"a":2,"c":"\\[97,96\\]"}'
*   json\\_set('{"a":2,"c":4}', '$.c', json('\\[97,96\\]')) \u2192 '{"a":2,"c":\\[97,96\\]}'
*   json\\_set('{"a":2,"c":4}', '$.c', json\\_array(97,96)) \u2192 '{"a":2,"c":\\[97,96\\]}'`},jsonb_replace:{args:"(json, path1, value1, path2, value2, ...)",docs:`The json\\_insert(), json\\_replace, and json\\_set() functions all take a single JSON value as their first argument followed by zero or more pairs of path and value arguments, and return a new JSON string formed by updating the input JSON by the path/value pairs. The functions differ only in how they deal with creating new values and overwriting preexisting values.

| Function | Overwrite if already exists? | Create if does not exist? |
| --- | --- | --- |
| json\\_insert() | No | Yes |
| json\\_replace() | Yes | No |
| json\\_set() | Yes | Yes |

The json\\_insert(), json\\_replace(), and json\\_set() functions always take an odd number of arguments. The first argument is always the original JSON to be edited. Subsequent arguments occur in pairs with the first element of each pair being a path and the second element being the value to insert or replace or set on that path. Edits occur sequentially from left to right. Changes caused by prior edits can affect the path search for subsequent edits. If the value of a path/value pair is an SQLite TEXT value, then it is normally inserted as a quoted JSON string, even if the string looks like valid JSON. However, if the value is the result of another json function (such as [json()](https://www.sqlite.org/json1.html#jmini) or [json\\_array()](https://www.sqlite.org/json1.html#jarray) or [json\\_object()](https://www.sqlite.org/json1.html#jobj)) or if it is the result of [the -> operator](https://www.sqlite.org/json1.html#jptr), then it is interpreted as JSON and is inserted as JSON retaining all of its substructure. Values that are the result of [the ->> operator](https://www.sqlite.org/json1.html#jptr) are always interpreted as TEXT and are inserted as a JSON string even if they look like valid JSON. These routines throw an error if the first JSON argument is not well-formed or if any PATH argument is not well-formed or if any argument is a BLOB. To append an element onto the end of an array, using json\\_insert() with an array index of "#". Examples:*   json\\_insert('\\[1,2,3,4\\]','$\\[#\\]',99) \u2192 '\\[1,2,3,4,99\\]'
*   json\\_insert('\\[1,\\[2,3\\],4\\]','$\\[1\\]\\[#\\]',99) \u2192 '\\[1,\\[2,3,99\\],4\\]'
Other examples:*   json\\_insert('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":2,"c":4}'
*   json\\_insert('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_replace('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_replace('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.a', 99) \u2192 '{"a":99,"c":4}'
*   json\\_set('{"a":2,"c":4}', '$.e', 99) \u2192 '{"a":2,"c":4,"e":99}'
*   json\\_set('{"a":2,"c":4}', '$.c', '\\[97,96\\]') \u2192 '{"a":2,"c":"\\[97,96\\]"}'
*   json\\_set('{"a":2,"c":4}', '$.c', json('\\[97,96\\]')) \u2192 '{"a":2,"c":\\[97,96\\]}'
*   json\\_set('{"a":2,"c":4}', '$.c', json\\_array(97,96)) \u2192 '{"a":2,"c":\\[97,96\\]}'`}};var va=["->","->>","abs","acos","acosh","asin","asinh","atan","atan2","atanh","avg","bm25","ceil","ceiling","changes","char","coalesce","concat","concat_ws","cos","cosh","count","cume_dist","current_date","current_time","current_timestamp","date","datetime","degrees","dense_rank","exp","first_value","floor","format","fts3_tokenizer","fts5","fts5_get_locale","fts5_insttoken","fts5_locale","fts5_source_id","glob","group_concat","hex","highlight","if","ifnull","iif","instr","json","json_array","json_array_length","json_error_position","json_extract","json_group_array","json_group_object","json_insert","json_object","json_patch","json_pretty","json_quote","json_remove","json_replace","json_set","json_type","json_valid","jsonb","jsonb_array","jsonb_extract","jsonb_group_array","jsonb_group_object","jsonb_insert","jsonb_object","jsonb_patch","jsonb_remove","jsonb_replace","jsonb_set","julianday","lag","last_insert_rowid","last_value","lead","length","like","likelihood","likely","ln","load_extension","log","log10","log2","lower","ltrim","match","matchinfo","max","min","mod","nth_value","ntile","nullif","octet_length","offsets","optimize","percent_rank","pi","pow","power","printf","quote","radians","random","randomblob","rank","replace","round","row_number","rtreecheck","rtreedepth","rtreenode","rtrim","sign","sin","sinh","snippet","soundex","sqlite_compileoption_get","sqlite_compileoption_used","sqlite_log","sqlite_offset","sqlite_source_id","sqlite_version","sqrt","strftime","string_agg","substr","substring","subtype","sum","tan","tanh","time","timediff","total","total_changes","trim","trunc","typeof","unhex","unicode","unixepoch","unknown","unlikely","upper","zeroblob"];var tL=t=>{let n=new Set([""]);for(let e of t){let i=[...n];n.clear();for(let E of typeof e=="string"?[e]:e)for(let d of i)n.add(d+E)}return n},rL=t=>{let n=[],e=0,i=0;for(let E=0;E<t.length;E++)switch(t[E]){case"(":i++;break;case")":i--;break;case"|":i===0&&(n.push(t.slice(e,E)),e=E+1);break;default:}return n.push(t.slice(e)),n},nL=t=>{let n=[],e=0,i=0;for(let E=0;E<t.length;E++)switch(t[E]){case"(":i===0&&(n.push(t.slice(e,E)),e=E+1),i++;break;case")":i--,i===0&&(n.push(t.slice(e,E)),e=E+1);break;default:}return n.push(t.slice(e)),n},es=t=>{let n=new Set,e=rL(t);for(let i of e){let E=tL(nL(i).map(d=>!d.includes("(")&&!d.includes("|")?d:es(d)));for(let d of E)n.add(d)}return n};var di=new Map;for(let t of Ca)di.set(t,{syntax:new Set});var F=(t,n,{expand:e=!0,help:i}={})=>{for(let E of e?es(n):[n]){di.has(E)||di.set(E,{syntax:new Set}),di.get(E).help??=i;for(let d of Array.isArray(t)?t:[t])di.get(E).syntax.add(d)}};F("sql-stmt","EXPLAIN(| QUERY PLAN)");F("alter-table-stmt","ALTER TABLE");F("alter-table-stmt","RENAME TO");F("alter-table-stmt","RENAME COLUMN");F("alter-table-stmt","ADD COLUMN");F("alter-table-stmt","DROP COLUMN");F("column-def","(INTEGER|REAL|TEXT|BLOB) NOT NULL(| PRIMARY KEY(| AUTOINCREMENT)(| ASC| DESC))(| REFERENCES)");F("column-def","(INTEGER|REAL|TEXT|BLOB) PRIMARY KEY(| AUTOINCREMENT)(| ASC| DESC)(| NOT NULL)(| REFERENCES)");F("column-def","(INTEGER|REAL|TEXT|BLOB) REFERENCES");F("column-def","(INTEGER|REAL|TEXT|BLOB) UNIQUE NOT NULL(| PRIMARY KEY(| AUTOINCREMENT)(| ASC| DESC))(| REFERENCES)");F("column-def","(INTEGER|REAL|TEXT|BLOB) UNIQUE PRIMARY KEY(| AUTOINCREMENT)(| ASC| DESC)(| NOT NULL)(| REFERENCES)");F("column-def","(INTEGER|REAL|TEXT|BLOB) UNIQUE REFERENCES");F("column-def","(INTEGER|REAL|TEXT|BLOB) NOT NULL UNIQUE(| PRIMARY KEY(| AUTOINCREMENT)(| ASC| DESC))(| REFERENCES)");F("column-def","(INTEGER|REAL|TEXT|BLOB) PRIMARY KEY(| AUTOINCREMENT)(| ASC| DESC)(| NOT NULL UNIQUE)(| REFERENCES)");F("column-def","(INTEGER|REAL|TEXT|BLOB) REFERENCES");F("column-def","INTEGER|REAL|TEXT|BLOB");F("column-constraint","PRIMARY KEY(| ASC| DESC)");F("column-constraint","NOT NULL");F("column-constraint","GENERATED ALWAYS AS");F("conflict-clause","ON CONFLICT (ROLLBACK|ABORT|FAIL|IGNORE|REPLACE)");F("expr","NOT LIKE",{help:"LIKE"});F("expr","NOT GLOB",{help:"GLOB"});F("expr","NOT REGEXP",{help:"REGEXP"});F("expr","NOT MATCH",{help:"MATCH"});F("expr","NOT NULL");F("expr","IS NOT DISTINCT FROM",{help:"IS"});F("expr","IS DISTINCT FROM",{help:"IS"});F("expr","DISTINCT FROM",{help:"IS"});F("expr","IS NOT",{help:"IS"});F("expr","NOT BETWEEN",{help:"BETWEEN"});F("expr","NOT IN",{help:"IN"});F("expr","NOT EXISTS",{help:"EXISTS"});F("filter-clause","FILTER",{help:"GROUP BY"});F("filter-clause","FILTER(WHERE",{help:"GROUP BY",expand:!1});F("over-clause","PARTITION BY");F("over-clause","ORDER BY");F("frame-spec","BETWEEN UNBOUNDED PRECEDING AND");F("frame-spec","PRECEDING");F("frame-spec","BETWEEN CURRENT ROW");F("frame-spec","FOLLOWING");F("frame-spec","UNBOUNDED (FOLLOWING|PRECEDING)");F("frame-spec","EXCLUDE (ROW|NO OTHERS|CURRENT ROW|GROUP|TIES)");F("ordering-term","(|ASC |DESC )NULLS (FIRST|LAST)");F("ordering-term","RAISE(IGNORE)",{expand:!1});F("ordering-term","RAISE(ROLLBACK,",{expand:!1});F("ordering-term","RAISE(ABORT,",{expand:!1});F("ordering-term","RAISE(FAIL,",{expand:!1});F("select-stmt","SELECT");F("select-stmt","WITH RECURSIVE");F("select-stmt","SELECT DISTINCT",{help:"SELECT DISTINCT"});F("select-stmt","GROUP BY",{help:"GROUP BY"});F("select-stmt","ORDER BY",{help:"ORDER BY"});F("common-table-expression","AS NOT MATERIALIZED");F("common-table-expression","AS MATERIALIZED");F("compound-operator","UNION ALL");F("join-operator","(|NATURAL )LEFT (|OUTER )JOIN",{help:"LEFT JOIN"});F("join-operator","(|NATURAL )RIGHT (|OUTER )JOIN",{help:"RIGHT JOIN"});F("join-operator","(|NATURAL )FULL (|OUTER )JOIN",{help:"FULL JOIN"});F("join-operator","(|NATURAL )(|INNER |CROSS )JOIN",{help:"INNER JOIN"});F("table-or-subquery","INDEXED BY");F("table-or-subquery","NOT INDEXED");F("window-defn","PARTITION BY");F("window-defn","ORDER BY");F("foreign-key-clause","ON DELETE");F("foreign-key-clause","ON UPDATE");F("foreign-key-clause","SET NULL");F("foreign-key-clause","SET DEFAULT");F("foreign-key-clause","CASCADE");F("foreign-key-clause","RESTRICT");F("foreign-key-clause","NO ACTION");F("foreign-key-clause","ON (DELETE|UPDATE) (SET NULL|SET DEFAULT|CASCADE|RESTRICT|NO ACTION)");F("foreign-key-clause","NOT DEFERRABLE");F("foreign-key-clause","INITIALLY (DEFERRED|IMMEDIATE)");F("foreign-key-clause","(|NOT )DEFERRABLE INITIALLY (DEFERRED|IMMEDIATE)");F("literal-value","NULL");F("literal-value","TRUE");F("literal-value","FALSE");F("literal-value","CURRENT_TIME");F("literal-value","CURRENT_DATE");F("literal-value","CURRENT_TIMESTAMP");F("analyze-stmt","ANALYZE");F("attach-stmt","ATTACH DATABASE",{help:"ATTACH"});F("begin-stmt","BEGIN TRANSACTION");F("begin-stmt","BEGIN (DEFERRED|IMMEDIATE|EXCLUSIVE)(| TRANSACTION)");F("commit-stmt","COMMIT TRANSACTION");F("commit-stmt","END TRANSACTION");F("rollback-stmt","ROLLBACK TRANSACTION TO SAVEPOINT");F("rollback-stmt","ROLLBACK TRANSACTION TO");F("rollback-stmt","ROLLBACK TO SAVEPOINT");F("rollback-stmt","ROLLBACK TO");F("rollback-stmt","ROLLBACK TRANSACTION");F("create-index-stmt","CREATE INDEX",{help:"CREATE INDEX"});F("create-index-stmt","CREATE UNIQUE INDEX",{help:"CREATE INDEX"});F("create-index-stmt","CREATE INDEX IF NOT EXISTS",{help:"CREATE INDEX"});F("create-index-stmt","CREATE UNIQUE INDEX IF NOT EXISTS",{help:"CREATE INDEX"});F("create-index-stmt","IF NOT EXISTS");F("create-table-stmt","CREATE TABLE");F("create-table-stmt","CREATE TABLE IF NOT EXISTS");F("create-table-stmt","CREATE TEMP TABLE");F("create-table-stmt","CREATE TEMPORARY TABLE");F("create-table-stmt","CREATE TEMP TABLE IF NOT EXISTS");F("create-table-stmt","CREATE TEMPORARY TABLE IF NOT EXISTS");F("table-constraint","PRIMARY KEY");F("table-constraint","FOREIGN KEY");F("table-constraint","PRIMARY KEY AUTOINCREMENT");F("table-options","WITHOUT ROWID");F("table-options","STRICT");F("create-trigger-stmt","CREATE TRIGGER");F("create-trigger-stmt","CREATE TRIGGER IF NOT EXISTS");F("create-trigger-stmt","CREATE TEMP TRIGGER");F("create-trigger-stmt","CREATE TEMP TRIGGER IF NOT EXISTS");F("create-trigger-stmt","CREATE TEMPORARY TRIGGER");F("create-trigger-stmt","CREATE TEMPORARY TRIGGER IF NOT EXISTS");F("create-trigger-stmt","IF NOT EXISTS");F("create-trigger-stmt","INSTEAD OF");F("create-trigger-stmt","(DELETE ON|INSERT ON|UPDATE ON|UPDATE OF)");F("create-trigger-stmt","BEFORE (DELETE ON|INSERT ON|UPDATE ON|UPDATE OF)");F("create-trigger-stmt","AFTER (DELETE ON|INSERT ON|UPDATE ON|UPDATE OF)");F("create-trigger-stmt","INSTEAD OF (DELETE ON|INSERT ON|UPDATE ON|UPDATE OF)");F("create-trigger-stmt","FOR EACH ROW");F("qualified-table-name","INDEXED BY");F("qualified-table-name","NOT INDEXED");F("returning-clause","RETURNING");F("insert-stmt","WITH RECURSIVE");F("insert-stmt","REPLACE INTO");F("insert-stmt","INSERT INTO");F("insert-stmt","INSERT OR (ABORT INTO|FAIL INTO|IGNORE INTO|REPLACE INTO|ROLLBACK INTO)");F("insert-stmt","DEFAULT VALUES");F("upsert-clause","ON CONFLICT");F("upsert-clause","DO NOTHING");F("upsert-clause","DO UPDATE SET");F("update-stmt","WITH RECURSIVE");F("update-stmt","UPDATE OR (ABORT|FAIL|IGNORE|REPLACE|ROLLBACK)");F("join-constraint","ON");F("join-constraint","USING");F("table-or-subquery","INDEXED BY");F("table-or-subquery","NOT INDEXED");F("create-view-stmt","CREATE VIEW",{help:"CREATE VIEW"});F("create-view-stmt","CREATE VIEW IF NOT EXISTS",{help:"CREATE VIEW"});F("create-view-stmt","CREATE TEMP VIEW",{help:"CREATE VIEW"});F("create-view-stmt","CREATE TEMP VIEW IF NOT EXISTS",{help:"CREATE VIEW"});F("create-view-stmt","CREATE TEMPORARY VIEW",{help:"CREATE VIEW"});F("create-view-stmt","CREATE TEMPORARY VIEW IF NOT EXISTS",{help:"CREATE VIEW"});F("create-virtual-table-stmt","CREATE VIRTUAL TABLE");F("create-virtual-table-stmt","CREATE VIRTUAL TABLE IF NOT EXISTS");F("delete-stmt","WITH RECURSIVE");F("delete-stmt","DELETE FROM",{help:"DELETE FROM"});F("delete-stmt","ORDER BY");F("detach-stmt","DETACH DATABASE",{help:"DETACH"});F("drop-index-stmt","DROP INDEX",{help:"DROP INDEX"});F("drop-index-stmt","DROP INDEX IF EXISTS",{help:"DROP INDEX"});F("drop-index-stmt","IF EXISTS");F("drop-table-stmt","DROP TABLE");F("drop-table-stmt","DROP TABLE IF EXISTS");F("drop-table-stmt","IF EXISTS");F("drop-trigger-stmt","DROP TRIGGER");F("drop-trigger-stmt","DROP TRIGGER IF EXISTS");F("drop-trigger-stmt","IF EXISTS");F("drop-view-stmt","DROP VIEW",{help:"DROP VIEW"});F("drop-view-stmt","DROP VIEW IF EXISTS",{help:"DROP VIEW"});F("drop-view-stmt","IF EXISTS");F("release-stmt","SAVEPOINT");F("release-stmt","RELEASE(| SAVEPOINT)");F("vacuum-stmt","VACUUM INTO");F("with-clause","WITH");F("with-clause","WITH RECURSIVE");F("with-clause","AS NOT MATERIALIZED");F("with-clause","AS MATERIALIZED");F([],"STORED");F([],"NEW");F([],"OLD");F([],"IS NULL",{help:"IS"});F([],"IS NOT NULL",{help:"IS"});F([],"HAVING",{help:"GROUP BY"});var ts=di;var Ar={BETWEEN:"### BETWEEN\n* `x BETWEEN y AND z` is equivalent to `x >= y AND x <= z`, except that x is evaluated only once.\n* `x NOT BETWEEN y AND z` is equivalent to `NOT (x BETWEEN y AND z)`.\n\nExamples:\n\n| Expression              | Evaluates to |\n|-------------------------|--------------|\n| `2 BETWEEN 1 AND 3`     | 1            |\n| `2 NOT BETWEEN 1 AND 3` | 0            |\n",COLLATE:`### COLLATE
Specifies the collation (sorting and comparison rules) for text.

Built-in collations:

| Collation | Behavior                                               |
|-----------|--------------------------------------------------------|
| \`BINARY\`  | Default case-sensitive comparison using byte values    |
| \`NOCASE\`  | Case-insensitive comparison for ASCII characters       |
| \`RTRIM\`   | Like BINARY, but ignores trailing whitespace           |

Applications can add custom collations using \`sqlite3_create_collation()\`, \`sqlite3_create_collation16()\`, or \`sqlite3_create_collation_v2()\`.

Examples:

| Expression                                | Evaluates to |
|-------------------------------------------|--------------|
| \`'abc' = 'ABC'\`                           | 0            |
| \`'abc' = 'ABC' COLLATE NOCASE\`            | 1            |
| \`'abc' = 'abc  ' COLLATE RTRIM\`           | 1            |
`,LIKE:`### LIKE
Compares text against a pattern, case-insensitive by default.

Special characters:

| Character | Matches                      |
|-----------|------------------------------|
| \`%\`       | zero or more characters      |
| \`_\`       | exactly one character        |

* The ESCAPE clause specifies an escape character.
* Deprecated behavior: Set \`PRAGMA case_sensitive_like = true;\` for case-sensitive comparison.
* Behavior can be overridden with an application-defined SQL function named "like", using \`sqlite3_create_function()\`, \`sqlite3_create_function16()\`, or \`sqlite3_create_function_v2()\`.
* \`x NOT LIKE y\` is equivalent to \`NOT (x LIKE y)\`.

Examples:

| Expression                   | Evaluates to |
|------------------------------|--------------|
| \`'hello' LIKE 'h%o'\`         | 1            |
| \`'hello' LIKE 'H_LLO'\`       | 1            |
| \`'50% done' LIKE '50\\% done' ESCAPE '\\'\`          | 1            |
| \`'file_name' LIKE 'file\\_name' ESCAPE '\\'\`      | 1            |
| \`'file name' LIKE 'file\\_name' ESCAPE '\\'\`      | 0            |

See also: GLOB
`,GLOB:`### GLOB
Matches text against a Unix-style pattern, case-sensitive by default.

Special characters:

| Character | Matches                                       |
|-----------|-----------------------------------------------|
| \`*\`       | zero or more characters                       |
| \`?\`       | exactly one character                         |
| \`[abc]\`   | exactly one character listed                  |
| \`[^abc]\`  | exactly one character not listed              |

* Behavior can be overridden by defining an application-defined SQL function named "glob".
* \`x NOT GLOB y\` is equivalent to \`NOT (x GLOB y)\`.

Examples:

| Expression                             | Evaluates to |
|----------------------------------------|--------------|
| \`'file.txt' GLOB '*.txt'\`              | 1            |
| \`'file123' GLOB 'file[0-9][0-9][0-9]'\` | 1            |
| \`'test.C' GLOB '*.c'\`                  | 0 (case-sensitive) |

See also: LIKE
`,REGEXP:"### REGEXP\n* Not built-in. Applications must define an SQL function \"regexp\" (using `sqlite3_create_function()`, `sqlite3_create_function16()`, or `sqlite3_create_function_v2()`) to perform regular expression matches.\n* `x NOT REGEX y` is equivalent to `NOT (x REGEX y)`.\n\nExamples (if function provided):\n\n| Expression                         | Evaluates to |\n|------------------------------------|--------------|\n| `'abc123' REGEXP '^[a-z]+[0-9]+$'` | 1            |\n| `'123abc' REGEXP '^[a-z]+[0-9]+$'` | 0            |\n",MATCH:`### MATCH
* Used with SQLite's FTS (FTS3/4/5) extensions or application-defined functions for full-text searching.
* \`x NOT MATCH y\` is equivalent to \`NOT (x MATCH y)\`.

Example using FTS5:

\`\`\`sql
-- Define a table using FTS5
CREATE VIRTUAL TABLE documents USING fts5(content);
INSERT INTO documents(content) VALUES ('hello world');

-- Search for rows containing the word "hello"
SELECT * FROM documents WHERE documents MATCH 'hello';
\`\`\`
`,"->":`### ->
Extracts a JSON value as a JSON-formatted string.

Examples:

| Expression                        | Evaluates to    |
|-----------------------------------|-----------|
| \`'{"key":"value"}' -> '$.key'\`    | \`'"value"'\` |
| \`'{"key":"value"}' ->> '$.key'\`    | \`'value'\` |
| \`'{"key":{"key 2":"value"}}' -> '$.key."key 2"'\` | \`'"value"'\` |
`,"->>":`### ->>
Extracts a JSON value as plain TEXT (without extra JSON formatting).

Examples:

| Expression                        | Evaluates to    |
|-----------------------------------|-----------|
| \`'{"key":"value"}' -> '$.key'\`    | \`'"value"'\` |
| \`'{"key":"value"}' ->> '$.key'\`    | \`'value'\` |
| \`'{"key":{"key 2":"value"}}' ->> '$.key."key 2"'\` | \`'value'\` |
`,CAST:"### CAST\nConverts a value to a different storage class.\n\n* Casting a `NULL` always results in `NULL`.\n\nExamples:\n\n| Expression                | Evaluates to    |\n|---------------------------|-----------|\n| `CAST('123' AS INTEGER)`  | `123`     |\n| `CAST(45.67 AS TEXT)`     | `'45.67'` |\n| `CAST(NULL AS INTEGER)`     | `NULL` |\n","=":"### =\nTests if two expressions have equal non-`NULL` values. If either or both expressions are `NULL`, the result is `NULL`.\n\nExamples:\n\n| Expression                | Evaluates to    |\n|---------------------------|-----------|\n| `1 = 1`  | `1` |\n| `NULL = NULL`  | `NULL` |\n| `0 = NULL`  | `NULL` |\n| `1 IS 1`  | `1` |\n| `NULL IS NULL`  | `1` |\n| `0 IS NULL`  | `0` |\n",IS:"### IS\nTests if two expressions have equal values.\n\n* `x IS NOT y` is equivalent to `NOT (x IS y)`.\n* `x IS NOT DISTINCT FROM y` is equivalent to `x IS y`.\n* `x IS DISTINCT FROM y` is equivalent to `x IS NOT y`.\n\nExamples:\n\n| Expression                | Evaluates to    |\n|---------------------------|-----------|\n| `1 IS 1`  | `1` |\n| `NULL IS NULL`  | `1` |\n| `0 IS NULL`  | `0` |\n| `1 = 1`  | `1` |\n| `NULL = NULL`  | `NULL` |\n| `0 = NULL`  | `NULL` |\n",IN:"### IN\nChecks if an expression matches any value from a list or subquery.\n\n* When the right operand is a subquery, the left operand may be a row value expression. See the examples below.\n* `x NOT IN y` is equivalent `NOT (x IN y)`.\n* `x IN (y, z, ...)` is equivalent to `x = y OR x = z OR ...`, except that `x` is evaluated only once.\n\n  Therefore:\n\n  * The `IN` and `NOT IN` operators evaluate to `NULL` when the left operand is `NULL` and the right operand is non-empty.\n\n    ```sql\n    NULL IN (1, 2, 3)  -- evaluates to NULL\n    NULL NOT IN (1, 2, 3)  -- evaluates to NULL\n    ```\n\n  * The `IN` and `NOT IN` operators evaluate to `NULL` when the right operand contains `NULL` and does not contain the left operand.\n\n    ```sql\n    2 IN (1, NULL);  -- evaluates to NULL\n    2 NOT IN (1, NULL);  -- evaluates to NULL\n    ```\n* The subquery on the right-hand side can be abbreviated as just a table name or table-valued function name.\n\nExamples:\n\n```sql\nCREATE TABLE users(id INTEGER, age INTEGER);\nINSERT INTO users(id, age) VALUES (1, 10), (2, 20), (3, 30);\n```\n\n| Kind | Expression                        | Evaluates to |\n|--|-----------------------------------|--------------|\n| list | `5 IN (1, 5, 7)`                    | 1            |\n| list | `6 IN (1, 5, 7)`                | 0            |\n| scalar/subquery | `1 IN (SELECT id FROM users)`       | 1 |\n| scalar/subquery | `10 IN (SELECT id FROM users)`       | 0 |\n| row/subquery | `(2, 20) IN (SELECT id, age FROM users)` | 1 |\n| row/subquery | `(2, 21) IN (SELECT id, age FROM users)`       | 0 |\n| row/subquery | `(2, 20) IN users` | 1 |\n",EXISTS:`### EXISTS
Checks if a subquery returns at least one row.

Examples:

\`\`\`sql
CREATE TABLE users(id INTEGER, age INTEGER);
INSERT INTO users(id, age) VALUES (1, 10), (2, 20), (3, NULL);
\`\`\`

| Expression                                   | Evaluates to |
|----------------------------------------------|--------------|
| \`EXISTS(SELECT 1 FROM users WHERE id = 1)\`     | 1            |
| \`NOT EXISTS(SELECT 1 FROM users WHERE id = 1)\`     | 0            |
| \`EXISTS(SELECT 1 FROM users WHERE id = 10)\`    | 0            |
| \`EXISTS(SELECT age FROM users WHERE id = 3)\`     | 1            |
`,CASE:"### CASE\nConditionally evaluates expressions and returns the corresponding result.\n\n* CASE has two forms, as illustrated below.\n* If no `ELSE` clause is provided and none of the `WHEN` clauses evaluate to true, the CASE expression evaluates to `NULL`.\n* CASE expressions are short-circuited; expressions in branches that are not executed are never evaluated.\n* A CASE without a base expression is equivalent to `iif()`. (`iff()` is also short-circuited.)\n\nExamples:\n\n| Form                      | Expression                                                    | Evaluation Rules |\n|---------------------------|-----------------------------------------------------------------------|-------------|\n| With a base expression      | `CASE x WHEN 1 THEN 'one' WHEN 2 THEN 'two' ELSE 'other' END`         | Compares the base expression (`x`) to each `WHEN` expression using the same rules as the `=` operator. |\n| Without a base expression   | `CASE WHEN score >= 90 THEN 'A' WHEN score >= 50 THEN 'B' ELSE 'C' END`                    | Evaluates each `WHEN` expression as a Boolean. `NULL` is treated as false. |\n","INNER JOIN":"### INNER JOIN\n* `JOIN`, `INNER JOIN`, `CROSS JOIN`, and a comma (`SELECT * FROM l, r`) are equivalent, except that:\n* `CROSS JOIN` affects the query planner differently, and [its use is discouraged by the official SQLite documentation, except when manually optimizing a query.](https://www.sqlite.org/lang_select.html#special_handling_of_cross_join_)\n\n| Expression | Description |\n|------------|-------------|\n| `l INNER JOIN r` (without `ON`, `USING`, or `NATUAL`) | Returns all possible combinations of rows from table `l` and table `r`.|\n| `l INNER JOIN r ON expr` | Returns only the rows from `l INNER JOIN r` where the condition `expr` evaluates to true. An `ON` clause is equivalent to a `WHERE` clause, except in `LEFT`, `RIGHT`, and `FULL` joins, where `ON` is applied before adding missing rows. |\n| `l INNER JOIN r USING (x, y, ...)` | Equivalent to `l INNER JOIN r ON l.x = r.x AND l.y = r.y AND ...`, except the column `r.x`, `r.y`, ... does not appear in the result. |\n| `l NATURAL INNER JOIN r` | Equivalent to `l INNER JOIN r USING (the list of column names shared by tables l and r)`. |\n\n* At most one of `ON`, `USING`, or `NATURAL` can be used at a time.\n\nExample:\n\n```sql\nCREATE TABLE l(id, v);\nINSERT INTO l(id, v) VALUES (1, 'L1'), (2, 'L2'), (3, 'L3');\nCREATE TABLE r(id, v);\nINSERT INTO r(id, v) VALUES (2, 'R2'), (3, 'R3'), (4, 'R4');\n\nSELECT l.id, r.id, l.v, r.v FROM l INNER JOIN r;\n\n-- Output:\n   l   |   r   ||    l INNER JOIN r\n id, v | id, v || l.id, r.id, l.v, r.v\n-------+-------++----------------------\n  1,L1 |  2,R2 ||    1,    2,  L1,  R2\n  2,L2 |  3,R3 ||    1,    3,  L1,  R3\n  3,L3 |  4,R4 ||    1,    4,  L1,  R4\n       |       ||    2,    2,  L2,  R2\n       |       ||    2,    3,  L2,  R3\n       |       ||    2,    4,  L2,  R4\n       |       ||    3,    2,  L3,  R2\n       |       ||    3,    3,  L3,  R3\n       |       ||    3,    4,  L3,  R4\n\nSELECT l.id, l.v, r.v FROM l INNER JOIN r ON l.id = r.id;\n\n-- Output:\n   l   |   r   || l INNER JOIN r\n       |       || ON l.id = r.id\n id, v | id, v ||  id, l.v, r.v\n-------+-------++----------------\n  1,L1 |       ||\n  2,L2 |  2,R2 ||   2,  L2,  R2\n  3,L3 |  3,R3 ||   3,  L3,  R3\n       |  4,R4 ||\n```\n","LEFT JOIN":`### LEFT JOIN
\`l LEFT JOIN r\` is logically equivalent to:

1. taking the \`l INNER JOIN r\`, with the \`ON\`, \`USING\`, or \`NATURAL\` filtering if present;
2. then adding the rows in \`l\` that are missing, filling r's columns with NULL.

\`LEFT OUTER JOIN\` is equivalent to \`LEFT JOIN\`.

Example:

\`\`\`sql
CREATE TABLE l(id, v);
INSERT INTO l(id, v) VALUES (1, 'L1'), (2, 'L2'), (3, 'L3');
CREATE TABLE r(id, v);
INSERT INTO r(id, v) VALUES (2, 'R2'), (3, 'R3'), (4, 'R4');

SELECT l.id, l.v, r.v FROM l LEFT JOIN r ON l.id = r.id;

-- Output:
   l   |   r   || l LEFT JOIN r
 id, v | id, v || l.id, l.v, r.v
-------+-------++---------------
  1,L1 |       ||    1,  L1,NULL
  2,L2 |  2,R2 ||    2,  L2,  R2
  3,L3 |  3,R3 ||    3,  L3,  R3
       |  4,R4 ||
\`\`\`
`,"RIGHT JOIN":`### RIGHT JOIN
\`l RIGHT JOIN r\` is logically equivalent to:

1. taking the \`l INNER JOIN r\`, with the \`ON\`, \`USING\`, or \`NATURAL\` filtering if present;
2. then adding the rows in \`r\` that are missing, filling l's columns with NULL.

\`RIGHT OUTER JOIN\` is equivalent to \`RIGHT JOIN\`.

Example:

\`\`\`sql
CREATE TABLE l(id, v);
INSERT INTO l(id, v) VALUES (1, 'L1'), (2, 'L2'), (3, 'L3');
CREATE TABLE r(id, v);
INSERT INTO r(id, v) VALUES (2, 'R2'), (3, 'R3'), (4, 'R4');

SELECT r.id, l.v, r.v FROM l RIGHT JOIN r ON l.id = r.id;

-- Output:
   l   |   r   || l RIGHT JOIN r
 id, v | id, v ||   id, l.v, r.v
-------+-------++----------------
  1,L1 |       ||
  2,L2 |  2,R2 ||    2,  L2,  R2
  3,L3 |  3,R3 ||    3,  L3,  R3
       |  4,R4 ||    4,NULL,  R4
\`\`\`
`,"FULL JOIN":"### FULL JOIN\n`l FULL JOIN r` is logically equivalent to:\n\n1. taking `l INNER JOIN r`, with the `ON`, `USING`, or `NATURAL` filtering if present;\n2. then adding the rows in `l` that are missing, filling r's columns with NULL;\n3. then adding the rows in `r` that are missing, filling l's columns with NULL.\n\n* `l FULL JOIN r` is logically equivalent to taking the `UNION` of `l LEFT JOIN r` and `l RIGHT JOIN r`.\n* `FULL OUTER JOIN` is equivalent to `FULL JOIN`.\n\nExample:\n\n```sql\nCREATE TABLE l(id, v);\nINSERT INTO l(id, v) VALUES (1, 'L1'), (2, 'L2'), (3, 'L3');\nCREATE TABLE r(id, v);\nINSERT INTO r(id, v) VALUES (2, 'R2'), (3, 'R3'), (4, 'R4');\n\nSELECT l.id, r.id, l.v, r.v FROM l FULL JOIN r ON l.id = r.id;\n\n-- Output:\n   l   |   r   ||       l FULL JOIN r\n id, v | id, v ||  l.id, r.id,  l.v,  r.v\n-------+-------++-------------------------\n  1,L1 |       ||    1,  NULL,   L1, NULL\n  2,L2 |  2,R2 ||    2,     2,   L2,   R2\n  3,L3 |  3,R3 ||    3,     3,   L3,   R3\n       |  4,R4 || NULL,     4, NULL,   R4\n```\n","SELECT DISTINCT":`### SELECT DISTINCT
Removes duplicate rows from query results.
Considers NULL values as equal.

Examples:

\`\`\`sql
CREATE TABLE table1 (x, y);
INSERT INTO table1 (x, y) VALUES
    (1, 1),
    (1, 1),
    (NULL, 2),
    (NULL, 3);

SELECT DISTINCT x FROM table1;
-- Output:
-- (1),
-- (NULL)

SELECT DISTINCT x, y FROM table1;
-- Output:
-- (1, 1),
-- (NULL, 2),
-- (NULL, 3)
\`\`\`
`,VALUES:`### VALUES
\`VALUES (a1, ..., aM), (b1, ..., bN), ...\` is equivalent to \`SELECT a1, ..., aM UNION ALL SELECT b1, ..., bN UNION ALL ...\`.

Examples:

\`\`\`sql
CREATE TABLE table1(x, y);
INSERT INTO table1(x, y) VALUES (1, 2), (3, 4), (5, 6);

SELECT * FROM table1 WHERE (x, y) IN (VALUES (1, 1), (3, 4), (5, 6));
-- Output:
-- (3, 4),
-- (5, 6)
\`\`\`
`,"ORDER BY":`### ORDER BY
Sorts the rows returned by a query.

| Ordering Term | Order |
|--|--|
| \`expr ASC\` (default) | Ascending order. \`NULL\` is considered smaller than any other value. |
| \`expr DESC\` | Descending order. \`NULL\` is considered smaller than any other value. |
| \`expr ASC NULLS LAST\` | Ascending order. \`NULL\` is considered larger than any other value. |
| \`expr DESC NULLS FIRST\` | Descending order. \`NULL\` is considered larger than any other value. |

* A collation can be specified immediately after the expression: \`expr COLLATE collation ASC\`.
* When an integer is specified in \`expr\`, it is treated as a column number (starting from 1).

\`\`\`sql
CREATE TABLE table1(x, y);
INSERT INTO table1(x, y) VALUES
  (1, 2),
  (1, 0),
  (NULL, 3),
  (2, 0);

SELECT * FROM table1 ORDER BY x ASC NULLS LAST, y DESC;
-- Output:
--     x, y
-- ---------
--     1, 2
--     1, 0
--     2, 0
--  NULL, 3

SELECT * FROM table1 ORDER BY x + y;
-- Output:
--     x, y
-- ---------
--  NULL, 3
--     1, 0
--     2, 0
--     1, 2

SELECT x, y FROM table1 ORDER BY 1 DESC, 2 DESC;
-- Output:
--     x, y
-- ---------
--     2, 0
--     1, 2
--     1, 0
--  NULL, 3
\`\`\`
`,"DELETE FROM":`### DELETE FROM
Examples:

\`\`\`sql
-- Delete rows for which the WHERE clause evaluates to true  
DELETE FROM table1 WHERE column1 = 1;  

-- Delete all rows from the table  
DELETE FROM table1;  

-- Delete rows and return their values  
DELETE FROM table1 WHERE column1 >= 1 RETURNING column1, column2;  

-- Delete a specified number of rows, optionally with ordering  
-- (ORDER BY and LIMIT are available only when SQLite3 is compiled with the SQLITE_ENABLE_UPDATE_DELETE_LIMIT compile-time option.)  
DELETE FROM table1 LIMIT 2 OFFSET 3;  
DELETE FROM table1 ORDER BY column1 LIMIT 2 OFFSET 3;  
\`\`\`
`,ATTACH:`### ATTACH
Attaches a database to the current connection.
The atomicity of transactions is determined as follows.

| Condition | Atomicity |
|------------------------------------------------------------|------------------------------------------------------|
| [WAL](https://www.sqlite.org/wal.html) is used | Atomic within each individual database file.         |
| The main database is an in-memory database | Atomic within each individual database file.         |
| Otherwise       | Atomic across all attached databases. |

**Specifying a Database as a Filename**

\`\`\`sql
-- Attach ./database1.db
ATTACH DATABASE 'database1.db' AS db1;
CREATE TABLE db1.table1(column1 INTEGER, column2 INTEGER);
DETACH DATABASE db1;

-- Attach an in-memory database
ATTACH DATABASE ':memory:' AS db2;

-- Attach a temporary database
-- (A temporary database differs from an in-memory database in that:
--  * An in-memory database keeps all data in memory at all times.
--  * A temporary database writes to a temporary file when it becomes too large.
--    This file is automatically deleted when the connection closes.)
ATTACH DATABASE '' AS db3;
\`\`\`

**Specifying a Database as a URI**

To use this feature, you must enable one of the following:
* the \`SQLITE_USE_URI=1\` compile-time option,
* the \`sqlite3_config(SQLITE_CONFIG_URI, 1)\` configuration,
* or the \`SQLITE_OPEN_URI\` bit flag for \`sqlite3_open_v2()\`.

The URI must start with \`file:\`. It accepts the following query options:

| Query parameter                  | Description |
|----------------------------------|-------------|
| \`cache=shared\\|private\` (default: private) | Enables or disables [shared cache mode](https://www.sqlite.org/sharedcache.html). Shared cache mode is discouraged in favor of WAL mode. |
| \`immutable=1\` | Opens the database's underlying file as read-only. All file locking and change detection are skipped for immutable databases. This option can be used, for example, when reading a database that is exclusively locked by another process. |
| \`mode=ro\\|rw\\|rwc\\|memory\` (default: rwc) | Opens the database in one of the following modes: <br> \\* \`ro\`: Read-only <br> \\* \`rw\`: Read-write <br> \\* \`rwc\`: Read-write, creating the file if it does not exist <br> \\* \`memory\`: Opens an in-memory database |
| \`modeof=<filename>\` (Unix only)  | Copies the permission bits from the existing file \`<filename>\` when creating a new database. |
| \`nolock=1\`              | Disables file locking. When multiple database connections interact with the same database and one or more of these connections use this option, corruption may occur. This option should only be used when the application can guarantee that writes to the database are serialized. |
| \`psow=1\\|0\`                        | Enables (\`1\`) or disables (\`0\`) [powersafe overwrite](https://www.sqlite.org/psow.html). |
| \`vfs=<name>\`                      | Specifies the [VFS](https://www.sqlite.org/vfs.html) to use when opening the database. |  

Examples:

\`\`\`sql
-- Attach ./database1.db
ATTACH DATABASE 'file:database1.db' AS db1;

-- Attach an in-memory database
ATTACH DATABASE 'file::memory:' AS db2;

-- Attach a named in-memory database
ATTACH DATABASE 'file:memdb1?mode=memory' AS db3;

-- Attach a named in-memory database with shared cache mode enabled
ATTACH DATABASE 'file:memdb2?mode=memory&cache=shared' AS db4;
\`\`\`
`,DETACH:`### DETACH
Example:

\`\`\`sql
ATTACH DATABASE 'database1.db' AS db1;
CREATE TABLE db1.table1(column1 INTEGER, column2 INTEGER);
DETACH DATABASE db1;
\`\`\`
`,"CREATE INDEX":`### CREATE INDEX
Example:

\`\`\`sql
CREATE TABLE table1(x INTEGER, y INTEGER);
CREATE INDEX idx_table1_x_y ON table1 (x, y);

EXPLAIN QUERY PLAN
SELECT * FROM table1 WHERE x = 1; -- fast
-- QUERY PLAN
-- \`--SEARCH table1 USING COVERING INDEX idx_table1_x_y (x=?)

EXPLAIN QUERY PLAN
SELECT * FROM table1 WHERE x = 1 AND y = 2; -- fast
-- QUERY PLAN
-- \`--SEARCH table1 USING COVERING INDEX idx_table1_x_y (x=? AND y=?)

EXPLAIN QUERY PLAN
SELECT * FROM table1 WHERE y = 1; -- slow
-- QUERY PLAN
-- \`--SCAN table1
\`\`\`

* To create an index only if it does not already exist, use \`CREATE INDEX IF NOT EXISTS\`.

**Partial Indexes**

Partial indexes can:
* reduce the write overhead required to maintain indexes,
* decrease the storage space required by indexes,
* improve query performance due to fewer entries needing retrieval.

As of SQLite version 3.49, the conditions for using partial indexes are very limited.

A query \`SELECT ... WHERE W\` can only use a partial index \`CREATE INDEX ... WHERE X\` in one of two cases:

1. * When \`W\` has the form \`W1 AND W2 AND ...\`,
   * and \`X\` has the form \`X1 OR X2 OR ...\`,
   * and at least one of \`Wi\` exactly matches one of \`Xj\`.

   Example:

   \`\`\`sql
   CREATE TABLE table2(x INTEGER);
   CREATE INDEX idx_table2_x_partial ON table2 (x) WHERE x >= 10;

   EXPLAIN QUERY PLAN
   SELECT * FROM table2 WHERE x >= 10; -- fast
   -- QUERY PLAN
   -- \`--SEARCH table2 USING INDEX idx_table2_x_partial (x>?)

   EXPLAIN QUERY PLAN
   SELECT * FROM table2 WHERE x >= 30; -- slow; \`x >= 30\` does not exactly match the index condition (\`x >= 10\`).
   -- QUERY PLAN
   -- \`--SCAN table2

   EXPLAIN QUERY PLAN
   SELECT * FROM table2 WHERE x < 10; -- slow; SQLite does not perform algebra to infer the usability of the partial index.
   -- QUERY PLAN
   -- \`--SCAN table2
   \`\`\`

2. * When \`X\` is of the form \`x IS NOT NULL\`,
   * and \`W\` compares \`x\` to another value using one of \`=\`, \`<\`, \`>\`, \`<=\`, \`>=\`, \`<>\`, \`IN\`, \`LIKE\`, or \`GLOB\`.

   Example:

   \`\`\`sql
   CREATE TABLE table3(x INTEGER);
   CREATE INDEX idx_table3_x_partial ON table3 (x) WHERE x IS NOT NULL;

   EXPLAIN QUERY PLAN
   SELECT * FROM table3 WHERE x = 10; -- fast
   -- QUERY PLAN
   -- \`--SEARCH table3 USING COVERING INDEX idx_table3_x_partial (x=?)
   \`\`\`

**Unique Indexes**

\`CREATE UNIQUE INDEX\` requires uniqueness across the indexed columns.

* SQLite considers \`NULL\`s to be distinct from each other.
* Even if the rows in the column set are not unique, a unique partial index can be created when the \`WHERE\` clause ensures uniqueness.
`,"DROP INDEX":`### DROP INDEX
Example:

\`\`\`sql
CREATE TABLE table1(x INTEGER, y INTEGER);
CREATE INDEX idx_table1_x_y ON table1 (x, y);
DROP INDEX idx_table1_x_y;
\`\`\`

* To drop an index only if it exists, use \`DROP INDEX IF EXISTS\`.
`,"CREATE VIEW":`### CREATE VIEW
Examples:

\`\`\`sql
CREATE TABLE table1(x INTEGER, y INTEGER);
INSERT INTO table1(x, y) VALUES (1, 2);

CREATE VIEW view1(x, sum) AS SELECT x, x + y FROM table1;
SELECT * FROM view1;
--  x  sum
-- --------
--  1   3

-- The column-name list can be omitted; in that case, the column names are taken from the SELECT statement's result. 
-- Specifying the column names is recommended.
CREATE VIEW view2 AS SELECT x FROM table1 WHERE x > 0;
SELECT * FROM view2;
--  x 
-- ---
--  1
\`\`\`

* To create a view only if it does not exist, use \`CREATE VIEW IF NOT EXISTS\`.
* To create a temporary view, use \`CREATE TEMP VIEW\` or \`CREATE TEMPORARY VIEW\`.
`,"DROP VIEW":`### DROP VIEW
Examples:

\`\`\`sql
CREATE VIEW view1 AS SELECT 1;
DROP VIEW view1;
\`\`\`

* To drop a view only if it exists, use \`DROP VIEW IF EXISTS\`.
`,"GROUP BY":"### GROUP BY\n**Syntax**\n\n```sql\nSELECT result-set FROM ...\nGROUP BY expr1, expr2, ...\nHAVING ...;\n\n-- Example:\nSELECT x, min(y), max(y) FROM table1 GROUP BY x;\n```\n\n**Processing Steps**\n\n1. Evaluates the `GROUP BY` expressions for each row, then assigns each row to a \"group\" so that each group has a unique combination of `(expr1, expr2, ...)`. All `NULL` values are considered equal.\n2. Evaluates the `HAVING` clause once for each group, and removes any group for which the condition evaluates to false.\n3. Evaluates each expression specified in the `result-set` for each group.\n   - Aggregate functions are evaluated across all values within a group.\n   - Other expressions are evaluated against a single representative row from within the group:\n     - If `min(X)` or `max(X)` is used in the `result-set`, the row containing the smallest or largest (respectively) value of `X` is chosen:\n\n       ```sql\n       CREATE TABLE table2(x, y, z);\n       INSERT INTO table2(x, y, z)\n       VALUES (1, 1, 10), (1, 0, 20), (1, 2, 30);\n\n       SELECT x, min(y), z FROM table2 GROUP BY x;\n       -- Output: (1, 0, 20)\n       ```\n\n     - Otherwise, the row is chosen arbitrarily.\n\n       ```sql\n       SELECT x, avg(y), z FROM table2 GROUP BY x;\n       -- Output: (1, 1.0, 10), but there is no guarantee that z cannot be 20 or 30.\n       ```\n\n**Aggregate Functions**\n\nSyntax:\n\n```sql\n<aggregate-func>(*) [FILTER (WHERE <expr>)]\n<aggregate-func>([DISTINCT] <args> [ORDER BY <ordering-terms>]) [FILTER (WHERE <expr>)]\n```\n\n- `DISTINCT`: Removes duplicate values within a group before passing them to the aggregate function.\n- `FILTER`: Removes values from a group for which the specified WHERE clause evaluates to false, before passing them to the aggregate function.\n- `ORDER BY`: Specifies the order in which values are passed to the aggregate function. This order is significant for certain aggregate functions, such as `group_concat`.\n\nBuilt-in aggregate functions:\n\n| Aggregate Function | Evaluates to |\n|-------------------|--------------|\n| `count(*)` | The number of rows within a group. |\n| `count(X)` | The number of rows in a group where `X` is not `NULL`. |\n| `total(X)` | The sum of non-`NULL` values of X in a group.<br>- Returns `0.0` if the group is empty or all values are `NULL`.<br>- Always returns a floating-point value; can be `+Infinity` or `-Infinity`. Returns `NULL` if extremely large values with differing signs are summed. |\n| `sum(X)` | The sum of non-`NULL` values of X in a group.<br>- Returns `NULL` if the group is empty or consists entirely of `NULL`s.<br>- If all values are integers (or `NULL`s), returns an integer; in this case, an \"integer overflow\" exception may be thrown.<br>- Otherwise, returns a floating-point value; can be `+Infinity` or `-Infinity`. Returns `NULL` if extremely large values with differing signs are summed. |\n| `avg(X)` | - Equivalent to `total(X) / count(X)` if there is at least one non-`NULL` X.<br>- Returns `NULL` if there are no non-`NULL` values of X. |\n| `min(X)`<br>`max(X)` | Returns the first (for `min`) or last (for `max`) non-`NULL` value that would appear if the group were ordered by column `X`. Returns `NULL` if there are no non-`NULL` values of X. |\n| `group_concat(X[,Y=','])`<br>`string_agg(X,Y)` (an alias for `group_concat(X,Y)`) | Concatenates the non-`NULL` values of `X` in a group, separated by the string `Y` (default: `','`). |\n| `json_group_array(X)`<br>`jsonb_group_array(X)` | Returns a JSON array containing the values in a group. E.g., `json_group_array(X)` results in `'[1, 2, 3]'` if the values of X in the group are 1, 2, and 3. |\n| `json_group_object(X, Y)`<br>`jsonb_group_object(X, Y)` | Returns a JSON object containing key-value pairs from columns X and Y within the group. E.g., `json_group_object(X, Y)` produces `'{\"x1\":\"y1\",\"x2\":\"y2\"}'` if the values of X are `'x1', 'x2'` and corresponding values of Y are `'y1', 'y2'`. |\n\n**Examples**\n\n```sql\nCREATE TABLE table3(x TEXT, y INTEGER);\nINSERT INTO table3(x, y) VALUES ('a', 1), ('a', 2), ('b', 1), ('a', 1), (NULL, 1), (NULL, 1);\n\n-- Count the number of rows for each x:\nSELECT x, count(*) FROM table3 GROUP BY x;\n-- Output:\n-- NULL 2\n--    a 3\n--    b 1\n\n-- Count the number of distinct values of y in each group:\nSELECT x, count(DISTINCT y) FROM table3 GROUP BY x;\n-- Output:\n-- NULL 1\n--    a 2\n--    b 1\n\n-- Filter groups to keep only those with at least 2 rows:\nSELECT x FROM table3 GROUP BY x HAVING count(*) >= 2;\n-- Output:\n-- NULL\n--    a\n```\n\n```sql\nCREATE TABLE table4(x TEXT, y INTEGER);\nINSERT INTO table4(x,y) VALUES\n    ('a', 3),\n    ('a', 1),\n    ('a', 2),\n    ('b', NULL),\n    ('b', 4);\n\nSELECT\n  x, \n  -- 1. Group by x\n  -- 2. Remove rows where y is NULL within each group\n  -- 3. Order by y within a group\n  -- 4. Aggregate the values into a JSON array\n  json_group_array(y ORDER BY y) FILTER (WHERE y IS NOT NULL) AS agg1,\n\n  -- Another aggregation with a different filter:\n  json_group_array(y ORDER BY y) FILTER (WHERE y >= 2) AS agg2\nFROM table4\nGROUP BY x;\n-- Output:\n-- x   agg1   agg2\n-- a [1,2,3] [2,3]\n-- b [4]     [4]\n```\n"};var gT="version-3.49.1";var OT=(t,n,e,i,E)=>({builtinFunctions:va.map(d=>{let R=ci[d];switch(t&&(d=d.toUpperCase()),d){case"->":case"->>":return{label:d,kind:e.Function,detail:d+(R?.args??""),documentation:i(Ar[d])};default:return{label:d,kind:e.Function,detail:d+(R?.args??""),documentation:R===void 0?void 0:i(R.docs+`

*source: sqlite.org*`)}}}),keywords:[...ts.entries()].flatMap(([d,{syntax:R,help:_}])=>{if(d==="NOTNULL"||d==="ISNULL")return[];let I=_!==void 0?Ar[_]:d.toUpperCase()in Ar?Ar[d.toUpperCase()]:void 0;if(!n||!E)return[{label:d,kind:e.Keyword,documentation:I!==void 0?i(I):void 0,meta:{keyword:d}}];{let S="";for(let C of R)S+=`### ${st(C)}
![${st(C)}](${st(E(`syntax/${C}.svg`))})
`;return[{label:d,kind:e.Keyword,documentation:S?i((I===void 0?"":I+`

`)+S+`

---
SQLite ${st(gT)}`):I!==void 0?i(I):void 0,meta:{keyword:d}}]}}),storageClasses:["INT","INTEGER","REAL","TEXT","BLOB"].map(d=>({label:d,kind:e.EnumMember}))});var fi={analysis_limit:{signature:`PRAGMA analysis_limit;
PRAGMA analysis_limit = N;`,docs:"Query or change a limit on the [approximate ANALYZE](https://www.sqlite.org/lang_analyze.html#approx) setting. This is the approximate number of rows examined in each index by the [ANALYZE](https://www.sqlite.org/lang_analyze.html) command. If the argument _N_ is omitted, then the analysis limit is unchanged. If the limit is zero, then the analysis limit is disabled and the ANALYZE command will examine all rows of each index. If N is greater than zero, then the analysis limit is set to N and subsequent ANALYZE commands will stop analyzing each index after it has examined approximately N rows. If N is a negative number or something other than an integer value, then the pragma behaves as if the N argument was omitted. In all cases, the value returned is the new analysis limit used for subsequent ANALYZE commands. This pragma can be used to help the ANALYZE command run faster on large databases. The results of analysis are not as good when only part of each index is examined, but the results are usually good enough. Setting N to 100 or 1000 allows the ANALYZE command to run quickly, even on enormous database files. This pragma was added in SQLite version 3.32.0 (2020-05-22). The current implementation only uses the lower 31 bits of the N value - higher order bits are silently ignored. Future versions of SQLite might begin using higher order bits. Beginning with SQLite version 3.46.0 (2024-05-23), the recommended way of running [ANALYZE](https://www.sqlite.org/lang_analyze.html) is with the [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) command. The [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) will automatically set a reasonable, temporary analysis limit that ensures that the [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) command will finish quickly even on enormous databases. Applications that use the [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) instead of running [ANALYZE](https://www.sqlite.org/lang_analyze.html) directly do not need to set an analysis limit."},application_id:{signature:`PRAGMA schema.application_id;
PRAGMA schema.application_id = integer;`,docs:'The application\\_id PRAGMA is used to query or set the 32-bit signed big-endian "Application ID" integer located at offset 68 into the [database header](https://www.sqlite.org/fileformat2.html#database_header). Applications that use SQLite as their [application file-format](https://www.sqlite.org/appfileformat.html) should set the Application ID integer to a unique integer so that utilities such as [file(1)](http://www.darwinsys.com/file/) can determine the specific file type rather than just reporting "SQLite3 Database". A list of assigned application IDs can be seen by consulting the [magic.txt](https://sqlite.org/src/artifact?ci=trunk&filename=magic.txt) file in the SQLite source repository. See also the [user\\_version pragma](https://www.sqlite.org/pragma.html#pragma_user_version).'},auto_vacuum:{signature:`PRAGMA schema.auto_vacuum;
PRAGMA schema.auto_vacuum = 0 | NONE | 1 | FULL | 2 | INCREMENTAL;`,docs:'Query or set the auto-vacuum status in the database.The default setting for auto-vacuum is 0 or "none", unless the [SQLITE\\_DEFAULT\\_AUTOVACUUM](https://www.sqlite.org/compile.html#default_autovacuum) compile-time option is used. The "none" setting means that auto-vacuum is disabled. When auto-vacuum is disabled and data is deleted data from a database, the database file remains the same size. Unused database file pages are added to a "[freelist](https://www.sqlite.org/fileformat2.html#freelist)" and reused for subsequent inserts. So no database file space is lost. However, the database file does not shrink. In this mode the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command can be used to rebuild the entire database file and thus reclaim unused disk space.When the auto-vacuum mode is 1 or "full", the freelist pages are moved to the end of the database file and the database file is truncated to remove the freelist pages at every transaction commit. Note, however, that auto-vacuum only truncates the freelist pages from the file. Auto-vacuum does not defragment the database nor repack individual database pages the way that the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command does. In fact, because it moves pages around within the file, auto-vacuum can actually make fragmentation worse.Auto-vacuuming is only possible if the database stores some additional information that allows each database page to be traced backwards to its referrer. Therefore, auto-vacuuming must be turned on before any tables are created. It is not possible to enable or disable auto-vacuum after a table has been created.When the value of auto-vacuum is 2 or "incremental" then the additional information needed to do auto-vacuuming is stored in the database file but auto-vacuuming does not occur automatically at each commit as it does with auto\\_vacuum=full. In incremental mode, the separate [incremental\\_vacuum](https://www.sqlite.org/pragma.html#pragma_incremental_vacuum) pragma must be invoked to cause the auto-vacuum to occur.The database connection can be changed between full and incremental autovacuum mode at any time. However, changing from "none" to "full" or "incremental" can only occur when the database is new (no tables have yet been created) or by running the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command. To change auto-vacuum modes, first use the auto\\_vacuum pragma to set the new desired mode, then invoke the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command to reorganize the entire database file. To change from "full" or "incremental" back to "none" always requires running [VACUUM](https://www.sqlite.org/lang_vacuum.html) even on an empty database. When the auto\\_vacuum pragma is invoked with no arguments, it returns the current auto\\_vacuum mode.'},automatic_index:{signature:`PRAGMA automatic_index;
PRAGMA automatic_index = boolean;`,docs:"Query, set, or clear the [automatic indexing](https://www.sqlite.org/optoverview.html#autoindex) capability. [Automatic indexing](https://www.sqlite.org/optoverview.html#autoindex) is enabled by default as of [version 3.7.17](https://www.sqlite.org/releaselog/3_7_17.html) (2013-05-20), but this might change in future releases of SQLite."},busy_timeout:{signature:`PRAGMA busy_timeout;
PRAGMA busy_timeout = milliseconds;`,docs:"Query or change the setting of the [busy timeout](https://www.sqlite.org/c3ref/busy_timeout.html). This pragma is an alternative to the [sqlite3\\_busy\\_timeout()](https://www.sqlite.org/c3ref/busy_timeout.html) C-language interface which is made available as a pragma for use with language bindings that do not provide direct access to [sqlite3\\_busy\\_timeout()](https://www.sqlite.org/c3ref/busy_timeout.html). Each database connection can only have a single [busy handler](https://www.sqlite.org/c3ref/busy_handler.html). This PRAGMA sets the busy handler for the process, possibly overwriting any previously set busy handler."},cache_size:{signature:`PRAGMA schema.cache_size;
PRAGMA schema.cache_size = pages;
PRAGMA schema.cache_size = -kibibytes;`,docs:"Query or change the suggested maximum number of database disk pages that SQLite will hold in memory at once per open database file. Whether or not this suggestion is honored is at the discretion of the [Application Defined Page Cache](https://www.sqlite.org/c3ref/pcache_methods2.html). The default page cache that is built into SQLite honors the request, however alternative application-defined page cache implementations may choose to interpret the suggested cache size in different ways or to ignore it all together. The default suggested cache size is -2000, which means the cache size is limited to 2048000 bytes of memory. The default suggested cache size can be altered using the [SQLITE\\_DEFAULT\\_CACHE\\_SIZE](https://www.sqlite.org/compile.html#default_cache_size) compile-time options. The TEMP database has a default suggested cache size of 0 pages.If the argument N is positive then the suggested cache size is set to N. If the argument N is negative, then the number of cache pages is adjusted to be a number of pages that would use approximately abs(N\\*1024) bytes of memory based on the current page size. SQLite remembers the number of pages in the page cache, not the amount of memory used. So if you set the cache size using a negative number and subsequently change the page size (using the [PRAGMA page\\_size](https://www.sqlite.org/pragma.html#pragma_page_size) command) then the maximum amount of cache memory will go up or down in proportion to the change in page size. _Backwards compatibility note:_ The behavior of cache\\_size with a negative N was different prior to [version 3.7.10](https://www.sqlite.org/releaselog/3_7_10.html) (2012-01-16). In earlier versions, the number of pages in the cache was set to the absolute value of N.When you change the cache size using the cache\\_size pragma, the change only endures for the current session. The cache size reverts to the default value when the database is closed and reopened.The default page cache implemention does not allocate the full amount of cache memory all at once. Cache memory is allocated in smaller chunks on an as-needed basis. The page\\_cache setting is a (suggested) upper bound on the amount of memory that the cache can use, not the amount of memory it will use all of the time. This is the behavior of the default page cache implementation, but an [application defined page cache](https://www.sqlite.org/c3ref/pcache_methods2.html) is free to behave differently if it wants."},cache_spill:{signature:`PRAGMA cache_spill;
PRAGMA cache_spill= boolean;
PRAGMA schema.cache_spill= N;`,docs:'The cache\\_spill pragma enables or disables the ability of the pager to spill dirty cache pages to the database file in the middle of a transaction. Cache\\_spill is enabled by default and most applications should leave it that way as cache spilling is usually advantageous. However, a cache spill has the side-effect of acquiring an [EXCLUSIVE lock](https://www.sqlite.org/lockingv3.html#excl_lock) on the database file. Hence, some applications that have large long-running transactions may want to disable cache spilling in order to prevent the application from acquiring an exclusive lock on the database until the moment that the transaction [COMMIT](https://www.sqlite.org/lang_transaction.html)s. The "PRAGMA cache\\_spill=_N_" form of this pragma sets a minimum cache size threshold required for spilling to occur. The number of pages in cache must exceed both the cache\\_spill threshold and the maximum cache size set by the [PRAGMA cache\\_size](https://www.sqlite.org/pragma.html#pragma_cache_size) statement in order for spilling to occur. The "PRAGMA cache\\_spill=_boolean_" form of this pragma applies across all databases attached to the database connection. But the "PRAGMA cache\\_spill=_N_" form of this statement only applies to the "main" schema or whatever other schema is specified as part of the statement.'},case_sensitive_like:{signature:"PRAGMA case_sensitive_like = boolean;",docs:"The default behavior of the [LIKE](https://www.sqlite.org/lang_expr.html#like) operator is to ignore case for ASCII characters. Hence, by default **'a' LIKE 'A'** is true. The case\\_sensitive\\_like pragma installs a new application-defined LIKE function that is either case sensitive or insensitive depending on the value of the case\\_sensitive\\_like pragma. When case\\_sensitive\\_like is disabled, the default LIKE behavior is expressed. When case\\_sensitive\\_like is enabled, case becomes significant. So, for example, **'a' LIKE 'A'** is false but **'a' LIKE 'a'** is still true.This pragma uses [sqlite3\\_create\\_function()](https://www.sqlite.org/c3ref/create_function.html) to overload the LIKE and GLOB functions, which may override previous implementations of LIKE and GLOB registered by the application. This pragma only changes the behavior of the SQL [LIKE](https://www.sqlite.org/lang_expr.html#like) operator. It does not change the behavior of the [sqlite3\\_strlike()](https://www.sqlite.org/c3ref/strlike.html) C-language interface, which is always case insensitive.**WARNING:** If a database uses the LIKE operator anywhere in the schema, such as in a [CHECK constraint](https://www.sqlite.org/lang_createtable.html#ckconst) or in an [expression index](https://www.sqlite.org/expridx.html) or in the WHERE clause of a [partial index](https://www.sqlite.org/partialindex.html), then changing the definition of the LIKE operator using this PRAGMA can cause the database to appear to be corrupt. [PRAGMA integrity\\_check](https://www.sqlite.org/pragma.html#pragma_integrity_check) will report errors. The database is not really corrupt in that changing the behavior of LIKE back to the way it was when the schema was defined and the database was populated will clear the problem. If the use of LIKE occurs only in indexes, then the problem can be cleared by running [REINDEX](https://www.sqlite.org/lang_reindex.html). Nevertheless, the use of the case\\_sensitive\\_like pragma is discouraged. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},cell_size_check:{signature:`PRAGMA cell_size_check;
PRAGMA cell_size_check = boolean;`,docs:'The cell\\_size\\_check pragma enables or disables additional sanity checking on database b-tree pages as they are initially read from disk. With cell size checking enabled, database corruption is detected earlier and is less likely to "spread". However, there is a small performance hit for doing the extra checks and so cell size checking is turned off by default.'},checkpoint_fullfsync:{signature:`PRAGMA checkpoint_fullfsync;
PRAGMA checkpoint_fullfsync = boolean;`,docs:"Query or change the fullfsync flag for [checkpoint](https://www.sqlite.org/wal.html#ckpt) operations. If this flag is set, then the F\\_FULLFSYNC syncing method is used during checkpoint operations on systems that support F\\_FULLFSYNC. The default value of the checkpoint\\_fullfsync flag is off. Only Mac OS-X supports F\\_FULLFSYNC.If the [fullfsync](https://www.sqlite.org/pragma.html#pragma_fullfsync) flag is set, then the F\\_FULLFSYNC syncing method is used for all sync operations and the checkpoint\\_fullfsync setting is irrelevant."},collation_list:{signature:"PRAGMA collation_list;",docs:"Return a list of the collating sequences defined for the current database connection."},compile_options:{signature:"PRAGMA compile_options;",docs:'This pragma returns the names of [compile-time options](https://www.sqlite.org/compile.html) used when building SQLite, one option per row. The "SQLITE\\_" prefix is omitted from the returned option names. See also the [sqlite3\\_compileoption\\_get()](https://www.sqlite.org/c3ref/compileoption_get.html) C/C++ interface and the [sqlite\\_compileoption\\_get()](https://www.sqlite.org/lang_corefunc.html#sqlite_compileoption_get) SQL functions.'},count_changes:{signature:`PRAGMA count_changes;
PRAGMA count_changes = boolean;`,docs:"Query or change the count-changes flag. Normally, when the count-changes flag is not set, [INSERT](https://www.sqlite.org/lang_insert.html), [UPDATE](https://www.sqlite.org/lang_update.html) and [DELETE](https://www.sqlite.org/lang_delete.html) statements return no data. When count-changes is set, each of these commands returns a single row of data consisting of one integer value - the number of rows inserted, modified or deleted by the command. The returned change count does not include any insertions, modifications or deletions performed by triggers, any changes made automatically by [foreign key actions](https://www.sqlite.org/foreignkeys.html#fk_actions), or updates caused by an [upsert](https://www.sqlite.org/lang_upsert.html).Another way to get the row change counts is to use the [sqlite3\\_changes()](https://www.sqlite.org/c3ref/changes.html) or [sqlite3\\_total\\_changes()](https://www.sqlite.org/c3ref/total_changes.html) interfaces. There is a subtle different, though. When an INSERT, UPDATE, or DELETE is run against a view using an [INSTEAD OF trigger](https://www.sqlite.org/lang_createtrigger.html#instead_of_trigger), the count\\_changes pragma reports the number of rows in the view that fired the trigger, whereas [sqlite3\\_changes()](https://www.sqlite.org/c3ref/changes.html) and [sqlite3\\_total\\_changes()](https://www.sqlite.org/c3ref/total_changes.html) do not. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},data_store_directory:{signature:`PRAGMA data_store_directory;
PRAGMA data_store_directory = 'directory-name';`,docs:"Query or change the value of the [sqlite3\\_data\\_directory](https://www.sqlite.org/c3ref/data_directory.html) global variable, which windows operating-system interface backends use to determine where to store database files specified using a relative pathname.Changing the data\\_store\\_directory setting is not threadsafe. Never change the data\\_store\\_directory setting if another thread within the application is running any SQLite interface at the same time. Doing so results in undefined behavior. Changing the data\\_store\\_directory setting writes to the [sqlite3\\_data\\_directory](https://www.sqlite.org/c3ref/data_directory.html) global variable and that global variable is not protected by a mutex.This facility is provided for WinRT which does not have an OS mechanism for reading or changing the current working directory. The use of this pragma in any other context is discouraged and may be disallowed in future releases. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},data_version:{signature:"PRAGMA schema.data_version;",docs:'The "PRAGMA data\\_version" command provides an indication that the database file has been modified. Interactive programs that hold database content in memory or that display database content on-screen can use the PRAGMA data\\_version command to determine if they need to flush and reload their memory or update the screen display.The integer values returned by two invocations of "PRAGMA data\\_version" from the same connection will be different if changes were committed to the database by any other connection in the interim. The "PRAGMA data\\_version" value is unchanged for commits made on the same database connection. The behavior of "PRAGMA data\\_version" is the same for all database connections, including database connections in separate processes and [shared cache](https://www.sqlite.org/sharedcache.html) database connections. The "PRAGMA data\\_version" value is a local property of each database connection and so values returned by two concurrent invocations of "PRAGMA data\\_version" on separate database connections are often different even though the underlying database is identical. It is only meaningful to compare the "PRAGMA data\\_version" values returned by the same database connection at two different points in time.'},database_list:{signature:"PRAGMA database_list;",docs:'This pragma works like a query to return one row for each database attached to the current database connection. The second column is "main" for the main database file, "temp" for the database file used to store TEMP objects, or the name of the ATTACHed database for other database files. The third column is the name of the database file itself, or an empty string if the database is not associated with a file.'},default_cache_size:{signature:`PRAGMA schema.default_cache_size;
PRAGMA schema.default_cache_size= Number-of-pages;`,docs:"This pragma queries or sets the suggested maximum number of pages of disk cache that will be allocated per open database file. The difference between this pragma and [cache\\_size](https://www.sqlite.org/pragma.html#pragma_cache_size) is that the value set here persists across database connections. The value of the default cache size is stored in the 4-byte big-endian integer located at offset 48 in the header of the database file. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},defer_foreign_keys:{signature:`PRAGMA defer_foreign_keys;
PRAGMA defer_foreign_keys = boolean;`,docs:'When the defer\\_foreign\\_keys [PRAGMA](https://www.sqlite.org/pragma.html#syntax) is on, enforcement of all [foreign key constraints](https://www.sqlite.org/foreignkeys.html) is delayed until the outermost transaction is committed. The defer\\_foreign\\_keys pragma defaults to OFF so that foreign key constraints are only deferred if they are created as "DEFERRABLE INITIALLY DEFERRED". The defer\\_foreign\\_keys pragma is automatically switched off at each COMMIT or ROLLBACK. Hence, the defer\\_foreign\\_keys pragma must be separately enabled for each transaction. This pragma is only meaningful if foreign key constraints are enabled, of course.The [sqlite3\\_db\\_status](https://www.sqlite.org/c3ref/db_status.html)(db,[SQLITE\\_DBSTATUS\\_DEFERRED\\_FKS](https://www.sqlite.org/c3ref/c_dbstatus_options.html#sqlitedbstatusdeferredfks),...) C-language interface can be used during a transaction to determine if there are deferred and unresolved foreign key constraints.'},empty_result_callbacks:{signature:`PRAGMA empty_result_callbacks;
PRAGMA empty_result_callbacks = boolean;`,docs:"Query or change the empty-result-callbacks flag.The empty-result-callbacks flag affects the [sqlite3\\_exec()](https://www.sqlite.org/c3ref/exec.html) API only. Normally, when the empty-result-callbacks flag is cleared, the callback function supplied to the [sqlite3\\_exec()](https://www.sqlite.org/c3ref/exec.html) is not invoked for commands that return zero rows of data. When empty-result-callbacks is set in this situation, the callback function is invoked exactly once, with the third parameter set to 0 (NULL). This is to enable programs that use the [sqlite3\\_exec()](https://www.sqlite.org/c3ref/exec.html) API to retrieve column-names even when a query returns no data. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},encoding:{signature:`PRAGMA encoding;
PRAGMA encoding = 'UTF-8';
PRAGMA encoding = 'UTF-16';
PRAGMA encoding = 'UTF-16le';
PRAGMA encoding = 'UTF-16be';`,docs:`In first form, if the main database has already been created, then this pragma returns the text encoding used by the main database, one of 'UTF-8', 'UTF-16le' (little-endian UTF-16 encoding) or 'UTF-16be' (big-endian UTF-16 encoding). If the main database has not already been created, then the value returned is the text encoding that will be used to create the main database, if it is created by this session.The second through fifth forms of this pragma set the encoding that the main database will be created with if it is created by this session. The string 'UTF-16' is interpreted as "UTF-16 encoding using native machine byte-ordering". It is not possible to change the text encoding of a database after it has been created and any attempt to do so will be silently ignored.If no encoding is first set with this pragma, then the encoding with which the main database will be created defaults to one determined by the [API used to open the connection](https://www.sqlite.org/c3ref/open.html).Once an encoding has been set for a database, it cannot be changed.Databases created by the [ATTACH](https://www.sqlite.org/lang_attach.html) command always use the same encoding as the main database. An attempt to [ATTACH](https://www.sqlite.org/lang_attach.html) a database with a different text encoding from the "main" database will fail.`},foreign_key_check:{signature:`PRAGMA schema.foreign_key_check;
PRAGMA schema.foreign_key_check(table-name);`,docs:'The foreign\\_key\\_check pragma checks the database, or the table called "_table-name_", for [foreign key constraints](https://www.sqlite.org/foreignkeys.html) that are violated. The foreign\\_key\\_check pragma returns one row output for each foreign key violation. There are four columns in each result row. The first column is the name of the table that contains the REFERENCES clause. The second column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) of the row that contains the invalid REFERENCES clause, or NULL if the child table is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table. The third column is the name of the table that is referred to. The fourth column is the index of the specific foreign key constraint that failed. The fourth column in the output of the foreign\\_key\\_check pragma is the same integer as the first column in the output of the [foreign\\_key\\_list pragma](https://www.sqlite.org/pragma.html#pragma_foreign_key_list). When a "_table-name_" is specified, the only foreign key constraints checked are those created by REFERENCES clauses in the CREATE TABLE statement for _table-name_.'},foreign_key_list:{signature:"PRAGMA foreign_key_list(table-name);",docs:'This pragma returns one row for each [foreign key constraint](https://www.sqlite.org/foreignkeys.html) created by a REFERENCES clause in the CREATE TABLE statement of table "_table-name_".'},foreign_keys:{signature:`PRAGMA foreign_keys;
PRAGMA foreign_keys = boolean;`,docs:"Query, set, or clear the enforcement of [foreign key constraints](https://www.sqlite.org/foreignkeys.html). This pragma is a no-op within a transaction; foreign key constraint enforcement may only be enabled or disabled when there is no pending [BEGIN](https://www.sqlite.org/lang_transaction.html) or [SAVEPOINT](https://www.sqlite.org/lang_savepoint.html). Changing the foreign\\_keys setting affects the execution of all statements prepared using the database connection, including those prepared before the setting was changed. Any existing statements prepared using the legacy [sqlite3\\_prepare()](https://www.sqlite.org/c3ref/prepare.html) interface may fail with an [SQLITE\\_SCHEMA](https://www.sqlite.org/rescode.html#schema) error after the foreign\\_keys setting is changed. As of SQLite [version 3.6.19](https://www.sqlite.org/releaselog/3_6_19.html), the default setting for foreign key enforcement is OFF. However, that might change in a future release of SQLite. The default setting for foreign key enforcement can be specified at compile-time using the [SQLITE\\_DEFAULT\\_FOREIGN\\_KEYS](https://www.sqlite.org/compile.html#default_foreign_keys) preprocessor macro. To minimize future problems, applications should set the foreign key enforcement flag as required by the application and not depend on the default setting."},freelist_count:{signature:"PRAGMA schema.freelist_count;",docs:"Return the number of unused pages in the database file."},full_column_names:{signature:`PRAGMA full_column_names;
PRAGMA full_column_names = boolean;`,docs:`Query or change the full\\_column\\_names flag. This flag together with the [short\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_short_column_names) flag determine the way SQLite assigns names to result columns of [SELECT](https://www.sqlite.org/lang_select.html) statements. Result columns are named by applying the following rules in order:*   If there is an AS clause on the result, then the name of the column is the right-hand side of the AS clause.
    
*   If the result is a general expression, not a just the name of a source table column, then the name of the result is a copy of the expression text.
    
*   If the [short\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_short_column_names) pragma is ON, then the name of the result is the name of the source table column without the source table name prefix: COLUMN.
    
*   If both pragmas [short\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_short_column_names) and [full\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_full_column_names) are OFF then case (2) applies.
    
*   The name of the result column is a combination of the source table and source column name: TABLE.COLUMN
    
**This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated).`},fullfsync:{signature:`PRAGMA fullfsync;
PRAGMA fullfsync = boolean;`,docs:"Query or change the fullfsync flag. This flag determines whether or not the F\\_FULLFSYNC syncing method is used on systems that support it. The default value of the fullfsync flag is off. Only Mac OS X supports F\\_FULLFSYNC.See also [checkpoint\\_fullfsync](https://www.sqlite.org/pragma.html#pragma_checkpoint_fullfsync)."},function_list:{signature:"PRAGMA function_list;",docs:"This pragma returns a list of SQL functions known to the database connection. Each row of the result describes a single calling signature for a single SQL function. Some SQL functions will have multiple rows in the result set if they can (for example) be invoked with a varying number of arguments or can accept text in various encodings."},hard_heap_limit:{signature:`PRAGMA hard_heap_limit;
PRAGMA hard_heap_limit= N`,docs:"This pragma invokes the [sqlite3\\_hard\\_heap\\_limit64()](https://www.sqlite.org/c3ref/hard_heap_limit64.html) interface with the argument N, if N is specified and N is a positive integer that is less than the current hard heap limit. The hard\\_heap\\_limit pragma always returns the same integer that would be returned by the [sqlite3\\_hard\\_heap\\_limit64](https://www.sqlite.org/c3ref/hard_heap_limit64.html)(-1) C-language function. That is to say, it always returns the value of the hard heap limit that is set after any changes imposed by this PRAGMA. This pragma can only lower the heap limit, never raise it. The C-language interface [sqlite3\\_hard\\_heap\\_limit64()](https://www.sqlite.org/c3ref/hard_heap_limit64.html) must be used to raise the heap limit.See also the [soft\\_heap\\_limit pragma](https://www.sqlite.org/pragma.html#pragma_soft_heap_limit)."},ignore_check_constraints:{signature:"PRAGMA ignore_check_constraints = boolean;",docs:"This pragma enables or disables the enforcement of CHECK constraints. The default setting is off, meaning that CHECK constraints are enforced by default."},incremental_vacuum:{signature:`PRAGMA schema.incremental_vacuum(N);
PRAGMA schema.incremental_vacuum;`,docs:'The incremental\\_vacuum pragma causes up to _N_ pages to be removed from the [freelist](https://www.sqlite.org/fileformat2.html#freelist). The database file is truncated by the same amount. The incremental\\_vacuum pragma has no effect if the database is not in [auto\\_vacuum=incremental](about:blank#pragma_auto_vacuum) mode or if there are no pages on the freelist. If there are fewer than _N_ pages on the freelist, or if _N_ is less than 1, or if the "(_N_)" argument is omitted, then the entire freelist is cleared.'},index_info:{signature:"PRAGMA schema.index_info(index-name);",docs:`This pragma returns one row for each key column in the named index. A key column is a column that is actually named in the [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) index statement or [UNIQUE constraint](https://www.sqlite.org/lang_createtable.html#uniqueconst) or [PRIMARY KEY constraint](https://www.sqlite.org/lang_createtable.html#primkeyconst) that created the index. Index entries also usually contain auxiliary columns that point back to the table row being indexed. The auxiliary index-columns are not shown by the index\\_info pragma, but they are listed by the [index\\_xinfo pragma](https://www.sqlite.org/pragma.html#pragma_index_xinfo).Output columns from the index\\_info pragma are as follows:*   The rank of the column within the index. (0 means left-most.)
*   The rank of the column within the table being indexed. A value of -1 means [rowid](https://www.sqlite.org/lang_createtable.html#rowid) and a value of -2 means that an [expression](https://www.sqlite.org/expridx.html) is being used.
*   The name of the column being indexed. This columns is NULL if the column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) or an [expression](https://www.sqlite.org/expridx.html).
If there is no index named _index-name_ but there is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table with that name, then (as of SQLite [version 3.30.0](https://www.sqlite.org/releaselog/3_30_0.html) on 2019-10-04) this pragma returns the PRIMARY KEY columns of the WITHOUT ROWID table as they are used in the records of the underlying b-tree, which is to say with duplicate columns removed.`},index_list:{signature:"PRAGMA schema.index_list(table-name);",docs:`This pragma returns one row for each index associated with the given table. Output columns from the index\\_list pragma are as follows:*   A sequence number assigned to each index for internal tracking purposes.
*   The name of the index.
*   "1" if the index is UNIQUE and "0" if not.
*   "c" if the index was created by a [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) statement, "u" if the index was created by a [UNIQUE constraint](https://www.sqlite.org/lang_createtable.html#uniqueconst), or "pk" if the index was created by a [PRIMARY KEY constraint](https://www.sqlite.org/lang_createtable.html#primkeyconst).
*   "1" if the index is a [partial index](https://www.sqlite.org/partialindex.html) and "0" if not.`},index_xinfo:{signature:"PRAGMA schema.index_xinfo(index-name);",docs:`This pragma returns information about every column in an index. Unlike this [index\\_info pragma](https://www.sqlite.org/pragma.html#pragma_index_info), this pragma returns information about every column in the index, not just the key columns. (A key column is a column that is actually named in the [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) index statement or [UNIQUE constraint](https://www.sqlite.org/lang_createtable.html#uniqueconst) or [PRIMARY KEY constraint](https://www.sqlite.org/lang_createtable.html#primkeyconst) that created the index. Auxiliary columns are additional columns needed to locate the table entry that corresponds to each index entry.) Output columns from the index\\_xinfo pragma are as follows:*   The rank of the column within the index. (0 means left-most. Key columns come before auxiliary columns.)
*   The rank of the column within the table being indexed, or -1 if the index-column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) of the table being indexed and -2 if the [index is on an expression](https://www.sqlite.org/expridx.html).
*   The name of the column being indexed, or NULL if the index-column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) of the table being indexed or an [expression](https://www.sqlite.org/expridx.html).
*   1 if the index-column is sorted in reverse (DESC) order by the index and 0 otherwise.
*   The name for the [collating sequence](https://www.sqlite.org/datatype3.html#collation) used to compare values in the index-column.
*   1 if the index-column is a key column and 0 if the index-column is an auxiliary column.
If there is no index named _index-name_ but there is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table with that name, then (as of SQLite [version 3.30.0](https://www.sqlite.org/releaselog/3_30_0.html) on 2019-10-04) this pragma returns the columns of the WITHOUT ROWID table as they are used in the records of the underlying b-tree, which is to say with de-duplicated PRIMARY KEY columns first followed by data columns.`},integrity_check:{signature:`PRAGMA schema.integrity_check;
PRAGMA schema.integrity_check(N)PRAGMA schema.integrity_check(TABLENAME)`,docs:`This pragma does a low-level formatting and consistency check of the database. The integrity\\_check pragma look for:*   Table or index entries that are out of sequence
*   Misformatted records
*   Missing pages
*   Missing or surplus index entries
*   UNIQUE, CHECK, and NOT NULL constraint errors
*   Integrity of the freelist
*   Sections of the database that are used more than once, or not at all
If the integrity\\_check pragma finds problems, strings are returned (as multiple rows with a single column per row) which describe the problems. Pragma integrity\\_check will return at most _N_ errors before the analysis quits, with N defaulting to 100. If pragma integrity\\_check finds no errors, a single row with the value 'ok' is returned.The usual case is that the entire database file is checked. However, if the argument is _TABLENAME_, then checking is only performed for the the table named and its associated indexes. This is called a "partial integrity check". Because only a subset of the database is checked, errors such as unused sections of the file or duplication use of the same section of the file by two or more tables cannot be detected. The freelist is only verified on a partial integrity check if _TABLENAME_ is [sqlite\\_schema](https://www.sqlite.org/schematab.html) or one of its aliases. Support for partial integrity checks was added with version 3.33.0 (2020-08-14). PRAGMA integrity\\_check does not find [FOREIGN KEY](https://www.sqlite.org/foreignkeys.html) errors. Use the [PRAGMA foreign\\_key\\_check](https://www.sqlite.org/pragma.html#pragma_foreign_key_check) command to find errors in FOREIGN KEY constraints.See also the [PRAGMA quick\\_check](https://www.sqlite.org/pragma.html#pragma_quick_check) command which does most of the checking of PRAGMA integrity\\_check but runs much faster.`},journal_mode:{signature:`PRAGMA schema.journal_mode;
PRAGMA schema.journal_mode= DELETE | TRUNCATE | PERSIST | MEMORY | WAL | OFF`,docs:'This pragma queries or sets the journal mode for databases associated with the current [database connection](https://www.sqlite.org/c3ref/sqlite3.html).The first form of this pragma queries the current journaling mode for _database_. When _database_ is omitted, the "main" database is queried.The second form changes the journaling mode for "_database_" or for all attached databases if "_database_" is omitted. The new journal mode is returned. If the journal mode could not be changed, the original journal mode is returned.The DELETE journaling mode is the normal behavior. In the DELETE mode, the rollback journal is deleted at the conclusion of each transaction. Indeed, the delete operation is the action that causes the transaction to commit. (See the document titled [Atomic Commit In SQLite](https://www.sqlite.org/atomiccommit.html) for additional detail.)The TRUNCATE journaling mode commits transactions by truncating the rollback journal to zero-length instead of deleting it. On many systems, truncating a file is much faster than deleting the file since the containing directory does not need to be changed.The PERSIST journaling mode prevents the rollback journal from being deleted at the end of each transaction. Instead, the header of the journal is overwritten with zeros. This will prevent other database connections from rolling the journal back. The PERSIST journaling mode is useful as an optimization on platforms where deleting or truncating a file is much more expensive than overwriting the first block of a file with zeros. See also: [PRAGMA journal\\_size\\_limit](https://www.sqlite.org/pragma.html#pragma_journal_size_limit) and [SQLITE\\_DEFAULT\\_JOURNAL\\_SIZE\\_LIMIT](https://www.sqlite.org/compile.html#default_journal_size_limit).The MEMORY journaling mode stores the rollback journal in volatile RAM. This saves disk I/O but at the expense of database safety and integrity. If the application using SQLite crashes in the middle of a transaction when the MEMORY journaling mode is set, then the database file will very likely [go corrupt](https://www.sqlite.org/howtocorrupt.html#cfgerr).The WAL journaling mode uses a [write-ahead log](https://www.sqlite.org/wal.html) instead of a rollback journal to implement transactions. The WAL journaling mode is persistent; after being set it stays in effect across multiple database connections and after closing and reopening the database. A database in WAL journaling mode can only be accessed by SQLite [version 3.7.0](https://www.sqlite.org/releaselog/3_7_0.html) (2010-07-21) or later.The OFF journaling mode disables the rollback journal completely. No rollback journal is ever created and hence there is never a rollback journal to delete. The OFF journaling mode disables the atomic commit and rollback capabilities of SQLite. The [ROLLBACK](https://www.sqlite.org/lang_transaction.html) command no longer works; it behaves in an undefined way. Applications must avoid using the [ROLLBACK](https://www.sqlite.org/lang_transaction.html) command when the journal mode is OFF. If the application crashes in the middle of a transaction when the OFF journaling mode is set, then the database file will very likely [go corrupt](https://www.sqlite.org/howtocorrupt.html#cfgerr). Without a journal, there is no way for a statement to unwind partially completed operations following a constraint error. This might also leave the database in a corrupted state. For example, if a duplicate entry causes a [CREATE UNIQUE INDEX](https://www.sqlite.org/lang_createindex.html) statement to fail half-way through, it will leave behind a partially created, and hence corrupt, index. Because OFF journaling mode allows the database file to be corrupted using ordinary SQL, it is disabled when [SQLITE\\_DBCONFIG\\_DEFENSIVE](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigdefensive) is enabled.Note that the journal\\_mode for an [in-memory database](https://www.sqlite.org/inmemorydb.html) is either MEMORY or OFF and can not be changed to a different value. An attempt to change the journal\\_mode of an [in-memory database](https://www.sqlite.org/inmemorydb.html) to any setting other than MEMORY or OFF is ignored. Note also that the journal\\_mode cannot be changed while a transaction is active.'},journal_size_limit:{signature:`PRAGMA schema.journal_size_limit;
PRAGMA schema.journal_size_limit = N;`,docs:'If a database connection is operating in [exclusive locking mode](https://www.sqlite.org/pragma.html#pragma_locking_mode) or in [persistent journal mode](https://www.sqlite.org/pragma.html#pragma_journal_mode) (PRAGMA journal\\_mode=persist) then after committing a transaction the [rollback journal](https://www.sqlite.org/lockingv3.html#rollback) file may remain in the file-system. This increases performance for subsequent transactions since overwriting an existing file is faster than append to a file, but it also consumes file-system space. After a large transaction (e.g. a [VACUUM](https://www.sqlite.org/lang_vacuum.html)), the rollback journal file may consume a very large amount of space. Similarly, in [WAL mode](https://www.sqlite.org/wal.html), the write-ahead log file is not truncated following a [checkpoint](https://www.sqlite.org/wal.html#ckpt). Instead, SQLite reuses the existing file for subsequent WAL entries since overwriting is faster than appending. The journal\\_size\\_limit pragma may be used to limit the size of rollback-journal and WAL files left in the file-system after transactions or checkpoints. Each time a transaction is committed or a WAL file resets, SQLite compares the size of the rollback journal file or WAL file left in the file-system to the size limit set by this pragma and if the journal or WAL file is larger it is truncated to the limit. The second form of the pragma listed above is used to set a new limit in bytes for the specified database. A negative number implies no limit. To always truncate rollback journals and WAL files to their minimum size, set the journal\\_size\\_limit to zero. Both the first and second forms of the pragma listed above return a single result row containing a single integer column - the value of the journal size limit in bytes. The default journal size limit is -1 (no limit). The [SQLITE\\_DEFAULT\\_JOURNAL\\_SIZE\\_LIMIT](https://www.sqlite.org/compile.html#default_journal_size_limit) preprocessor macro can be used to change the default journal size limit at compile-time.This pragma only operates on the single database specified prior to the pragma name (or on the "main" database if no database is specified.) There is no way to change the journal size limit on all attached databases using a single PRAGMA statement. The size limit must be set separately for each attached database.'},legacy_alter_table:{signature:`PRAGMA legacy_alter_table;
PRAGMA legacy_alter_table = boolean`,docs:`This pragma sets or queries the value of the legacy\\_alter\\_table flag. When this flag is on, the [ALTER TABLE RENAME](https://www.sqlite.org/lang_altertable.html#altertabrename) command (for changing the name of a table) works as it did in SQLite 3.24.0 (2018-06-04) and earlier. More specifically, when this flag is on the [ALTER TABLE RENAME](https://www.sqlite.org/lang_altertable.html#altertabrename) command only rewrites the initial occurrence of the table name in its [CREATE TABLE](https://www.sqlite.org/lang_createtable.html) statement and in any associated [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) and [CREATE TRIGGER](https://www.sqlite.org/lang_createtrigger.html) statements. Other references to the table are unmodified, including:*   References to the table within the bodies of triggers and views.
*   References to the table within CHECK constraints in the original CREATE TABLE statement.
*   References to the table within the WHERE clauses of [partial indexes](https://www.sqlite.org/partialindex.html).
This pragma is provided as a work-around for older programs that contain code that expect the incomplete behavior of [ALTER TABLE RENAME](https://www.sqlite.org/lang_altertable.html#altertabrename) found in older versions of SQLite. New applications should leave this flag turned off. For compatibility with older [virtual table](https://www.sqlite.org/vtab.html) implementations, this flag is turned on temporarily while the [sqlite3\\_module.xRename](https://www.sqlite.org/vtab.html#xrename) method is being run. The value of this flag is restored after the [sqlite3\\_module.xRename](https://www.sqlite.org/vtab.html#xrename) method finishes. The legacy alter table behavior can also be toggled on and off using the [SQLITE\\_DBCONFIG\\_LEGACY\\_ALTER\\_TABLE](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfiglegacyaltertable) option to the [sqlite3\\_db\\_config()](https://www.sqlite.org/c3ref/db_config.html) interface. The legacy alter table behavior is a per-connection setting. Turning this features on or off affects all attached database files within the [database connection](https://www.sqlite.org/c3ref/sqlite3.html). The setting does not persist. Changing this setting in one connection does not affect any other connections.`},legacy_file_format:{signature:"PRAGMA legacy_file_format;",docs:"This pragma no longer functions. It has become a no-op. The capabilities formerly provided by PRAGMA legacy\\_file\\_format are now available using the [SQLITE\\_DBCONFIG\\_LEGACY\\_FILE\\_FORMAT](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfiglegacyfileformat) option to the [sqlite3\\_db\\_config()](https://www.sqlite.org/c3ref/db_config.html) C-language interface."},locking_mode:{signature:`PRAGMA schema.locking_mode;
PRAGMA schema.locking_mode= NORMAL | EXCLUSIVE`,docs:`This pragma sets or queries the database connection locking-mode. The locking-mode is either NORMAL or EXCLUSIVE. In NORMAL locking-mode (the default unless overridden at compile-time using [SQLITE\\_DEFAULT\\_LOCKING\\_MODE](https://www.sqlite.org/compile.html#default_locking_mode)), a database connection unlocks the database file at the conclusion of each read or write transaction. When the locking-mode is set to EXCLUSIVE, the database connection never releases file-locks. The first time the database is read in EXCLUSIVE mode, a shared lock is obtained and held. The first time the database is written, an exclusive lock is obtained and held.Database locks obtained by a connection in EXCLUSIVE mode may be released either by closing the database connection, or by setting the locking-mode back to NORMAL using this pragma and then accessing the database file (for read or write). Simply setting the locking-mode to NORMAL is not enough - locks are not released until the next time the database file is accessed.There are three reasons to set the locking-mode to EXCLUSIVE.*   The application wants to prevent other processes from accessing the database file.
*   The number of system calls for filesystem operations is reduced, possibly resulting in a small performance increase.
*   [WAL](https://www.sqlite.org/wal.html) databases can be accessed in EXCLUSIVE mode without the use of shared memory. ([Additional information](https://www.sqlite.org/wal.html#noshm))
When the locking\\_mode pragma specifies a particular database, for example: PRAGMA **main.**locking\\_mode=EXCLUSIVE; then the locking mode applies only to the named database. If no database name qualifier precedes the "locking\\_mode" keyword then the locking mode is applied to all databases, including any new databases added by subsequent [ATTACH](https://www.sqlite.org/lang_attach.html) commands.The "temp" database (in which TEMP tables and indices are stored) and [in-memory databases](https://www.sqlite.org/inmemorydb.html) always uses exclusive locking mode. The locking mode of temp and [in-memory databases](https://www.sqlite.org/inmemorydb.html) cannot be changed. All other databases use the normal locking mode by default and are affected by this pragma.If the locking mode is EXCLUSIVE when first entering [WAL journal mode](https://www.sqlite.org/wal.html), then the locking mode cannot be changed to NORMAL until after exiting WAL journal mode. If the locking mode is NORMAL when first entering WAL journal mode, then the locking mode can be changed between NORMAL and EXCLUSIVE and back again at any time and without needing to exit WAL journal mode.`},max_page_count:{signature:`PRAGMA schema.max_page_count;
PRAGMA schema.max_page_count = N;`,docs:"Query or set the maximum number of pages in the database file. Both forms of the pragma return the maximum page count. The second form attempts to modify the maximum page count. The maximum page count cannot be reduced below the current database size."},mmap_size:{signature:`PRAGMA schema.mmap_size;
PRAGMA schema.mmap_size= N`,docs:"Query or change the maximum number of bytes that are set aside for memory-mapped I/O on a single database. The first form (without an argument) queries the current limit. The second form (with a numeric argument) sets the limit for the specified database, or for all databases if the optional database name is omitted. In the second form, if the database name is omitted, the limit that is set becomes the default limit for all databases that are added to the [database connection](https://www.sqlite.org/c3ref/sqlite3.html) by subsequent [ATTACH](https://www.sqlite.org/lang_attach.html) statements.The argument N is the maximum number of bytes of the database file that will be accessed using memory-mapped I/O. If N is zero then memory mapped I/O is disabled. If N is negative, then the limit reverts to the default value determined by the most recent [sqlite3\\_config](https://www.sqlite.org/c3ref/config.html)([SQLITE\\_CONFIG\\_MMAP\\_SIZE](https://www.sqlite.org/c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize)), or to the compile time default determined by [SQLITE\\_DEFAULT\\_MMAP\\_SIZE](https://www.sqlite.org/compile.html#default_mmap_size) if not start-time limit has been set.The [PRAGMA mmap\\_size](https://www.sqlite.org/pragma.html#pragma_mmap_size) statement will never increase the amount of address space used for memory-mapped I/O above the hard limit set by the [SQLITE\\_MAX\\_MMAP\\_SIZE](https://www.sqlite.org/compile.html#max_mmap_size) compile-time option, nor the hard limit set at startup-time by the second argument to sqlite3\\_config([SQLITE\\_CONFIG\\_MMAP\\_SIZE](https://www.sqlite.org/c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize))The size of the memory-mapped I/O region cannot be changed while the memory-mapped I/O region is in active use, to avoid unmapping memory out from under running SQL statements. For this reason, the mmap\\_size pragma may be a no-op if the prior mmap\\_size is non-zero and there are other SQL statements running concurrently on the same [database connection](https://www.sqlite.org/c3ref/sqlite3.html)."},module_list:{signature:"PRAGMA module_list;",docs:"This pragma returns a list of [virtual table](https://www.sqlite.org/vtab.html) modules registered with the database connection."},optimize:{signature:`PRAGMA optimize;
PRAGMA optimize(MASK);
PRAGMA schema.optimize;
PRAGMA schema.optimize(MASK);`,docs:`Attempt to optimize the database. All schemas are optimized in the first two forms, and only the specified schema is optimized in the latter two.In most applications, using PRAGMA optimize as follows will help SQLite to achieve the best possible query performance:*   Applications with short-lived database connections should run "PRAGMA optimize;" once, just prior to closing each database connection.
    
*   Applications that use long-lived database connections should run "PRAGMA optimize=0x10002;" when the connection is first opened, and then also run "PRAGMA optimize;" periodically, perhaps once per day or once per hour.
    
*   All applications should run "PRAGMA optimize;" after a schema change, especially after one or more [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) statements.
    
This pragma is usually a no-op or nearly so and is very fast. On the occasions where it does need to run ANALYZE on one or more tables, it sets a temporary [analysis limit](https://www.sqlite.org/pragma.html#pragma_analysis_limit), valid for the duration of this pragma only, that prevents the ANALYZE invocations from running for too long.Recommended practice is that applications with short-lived database connections should run "PRAGMA optimize" once when the database connection closes. Applications with long-lived database connections should run "PRAGMA optimize=0x10002" when the database connection first opens, then run "PRAGMA optimize" again at periodic intervals - perhaps once per day. All applications should run "PRAGMA optimize" after schema changes, especially [CREATE INDEX](https://www.sqlite.org/lang_createindex.html). The details of optimizations performed by this pragma are expected to change and improve over time. Applications should anticipate that this pragma will perform new optimizations in future releases.The optional MASK argument is a bitmask of optimizations to perform: 0x00001 Debugging mode. Do not actually perform any optimizations but instead return one line of text for each optimization that would have been done. Off by default. 0x00002 Run [ANALYZE](https://www.sqlite.org/lang_analyze.html) on tables that might benefit. On by default. 0x00010 When running [ANALYZE](https://www.sqlite.org/lang_analyze.html), set a temporary [PRAGMA analysis\\_limit](https://www.sqlite.org/pragma.html#pragma_analysis_limit) to prevent excess run-time. On by default. 0x10000 Check the size of all tables, not just tables that have not been recently used, to see if any have grown and shrunk significantly and hence might benefit from being re-analyzed. Off by default. The default MASK is 0xfffe.To see all optimizations that would have been done without actually doing them, run "PRAGMA optimize(-1)".**Determination Of When To Run Analyze** In the current implementation, a table is analyzed if and only if all of the following are true:*   MASK bit 0x02 is set.
*   The table is an ordinary table, not a view or virtual table.
*   The table name does not begin with "sqlite\\_".
*   One or more of the following are true:
    1.  The 0x10000 bit of MASK is set
    2.  One or more indexes on the table lack entries in the sqlite\\_stat1 table.
    3.  The query planner used sqlite\\_stat1 statistics for one or more indexes of this table at some point during the lifetime of the current database connection.
*   One or more of the following are true:
    1.  One or more indexes on the table lack entries in the sqlite\\_stat1 table.
    2.  The number of rows in the table has increased or decreased by 10-fold since the last time ANALYZE was run on the table.
The rules for when tables are analyzed are likely to change in future releases. New MASK values may be added in the future. Future versions of this pragma might accept a string literal argument instead of a bit mask, though the bit mask argument will continue to be supported for backwards compatibility.`},page_count:{signature:"PRAGMA schema.page_count;",docs:"Return the total number of pages in the database file."},page_size:{signature:`PRAGMA schema.page_size;
PRAGMA schema.page_size = bytes;`,docs:"Query or set the page size of the database. The page size must be a power of two between 512 and 65536 inclusive. When a new database is created, SQLite assigns a page size to the database based on platform and filesystem. For many years, the default page size was almost always 1024 bytes, but beginning with SQLite [version 3.12.0](https://www.sqlite.org/releaselog/3_12_0.html) (2016-03-29), the default page size increased to 4096. The default page size is recommended for most applications. Specifying a new page size does not change the page size immediately. Instead, the new page size is remembered and is used to set the page size when the database is first created, if it does not already exist when the page\\_size pragma is issued, or at the next [VACUUM](https://www.sqlite.org/lang_vacuum.html) command that is run on the same database connection while not in [WAL mode](https://www.sqlite.org/wal.html).The [SQLITE\\_DEFAULT\\_PAGE\\_SIZE](https://www.sqlite.org/compile.html#default_page_size) compile-time option can be used to change the default page size assigned to new databases."},parser_trace:{signature:`PRAGMA parser_trace = boolean;
 `,docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the parser\\_trace pragma can be used to turn on tracing for the SQL parser used internally by SQLite. This feature is used for debugging SQLite itself. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},pragma_list:{signature:"PRAGMA pragma_list;",docs:"This pragma returns a list of PRAGMA commands known to the database connection."},query_only:{signature:`PRAGMA query_only;
PRAGMA query_only = boolean;`,docs:"The query\\_only pragma prevents data changes on database files when enabled. When this pragma is enabled, any attempt to CREATE, DELETE, DROP, INSERT, or UPDATE will result in an [SQLITE\\_READONLY](https://www.sqlite.org/rescode.html#readonly) error. However, the database is not truly read-only. You can still run a [checkpoint](https://www.sqlite.org/wal.html#ckpt) or a [COMMIT](https://www.sqlite.org/lang_transaction.html) and the return value of the [sqlite3\\_db\\_readonly()](https://www.sqlite.org/c3ref/db_readonly.html) routine is not affected."},quick_check:{signature:`PRAGMA schema.quick_check;
PRAGMA schema.quick_check(N)PRAGMA schema.quick_check(TABLENAME)`,docs:"The pragma is like [integrity\\_check](https://www.sqlite.org/pragma.html#pragma_integrity_check) except that it does not verify UNIQUE constraints and does not verify that index content matches table content. By skipping UNIQUE and index consistency checks, quick\\_check is able to run faster. PRAGMA quick\\_check runs in O(N) time whereas [PRAGMA integrity\\_check](https://www.sqlite.org/pragma.html#pragma_integrity_check) requires O(NlogN) time where N is the total number of rows in the database. Otherwise the two pragmas are the same."},read_uncommitted:{signature:`PRAGMA read_uncommitted;
PRAGMA read_uncommitted = boolean;`,docs:"Query, set, or clear READ UNCOMMITTED isolation. The default isolation level for SQLite is SERIALIZABLE. Any process or thread can select READ UNCOMMITTED isolation, but SERIALIZABLE will still be used except between connections that share a common page and schema cache. Cache sharing is enabled using the [sqlite3\\_enable\\_shared\\_cache()](https://www.sqlite.org/c3ref/enable_shared_cache.html) API. Cache sharing is disabled by default. See [SQLite Shared-Cache Mode](https://www.sqlite.org/sharedcache.html) for additional information."},recursive_triggers:{signature:`PRAGMA recursive_triggers;
PRAGMA recursive_triggers = boolean;`,docs:"Query, set, or clear the recursive trigger capability. Changing the recursive\\_triggers setting affects the execution of all statements prepared using the database connection, including those prepared before the setting was changed. Any existing statements prepared using the legacy [sqlite3\\_prepare()](https://www.sqlite.org/c3ref/prepare.html) interface may fail with an [SQLITE\\_SCHEMA](https://www.sqlite.org/rescode.html#schema) error after the recursive\\_triggers setting is changed. Prior to SQLite [version 3.6.18](https://www.sqlite.org/releaselog/3_6_18.html) (2009-09-11), recursive triggers were not supported. The behavior of SQLite was always as if this pragma was set to OFF. Support for recursive triggers was added in version 3.6.18 but was initially turned OFF by default, for compatibility. Recursive triggers may be turned on by default in future versions of SQLite. The depth of recursion for triggers has a hard upper limit set by the [SQLITE\\_MAX\\_TRIGGER\\_DEPTH](https://www.sqlite.org/limits.html#max_trigger_depth) compile-time option and a run-time limit set by [sqlite3\\_limit](https://www.sqlite.org/c3ref/limit.html)(db,[SQLITE\\_LIMIT\\_TRIGGER\\_DEPTH](https://www.sqlite.org/c3ref/c_limit_attached.html#sqlitelimittriggerdepth),...)."},reverse_unordered_selects:{signature:`PRAGMA reverse_unordered_selects;
PRAGMA reverse_unordered_selects = boolean;`,docs:"When enabled, this PRAGMA causes many [SELECT](https://www.sqlite.org/lang_select.html) statements without an ORDER BY clause to emit their results in the reverse order from what they normally would. This can help debug applications that are making invalid assumptions about the result order. The reverse\\_unordered\\_selects pragma works for most SELECT statements, however the query planner may sometimes choose an algorithm that is not easily reversed, in which case the output will appear in the same order regardless of the reverse\\_unordered\\_selects setting. SQLite makes no guarantees about the order of results if a SELECT omits the ORDER BY clause. Even so, the order of results does not change from one run to the next, and so many applications mistakenly come to depend on the arbitrary output order whatever that order happens to be. However, sometimes new versions of SQLite will contain optimizer enhancements that will cause the output order of queries without ORDER BY clauses to shift. When that happens, applications that depend on a certain output order might malfunction. By running the application multiple times with this pragma both disabled and enabled, cases where the application makes faulty assumptions about output order can be identified and fixed early, reducing problems that might be caused by linking against a different version of SQLite."},schema_version:{signature:`PRAGMA schema.schema_version;
PRAGMA schema.schema_version = integer;`,docs:'The schema\\_version pragma will get or set the value of the schema-version integer at offset 40 in the [database header](https://www.sqlite.org/fileformat2.html#database_header). SQLite automatically increments the schema-version whenever the schema changes. As each SQL statement runs, the schema version is checked to ensure that the schema has not changed since the SQL statement was [prepared](https://www.sqlite.org/c3ref/prepare.html). Subverting this mechanism by using "PRAGMA schema\\_version=N" to change the value of the schema\\_version may cause SQL statement to run using an obsolete schema, which can lead to incorrect answers and/or [database corruption](https://www.sqlite.org/howtocorrupt.html#cfgerr). It is always safe to read the schema\\_version, but changing the schema\\_version can cause problems. For this reason, attempts to change the value of schema\\_version are a silent no-op when [defensive mode](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigdefensive) is enabled for a database connection. **Warning:** Misuse of this pragma can result in [database corruption](https://www.sqlite.org/howtocorrupt.html#cfgerr). For the purposes of this pragma, the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command is considered a schema change, since [VACUUM](https://www.sqlite.org/lang_vacuum.html) will usually alter the "rootpage" values for entries in the [sqlite\\_schema table](https://www.sqlite.org/schematab.html). See also the [application\\_id pragma](https://www.sqlite.org/pragma.html#pragma_application_id) and [user\\_version pragma](https://www.sqlite.org/pragma.html#pragma_user_version).'},secure_delete:{signature:`PRAGMA schema.secure_delete;
PRAGMA schema.secure_delete = boolean|FAST`,docs:'Query or change the secure-delete setting. When secure\\_delete is on, SQLite overwrites deleted content with zeros. The default setting for secure\\_delete is determined by the [SQLITE\\_SECURE\\_DELETE](https://www.sqlite.org/compile.html#secure_delete) compile-time option and is normally off. The off setting for secure\\_delete improves performance by reducing the number of CPU cycles and the amount of disk I/O. Applications that wish to avoid leaving forensic traces after content is deleted or updated should enable the secure\\_delete pragma prior to performing the delete or update, or else run [VACUUM](https://www.sqlite.org/lang_vacuum.html) after the delete or update. The "fast" setting for secure\\_delete (added circa 2017-08-01) is an intermediate setting in between "on" and "off". When secure\\_delete is set to "fast", SQLite will overwrite deleted content with zeros only if doing so does not increase the amount of I/O. In other words, the "fast" setting uses more CPU cycles but does not use more I/O. This has the effect of purging all old content from [b-tree pages](https://www.sqlite.org/fileformat2.html#btree), but leaving forensic traces on [freelist pages](https://www.sqlite.org/fileformat2.html#freelist). When there are [attached databases](https://www.sqlite.org/lang_attach.html) and no database is specified in the pragma, all databases have their secure-delete setting altered. The secure-delete setting for newly attached databases is the setting of the main database at the time the ATTACH command is evaluated. When multiple database connections share the same cache, changing the secure-delete flag on one database connection changes it for them all. **Limitation:** The secure\\_delete pragma only causes deleted content to be scrubbed from ordinary tables. If [virtual tables](https://www.sqlite.org/vtab.html) store content in [shadow tables](https://www.sqlite.org/vtab.html#xshadowname), then deleting content from the virtual table does not necessarily remove forensic traces from the shadow tables. In particular, the [FTS3](https://www.sqlite.org/fts3.html) and [FTS5](https://www.sqlite.org/fts5.html) virtual tables that come bundled with SQLite might leave forensic traces in their shadow tables even if the secure\\_delete pragma is enabled.'},short_column_names:{signature:`PRAGMA short_column_names;
PRAGMA short_column_names = boolean;`,docs:"Query or change the short-column-names flag. This flag affects the way SQLite names columns of data returned by [SELECT](https://www.sqlite.org/lang_select.html) statements. See the [full\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_full_column_names) pragma for full details. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},shrink_memory:{signature:"PRAGMA shrink_memory",docs:"This pragma causes the database connection on which it is invoked to free up as much memory as it can, by calling [sqlite3\\_db\\_release\\_memory()](https://www.sqlite.org/c3ref/db_release_memory.html)."},soft_heap_limit:{signature:`PRAGMA soft_heap_limit;
PRAGMA soft_heap_limit= N`,docs:"This pragma invokes the [sqlite3\\_soft\\_heap\\_limit64()](https://www.sqlite.org/c3ref/hard_heap_limit64.html) interface with the argument N, if N is specified and is a non-negative integer. The soft\\_heap\\_limit pragma always returns the same integer that would be returned by the [sqlite3\\_soft\\_heap\\_limit64](https://www.sqlite.org/c3ref/hard_heap_limit64.html)(-1) C-language function. See also the [hard\\_heap\\_limit pragma](https://www.sqlite.org/pragma.html#pragma_hard_heap_limit)."},stats:{signature:`PRAGMA stats;
 `,docs:"This pragma returns auxiliary information about tables and indices. The returned information is used during testing to help verify that the query planner is operating correctly. The format and meaning of this pragma will likely change from one release to the next. Because of its volatility, the behavior and output format of this pragma are deliberately undocumented. The intended use of this pragma is only for testing and validation of SQLite. This pragma is subject to change without notice and is not recommended for use by application programs."},synchronous:{signature:`PRAGMA schema.synchronous;
PRAGMA schema.synchronous = 0 | OFF | 1 | NORMAL | 2 | FULL | 3 | EXTRA;`,docs:`Query or change the setting of the "synchronous" flag. The first (query) form will return the synchronous setting as an integer. The second form changes the synchronous setting. The meanings of the various synchronous settings are as follows:

**EXTRA** (3)

EXTRA synchronous is like FULL with the addition that the directory containing a [rollback journal](https://www.sqlite.org/lockingv3.html#rollback) is synced after that journal is unlinked to commit a transaction in DELETE mode. EXTRA provides additional durability if the commit is followed closely by a power loss.

**FULL** (2)

When synchronous is FULL (2), the SQLite database engine will use the xSync method of the [VFS](https://www.sqlite.org/vfs.html) to ensure that all content is safely written to the disk surface prior to continuing. This ensures that an operating system crash or power failure will not corrupt the database. FULL synchronous is very safe, but it is also slower. FULL is the most commonly used synchronous setting when not in [WAL mode](https://www.sqlite.org/wal.html).

**NORMAL** (1)

When synchronous is NORMAL (1), the SQLite database engine will still sync at the most critical moments, but less often than in FULL mode. There is a very small (though non-zero) chance that a power failure at just the wrong time could corrupt the database in [journal\\_mode](https://www.sqlite.org/pragma.html#pragma_journal_mode)\\=DELETE on an older filesystem. [WAL mode](https://www.sqlite.org/wal.html) is safe from corruption with synchronous=NORMAL, and probably DELETE mode is safe too on modern filesystems. WAL mode is always consistent with synchronous=NORMAL, but WAL mode does lose durability. A transaction committed in WAL mode with synchronous=NORMAL might roll back following a power loss or system crash. Transactions are durable across application crashes regardless of the synchronous setting or journal mode. The synchronous=NORMAL setting is a good choice for most applications running in [WAL mode](https://www.sqlite.org/wal.html).

**OFF** (0)

With synchronous OFF (0), SQLite continues without syncing as soon as it has handed data off to the operating system. If the application running SQLite crashes, the data will be safe, but the database [might become corrupted](https://www.sqlite.org/howtocorrupt.html#cfgerr) if the operating system crashes or the computer loses power before that data has been written to the disk surface. On the other hand, commits can be orders of magnitude faster with synchronous OFF.

In [WAL](https://www.sqlite.org/wal.html) mode when synchronous is NORMAL (1), the WAL file is synchronized before each [checkpoint](https://www.sqlite.org/wal.html#ckpt) and the database file is synchronized after each completed [checkpoint](https://www.sqlite.org/wal.html#ckpt) and the WAL file header is synchronized when a WAL file begins to be reused after a checkpoint, but no sync operations occur during most transactions. With synchronous=FULL in WAL mode, an additional sync operation of the WAL file happens after each transaction commit. The extra WAL sync following each transaction helps ensure that transactions are durable across a power loss. Transactions are consistent with or without the extra syncs provided by synchronous=FULL. If durability is not a concern, then synchronous=NORMAL is normally all one needs in WAL mode.The TEMP schema always has synchronous=OFF since the content of of TEMP is ephemeral and is not expected to survive a power outage. Attempts to change the synchronous setting for TEMP are silently ignored. See also the [fullfsync](https://www.sqlite.org/pragma.html#pragma_fullfsync) and [checkpoint\\_fullfsync](https://www.sqlite.org/pragma.html#pragma_checkpoint_fullfsync) pragmas.`},table_info:{signature:"PRAGMA schema.table_info(table-name);",docs:`This pragma returns one row for each normal column in the named table. Columns in the result set include: "name" (its name); "type" (data type if given, else ''); "notnull" (whether or not the column can be NULL); "dflt\\_value" (the default value for the column); and "pk" (either zero for columns that are not part of the primary key, or the 1-based index of the column within the primary key).The "cid" column should not be taken to mean more than "rank within the current result set".The table named in the table\\_info pragma can also be a view.This pragma does not show information about [generated columns](https://www.sqlite.org/gencol.html) or [hidden columns](https://www.sqlite.org/vtab.html#hiddencol). Use [PRAGMA table\\_xinfo](https://www.sqlite.org/pragma.html#pragma_table_xinfo) to get a more complete list of columns that includes generated and hidden columns.`},table_list:{signature:` PRAGMA table_list;
PRAGMA schema.table_list;
PRAGMA table_list(table-name);`,docs:`This pragma returns information about the tables and views in the schema, one table per row of output. The table\\_list pragma first appeared in SQLite version 3.37.0 (2021-11-27). As of its initial release the columns returned by the table\\_list pragma include those listed below. Future versions of SQLite will probably add additional columns of output.*   **schema**: the schema in which the table or view appears (for example "main" or "temp").
*   **name**: the name of the table or view.
*   **type**: the type of object - one of "table", "view", "shadow" (for [shadow tables](https://www.sqlite.org/vtab.html#xshadowname)), or "virtual" for [virtual tables](https://www.sqlite.org/vtab.html).
*   **ncol**: the number of columns in the table, including [generated columns](https://www.sqlite.org/gencol.html) and [hidden columns](https://www.sqlite.org/vtab.html#hiddencol).
*   **wr**: 1 if the table is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table or 0 if is not.
*   **strict**: 1 if the table is a [STRICT table](https://www.sqlite.org/stricttables.html) or 0 if it is not.
*   _Additional columns will likely be added in future releases._
The default behavior is to show all tables in all schemas. If the _schema._ name appears before the pragma, then only tables in that one schema are shown. If a _table-name_ argument is supplied, then only information about that one table is returned.`},table_xinfo:{signature:"PRAGMA schema.table_xinfo(table-name);",docs:'This pragma returns one row for each column in the named table, including [generated columns](https://www.sqlite.org/gencol.html) and [hidden columns](https://www.sqlite.org/vtab.html#hiddencol). The output has the same columns as for [PRAGMA table\\_info](https://www.sqlite.org/pragma.html#pragma_table_info) plus a column, "hidden", whose value signifies a normal column (0), a dynamic or stored generated column (2 or 3), or a hidden column in a virtual table (1). The rows for which this field is non-zero are those omitted for [PRAGMA table\\_info](https://www.sqlite.org/pragma.html#pragma_table_info).'},temp_store:{signature:`PRAGMA temp_store;
PRAGMA temp_store = 0 | DEFAULT | 1 | FILE | 2 | MEMORY;`,docs:`Query or change the setting of the "**temp\\_store**" parameter. When temp\\_store is DEFAULT (0), the compile-time C preprocessor macro [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) is used to determine where temporary tables and indices are stored. When temp\\_store is MEMORY (2) [temporary tables](https://www.sqlite.org/inmemorydb.html#temp_db) and indices are kept as if they were in pure [in-memory databases](https://www.sqlite.org/inmemorydb.html). When temp\\_store is FILE (1) [temporary tables](https://www.sqlite.org/inmemorydb.html#temp_db) and indices are stored in a file. The [temp\\_store\\_directory](https://www.sqlite.org/pragma.html#pragma_temp_store_directory) pragma can be used to specify the directory containing temporary files when **FILE** is specified. When the temp\\_store setting is changed, all existing temporary tables, indices, triggers, and views are immediately deleted.It is possible for the library compile-time C preprocessor symbol [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) to override this pragma setting. The following table summarizes the interaction of the [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) preprocessor macro and the temp\\_store pragma:

| [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) | PRAGMA  
temp\\_store | Storage used for  
TEMP tables and indices |
| --- | --- | --- |
| 0 | _any_ | file |
| 1 | 0 | file |
| 1 | 1 | file |
| 1 | 2 | memory |
| 2 | 0 | memory |
| 2 | 1 | file |
| 2 | 2 | memory |
| 3 | _any_ | memory |`},temp_store_directory:{signature:`PRAGMA temp_store_directory;
PRAGMA temp_store_directory = 'directory-name';`,docs:"Query or change the value of the [sqlite3\\_temp\\_directory](https://www.sqlite.org/c3ref/temp_directory.html) global variable, which many operating-system interface backends use to determine where to store [temporary tables](https://www.sqlite.org/inmemorydb.html#temp_db) and indices.When the temp\\_store\\_directory setting is changed, all existing temporary tables, indices, triggers, and viewers in the database connection that issued the pragma are immediately deleted. In practice, temp\\_store\\_directory should be set immediately after the first database connection for a process is opened. If the temp\\_store\\_directory is changed for one database connection while other database connections are open in the same process, then the behavior is undefined and probably undesirable.Changing the temp\\_store\\_directory setting is not threadsafe. Never change the temp\\_store\\_directory setting if another thread within the application is running any SQLite interface at the same time. Doing so results in undefined behavior. Changing the temp\\_store\\_directory setting writes to the [sqlite3\\_temp\\_directory](https://www.sqlite.org/c3ref/temp_directory.html) global variable and that global variable is not protected by a mutex.The value _directory-name_ should be enclosed in single quotes. To revert the directory to the default, set the _directory-name_ to an empty string, e.g., _PRAGMA temp\\_store\\_directory = ''_. An error is raised if _directory-name_ is not found or is not writable. The default directory for temporary files depends on the OS. Some OS interfaces may choose to ignore this variable and place temporary files in some other directory different from the directory specified here. In that sense, this pragma is only advisory. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},threads:{signature:`PRAGMA threads;
PRAGMA threads = N;`,docs:"Query or change the value of the [sqlite3\\_limit](https://www.sqlite.org/c3ref/limit.html)(db,[SQLITE\\_LIMIT\\_WORKER\\_THREADS](https://www.sqlite.org/c3ref/c_limit_attached.html#sqlitelimitworkerthreads),...) limit for the current database connection. This limit sets an upper bound on the number of auxiliary threads that a [prepared statement](https://www.sqlite.org/c3ref/stmt.html) is allowed to launch to assist with a query. The default limit is 0 unless it is changed using the [SQLITE\\_DEFAULT\\_WORKER\\_THREADS](https://www.sqlite.org/compile.html#default_worker_threads) compile-time option. When the limit is zero, that means no auxiliary threads will be launched.This pragma is a thin wrapper around the [sqlite3\\_limit](https://www.sqlite.org/c3ref/limit.html)(db,[SQLITE\\_LIMIT\\_WORKER\\_THREADS](https://www.sqlite.org/c3ref/c_limit_attached.html#sqlitelimitworkerthreads),...) interface."},trusted_schema:{signature:`PRAGMA trusted_schema;
PRAGMA trusted_schema = boolean;`,docs:"The trusted\\_schema setting is a per-connection boolean that determines whether or not SQL functions and virtual tables that have not been security audited are allowed to be run by views, triggers, or in expressions of the schema such as [CHECK constraints](https://www.sqlite.org/lang_createtable.html#ckconst), [DEFAULT clauses](https://www.sqlite.org/lang_createtable.html#dfltval), [generated columns](https://www.sqlite.org/gencol.html), [expression indexes](https://www.sqlite.org/expridx.html), and/or [partial indexes](https://www.sqlite.org/partialindex.html). This setting can also be controlled using the [sqlite3\\_db\\_config](https://www.sqlite.org/c3ref/db_config.html)(db,[SQLITE\\_DBCONFIG\\_TRUSTED\\_SCHEMA](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigtrustedschema),...) C-language interface. In order to maintain backwards compatibility, this setting is ON by default. There are advantages to turning it off, and most applications will be unaffected if it is turned off. For that reason, all applications are encouraged to switch this setting off on every database connection as soon as that connection is opened. The [\\-DSQLITE\\_TRUSTED\\_SCHEMA=0](https://www.sqlite.org/compile.html#trusted_schema) compile-time option will cause this setting to default to OFF."},user_version:{signature:`PRAGMA schema.user_version;
PRAGMA schema.user_version = integer;`,docs:"The user\\_version pragma will get or set the value of the user-version integer at offset 60 in the [database header](https://www.sqlite.org/fileformat2.html#database_header). The user-version is an integer that is available to applications to use however they want. SQLite makes no use of the user-version itself. See also the [application\\_id pragma](https://www.sqlite.org/pragma.html#pragma_application_id) and [schema\\_version pragma](https://www.sqlite.org/pragma.html#pragma_schema_version)."},vdbe_addoptrace:{signature:"PRAGMA vdbe_addoptrace = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_addoptrace pragma can be used to cause a complete VDBE opcodes to be displayed as they are created during code generation. This feature is used for debugging SQLite itself. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},vdbe_debug:{signature:"PRAGMA vdbe_debug = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_debug pragma is a shorthand for three other debug-only pragmas: vdbe\\_addoptrace, vdbe\\_listing, and vdbe\\_trace. This feature is used for debugging SQLite itself. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},vdbe_listing:{signature:"PRAGMA vdbe_listing = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_listing pragma can be used to cause a complete listing of the virtual machine opcodes to appear on standard output as each statement is evaluated. With listing is on, the entire content of a program is printed just prior to beginning execution. The statement executes normally after the listing is printed. This feature is used for debugging SQLite itself. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},vdbe_trace:{signature:"PRAGMA vdbe_trace = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_trace pragma can be used to cause virtual machine opcodes to be printed on standard output as they are evaluated. This feature is used for debugging SQLite. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},wal_autocheckpoint:{signature:`PRAGMA wal_autocheckpoint;
PRAGMA wal_autocheckpoint= N;`,docs:"This pragma queries or sets the [write-ahead log](https://www.sqlite.org/wal.html) [auto-checkpoint](https://www.sqlite.org/wal.html#ckpt) interval. When the [write-ahead log](https://www.sqlite.org/wal.html) is enabled (via the [journal\\_mode pragma](https://www.sqlite.org/pragma.html#pragma_journal_mode)) a checkpoint will be run automatically whenever the write-ahead log equals or exceeds _N_ pages in length. Setting the auto-checkpoint size to zero or a negative value turns auto-checkpointing off.This pragma is a wrapper around the [sqlite3\\_wal\\_autocheckpoint()](https://www.sqlite.org/c3ref/wal_autocheckpoint.html) C interface. All automatic checkpoints are [PASSIVE](https://www.sqlite.org/c3ref/wal_checkpoint_v2.html).Autocheckpointing is enabled by default with an interval of 1000 or [SQLITE\\_DEFAULT\\_WAL\\_AUTOCHECKPOINT](https://www.sqlite.org/compile.html#default_wal_autocheckpoint)."},wal_checkpoint:{signature:`PRAGMA schema.wal_checkpoint;
PRAGMA schema.wal_checkpoint(PASSIVE);
PRAGMA schema.wal_checkpoint(FULL);
PRAGMA schema.wal_checkpoint(RESTART);
PRAGMA schema.wal_checkpoint(TRUNCATE);`,docs:`If the [write-ahead log](https://www.sqlite.org/wal.html) is enabled (via the [journal\\_mode pragma](https://www.sqlite.org/pragma.html#pragma_journal_mode)), this pragma causes a [checkpoint](https://www.sqlite.org/wal.html#ckpt) operation to run on database _database_, or on all attached databases if _database_ is omitted. If [write-ahead log](https://www.sqlite.org/wal.html) mode is disabled, this pragma is a harmless no-op.Invoking this pragma without an argument is equivalent to calling the [sqlite3\\_wal\\_checkpoint()](https://www.sqlite.org/c3ref/wal_checkpoint.html) C interface.sqlite3\\_wal\\_checkpoint\\_v2()3rd parameter

PASSIVE

Checkpoint as many frames as possible without waiting for any database readers or writers to finish. Sync the db file if all frames in the log are checkpointed. This mode is the same as calling the [sqlite3\\_wal\\_checkpoint()](https://www.sqlite.org/c3ref/wal_checkpoint.html) C interface. The [busy-handler callback](https://www.sqlite.org/c3ref/busy_handler.html) is never invoked in this mode.

FULL

This mode blocks (invokes the [busy-handler callback](https://www.sqlite.org/c3ref/busy_handler.html)) until there is no database writer and all readers are reading from the most recent database snapshot. It then checkpoints all frames in the log file and syncs the database file. FULL blocks concurrent writers while it is running, but readers can proceed.

RESTART

This mode works the same way as FULL with the addition that after checkpointing the log file it blocks (calls the [busy-handler callback](https://www.sqlite.org/c3ref/busy_handler.html)) until all readers are finished with the log file. This ensures that the next client to write to the database file restarts the log file from the beginning. RESTART blocks concurrent writers while it is running, but allowed readers to proceed.

TRUNCATE

This mode works the same way as RESTART with the addition that the WAL file is truncated to zero bytes upon successful completion.

The wal\\_checkpoint pragma returns a single row with three integer columns. The first column is usually 0 but will be 1 if a RESTART or FULL or TRUNCATE checkpoint was blocked from completing, for example because another thread or process was actively using the database. In other words, the first column is 0 if the equivalent call to [sqlite3\\_wal\\_checkpoint\\_v2()](https://www.sqlite.org/c3ref/wal_checkpoint_v2.html) would have returned [SQLITE\\_OK](https://www.sqlite.org/rescode.html#ok) or 1 if the equivalent call would have returned [SQLITE\\_BUSY](https://www.sqlite.org/rescode.html#busy). The second column is the number of modified pages that have been written to the write-ahead log file. The third column is the number of pages in the write-ahead log file that have been successfully moved back into the database file at the conclusion of the checkpoint. The second and third column are -1 if there is no write-ahead log, for example if this pragma is invoked on a database connection that is not in [WAL mode](https://www.sqlite.org/wal.html).`},writable_schema:{signature:`PRAGMA writable_schema = boolean;
PRAGMA writable_schema = RESET`,docs:'When this pragma is on, and the [SQLITE\\_DBCONFIG\\_DEFENSIVE](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigdefensive) flag is off, then the [sqlite\\_schema](https://www.sqlite.org/schematab.html) table can be changed using ordinary [UPDATE](https://www.sqlite.org/lang_update.html), [INSERT](https://www.sqlite.org/lang_insert.html), and [DELETE](https://www.sqlite.org/lang_delete.html) statements. If the argument is "RESET" then schema writing is disabled (as with "PRAGMA writable\\_schema=OFF") and, in addition, the schema is reloaded. **Warning:** misuse of this pragma can easily result in a [corrupt database file](https://www.sqlite.org/howtocorrupt.html#cfgerr). '}};var ft=Se(require("vscode"));var LT=()=>OT(we().get("completion.functionCase")==="upper",we().get("experimental.queryEditorKeywordSyntaxDocumentation"),ft.default.CompletionItemKind,t=>new ft.default.MarkdownString(t),t=>at(D.context.extensionUri,t).toString()),xa=class{constructor(n){this.noneOf=n}},Wl=class{tokens;constructor(...n){this.tokens=new Set(n)}},hi=class{tokens;constructor(...n){this.tokens=new Set(n)}},Ua=class extends hi{},Pe=class{tokens;constructor(...n){this.tokens=n}},Fe=class{constructor(n){this.tableName=n}},Ga=class{provideCompletionItems(n,e,i,E){try{{let d=mt(n);if(d===void 0||D.connManager.connections(d)[0]!==void 0)return}return Object.values(LT()).flat()}catch(d){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(15,d))}}},Ba=class{#e;constructor(n){this.#e=n}async provideCompletionItems(n,e,i,{triggerCharacter:E}){try{if(E===" "&&!/\b(FROM|JOIN|PRAGMA|REPLACE|INSERT|INSERT\sOR|INSERT\sOR\s\w+|INTO|DROP\s+TABLE|DROP\s+VIEW|IF\s+NOT\s+EXISTS|DELETE|ALTER|ALTER\s+TABLE|RENAME|RENAME COLUMN|DROP|DROP COLUMN|PRAGMA\b.*\b\w+\s*=) $/i.test(n.lineAt(e.line).text.slice(0,e.character)))return[];let d=mt(n);if(d===void 0)return;let R=D.connManager.connections(d)[0];if(R===void 0)return;let _=async()=>{let k=(await R.p.request("completion",()=>[n.getText(),BigInt(e.line),BigInt(e.character)])).unpack(),H=Xr.$$zip((await R.p.query(["PRAGMA pragma_list",[],"read_only",ze])).unpack()),ie=P=>P.startsWith("main.")?P.slice(5):P;return{context:{last_tokens:k.last_tokens,last_table:k.last_table,last_schema:k.last_schema,last_create_trigger_table:k.last_create_trigger_table},items:{...LT(),schemas:k.schema_names.map(P=>({label:P,insertText:ke(P,!1),kind:ft.default.CompletionItemKind.Module,detail:"schema"})),tables:k.table_names.map(P=>({label:P.table+(P.schema==="main"?"":`  (${ke(P.schema,!1,!0)}.${ke(P.table,!1)})`),filterText:P.table,insertText:ke(P.table,!1),kind:ft.default.CompletionItemKind.Class,detail:P.type,meta:{record:P}})),cteNames:k.cte_names.map(P=>({label:P,insertText:ke(P,!1),kind:ft.default.CompletionItemKind.Property,detail:"CTE"})),columns:k.columns_in_tables_that_are_referenced_in_source.map(P=>({label:`${P.column} (${ie(`${ke(P.schema,!1,!0)}.${ke(P.table,!1)}.${ke(P.column,!1)}`)})`,filterText:P.column,insertText:ke(P.column,!1),kind:ft.default.CompletionItemKind.Property,detail:"column",meta:{record:P}})),asNames:k.as_clauses.map(P=>({label:P,insertText:ke(P,!1),kind:ft.default.CompletionItemKind.Property,detail:"alias"})),nonBuiltinFunctions:await this.#e.$$getCompletionItems(R.p),pragmaFunctions:H.flatMap(({name:P})=>{let X=fi[P],Q=X===void 0?void 0:new ft.default.MarkdownString().appendCodeblock(X.signature,"query-editor").appendMarkdown(X.docs);return[{label:`pragma_${P}`,kind:ft.default.CompletionItemKind.Constructor,documentation:Q}]}),SELECT:[...k.table_names.map(P=>({label:`SELECT * FROM ${ke(P.table,!1)}`,insertText:new ft.default.SnippetString("SELECT ${1:*} FROM "+ke(P.table,!1).replaceAll("$","\\$")),kind:ft.default.CompletionItemKind.Keyword})),...k.table_names.map(P=>({label:`SELECT DISTINCT * FROM ${ke(P.table,!1)}`,insertText:new ft.default.SnippetString("SELECT DISTINCT ${1:*} FROM "+ke(P.table,!1).replaceAll("$","\\$")),kind:ft.default.CompletionItemKind.Keyword}))],PRAGMA:H.flatMap(({name:P})=>{let X=fi[P],Q=X===void 0?void 0:new ft.default.MarkdownString().appendCodeblock(X.signature,"query-editor").appendMarkdown(X.docs);return[{label:`PRAGMA ${P}`,kind:ft.default.CompletionItemKind.Constructor,documentation:Q}]}),pragmaNames:H.flatMap(({name:P})=>{let X=fi[P],Q=X===void 0?void 0:new ft.default.MarkdownString().appendCodeblock(X.signature,"query-editor").appendMarkdown(X.docs);return[{label:P,kind:ft.default.CompletionItemKind.Constructor,detail:"pragma",documentation:Q}]}),pragmaBoolValues:["1","YES","TRUE","ON","0","NO","FALSE","OFF"].map(P=>({label:P,insertText:P,kind:ft.default.CompletionItemKind.Keyword,detail:"keyword"}))}}},{context:I,items:S}=await _(),C=[...S.asNames,...S.builtinFunctions,...S.columns,...S.cteNames,...S.keywords,...S.nonBuiltinFunctions,...S.pragmaFunctions,...S.schemas,...S.storageClasses,...S.tables],w=(...k)=>{for(let[H,ie]=[k.length-1,I.last_tokens.length-1];H>=0;H--,ie--){let P=k[H],X=I.last_tokens[ie];if(X===void 0)return!1;if(typeof P=="string"){if(X!==P)return!1}else if(P instanceof Pe){let Q=!0;for(let[ee,te]of P.tokens.entries()){let se=I.last_tokens[ie-(P.tokens.length-1)+ee];if(typeof se!="string"||se!==te){Q=!1;break}}Q?ie-=P.tokens.length-1:ie++}else if(P instanceof Fe){if(X!=="<table-name>"||I.last_table?.toLowerCase()!==P.tableName.toLowerCase())return!1}else if(P instanceof Wl){if(X==="^"||!P.tokens.has(X))return!1}else if(P instanceof hi){if(X==="^"||P.tokens.has(X))return!1}else X==="^"||P.noneOf.tokens.has(X)?ie++:H++}return!0},b=()=>{let k=I.last_table;return k===null?S.asNames:S.columns.filter(H=>H.meta.record.table.toLowerCase()===k.toLowerCase())},M=()=>{let k=I.last_table;return k===null?S.asNames:S.columns.filter(H=>H.meta.record.schema.toLowerCase()===I.last_schema?.toLowerCase()&&H.meta.record.table.toLowerCase()===k.toLowerCase())},G=k=>{let H=new Set([...new Set(es(k))]);return[...S.keywords.filter(ie=>{let P=H.has(ie.meta.keyword);return P&&H.delete(ie.meta.keyword),P}),...Array.from(H,ie=>({label:ie,insertText:ie,kind:ft.default.CompletionItemKind.Keyword,detail:"keyword"}))]};if(w("^")){let k=new Set(["ALTER","ANALYZE","ATTACH","BEGIN","COMMIT","CREATE","DELETE","DETACH","DROP","END","EXPLAIN","INSERT","PRAGMA","REINDEX","RELEASE","REPLACE","ROLLBACK","SAVEPOINT","SELECT","UPDATE","VACUUM","VALUES","WITH"]);return[...S.SELECT,...S.PRAGMA,...S.keywords.filter(H=>k.has(H.meta.keyword.split(" ")[0]))]}if(w("FROM"))return[...S.tables,...S.schemas,...S.cteNames,...S.pragmaFunctions];if(w("JOIN"))return[...S.tables,...S.schemas,...S.cteNames,...S.pragmaFunctions];if(w("AS","("))return[...S.SELECT,...C];if(w("PRAGMA"))return S.pragmaNames;if(w("SELECT",new xa(new hi("(","SELECT","FROM","JOIN")),"FROM",new xa(new hi("(","SELECT","FROM","JOIN")),"<table-name>"))return[...G("WHERE|GROUP BY|WINDOW|UNION|UNION ALL|INTERSECT|EXCEPT|ORDER BY|LIMIT"),...S.keywords.filter(k=>k.label.includes("JOIN"))];if(w("REPLACE","INTO"))return[...S.schemas,...S.tables];if(w("INSERT","INTO"))return[...S.schemas,...S.tables];if(w("INSERT","OR",new Ua,"INTO"))return[...S.schemas,...S.tables];if(w("^","REPLACE"))return G("INTO");if(w("^","INSERT"))return G("INTO|OR|OR (ABORT|FAIL|IGNORE|REPLACE|ROLLBACK)");if(w("^","INSERT","OR"))return G("ABORT|FAIL|IGNORE|REPLACE|ROLLBACK");if(w("^","INSERT","OR",new Ua))return G("INTO");if(w("^","INSERT","INTO","<table-name>","(...)"))return[...G("VALUES|DEFAULT VALUES"),...S.SELECT,...S.keywords.filter(k=>k.meta.keyword.startsWith("SELECT "))];if(w("^","DELETE"))return G("FROM");if(w("^","DELETE","FROM",new Pe("<schema-name>","."),"<table-name>"))return G("WHERE|RETURNING");if(w("^","ALTER"))return G("TABLE");if(w("^","ALTER","TABLE","<schema-name>","."))return S.tables.filter(k=>k.meta.record.type==="table");if(w("^","ALTER","TABLE"))return[...S.schemas,...S.tables.filter(k=>k.meta.record.type==="table")];if(w("^","ALTER","TABLE",new Pe("<schema-name>","."),"<table-name>"))return G("RENAME TO|RENAME( COLUMN|)|ADD( COLUMN|)|DROP( COLUMN|)");for(let k of["RENAME","DROP"]){if(w("^","ALTER","TABLE","<schema-name>",".","<table-name>",k))return[...M(),...G("COLUMN")];if(w("^","ALTER","TABLE","<schema-name>",".","<table-name>",k,"COLUMN"))return M();if(w("^","ALTER","TABLE","<table-name>",k))return[...b(),...G("COLUMN")];if(w("^","ALTER","TABLE","<table-name>",k,"COLUMN"))return b()}if(w("DROP","TABLE"))return[...S.schemas,...S.tables.filter(k=>k.meta.record.type==="table"),...G("IF EXISTS")];if(w("DROP","TABLE","IF","EXISTS"))return[...S.schemas,...S.tables.filter(k=>k.meta.record.type==="table")];if(w("DROP","TABLE",new Pe("IF","EXISTS"),"<schema-name>","."))return S.tables.filter(k=>k.meta.record.type==="table"&&k.meta.record.schema.toLowerCase()===I.last_schema?.toLowerCase());if(w("DROP","VIEW"))return[...S.schemas,...S.tables.filter(k=>k.meta.record.type==="view"),...G("IF EXISTS")];if(w("DROP","VIEW","IF","EXISTS"))return[...S.schemas,...S.tables.filter(k=>k.meta.record.type==="view")];if(w("DROP","VIEW",new Pe("IF","EXISTS"),"<schema-name>","."))return S.tables.filter(k=>k.meta.record.type==="view"&&k.meta.record.schema.toLowerCase()===I.last_schema?.toLowerCase());if(w("^","PRAGMA",new Pe("<schema-name>","."),"<table-name>","="))return w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("wal_checkpoint"),"(")?G("PASSIVE|FULL|RESTART|TRUNCATE"):w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("auto_vacuum"),"=")?G("0|NONE|1|FULL|2|INCREMENTAL"):w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("automatic_index"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("cache_spill"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("case_sensitive_like"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("cell_size_check"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("checkpoint_fullfsync"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("count_changes"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("defer_foreign_keys"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("empty_result_callbacks"),"=")?S.pragmaBoolValues:w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("encoding"),"=")?G("'UTF-8'|'UTF-16'|'UTF-16le'|'UTF-16be'"):w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("foreign_keys"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("full_column_names"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("fullfsync"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("ignore_check_constraints"),"=")?S.pragmaBoolValues:w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("journal_mode"),"=")?G("DELETE|TRUNCATE|PERSIST|MEMORY|WAL|OFF"):w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("legacy_alter_table"),"=")?S.pragmaBoolValues:w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("locking_mode"),"=")?G("NORMAL|EXCLUSIVE"):w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("parser_trace"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("query_only"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("read_uncommitted"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("recursive_triggers"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("reverse_unordered_selects"),"=")?S.pragmaBoolValues:w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("secure_delete"),"=")?[...S.pragmaBoolValues,...G("FAST")]:w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("short_column_names"),"=")?S.pragmaBoolValues:w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("synchronous"),"=")?G("0|OFF|1|NORMAL|2|FULL|3|EXTRA"):w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("temp_store"),"=")?G("0|DEFAULT|1|FILE|2|MEMORY"):w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("trusted_schema"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("vdbe_addoptrace"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("vdbe_debug"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("vdbe_listing"),"=")||w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("vdbe_trace"),"=")?S.pragmaBoolValues:w("^","PRAGMA",new Pe("<schema-name>","."),new Fe("writable_schema"),"=")?[...S.pragmaBoolValues,...G("RESET")]:[];let{last_create_trigger_table:$}=I;return $!==null&&w("NEW",".")?S.columns.filter(k=>k.meta.record.table.toLowerCase()===$.toLowerCase()):$!==null&&w("OLD",".")?S.columns.filter(k=>k.meta.record.table.toLowerCase()===$.toLowerCase()):w("<schema-name>",".")?S.tables.filter(k=>k.meta.record.schema.toLowerCase()===I.last_schema?.toLowerCase()):w("<schema-name>",".","<table-name>",".")?M():w("<table-name>",".")?b():w("<literal>")||w("(...)")||w("<table-name>")?S.keywords:C}catch(d){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(15,d))}}};var aL=Symbol("Canceled");function $l(t,n){let e=!1,i=[];return(...E)=>new Promise(async(d,R)=>{if(e){i.push({$$resolve:d,$$reject:R,args:E});return}e=!0;try{try{d(await t(...E))}catch(_){R(_)}for(await new Promise(_=>setTimeout(_,n));i.length>0;){i.slice(0,-1).forEach(I=>I.$$resolve(aL));let _=i.at(-1);i.length=0;try{_.$$resolve(await t(..._.args))}catch(I){_.$$reject(I)}await new Promise(I=>setTimeout(I,n))}}finally{e=!1}})}var It=Se(require("vscode"));var CT=()=>{let t=[],n=It.default.languages.createDiagnosticCollection("query-editor");t.push(n);let e=$l(async()=>{try{let i=It.default.window.activeTextEditor?.document;if(i===void 0)return;let E=mt(i);if(E===void 0)return;let d=D.connManager.connections(E)[0];if(d===void 0)return;let R=[];if(!we().get("diagnostics.disableSyntaxCheck")){let _;for(let I of(await d.p.request("check_syntax",()=>(_=i.getText(),[_]))).unpack()){let S=It.default.DiagnosticSeverity.Error;if(I.severity,I.possible_causes.length>0)for(let C of I.possible_causes){let w=i.positionAt(Number(C.offset)),b=i.getWordRangeAtPosition(w)??new It.default.Range(w,i.positionAt(Number(C.offset)+1));R.push(new It.default.Diagnostic(b,I.message,S))}else R.push(new It.default.Diagnostic(new It.default.Range(0,0,0,1),I.message,S))}for(let I of _.matchAll(/^\s*DELETE\s*\*\s*FROM/gim)){let S=new It.default.Diagnostic(new It.default.Range(i.positionAt(I.index),i.positionAt(I.index+I[0].length)),D.t("Error: Incorrect syntax. Use `DELETE FROM table_name` instead of `DELETE * FROM table_name`."),It.default.DiagnosticSeverity.Error);S.source="sqlite3-editor",R.push(S)}}n.set(i.uri,R)}catch(i){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(27,i))}},200);return t.push(It.default.workspace.onDidCloseTextDocument(i=>n.delete(i.uri)),It.default.window.onDidChangeActiveTextEditor(e),It.default.window.onDidChangeTextEditorOptions(e),It.default.workspace.onDidOpenTextDocument(e),It.default.workspace.onDidChangeConfiguration(e),It.default.workspace.onDidChangeTextDocument(e),It.default.workspace.onDidChangeConfiguration(i=>{i.affectsConfiguration("sqlite3-editor.diagnostics")&&e().catch(console.error)})),{dispose(){t.forEach(i=>{i.dispose()}),t.length=0}}};var jl={};Rc(jl,{bigquery:()=>GT,db2:()=>kT,hive:()=>$T,mariadb:()=>KT,mysql:()=>ZT,n1ql:()=>nm,plsql:()=>om,postgresql:()=>cm,redshift:()=>Tm,singlestoredb:()=>Fm,snowflake:()=>Vm,spark:()=>Sm,sql:()=>Cm,sqlite:()=>gm,transactsql:()=>xm,trino:()=>Dm});var ne;(function(t){t.QUOTED_IDENTIFIER="QUOTED_IDENTIFIER",t.IDENTIFIER="IDENTIFIER",t.STRING="STRING",t.VARIABLE="VARIABLE",t.RESERVED_KEYWORD="RESERVED_KEYWORD",t.RESERVED_FUNCTION_NAME="RESERVED_FUNCTION_NAME",t.RESERVED_PHRASE="RESERVED_PHRASE",t.RESERVED_SET_OPERATION="RESERVED_SET_OPERATION",t.RESERVED_CLAUSE="RESERVED_CLAUSE",t.RESERVED_SELECT="RESERVED_SELECT",t.RESERVED_JOIN="RESERVED_JOIN",t.ARRAY_IDENTIFIER="ARRAY_IDENTIFIER",t.ARRAY_KEYWORD="ARRAY_KEYWORD",t.CASE="CASE",t.END="END",t.WHEN="WHEN",t.ELSE="ELSE",t.THEN="THEN",t.LIMIT="LIMIT",t.BETWEEN="BETWEEN",t.AND="AND",t.OR="OR",t.XOR="XOR",t.OPERATOR="OPERATOR",t.COMMA="COMMA",t.ASTERISK="ASTERISK",t.DOT="DOT",t.OPEN_PAREN="OPEN_PAREN",t.CLOSE_PAREN="CLOSE_PAREN",t.LINE_COMMENT="LINE_COMMENT",t.BLOCK_COMMENT="BLOCK_COMMENT",t.NUMBER="NUMBER",t.NAMED_PARAMETER="NAMED_PARAMETER",t.QUOTED_PARAMETER="QUOTED_PARAMETER",t.NUMBERED_PARAMETER="NUMBERED_PARAMETER",t.POSITIONAL_PARAMETER="POSITIONAL_PARAMETER",t.CUSTOM_PARAMETER="CUSTOM_PARAMETER",t.DELIMITER="DELIMITER",t.EOF="EOF"})(ne||(ne={}));var Xl=t=>({type:ne.EOF,raw:"\xABEOF\xBB",text:"\xABEOF\xBB",start:t}),qt=Xl(1/0),rs=t=>n=>n.type===t.type&&n.text===t.text,Ht={ARRAY:rs({text:"ARRAY",type:ne.RESERVED_KEYWORD}),BY:rs({text:"BY",type:ne.RESERVED_KEYWORD}),SET:rs({text:"SET",type:ne.RESERVED_CLAUSE}),STRUCT:rs({text:"STRUCT",type:ne.RESERVED_KEYWORD}),WINDOW:rs({text:"WINDOW",type:ne.RESERVED_CLAUSE})},Fa=t=>t===ne.RESERVED_KEYWORD||t===ne.RESERVED_FUNCTION_NAME||t===ne.RESERVED_PHRASE||t===ne.RESERVED_CLAUSE||t===ne.RESERVED_SELECT||t===ne.RESERVED_SET_OPERATION||t===ne.RESERVED_JOIN||t===ne.ARRAY_KEYWORD||t===ne.CASE||t===ne.END||t===ne.WHEN||t===ne.ELSE||t===ne.THEN||t===ne.LIMIT||t===ne.BETWEEN||t===ne.AND||t===ne.OR||t===ne.XOR,wT=t=>t===ne.AND||t===ne.OR||t===ne.XOR;var re=t=>t.flatMap(lL),lL=t=>PT(EL(t)).map(n=>n.trim()),yT=/[^[\]{}]+/y,bT=/\{.*?\}/y,DT=/\[.*?\]/y,EL=t=>{let n=0,e=[];for(;n<t.length;){yT.lastIndex=n;let i=yT.exec(t);i&&(e.push([i[0].trim()]),n+=i[0].length),DT.lastIndex=n;let E=DT.exec(t);if(E){let R=E[0].slice(1,-1).split("|").map(_=>_.trim());e.push(["",...R]),n+=E[0].length}bT.lastIndex=n;let d=bT.exec(t);if(d){let R=d[0].slice(1,-1).split("|").map(_=>_.trim());e.push(R),n+=d[0].length}if(!i&&!E&&!d)throw new Error(`Unbalanced parenthesis in: ${t}`)}return e},PT=([t,...n])=>t===void 0?[""]:PT(n).flatMap(e=>t.map(i=>i.trim()+" "+e.trim()));var uL=t=>[...new Set(t)],Jr=t=>t[t.length-1],ql=t=>t.sort((n,e)=>e.length-n.length||n.localeCompare(e)),Ha=t=>t.reduce((n,e)=>Math.max(n,e.length),0),ka=t=>t.replace(/\s+/gu," "),Te=t=>uL(Object.values(t).flat()),Ya=t=>/\n/.test(t);var MT=Te({keywords:["ALL","AND","ANY","ARRAY","AS","ASC","ASSERT_ROWS_MODIFIED","AT","BETWEEN","BY","CASE","CAST","COLLATE","CONTAINS","CREATE","CROSS","CUBE","CURRENT","DEFAULT","DEFINE","DESC","DISTINCT","ELSE","END","ENUM","ESCAPE","EXCEPT","EXCLUDE","EXISTS","EXTRACT","FALSE","FETCH","FOLLOWING","FOR","FROM","FULL","GROUP","GROUPING","GROUPS","HASH","HAVING","IF","IGNORE","IN","INNER","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LIKE","LIMIT","LOOKUP","MERGE","NATURAL","NEW","NO","NOT","NULL","NULLS","OF","ON","OR","ORDER","OUTER","OVER","PARTITION","PRECEDING","PROTO","RANGE","RECURSIVE","RESPECT","RIGHT","ROLLUP","ROWS","SELECT","SET","SOME","STRUCT","TABLE","TABLESAMPLE","THEN","TO","TREAT","TRUE","UNBOUNDED","UNION","UNNEST","USING","WHEN","WHERE","WINDOW","WITH","WITHIN"],datatypes:["ARRAY","BOOL","BYTES","DATE","DATETIME","GEOGRAPHY","INTERVAL","INT64","INT","SMALLINT","INTEGER","BIGINT","TINYINT","BYTEINT","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","FLOAT64","STRING","STRUCT","TIME","TIMEZONE"],stringFormat:["HEX","BASEX","BASE64M","ASCII","UTF-8","UTF8"],misc:["SAFE"],ddl:["LIKE","COPY","CLONE","IN","OUT","INOUT","RETURNS","LANGUAGE","CASCADE","RESTRICT","DETERMINISTIC"]});var vT=Te({aead:["KEYS.NEW_KEYSET","KEYS.ADD_KEY_FROM_RAW_BYTES","AEAD.DECRYPT_BYTES","AEAD.DECRYPT_STRING","AEAD.ENCRYPT","KEYS.KEYSET_CHAIN","KEYS.KEYSET_FROM_JSON","KEYS.KEYSET_TO_JSON","KEYS.ROTATE_KEYSET","KEYS.KEYSET_LENGTH"],aggregateAnalytic:["ANY_VALUE","ARRAY_AGG","AVG","CORR","COUNT","COUNTIF","COVAR_POP","COVAR_SAMP","MAX","MIN","ST_CLUSTERDBSCAN","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","VAR_POP","VAR_SAMP"],aggregate:["ANY_VALUE","ARRAY_AGG","ARRAY_CONCAT_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","COUNT","COUNTIF","LOGICAL_AND","LOGICAL_OR","MAX","MIN","STRING_AGG","SUM"],approximateAggregate:["APPROX_COUNT_DISTINCT","APPROX_QUANTILES","APPROX_TOP_COUNT","APPROX_TOP_SUM"],array:["ARRAY_CONCAT","ARRAY_LENGTH","ARRAY_TO_STRING","GENERATE_ARRAY","GENERATE_DATE_ARRAY","GENERATE_TIMESTAMP_ARRAY","ARRAY_REVERSE","OFFSET","SAFE_OFFSET","ORDINAL","SAFE_ORDINAL"],bitwise:["BIT_COUNT"],conversion:["PARSE_BIGNUMERIC","PARSE_NUMERIC","SAFE_CAST"],date:["CURRENT_DATE","EXTRACT","DATE","DATE_ADD","DATE_SUB","DATE_DIFF","DATE_TRUNC","DATE_FROM_UNIX_DATE","FORMAT_DATE","LAST_DAY","PARSE_DATE","UNIX_DATE"],datetime:["CURRENT_DATETIME","DATETIME","EXTRACT","DATETIME_ADD","DATETIME_SUB","DATETIME_DIFF","DATETIME_TRUNC","FORMAT_DATETIME","LAST_DAY","PARSE_DATETIME"],debugging:["ERROR"],federatedQuery:["EXTERNAL_QUERY"],geography:["S2_CELLIDFROMPOINT","S2_COVERINGCELLIDS","ST_ANGLE","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_AZIMUTH","ST_BOUNDARY","ST_BOUNDINGBOX","ST_BUFFER","ST_BUFFERWITHTOLERANCE","ST_CENTROID","ST_CENTROID_AGG","ST_CLOSESTPOINT","ST_CLUSTERDBSCAN","ST_CONTAINS","ST_CONVEXHULL","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DUMP","ST_DWITHIN","ST_ENDPOINT","ST_EQUALS","ST_EXTENT","ST_EXTERIORRING","ST_GEOGFROM","ST_GEOGFROMGEOJSON","ST_GEOGFROMTEXT","ST_GEOGFROMWKB","ST_GEOGPOINT","ST_GEOGPOINTFROMGEOHASH","ST_GEOHASH","ST_GEOMETRYTYPE","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_INTERSECTSBOX","ST_ISCOLLECTION","ST_ISEMPTY","ST_LENGTH","ST_MAKELINE","ST_MAKEPOLYGON","ST_MAKEPOLYGONORIENTED","ST_MAXDISTANCE","ST_NPOINTS","ST_NUMGEOMETRIES","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SIMPLIFY","ST_SNAPTOGRID","ST_STARTPOINT","ST_TOUCHES","ST_UNION","ST_UNION_AGG","ST_WITHIN","ST_X","ST_Y"],hash:["FARM_FINGERPRINT","MD5","SHA1","SHA256","SHA512"],hll:["HLL_COUNT.INIT","HLL_COUNT.MERGE","HLL_COUNT.MERGE_PARTIAL","HLL_COUNT.EXTRACT"],interval:["MAKE_INTERVAL","EXTRACT","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL"],json:["JSON_EXTRACT","JSON_QUERY","JSON_EXTRACT_SCALAR","JSON_VALUE","JSON_EXTRACT_ARRAY","JSON_QUERY_ARRAY","JSON_EXTRACT_STRING_ARRAY","JSON_VALUE_ARRAY","TO_JSON_STRING"],math:["ABS","SIGN","IS_INF","IS_NAN","IEEE_DIVIDE","RAND","SQRT","POW","POWER","EXP","LN","LOG","LOG10","GREATEST","LEAST","DIV","SAFE_DIVIDE","SAFE_MULTIPLY","SAFE_NEGATE","SAFE_ADD","SAFE_SUBTRACT","MOD","ROUND","TRUNC","CEIL","CEILING","FLOOR","COS","COSH","ACOS","ACOSH","SIN","SINH","ASIN","ASINH","TAN","TANH","ATAN","ATANH","ATAN2","RANGE_BUCKET"],navigation:["FIRST_VALUE","LAST_VALUE","NTH_VALUE","LEAD","LAG","PERCENTILE_CONT","PERCENTILE_DISC"],net:["NET.IP_FROM_STRING","NET.SAFE_IP_FROM_STRING","NET.IP_TO_STRING","NET.IP_NET_MASK","NET.IP_TRUNC","NET.IPV4_FROM_INT64","NET.IPV4_TO_INT64","NET.HOST","NET.PUBLIC_SUFFIX","NET.REG_DOMAIN"],numbering:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","NTILE","ROW_NUMBER"],security:["SESSION_USER"],statisticalAggregate:["CORR","COVAR_POP","COVAR_SAMP","STDDEV_POP","STDDEV_SAMP","STDDEV","VAR_POP","VAR_SAMP","VARIANCE"],string:["ASCII","BYTE_LENGTH","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CODE_POINTS_TO_BYTES","CODE_POINTS_TO_STRING","CONCAT","CONTAINS_SUBSTR","ENDS_WITH","FORMAT","FROM_BASE32","FROM_BASE64","FROM_HEX","INITCAP","INSTR","LEFT","LENGTH","LPAD","LOWER","LTRIM","NORMALIZE","NORMALIZE_AND_CASEFOLD","OCTET_LENGTH","REGEXP_CONTAINS","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","REPEAT","REVERSE","RIGHT","RPAD","RTRIM","SAFE_CONVERT_BYTES_TO_STRING","SOUNDEX","SPLIT","STARTS_WITH","STRPOS","SUBSTR","SUBSTRING","TO_BASE32","TO_BASE64","TO_CODE_POINTS","TO_HEX","TRANSLATE","TRIM","UNICODE","UPPER"],time:["CURRENT_TIME","TIME","EXTRACT","TIME_ADD","TIME_SUB","TIME_DIFF","TIME_TRUNC","FORMAT_TIME","PARSE_TIME"],timestamp:["CURRENT_TIMESTAMP","EXTRACT","STRING","TIMESTAMP","TIMESTAMP_ADD","TIMESTAMP_SUB","TIMESTAMP_DIFF","TIMESTAMP_TRUNC","FORMAT_TIMESTAMP","PARSE_TIMESTAMP","TIMESTAMP_SECONDS","TIMESTAMP_MILLIS","TIMESTAMP_MICROS","UNIX_SECONDS","UNIX_MILLIS","UNIX_MICROS"],uuid:["GENERATE_UUID"],conditional:["COALESCE","IF","IFNULL","NULLIF"],legacyAggregate:["AVG","BIT_AND","BIT_OR","BIT_XOR","CORR","COUNT","COVAR_POP","COVAR_SAMP","EXACT_COUNT_DISTINCT","FIRST","GROUP_CONCAT","GROUP_CONCAT_UNQUOTED","LAST","MAX","MIN","NEST","NTH","QUANTILES","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","TOP","UNIQUE","VARIANCE","VAR_POP","VAR_SAMP"],legacyBitwise:["BIT_COUNT"],legacyCasting:["BOOLEAN","BYTES","CAST","FLOAT","HEX_STRING","INTEGER","STRING"],legacyComparison:["COALESCE","GREATEST","IFNULL","IS_INF","IS_NAN","IS_EXPLICITLY_DEFINED","LEAST","NVL"],legacyDatetime:["CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE","DATE_ADD","DATEDIFF","DAY","DAYOFWEEK","DAYOFYEAR","FORMAT_UTC_USEC","HOUR","MINUTE","MONTH","MSEC_TO_TIMESTAMP","NOW","PARSE_UTC_USEC","QUARTER","SEC_TO_TIMESTAMP","SECOND","STRFTIME_UTC_USEC","TIME","TIMESTAMP","TIMESTAMP_TO_MSEC","TIMESTAMP_TO_SEC","TIMESTAMP_TO_USEC","USEC_TO_TIMESTAMP","UTC_USEC_TO_DAY","UTC_USEC_TO_HOUR","UTC_USEC_TO_MONTH","UTC_USEC_TO_WEEK","UTC_USEC_TO_YEAR","WEEK","YEAR"],legacyIp:["FORMAT_IP","PARSE_IP","FORMAT_PACKED_IP","PARSE_PACKED_IP"],legacyJson:["JSON_EXTRACT","JSON_EXTRACT_SCALAR"],legacyMath:["ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","ATAN2","CEIL","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG2","LOG10","PI","POW","RADIANS","RAND","ROUND","SIN","SINH","SQRT","TAN","TANH"],legacyRegex:["REGEXP_MATCH","REGEXP_EXTRACT","REGEXP_REPLACE"],legacyString:["CONCAT","INSTR","LEFT","LENGTH","LOWER","LPAD","LTRIM","REPLACE","RIGHT","RPAD","RTRIM","SPLIT","SUBSTR","UPPER"],legacyTableWildcard:["TABLE_DATE_RANGE","TABLE_DATE_RANGE_STRICT","TABLE_QUERY"],legacyUrl:["HOST","DOMAIN","TLD"],legacyWindow:["AVG","COUNT","MAX","MIN","STDDEV","SUM","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER"],legacyMisc:["CURRENT_USER","EVERY","FROM_BASE64","HASH","FARM_FINGERPRINT","IF","POSITION","SHA1","SOME","TO_BASE64"],other:["BQ.JOBS.CANCEL","BQ.REFRESH_MATERIALIZED_VIEW"],ddl:["OPTIONS"],pivot:["PIVOT","UNPIVOT"],dataTypes:["BYTES","NUMERIC","DECIMAL","BIGNUMERIC","BIGDECIMAL","STRING"]});var cL=re(["SELECT [ALL | DISTINCT] [AS STRUCT | AS VALUE]"]),dL=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","QUALIFY","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","OMIT RECORD IF","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY SOURCE | BY TARGET] [THEN]","UPDATE SET","CREATE [OR REPLACE] [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMP|TEMPORARY|SNAPSHOT|EXTERNAL] TABLE [IF NOT EXISTS]","CLUSTER BY","FOR SYSTEM_TIME AS OF","WITH CONNECTION","WITH PARTITION COLUMNS","REMOTE WITH CONNECTION"]),xT=re(["UPDATE","DELETE [FROM]","DROP [SNAPSHOT | EXTERNAL] TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME TO","ALTER COLUMN [IF EXISTS]","SET DEFAULT COLLATE","SET OPTIONS","DROP NOT NULL","SET DATA TYPE","ALTER SCHEMA [IF EXISTS]","ALTER [MATERIALIZED] VIEW [IF EXISTS]","ALTER BI_CAPACITY","TRUNCATE TABLE","CREATE SCHEMA [IF NOT EXISTS]","DEFAULT COLLATE","CREATE [OR REPLACE] [TEMP|TEMPORARY|TABLE] FUNCTION [IF NOT EXISTS]","CREATE [OR REPLACE] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] ROW ACCESS POLICY [IF NOT EXISTS]","GRANT TO","FILTER USING","CREATE CAPACITY","AS JSON","CREATE RESERVATION","CREATE ASSIGNMENT","CREATE SEARCH INDEX [IF NOT EXISTS]","DROP SCHEMA [IF EXISTS]","DROP [MATERIALIZED] VIEW [IF EXISTS]","DROP [TABLE] FUNCTION [IF EXISTS]","DROP PROCEDURE [IF EXISTS]","DROP ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","DROP CAPACITY [IF EXISTS]","DROP RESERVATION [IF EXISTS]","DROP ASSIGNMENT [IF EXISTS]","DROP SEARCH INDEX [IF EXISTS]","DROP [IF EXISTS]","GRANT","REVOKE","DECLARE","EXECUTE IMMEDIATE","LOOP","END LOOP","REPEAT","END REPEAT","WHILE","END WHILE","BREAK","LEAVE","CONTINUE","ITERATE","FOR","END FOR","BEGIN","BEGIN TRANSACTION","COMMIT TRANSACTION","ROLLBACK TRANSACTION","RAISE","RETURN","CALL","ASSERT","EXPORT DATA"]),fL=re(["UNION {ALL | DISTINCT}","EXCEPT DISTINCT","INTERSECT DISTINCT"]),hL=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),TL=re(["TABLESAMPLE SYSTEM","ANY TYPE","ALL COLUMNS","NOT DETERMINISTIC","{ROWS | RANGE} BETWEEN","IS [NOT] DISTINCT FROM"]),GT={tokenizerOptions:{reservedSelect:cL,reservedClauses:[...dL,...xT],reservedSetOperations:fL,reservedJoins:hL,reservedPhrases:TL,reservedKeywords:MT,reservedFunctionNames:vT,extraParens:["[]"],stringTypes:[{quote:'""".."""',prefixes:["R","B","RB","BR"]},{quote:"'''..'''",prefixes:["R","B","RB","BR"]},'""-bs',"''-bs",{quote:'""-raw',prefixes:["R","B","RB","BR"],requirePrefix:!0},{quote:"''-raw",prefixes:["R","B","RB","BR"],requirePrefix:!0}],identTypes:["``"],identChars:{dashes:!0},paramTypes:{positional:!0,named:["@"],quoted:["@"]},variableTypes:[{regex:String.raw`@@\w+`}],lineCommentTypes:["--","#"],operators:["&","|","^","~",">>","<<","||","=>"],postProcess:mL},formatOptions:{onelineClauses:xT}};function mL(t){return pL(AL(t))}function pL(t){let n=qt;return t.map(e=>e.text==="OFFSET"&&n.text==="["?(n=e,{...e,type:ne.RESERVED_FUNCTION_NAME}):(n=e,e))}function AL(t){let n=[];for(let i=0;i<t.length;i++){var e;let E=t[i];if((Ht.ARRAY(E)||Ht.STRUCT(E))&&((e=t[i+1])===null||e===void 0?void 0:e.text)==="<"){let d=SL(t,i+1),R=t.slice(i,d+1);n.push({type:ne.IDENTIFIER,raw:R.map(UT("raw")).join(""),text:R.map(UT("text")).join(""),start:E.start}),i=d}else n.push(E)}return n}var UT=t=>n=>n.type===ne.IDENTIFIER||n.type===ne.COMMA?n[t]+" ":n[t];function SL(t,n){let e=0;for(let i=n;i<t.length;i++){let E=t[i];if(E.text==="<"?e++:E.text===">"?e--:E.text===">>"&&(e-=2),e===0)return i}return t.length-1}var BT=Te({aggregate:["ARRAY_AGG","AVG","CORR","CORRELATION","COUNT","COUNT_BIG","COVAR_POP","COVARIANCE","COVAR","COVAR_SAMP","COVARIANCE_SAMP","CUME_DIST","GROUPING","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_ICPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV","STDDEV_SAMP","SUM","VAR_POP","VARIANCE","VAR","VAR_SAMP","VARIANCE_SAMP","XMLAGG"],scalar:["ABS","ABSVAL","ACOS","ADD_DAYS","ADD_MONTHS","ARRAY_DELETE","ARRAY_FIRST","ARRAY_LAST","ARRAY_NEXT","ARRAY_PRIOR","ARRAY_TRIM","ASCII","ASCII_CHR","ASCII_STR","ASCIISTR","ASIN","ATAN","ATANH","ATAN2","BIGINT","BINARY","BITAND","BITANDNOT","BITOR","BITXOR","BITNOT","BLOB","BTRIM","CARDINALITY","CCSID_ENCODING","CEILING","CEIL","CHAR","CHAR9","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CLOB","COALESCE","COLLATION_KEY","COMPARE_DECFLOAT","CONCAT","CONTAINS","COS","COSH","DATE","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEK_ISO","DAYOFYEAR","DAYS","DAYS_BETWEEN","DBCLOB","DECFLOAT","DECFLOAT_FORMAT","DECFLOAT_SORTKEY","DECIMAL","DEC","DECODE","DECRYPT_BINARY","DECRYPT_BIT","DECRYPT_CHAR","DECRYPT_DB","DECRYPT_DATAKEY_BIGINT","DECRYPT_DATAKEY_BIT","DECRYPT_DATAKEY_CLOB","DECRYPT_DATAKEY_DBCLOB","DECRYPT_DATAKEY_DECIMAL","DECRYPT_DATAKEY_INTEGER","DECRYPT_DATAKEY_VARCHAR","DECRYPT_DATAKEY_VARGRAPHIC","DEGREES","DIFFERENCE","DIGITS","DOUBLE_PRECISION","DOUBLE","DSN_XMLVALIDATE","EBCDIC_CHR","EBCDIC_STR","ENCRYPT_DATAKEY","ENCRYPT_TDES","EXP","EXTRACT","FLOAT","FLOOR","GENERATE_UNIQUE","GENERATE_UNIQUE_BINARY","GETHINT","GETVARIABLE","GRAPHIC","GREATEST","HASH","HASH_CRC32","HASH_MD5","HASH_SHA1","HASH_SHA256","HEX","HOUR","IDENTITY_VAL_LOCAL","IFNULL","INSERT","INSTR","INTEGER","INT","JULIAN_DAY","LAST_DAY","LCASE","LEAST","LEFT","LENGTH","LN","LOCATE","LOCATE_IN_STRING","LOG10","LOWER","LPAD","LTRIM","MAX","MAX_CARDINALITY","MICROSECOND","MIDNIGHT_SECONDS","MIN","MINUTE","MOD","MONTH","MONTHS_BETWEEN","MQREAD","MQREADCLOB","MQRECEIVE","MQRECEIVECLOB","MQSEND","MULTIPLY_ALT","NEXT_DAY","NEXT_MONTH","NORMALIZE_DECFLOAT","NORMALIZE_STRING","NULLIF","NVL","OVERLAY","PACK","POSITION","POSSTR","POWER","POW","QUANTIZE","QUARTER","RADIANS","RAISE_ERROR","RANDOM","RAND","REAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","RID","RIGHT","ROUND","ROUND_TIMESTAMP","ROWID","RPAD","RTRIM","SCORE","SECOND","SIGN","SIN","SINH","SMALLINT","SOUNDEX","SOAPHTTPC","SOAPHTTPV","SOAPHTTPNC","SOAPHTTPNV","SPACE","SQRT","STRIP","STRLEFT","STRPOS","STRRIGHT","SUBSTR","SUBSTRING","TAN","TANH","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMESTAMP_FORMAT","TIMESTAMP_ISO","TIMESTAMP_TZ","TO_CHAR","TO_CLOB","TO_DATE","TO_NUMBER","TOTALORDER","TO_TIMESTAMP","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRUNC","TRUNC_TIMESTAMP","UCASE","UNICODE","UNICODE_STR","UNISTR","UPPER","VALUE","VARBINARY","VARCHAR","VARCHAR9","VARCHAR_BIT_FORMAT","VARCHAR_FORMAT","VARGRAPHIC","VERIFY_GROUP_FOR_USER","VERIFY_ROLE_FOR_USER","VERIFY_TRUSTED_CONTEXT_ROLE_FOR_USER","WEEK","WEEK_ISO","WRAP","XMLATTRIBUTES","XMLCOMMENT","XMLCONCAT","XMLDOCUMENT","XMLELEMENT","XMLFOREST","XMLMODIFY","XMLNAMESPACES","XMLPARSE","XMLPI","XMLQUERY","XMLSERIALIZE","XMLTEXT","XMLXSROBJECTID","XSLTRANSFORM","YEAR"],table:["ADMIN_TASK_LIST","ADMIN_TASK_OUTPUT","ADMIN_TASK_STATUS","BLOCKING_THREADS","MQREADALL","MQREADALLCLOB","MQRECEIVEALL","MQRECEIVEALLCLOB","XMLTABLE"],row:["UNPACK"],olap:["CUME_DIST","PERCENT_RANK","RANK","DENSE_RANK","NTILE","LAG","LEAD","ROW_NUMBER","FIRST_VALUE","LAST_VALUE","NTH_VALUE","RATIO_TO_REPORT"],cast:["CAST"]});var FT=Te({standard:["ALL","ALLOCATE","ALLOW","ALTERAND","ANY","AS","ARRAY","ARRAY_EXISTS","ASENSITIVE","ASSOCIATE","ASUTIME","AT","AUDIT","AUX","AUXILIARY","BEFORE","BEGIN","BETWEEN","BUFFERPOOL","BY","CAPTURE","CASCADED","CAST","CCSID","CHARACTER","CHECK","CLONE","CLUSTER","COLLECTION","COLLID","COLUMN","CONDITION","CONNECTION","CONSTRAINT","CONTENT","CONTINUE","CREATE","CUBE","CURRENT","CURRENT_DATE","CURRENT_LC_CTYPE","CURRENT_PATH","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRVAL","CURSOR","DATA","DATABASE","DBINFO","DECLARE","DEFAULT","DESCRIPTOR","DETERMINISTIC","DISABLE","DISALLOW","DISTINCT","DO","DOCUMENT","DSSIZE","DYNAMIC","EDITPROC","ELSE","ELSEIF","ENCODING","ENCRYPTION","ENDING","END-EXEC","ERASE","ESCAPE","EXCEPTION","EXISTS","EXIT","EXTERNAL","FENCED","FIELDPROC","FINAL","FIRST","FOR","FREE","FULL","FUNCTION","GENERATED","GET","GLOBAL","GOTO","GROUP","HANDLER","HOLD","HOURS","IF","IMMEDIATE","IN","INCLUSIVE","INDEX","INHERIT","INNER","INOUT","INSENSITIVE","INTO","IS","ISOBID","ITERATE","JAR","KEEP","KEY","LANGUAGE","LAST","LC_CTYPE","LEAVE","LIKE","LOCAL","LOCALE","LOCATOR","LOCATORS","LOCK","LOCKMAX","LOCKSIZE","LONG","LOOP","MAINTAINED","MATERIALIZED","MICROSECONDS","MINUTEMINUTES","MODIFIES","MONTHS","NEXT","NEXTVAL","NO","NONE","NOT","NULL","NULLS","NUMPARTS","OBID","OF","OLD","ON","OPTIMIZATION","OPTIMIZE","ORDER","ORGANIZATION","OUT","OUTER","PACKAGE","PARAMETER","PART","PADDED","PARTITION","PARTITIONED","PARTITIONING","PATH","PIECESIZE","PERIOD","PLAN","PRECISION","PREVVAL","PRIOR","PRIQTY","PRIVILEGES","PROCEDURE","PROGRAM","PSID","PUBLIC","QUERY","QUERYNO","READS","REFERENCES","RESIGNAL","RESTRICT","RESULT","RESULT_SET_LOCATOR","RETURN","RETURNS","ROLE","ROLLUP","ROUND_CEILING","ROUND_DOWN","ROUND_FLOOR","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_UP","ROUND_UP","ROW","ROWSET","SCHEMA","SCRATCHPAD","SECONDS","SECQTY","SECURITY","SEQUENCE","SENSITIVE","SESSION_USER","SIMPLE","SOME","SOURCE","SPECIFIC","STANDARD","STATIC","STATEMENT","STAY","STOGROUP","STORES","STYLE","SUMMARY","SYNONYM","SYSDATE","SYSTEM","SYSTIMESTAMP","TABLE","TABLESPACE","THEN","TO","TRIGGER","TYPE","UNDO","UNIQUE","UNTIL","USER","USING","VALIDPROC","VARIABLE","VARIANT","VCAT","VERSIONING","VIEW","VOLATILE","VOLUMES","WHILE","WLM","XMLEXISTS","XMLCAST","YEARS","ZONE"]});var RL=re(["SELECT [ALL | DISTINCT]"]),NL=re(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY [INPUT SEQUENCE]","FETCH FIRST","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT","CREATE [OR REPLACE] VIEW","CREATE [GLOBAL TEMPORARY] TABLE"]),HT=re(["UPDATE","WHERE CURRENT OF","WITH {RR | RS | CS | UR}","DELETE FROM","DROP TABLE [HIERARCHY]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","ALTER [COLUMN]","SET DATA TYPE","SET NOT NULL","DROP {IDENTITY | EXPRESSION | DEFAULT | NOT NULL}","TRUNCATE [TABLE]","SET [CURRENT] SCHEMA","AFTER","GO","ALLOCATE CURSOR","ALTER DATABASE","ALTER FUNCTION","ALTER INDEX","ALTER MASK","ALTER PERMISSION","ALTER PROCEDURE","ALTER SEQUENCE","ALTER STOGROUP","ALTER TABLESPACE","ALTER TRIGGER","ALTER TRUSTED CONTEXT","ALTER VIEW","ASSOCIATE LOCATORS","BEGIN DECLARE SECTION","CALL","CLOSE","COMMENT","COMMIT","CONNECT","CREATE ALIAS","CREATE AUXILIARY TABLE","CREATE DATABASE","CREATE FUNCTION","CREATE GLOBAL TEMPORARY TABLE","CREATE INDEX","CREATE LOB TABLESPACE","CREATE MASK","CREATE PERMISSION","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE STOGROUP","CREATE SYNONYM","CREATE TABLESPACE","CREATE TRIGGER","CREATE TRUSTED CONTEXT","CREATE TYPE","CREATE VARIABLE","DECLARE CURSOR","DECLARE GLOBAL TEMPORARY TABLE","DECLARE STATEMENT","DECLARE TABLE","DECLARE VARIABLE","DESCRIBE CURSOR","DESCRIBE INPUT","DESCRIBE OUTPUT","DESCRIBE PROCEDURE","DESCRIBE TABLE","DROP","END DECLARE SECTION","EXCHANGE","EXECUTE","EXECUTE IMMEDIATE","EXPLAIN","FETCH","FREE LOCATOR","GET DIAGNOSTICS","GRANT","HOLD LOCATOR","INCLUDE","LABEL","LOCK TABLE","OPEN","PREPARE","REFRESH","RELEASE","RELEASE SAVEPOINT","RENAME","REVOKE","ROLLBACK","SAVEPOINT","SELECT INTO","SET CONNECTION","SET CURRENT ACCELERATOR","SET CURRENT APPLICATION COMPATIBILITY","SET CURRENT APPLICATION ENCODING SCHEME","SET CURRENT DEBUG MODE","SET CURRENT DECFLOAT ROUNDING MODE","SET CURRENT DEGREE","SET CURRENT EXPLAIN MODE","SET CURRENT GET_ACCEL_ARCHIVE","SET CURRENT LOCALE LC_CTYPE","SET CURRENT MAINTAINED TABLE TYPES FOR OPTIMIZATION","SET CURRENT OPTIMIZATION HINT","SET CURRENT PACKAGE PATH","SET CURRENT PACKAGESET","SET CURRENT PRECISION","SET CURRENT QUERY ACCELERATION","SET CURRENT QUERY ACCELERATION WAITFORDATA","SET CURRENT REFRESH AGE","SET CURRENT ROUTINE VERSION","SET CURRENT RULES","SET CURRENT SQLID","SET CURRENT TEMPORAL BUSINESS_TIME","SET CURRENT TEMPORAL SYSTEM_TIME","SET ENCRYPTION PASSWORD","SET PATH","SET SESSION TIME ZONE","SIGNAL","VALUES INTO","WHENEVER"]),IL=re(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),gL=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN"]),OL=re(["ON DELETE","ON UPDATE","SET NULL","{ROWS | RANGE} BETWEEN"]),kT={tokenizerOptions:{reservedSelect:RL,reservedClauses:[...NL,...HT],reservedSetOperations:IL,reservedJoins:gL,reservedPhrases:OL,reservedKeywords:FT,reservedFunctionNames:BT,stringTypes:[{quote:"''-qq",prefixes:["G","N","U&"]},{quote:"''-raw",prefixes:["X","BX","GX","UX"],requirePrefix:!0}],identTypes:['""-qq'],identChars:{first:"@#$"},paramTypes:{positional:!0,named:[":"]},paramChars:{first:"@#$",rest:"@#$"},operators:["**","\xAC=","\xAC>","\xAC<","!>","!<","||"]},formatOptions:{onelineClauses:HT}};var YT=Te({math:["ABS","ACOS","ASIN","ATAN","BIN","BROUND","CBRT","CEIL","CEILING","CONV","COS","DEGREES","EXP","FACTORIAL","FLOOR","GREATEST","HEX","LEAST","LN","LOG","LOG10","LOG2","NEGATIVE","PI","PMOD","POSITIVE","POW","POWER","RADIANS","RAND","ROUND","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIN","SQRT","TAN","UNHEX","WIDTH_BUCKET"],array:["ARRAY_CONTAINS","MAP_KEYS","MAP_VALUES","SIZE","SORT_ARRAY"],conversion:["BINARY","CAST"],date:["ADD_MONTHS","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","QUARTER","SECOND","TIMESTAMP","TO_DATE","TO_UTC_TIMESTAMP","TRUNC","UNIX_TIMESTAMP","WEEKOFYEAR","YEAR"],conditional:["ASSERT_TRUE","COALESCE","IF","ISNOTNULL","ISNULL","NULLIF","NVL"],string:["ASCII","BASE64","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONTEXT_NGRAMS","DECODE","ELT","ENCODE","FIELD","FIND_IN_SET","FORMAT_NUMBER","GET_JSON_OBJECT","IN_FILE","INITCAP","INSTR","LCASE","LENGTH","LEVENSHTEIN","LOCATE","LOWER","LPAD","LTRIM","NGRAMS","OCTET_LENGTH","PARSE_URL","PRINTF","QUOTE","REGEXP_EXTRACT","REGEXP_REPLACE","REPEAT","REVERSE","RPAD","RTRIM","SENTENCES","SOUNDEX","SPACE","SPLIT","STR_TO_MAP","SUBSTR","SUBSTRING","TRANSLATE","TRIM","UCASE","UNBASE64","UPPER"],masking:["MASK","MASK_FIRST_N","MASK_HASH","MASK_LAST_N","MASK_SHOW_FIRST_N","MASK_SHOW_LAST_N"],misc:["AES_DECRYPT","AES_ENCRYPT","CRC32","CURRENT_DATABASE","CURRENT_USER","HASH","JAVA_METHOD","LOGGED_IN_USER","MD5","REFLECT","SHA","SHA1","SHA2","SURROGATE_KEY","VERSION"],aggregate:["AVG","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COVAR_POP","COVAR_SAMP","HISTOGRAM_NUMERIC","MAX","MIN","NTILE","PERCENTILE","PERCENTILE_APPROX","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],table:["EXPLODE","INLINE","JSON_TUPLE","PARSE_URL_TUPLE","POSEXPLODE","STACK"],window:["LEAD","LAG","FIRST_VALUE","LAST_VALUE","RANK","ROW_NUMBER","DENSE_RANK","CUME_DIST","PERCENT_RANK","NTILE"],dataTypes:["DECIMAL","NUMERIC","VARCHAR","CHAR"]});var VT=Te({nonReserved:["ADD","ADMIN","AFTER","ANALYZE","ARCHIVE","ASC","BEFORE","BUCKET","BUCKETS","CASCADE","CHANGE","CLUSTER","CLUSTERED","CLUSTERSTATUS","COLLECTION","COLUMNS","COMMENT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONTINUE","DATA","DATABASES","DATETIME","DAY","DBPROPERTIES","DEFERRED","DEFINED","DELIMITED","DEPENDENCY","DESC","DIRECTORIES","DIRECTORY","DISABLE","DISTRIBUTE","ELEM_TYPE","ENABLE","ESCAPED","EXCLUSIVE","EXPLAIN","EXPORT","FIELDS","FILE","FILEFORMAT","FIRST","FORMAT","FORMATTED","FUNCTIONS","HOLD_DDLTIME","HOUR","IDXPROPERTIES","IGNORE","INDEX","INDEXES","INPATH","INPUTDRIVER","INPUTFORMAT","ITEMS","JAR","KEYS","KEY_TYPE","LIMIT","LINES","LOAD","LOCATION","LOCK","LOCKS","LOGICAL","LONG","MAPJOIN","MATERIALIZED","METADATA","MINUS","MINUTE","MONTH","MSCK","NOSCAN","NO_DROP","OFFLINE","OPTION","OUTPUTDRIVER","OUTPUTFORMAT","OVERWRITE","OWNER","PARTITIONED","PARTITIONS","PLUS","PRETTY","PRINCIPALS","PROTECTION","PURGE","READ","READONLY","REBUILD","RECORDREADER","RECORDWRITER","RELOAD","RENAME","REPAIR","REPLACE","REPLICATION","RESTRICT","REWRITE","ROLE","ROLES","SCHEMA","SCHEMAS","SECOND","SEMI","SERDE","SERDEPROPERTIES","SERVER","SETS","SHARED","SHOW","SHOW_DATABASE","SKEWED","SORT","SORTED","SSL","STATISTICS","STORED","STREAMTABLE","STRING","STRUCT","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","TINYINT","TOUCH","TRANSACTIONS","UNARCHIVE","UNDO","UNIONTYPE","UNLOCK","UNSET","UNSIGNED","URI","USE","UTC","UTCTIMESTAMP","VALUE_TYPE","VIEW","WHILE","YEAR","AUTOCOMMIT","ISOLATION","LEVEL","OFFSET","SNAPSHOT","TRANSACTION","WORK","WRITE","ABORT","KEY","LAST","NORELY","NOVALIDATE","NULLS","RELY","VALIDATE","DETAIL","DOW","EXPRESSION","OPERATOR","QUARTER","SUMMARY","VECTORIZATION","WEEK","YEARS","MONTHS","WEEKS","DAYS","HOURS","MINUTES","SECONDS","TIMESTAMPTZ","ZONE"],reserved:["ALL","ALTER","AND","ARRAY","AS","AUTHORIZATION","BETWEEN","BIGINT","BINARY","BOOLEAN","BOTH","BY","CASE","CAST","CHAR","COLUMN","CONF","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIMESTAMP","CURSOR","DATABASE","DATE","DECIMAL","DELETE","DESCRIBE","DISTINCT","DOUBLE","DROP","ELSE","END","EXCHANGE","EXISTS","EXTENDED","EXTERNAL","FALSE","FETCH","FLOAT","FOLLOWING","FOR","FROM","FULL","FUNCTION","GRANT","GROUP","GROUPING","HAVING","IF","IMPORT","IN","INNER","INSERT","INT","INTERSECT","INTERVAL","INTO","IS","JOIN","LATERAL","LEFT","LESS","LIKE","LOCAL","MACRO","MAP","MORE","NONE","NOT","NULL","OF","ON","OR","ORDER","OUT","OUTER","OVER","PARTIALSCAN","PARTITION","PERCENT","PRECEDING","PRESERVE","PROCEDURE","RANGE","READS","REDUCE","REVOKE","RIGHT","ROLLUP","ROW","ROWS","SELECT","SET","SMALLINT","TABLE","TABLESAMPLE","THEN","TIMESTAMP","TO","TRANSFORM","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNION","UNIQUEJOIN","UPDATE","USER","USING","UTC_TMESTAMP","VALUES","VARCHAR","WHEN","WHERE","WINDOW","WITH","COMMIT","ONLY","REGEXP","RLIKE","ROLLBACK","START","CACHE","CONSTRAINT","FOREIGN","PRIMARY","REFERENCES","DAYOFWEEK","EXTRACT","FLOOR","INTEGER","PRECISION","VIEWS","TIME","NUMERIC","SYNC"],fileTypes:["TEXTFILE","SEQUENCEFILE","ORC","CSV","TSV","PARQUET","AVRO","RCFILE","JSONFILE","INPUTFORMAT","OUTPUTFORMAT"]});var _L=re(["SELECT [ALL | DISTINCT]"]),LL=re(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT INTO [TABLE]","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED [THEN]","UPDATE SET","INSERT [VALUES]","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [MATERIALIZED] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS]"]),WT=re(["UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","RENAME TO","TRUNCATE [TABLE]","ALTER","CREATE","USE","DESCRIBE","DROP","FETCH","SHOW","STORED AS","STORED BY","ROW FORMAT"]),CL=re(["UNION [ALL | DISTINCT]"]),wL=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","LEFT SEMI JOIN"]),yL=re(["{ROWS | RANGE} BETWEEN"]),$T={tokenizerOptions:{reservedSelect:_L,reservedClauses:[...LL,...WT],reservedSetOperations:CL,reservedJoins:wL,reservedPhrases:yL,reservedKeywords:VT,reservedFunctionNames:YT,extraParens:["[]"],stringTypes:['""-bs',"''-bs"],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||"]},formatOptions:{onelineClauses:WT}};var XT=Te({all:["ACCESSIBLE","ACCOUNT","ACTION","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALL","ALGORITHM","ALTER","ALWAYS","ANALYZE","AND","ANY","AS","ASC","ASCII","ASENSITIVE","AT","ATOMIC","AUTHORS","AUTO_INCREMENT","AUTOEXTEND_SIZE","AUTO","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BODY","BOOL","BOOLEAN","BOTH","BTREE","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHANGE","CHANGED","CHAR","CHARACTER","CHARSET","CHECK","CHECKPOINT","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLOB","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMN_NAME","COLUMNS","COLUMN_ADD","COLUMN_CHECK","COLUMN_CREATE","COLUMN_DELETE","COLUMN_GET","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPRESSED","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONTRIBUTORS","CONVERT","CPU","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_POS","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","CYCLE","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELETE_DOMAIN_ID","DESC","DESCRIBE","DES_KEY_FILE","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DO_DOMAIN_IDS","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","ELSIF","EMPTY","ENABLE","ENCLOSED","END","ENDS","ENGINE","ENGINES","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXAMINED","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXCEPTION","EXISTS","EXIT","EXPANSION","EXPIRE","EXPORT","EXPLAIN","EXTENDED","EXTENT_SIZE","FALSE","FAST","FAULTS","FEDERATED","FETCH","FIELDS","FILE","FIRST","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GET_FORMAT","GET","GLOBAL","GOTO","GRANT","GRANTS","GROUP","HANDLER","HARD","HASH","HAVING","HELP","HIGH_PRIORITY","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORED","IGNORE_DOMAIN_IDS","IGNORE_SERVER_IDS","IMMEDIATE","IMPORT","INTERSECT","IN","INCREMENT","INDEX","INDEXES","INFILE","INITIAL_SIZE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERVAL","INVISIBLE","INTO","IO","IO_THREAD","IPC","IS","ISOLATION","ISOPEN","ISSUER","ITERATE","INVOKER","JOIN","JSON","JSON_TABLE","KEY","KEYS","KEY_BLOCK_SIZE","KILL","LANGUAGE","LAST","LAST_VALUE","LASTVAL","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_GTID_POS","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_SERVER_ID","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_USER","MASTER_USE_GTID","MASTER_HEARTBEAT_PERIOD","MATCH","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_STATEMENT_TIME","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MAXVALUE","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUS","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONITOR","MONTH","MUTEX","MYSQL","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NESTED","NEVER","NEW","NEXT","NEXTVAL","NO","NOMAXVALUE","NOMINVALUE","NOCACHE","NOCYCLE","NO_WAIT","NOWAIT","NODEGROUP","NONE","NOT","NOTFOUND","NO_WRITE_TO_BINLOG","NULL","NUMBER","NUMERIC","NVARCHAR","OF","OFFSET","OLD_PASSWORD","ON","ONE","ONLINE","ONLY","OPEN","OPTIMIZE","OPTIONS","OPTION","OPTIONALLY","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OUTFILE","OVER","OVERLAPS","OWNER","PACKAGE","PACK_KEYS","PAGE","PAGE_CHECKSUM","PARSER","PARSE_VCOL_EXPR","PATH","PERIOD","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PERSISTENT","PHASE","PLUGIN","PLUGINS","PORT","PORTION","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PREVIOUS","PRIMARY","PRIVILEGES","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RAISE","RANGE","RAW","READ","READ_ONLY","READ_WRITE","READS","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDOFILE","REDUNDANT","REFERENCES","REGEXP","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEATABLE","REPLACE","REPLAY","REPLICA","REPLICAS","REPLICA_POS","REPLICATION","REPEAT","REQUIRE","RESET","RESIGNAL","RESTART","RESTORE","RESTRICT","RESUME","RETURNED_SQLSTATE","RETURN","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROW","ROWCOUNT","ROWNUM","ROWS","ROWTYPE","ROW_COUNT","ROW_FORMAT","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMA_NAME","SCHEMAS","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SEQUENCE","SERIAL","SERIALIZABLE","SESSION","SERVER","SET","SETVAL","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLAVES","SLAVE_POS","SLOW","SNAPSHOT","SMALLINT","SOCKET","SOFT","SOME","SONAME","SOUNDS","SOURCE","STAGE","STORED","SPATIAL","SPECIFIC","REF_SYSTEM_ID","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_SECOND","SQL_TSI_MINUTE","SQL_TSI_HOUR","SQL_TSI_DAY","SQL_TSI_WEEK","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_YEAR","SSL","START","STARTING","STARTS","STATEMENT","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STRAIGHT_JOIN","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSDATE","SYSTEM","SYSTEM_TIME","TABLE","TABLE_NAME","TABLES","TABLESPACE","TABLE_CHECKSUM","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TO","TRAILING","TRANSACTION","TRANSACTIONAL","THREADS","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO_BUFFER_SIZE","UNDOFILE","UNDO","UNICODE","UNION","UNIQUE","UNKNOWN","UNLOCK","UNINSTALL","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARCHAR2","VARIABLES","VARYING","VIA","VIEW","VIRTUAL","VISIBLE","VERSIONING","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","X509","XOR","XA","XML","YEAR","YEAR_MONTH","ZEROFILL"]});var qT=Te({all:["ADDDATE","ADD_MONTHS","BIT_AND","BIT_OR","BIT_XOR","CAST","COUNT","CUME_DIST","CURDATE","CURTIME","DATE_ADD","DATE_SUB","DATE_FORMAT","DECODE","DENSE_RANK","EXTRACT","FIRST_VALUE","GROUP_CONCAT","JSON_ARRAYAGG","JSON_OBJECTAGG","LAG","LEAD","MAX","MEDIAN","MID","MIN","NOW","NTH_VALUE","NTILE","POSITION","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","ROW_NUMBER","SESSION_USER","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUBDATE","SUBSTR","SUBSTRING","SUM","SYSTEM_USER","TRIM","TRIM_ORACLE","VARIANCE","VAR_POP","VAR_SAMP","ABS","ACOS","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ASIN","ATAN","ATAN2","BENCHMARK","BIN","BINLOG_GTID_POS","BIT_COUNT","BIT_LENGTH","CEIL","CEILING","CHARACTER_LENGTH","CHAR_LENGTH","CHR","COERCIBILITY","COLUMN_CHECK","COLUMN_EXISTS","COLUMN_LIST","COLUMN_JSON","COMPRESS","CONCAT","CONCAT_OPERATOR_ORACLE","CONCAT_WS","CONNECTION_ID","CONV","CONVERT_TZ","COS","COT","CRC32","DATEDIFF","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEGREES","DECODE_HISTOGRAM","DECODE_ORACLE","DES_DECRYPT","DES_ENCRYPT","ELT","ENCODE","ENCRYPT","EXP","EXPORT_SET","EXTRACTVALUE","FIELD","FIND_IN_SET","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GET_LOCK","GREATEST","HEX","IFNULL","INSTR","ISNULL","IS_FREE_LOCK","IS_USED_LOCK","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_COMPACT","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_DETAILED","JSON_EXISTS","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_LOOSE","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_QUERY","JSON_QUOTE","JSON_OBJECT","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_SEARCH","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAST_DAY","LAST_INSERT_ID","LCASE","LEAST","LENGTH","LENGTHB","LN","LOAD_FILE","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LPAD_ORACLE","LTRIM","LTRIM_ORACLE","MAKEDATE","MAKETIME","MAKE_SET","MASTER_GTID_WAIT","MASTER_POS_WAIT","MD5","MONTHNAME","NAME_CONST","NVL","NVL2","OCT","OCTET_LENGTH","ORD","PERIOD_ADD","PERIOD_DIFF","PI","POW","POWER","QUOTE","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","RADIANS","RAND","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPLACE_ORACLE","REVERSE","ROUND","RPAD","RPAD_ORACLE","RTRIM","RTRIM_ORACLE","SEC_TO_TIME","SHA","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SPACE","SQRT","STRCMP","STR_TO_DATE","SUBSTR_ORACLE","SUBSTRING_INDEX","SUBTIME","SYS_GUID","TAN","TIMEDIFF","TIME_FORMAT","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_SECONDS","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","UUID","UUID_SHORT","VERSION","WEEKDAY","WEEKOFYEAR","WSREP_LAST_WRITTEN_GTID","WSREP_LAST_SEEN_GTID","WSREP_SYNC_WAIT_UPTO_GTID","YEARWEEK","COALESCE","NULLIF","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","BIT","BINARY","BLOB","CHAR","NATIONAL CHAR","CHAR BYTE","ENUM","VARBINARY","VARCHAR","NATIONAL VARCHAR","TIME","DATETIME","TIMESTAMP","YEAR"]});var bL=re(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),DL=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","SET","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] TABLE [IF NOT EXISTS]","RETURNING"]),jT=re(["UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] [IGNORE] TABLE [IF EXISTS]","ADD [COLUMN] [IF NOT EXISTS]","{CHANGE | MODIFY} [COLUMN] [IF EXISTS]","DROP [COLUMN] [IF EXISTS]","RENAME [TO]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","SET {VISIBLE | INVISIBLE}","TRUNCATE [TABLE]","ALTER DATABASE","ALTER DATABASE COMMENT","ALTER EVENT","ALTER FUNCTION","ALTER PROCEDURE","ALTER SCHEMA","ALTER SCHEMA COMMENT","ALTER SEQUENCE","ALTER SERVER","ALTER USER","ALTER VIEW","ANALYZE","ANALYZE TABLE","BACKUP LOCK","BACKUP STAGE","BACKUP UNLOCK","BEGIN","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHECK TABLE","CHECK VIEW","CHECKSUM TABLE","COMMIT","CREATE AGGREGATE FUNCTION","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE INDEX","CREATE PROCEDURE","CREATE ROLE","CREATE SEQUENCE","CREATE SERVER","CREATE SPATIAL INDEX","CREATE TRIGGER","CREATE UNIQUE INDEX","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP INDEX","DROP PREPARE","DROP PROCEDURE","DROP ROLE","DROP SEQUENCE","DROP SERVER","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GET DIAGNOSTICS","GET DIAGNOSTICS CONDITION","GRANT","HANDLER","HELP","INSTALL PLUGIN","INSTALL SONAME","KILL","LOAD DATA INFILE","LOAD INDEX INTO CACHE","LOAD XML INFILE","LOCK TABLE","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","PURGE MASTER LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","REPAIR VIEW","RESET MASTER","RESET QUERY CACHE","RESET REPLICA","RESET SLAVE","RESIGNAL","REVOKE","ROLLBACK","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET GLOBAL TRANSACTION","SET NAMES","SET PASSWORD","SET ROLE","SET STATEMENT","SET TRANSACTION","SHOW","SHOW ALL REPLICAS STATUS","SHOW ALL SLAVES STATUS","SHOW AUTHORS","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW BINLOG STATUS","SHOW CHARACTER SET","SHOW CLIENT_STATISTICS","SHOW COLLATION","SHOW COLUMNS","SHOW CONTRIBUTORS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PACKAGE","SHOW CREATE PACKAGE BODY","SHOW CREATE PROCEDURE","SHOW CREATE SEQUENCE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINE INNODB STATUS","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW EXPLAIN","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW INDEXES","SHOW INDEX_STATISTICS","SHOW KEYS","SHOW LOCALES","SHOW MASTER LOGS","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PACKAGE BODY CODE","SHOW PACKAGE BODY STATUS","SHOW PACKAGE STATUS","SHOW PLUGINS","SHOW PLUGINS SONAME","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW QUERY_RESPONSE_TIME","SHOW RELAYLOG EVENTS","SHOW REPLICA","SHOW REPLICA HOSTS","SHOW REPLICA STATUS","SHOW SCHEMAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW SLAVE STATUS","SHOW STATUS","SHOW STORAGE ENGINES","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW USER_STATISTICS","SHOW VARIABLES","SHOW WARNINGS","SHOW WSREP_MEMBERSHIP","SHOW WSREP_STATUS","SHUTDOWN","SIGNAL","START ALL REPLICAS","START ALL SLAVES","START REPLICA","START SLAVE","START TRANSACTION","STOP ALL REPLICAS","STOP ALL SLAVES","STOP REPLICA","STOP SLAVE","UNINSTALL PLUGIN","UNINSTALL SONAME","UNLOCK TABLE","USE","XA BEGIN","XA COMMIT","XA END","XA PREPARE","XA RECOVER","XA ROLLBACK","XA START"]),PL=re(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]","MINUS [ALL | DISTINCT]"]),ML=re(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),vL=re(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]),KT={tokenizerOptions:{reservedSelect:bL,reservedClauses:[...DL,...jT],reservedSetOperations:PL,reservedJoins:ML,reservedPhrases:vL,supportsXor:!0,reservedKeywords:XT,reservedFunctionNames:qT,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","&&","||","!"],postProcess:xL},formatOptions:{onelineClauses:jT}};function xL(t){return t.map((n,e)=>{let i=t[e+1]||qt;return Ht.SET(n)&&i.text==="("?{...n,type:ne.RESERVED_FUNCTION_NAME}:n})}var JT=Te({all:["ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","ALGORITHM","ALL","ALTER","ALWAYS","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASCII","ASENSITIVE","AT","ATTRIBUTE","AUTHENTICATION","AUTOEXTEND_SIZE","AUTO_INCREMENT","AVG","AVG_ROW_LENGTH","BACKUP","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BINLOG","BIT","BLOB","BLOCK","BOOL","BOOLEAN","BOTH","BTREE","BUCKETS","BY","BYTE","CACHE","CALL","CASCADE","CASCADED","CASE","CATALOG_NAME","CHAIN","CHALLENGE_RESPONSE","CHANGE","CHANGED","CHANNEL","CHAR","CHARACTER","CHARSET","CHECK","CHECKSUM","CIPHER","CLASS_ORIGIN","CLIENT","CLONE","CLOSE","COALESCE","CODE","COLLATE","COLLATION","COLUMN","COLUMNS","COLUMN_FORMAT","COLUMN_NAME","COMMENT","COMMIT","COMMITTED","COMPACT","COMPLETION","COMPONENT","COMPRESSED","COMPRESSION","CONCURRENT","CONDITION","CONNECTION","CONSISTENT","CONSTRAINT","CONSTRAINT_CATALOG","CONSTRAINT_NAME","CONSTRAINT_SCHEMA","CONTAINS","CONTEXT","CONTINUE","CONVERT","CPU","CREATE","CROSS","CUBE","CUME_DIST","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CURSOR_NAME","DATA","DATABASE","DATABASES","DATAFILE","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULT_AUTH","DEFINER","DEFINITION","DELAYED","DELAY_KEY_WRITE","DELETE","DENSE_RANK","DESC","DESCRIBE","DESCRIPTION","DETERMINISTIC","DIAGNOSTICS","DIRECTORY","DISABLE","DISCARD","DISK","DISTINCT","DISTINCTROW","DIV","DO","DOUBLE","DROP","DUAL","DUMPFILE","DUPLICATE","DYNAMIC","EACH","ELSE","ELSEIF","EMPTY","ENABLE","ENCLOSED","ENCRYPTION","END","ENDS","ENFORCED","ENGINE","ENGINES","ENGINE_ATTRIBUTE","ENUM","ERROR","ERRORS","ESCAPE","ESCAPED","EVENT","EVENTS","EVERY","EXCEPT","EXCHANGE","EXCLUDE","EXECUTE","EXISTS","EXIT","EXPANSION","EXPIRE","EXPLAIN","EXPORT","EXTENDED","EXTENT_SIZE","FACTOR","FAILED_LOGIN_ATTEMPTS","FALSE","FAST","FAULTS","FETCH","FIELDS","FILE","FILE_BLOCK_SIZE","FILTER","FINISH","FIRST","FIRST_VALUE","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOLLOWS","FOR","FORCE","FOREIGN","FORMAT","FOUND","FROM","FULL","FULLTEXT","FUNCTION","GENERAL","GENERATED","GEOMCOLLECTION","GEOMETRY","GEOMETRYCOLLECTION","GET","GET_FORMAT","GET_MASTER_PUBLIC_KEY","GET_SOURCE_PUBLIC_KEY","GLOBAL","GRANT","GRANTS","GROUP","GROUPING","GROUPS","GROUP_REPLICATION","GTID_ONLY","HANDLER","HASH","HAVING","HELP","HIGH_PRIORITY","HISTOGRAM","HISTORY","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IGNORE","IGNORE_SERVER_IDS","IMPORT","IN","INACTIVE","INDEX","INDEXES","INFILE","INITIAL","INITIAL_SIZE","INITIATE","INNER","INOUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTALL","INSTANCE","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","INTERSECT","INTERVAL","INTO","INVISIBLE","INVOKER","IO","IO_AFTER_GTIDS","IO_BEFORE_GTIDS","IO_THREAD","IPC","IS","ISOLATION","ISSUER","ITERATE","JOIN","JSON","JSON_TABLE","JSON_VALUE","KEY","KEYRING","KEYS","KEY_BLOCK_SIZE","KILL","LAG","LANGUAGE","LAST","LAST_VALUE","LATERAL","LEAD","LEADING","LEAVE","LEAVES","LEFT","LESS","LEVEL","LIKE","LIMIT","LINEAR","LINES","LINESTRING","LIST","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCK","LOCKED","LOCKS","LOGFILE","LOGS","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","MASTER","MASTER_AUTO_POSITION","MASTER_BIND","MASTER_COMPRESSION_ALGORITHMS","MASTER_CONNECT_RETRY","MASTER_DELAY","MASTER_HEARTBEAT_PERIOD","MASTER_HOST","MASTER_LOG_FILE","MASTER_LOG_POS","MASTER_PASSWORD","MASTER_PORT","MASTER_PUBLIC_KEY_PATH","MASTER_RETRY_COUNT","MASTER_SSL","MASTER_SSL_CA","MASTER_SSL_CAPATH","MASTER_SSL_CERT","MASTER_SSL_CIPHER","MASTER_SSL_CRL","MASTER_SSL_CRLPATH","MASTER_SSL_KEY","MASTER_SSL_VERIFY_SERVER_CERT","MASTER_TLS_CIPHERSUITES","MASTER_TLS_VERSION","MASTER_USER","MASTER_ZSTD_COMPRESSION_LEVEL","MATCH","MAXVALUE","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_SIZE","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MERGE","MESSAGE_TEXT","MICROSECOND","MIDDLEINT","MIGRATE","MINUTE","MINUTE_MICROSECOND","MINUTE_SECOND","MIN_ROWS","MOD","MODE","MODIFIES","MODIFY","MONTH","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","MUTEX","MYSQL_ERRNO","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NDB","NDBCLUSTER","NESTED","NETWORK_NAMESPACE","NEVER","NEW","NEXT","NO","NODEGROUP","NONE","NOT","NOWAIT","NO_WAIT","NO_WRITE_TO_BINLOG","NTH_VALUE","NTILE","NULL","NULLS","NUMBER","NUMERIC","NVARCHAR","OF","OFF","OFFSET","OJ","OLD","ON","ONE","ONLY","OPEN","OPTIMIZE","OPTIMIZER_COSTS","OPTION","OPTIONAL","OPTIONALLY","OPTIONS","OR","ORDER","ORDINALITY","ORGANIZATION","OTHERS","OUT","OUTER","OUTFILE","OVER","OWNER","PACK_KEYS","PAGE","PARSER","PARTIAL","PARTITION","PARTITIONING","PARTITIONS","PASSWORD","PASSWORD_LOCK_TIME","PATH","PERCENT_RANK","PERSIST","PERSIST_ONLY","PHASE","PLUGIN","PLUGINS","PLUGIN_DIR","POINT","POLYGON","PORT","PRECEDES","PRECEDING","PRECISION","PREPARE","PRESERVE","PREV","PRIMARY","PRIVILEGES","PRIVILEGE_CHECKS_USER","PROCEDURE","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROXY","PURGE","QUARTER","QUERY","QUICK","RANDOM","RANGE","RANK","READ","READS","READ_ONLY","READ_WRITE","REAL","REBUILD","RECOVER","RECURSIVE","REDO_BUFFER_SIZE","REDUNDANT","REFERENCE","REFERENCES","REGEXP","REGISTRATION","RELAY","RELAYLOG","RELAY_LOG_FILE","RELAY_LOG_POS","RELAY_THREAD","RELEASE","RELOAD","REMOVE","RENAME","REORGANIZE","REPAIR","REPEAT","REPEATABLE","REPLACE","REPLICA","REPLICAS","REPLICATE_DO_DB","REPLICATE_DO_TABLE","REPLICATE_IGNORE_DB","REPLICATE_IGNORE_TABLE","REPLICATE_REWRITE_DB","REPLICATE_WILD_DO_TABLE","REPLICATE_WILD_IGNORE_TABLE","REPLICATION","REQUIRE","REQUIRE_ROW_FORMAT","RESET","RESIGNAL","RESOURCE","RESPECT","RESTART","RESTORE","RESTRICT","RESUME","RETAIN","RETURN","RETURNED_SQLSTATE","RETURNING","RETURNS","REUSE","REVERSE","REVOKE","RIGHT","RLIKE","ROLE","ROLLBACK","ROLLUP","ROTATE","ROUTINE","ROW","ROWS","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","RTREE","SAVEPOINT","SCHEDULE","SCHEMA","SCHEMAS","SCHEMA_NAME","SECOND","SECONDARY","SECONDARY_ENGINE","SECONDARY_ENGINE_ATTRIBUTE","SECONDARY_LOAD","SECONDARY_UNLOAD","SECOND_MICROSECOND","SECURITY","SELECT","SENSITIVE","SEPARATOR","SERIAL","SERIALIZABLE","SERVER","SESSION","SET","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMPLE","SKIP","SLAVE","SLOW","SMALLINT","SNAPSHOT","SOCKET","SOME","SONAME","SOUNDS","SOURCE","SOURCE_AUTO_POSITION","SOURCE_BIND","SOURCE_COMPRESSION_ALGORITHMS","SOURCE_CONNECT_RETRY","SOURCE_DELAY","SOURCE_HEARTBEAT_PERIOD","SOURCE_HOST","SOURCE_LOG_FILE","SOURCE_LOG_POS","SOURCE_PASSWORD","SOURCE_PORT","SOURCE_PUBLIC_KEY_PATH","SOURCE_RETRY_COUNT","SOURCE_SSL","SOURCE_SSL_CA","SOURCE_SSL_CAPATH","SOURCE_SSL_CERT","SOURCE_SSL_CIPHER","SOURCE_SSL_CRL","SOURCE_SSL_CRLPATH","SOURCE_SSL_KEY","SOURCE_SSL_VERIFY_SERVER_CERT","SOURCE_TLS_CIPHERSUITES","SOURCE_TLS_VERSION","SOURCE_USER","SOURCE_ZSTD_COMPRESSION_LEVEL","SPATIAL","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","SQL_AFTER_GTIDS","SQL_AFTER_MTS_GAPS","SQL_BEFORE_GTIDS","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CALC_FOUND_ROWS","SQL_NO_CACHE","SQL_SMALL_RESULT","SQL_THREAD","SQL_TSI_DAY","SQL_TSI_HOUR","SQL_TSI_MINUTE","SQL_TSI_MONTH","SQL_TSI_QUARTER","SQL_TSI_SECOND","SQL_TSI_WEEK","SQL_TSI_YEAR","SRID","SSL","STACKED","START","STARTING","STARTS","STATS_AUTO_RECALC","STATS_PERSISTENT","STATS_SAMPLE_PAGES","STATUS","STOP","STORAGE","STORED","STRAIGHT_JOIN","STREAM","STRING","SUBCLASS_ORIGIN","SUBJECT","SUBPARTITION","SUBPARTITIONS","SUPER","SUSPEND","SWAPS","SWITCHES","SYSTEM","TABLE","TABLES","TABLESPACE","TABLE_CHECKSUM","TABLE_NAME","TEMPORARY","TEMPTABLE","TERMINATED","TEXT","THAN","THEN","THREAD_PRIORITY","TIES","TIME","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TINYBLOB","TINYINT","TINYTEXT","TLS","TO","TRAILING","TRANSACTION","TRIGGER","TRIGGERS","TRUE","TRUNCATE","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNDOFILE","UNDO_BUFFER_SIZE","UNICODE","UNINSTALL","UNION","UNIQUE","UNKNOWN","UNLOCK","UNREGISTER","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USER_RESOURCES","USE_FRM","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","VALIDATION","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARYING","VCPU","VIEW","VIRTUAL","VISIBLE","WAIT","WARNINGS","WEEK","WEIGHT_STRING","WHEN","WHERE","WHILE","WINDOW","WITH","WITHOUT","WORK","WRAPPER","WRITE","X509","XA","XID","XML","XOR","YEAR","YEAR_MONTH","ZEROFILL","ZONE"]});var QT=Te({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","ASCII","ASIN","ATAN","ATAN2","AVG","BENCHMARK","BIN","BIN_TO_UUID","BINARY","BIT_AND","BIT_COUNT","BIT_LENGTH","BIT_OR","BIT_XOR","CAN_ACCESS_COLUMN","CAN_ACCESS_DATABASE","CAN_ACCESS_TABLE","CAN_ACCESS_USER","CAN_ACCESS_VIEW","CAST","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COMPRESS","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CRC32","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATE_FORMAT","DATE_SUB","DATEDIFF","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DEFAULT","DEGREES","DENSE_RANK","DIV","ELT","EXP","EXPORT_SET","EXTRACT","EXTRACTVALUE","FIELD","FIND_IN_SET","FIRST_VALUE","FLOOR","FORMAT","FORMAT_BYTES","FORMAT_PICO_TIME","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOMCOLLECTION","GEOMETRYCOLLECTION","GET_DD_COLUMN_PRIVILEGES","GET_DD_CREATE_OPTIONS","GET_DD_INDEX_SUB_PART_LENGTH","GET_FORMAT","GET_LOCK","GREATEST","GROUP_CONCAT","GROUPING","GTID_SUBSET","GTID_SUBTRACT","HEX","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INSERT","INSTR","INTERNAL_AUTO_INCREMENT","INTERNAL_AVG_ROW_LENGTH","INTERNAL_CHECK_TIME","INTERNAL_CHECKSUM","INTERNAL_DATA_FREE","INTERNAL_DATA_LENGTH","INTERNAL_DD_CHAR_LENGTH","INTERNAL_GET_COMMENT_OR_ERROR","INTERNAL_GET_ENABLED_ROLE_JSON","INTERNAL_GET_HOSTNAME","INTERNAL_GET_USERNAME","INTERNAL_GET_VIEW_WARNING_OR_ERROR","INTERNAL_INDEX_COLUMN_CARDINALITY","INTERNAL_INDEX_LENGTH","INTERNAL_IS_ENABLED_ROLE","INTERNAL_IS_MANDATORY_ROLE","INTERNAL_KEYS_DISABLED","INTERNAL_MAX_DATA_LENGTH","INTERNAL_TABLE_ROWS","INTERNAL_UPDATE_TIME","INTERVAL","IS","IS_FREE_LOCK","IS_IPV4","IS_IPV4_COMPAT","IS_IPV4_MAPPED","IS_IPV6","IS NOT","IS NOT NULL","IS NULL","IS_USED_LOCK","IS_UUID","ISNULL","JSON_ARRAY","JSON_ARRAY_APPEND","JSON_ARRAY_INSERT","JSON_ARRAYAGG","JSON_CONTAINS","JSON_CONTAINS_PATH","JSON_DEPTH","JSON_EXTRACT","JSON_INSERT","JSON_KEYS","JSON_LENGTH","JSON_MERGE","JSON_MERGE_PATCH","JSON_MERGE_PRESERVE","JSON_OBJECT","JSON_OBJECTAGG","JSON_OVERLAPS","JSON_PRETTY","JSON_QUOTE","JSON_REMOVE","JSON_REPLACE","JSON_SCHEMA_VALID","JSON_SCHEMA_VALIDATION_REPORT","JSON_SEARCH","JSON_SET","JSON_STORAGE_FREE","JSON_STORAGE_SIZE","JSON_TABLE","JSON_TYPE","JSON_UNQUOTE","JSON_VALID","JSON_VALUE","LAG","LAST_DAY","LAST_INSERT_ID","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LINESTRING","LN","LOAD_FILE","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","MAKE_SET","MAKEDATE","MAKETIME","MASTER_POS_WAIT","MATCH","MAX","MBRCONTAINS","MBRCOVEREDBY","MBRCOVERS","MBRDISJOINT","MBREQUALS","MBRINTERSECTS","MBROVERLAPS","MBRTOUCHES","MBRWITHIN","MD5","MEMBER OF","MICROSECOND","MID","MIN","MINUTE","MOD","MONTH","MONTHNAME","MULTILINESTRING","MULTIPOINT","MULTIPOLYGON","NAME_CONST","NOT","NOT IN","NOT LIKE","NOT REGEXP","NOW","NTH_VALUE","NTILE","NULLIF","OCT","OCTET_LENGTH","ORD","PERCENT_RANK","PERIOD_ADD","PERIOD_DIFF","PI","POINT","POLYGON","POSITION","POW","POWER","PS_CURRENT_THREAD_ID","PS_THREAD_ID","QUARTER","QUOTE","RADIANS","RAND","RANDOM_BYTES","RANK","REGEXP","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","RELEASE_ALL_LOCKS","RELEASE_LOCK","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROLES_GRAPHML","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCHEMA","SEC_TO_TIME","SECOND","SESSION_USER","SHA1","SHA2","SIGN","SIN","SLEEP","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","ST_AREA","ST_ASBINARY","ST_ASGEOJSON","ST_ASTEXT","ST_BUFFER","ST_BUFFER_STRATEGY","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_CONVEXHULL","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DISTANCE_SPHERE","ST_ENDPOINT","ST_ENVELOPE","ST_EQUALS","ST_EXTERIORRING","ST_FRECHETDISTANCE","ST_GEOHASH","ST_GEOMCOLLFROMTEXT","ST_GEOMCOLLFROMWKB","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMGEOJSON","ST_GEOMFROMTEXT","ST_GEOMFROMWKB","ST_HAUSDORFFDISTANCE","ST_INTERIORRINGN","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISSIMPLE","ST_ISVALID","ST_LATFROMGEOHASH","ST_LATITUDE","ST_LENGTH","ST_LINEFROMTEXT","ST_LINEFROMWKB","ST_LINEINTERPOLATEPOINT","ST_LINEINTERPOLATEPOINTS","ST_LONGFROMGEOHASH","ST_LONGITUDE","ST_MAKEENVELOPE","ST_MLINEFROMTEXT","ST_MLINEFROMWKB","ST_MPOINTFROMTEXT","ST_MPOINTFROMWKB","ST_MPOLYFROMTEXT","ST_MPOLYFROMWKB","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINTATDISTANCE","ST_POINTFROMGEOHASH","ST_POINTFROMTEXT","ST_POINTFROMWKB","ST_POINTN","ST_POLYFROMTEXT","ST_POLYFROMWKB","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SWAPXY","ST_SYMDIFFERENCE","ST_TOUCHES","ST_TRANSFORM","ST_UNION","ST_VALIDATE","ST_WITHIN","ST_X","ST_Y","STATEMENT_DIGEST","STATEMENT_DIGEST_TEXT","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","STRCMP","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUBTIME","SUM","SYSDATE","SYSTEM_USER","TAN","TIME","TIME_FORMAT","TIME_TO_SEC","TIMEDIFF","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TO_BASE64","TO_DAYS","TO_SECONDS","TRIM","TRUNCATE","UCASE","UNCOMPRESS","UNCOMPRESSED_LENGTH","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","UUID_SHORT","UUID_TO_BIN","VALIDATE_PASSWORD_STRENGTH","VALUES","VAR_POP","VAR_SAMP","VARIANCE","VERSION","WAIT_FOR_EXECUTED_GTID_SET","WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS","WEEK","WEEKDAY","WEEKOFYEAR","WEIGHT_STRING","YEAR","YEARWEEK","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]});var UL=re(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),GL=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE] [INTO]","REPLACE [LOW_PRIORITY | DELAYED] [INTO]","VALUES","SET","CREATE [OR REPLACE] [SQL SECURITY DEFINER | SQL SECURITY INVOKER] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY] TABLE [IF NOT EXISTS]"]),zT=re(["UPDATE [LOW_PRIORITY] [IGNORE]","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","{CHANGE | MODIFY} [COLUMN]","DROP [COLUMN]","RENAME [TO | AS]","RENAME COLUMN","ALTER [COLUMN]","{SET | DROP} DEFAULT","TRUNCATE [TABLE]","ALTER DATABASE","ALTER EVENT","ALTER FUNCTION","ALTER INSTANCE","ALTER LOGFILE GROUP","ALTER PROCEDURE","ALTER RESOURCE GROUP","ALTER SERVER","ALTER TABLESPACE","ALTER USER","ALTER VIEW","ANALYZE TABLE","BINLOG","CACHE INDEX","CALL","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK TABLE","CHECKSUM TABLE","CLONE","COMMIT","CREATE DATABASE","CREATE EVENT","CREATE FUNCTION","CREATE FUNCTION","CREATE INDEX","CREATE LOGFILE GROUP","CREATE PROCEDURE","CREATE RESOURCE GROUP","CREATE ROLE","CREATE SERVER","CREATE SPATIAL REFERENCE SYSTEM","CREATE TABLESPACE","CREATE TRIGGER","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DROP DATABASE","DROP EVENT","DROP FUNCTION","DROP FUNCTION","DROP INDEX","DROP LOGFILE GROUP","DROP PROCEDURE","DROP RESOURCE GROUP","DROP ROLE","DROP SERVER","DROP SPATIAL REFERENCE SYSTEM","DROP TABLESPACE","DROP TRIGGER","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","GRANT","HANDLER","HELP","IMPORT TABLE","INSTALL COMPONENT","INSTALL PLUGIN","KILL","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","RELEASE SAVEPOINT","RENAME TABLE","RENAME USER","REPAIR TABLE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW BINARY LOGS","SHOW BINLOG EVENTS","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE EVENT","SHOW CREATE FUNCTION","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE TRIGGER","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW EVENTS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW TRIGGERS","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SOURCE_POS_WAIT","START GROUP_REPLICATION","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP REPLICA","STOP SLAVE","TABLE","UNINSTALL COMPONENT","UNINSTALL PLUGIN","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),BL=re(["UNION [ALL | DISTINCT]"]),FL=re(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),HL=re(["ON {UPDATE | DELETE} [SET NULL]","CHARACTER SET","{ROWS | RANGE} BETWEEN"]),ZT={tokenizerOptions:{reservedSelect:UL,reservedClauses:[...GL,...zT],reservedSetOperations:BL,reservedJoins:FL,reservedPhrases:HL,supportsXor:!0,reservedKeywords:JT,reservedFunctionNames:QT,stringTypes:['""-qq-bs',{quote:"''-qq-bs",prefixes:["N"]},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_.$]+"},{quote:'""-qq-bs',prefixes:["@"],requirePrefix:!0},{quote:"''-qq-bs",prefixes:["@"],requirePrefix:!0},{quote:"``",prefixes:["@"],requirePrefix:!0}],paramTypes:{positional:!0},lineCommentTypes:["--","#"],operators:["%",":=","&","|","^","~","<<",">>","<=>","->","->>","&&","||","!"],postProcess:kL},formatOptions:{onelineClauses:zT}};function kL(t){return t.map((n,e)=>{let i=t[e+1]||qt;return Ht.SET(n)&&i.text==="("?{...n,type:ne.RESERVED_FUNCTION_NAME}:n})}var em=Te({all:["ABORT","ABS","ACOS","ADVISOR","ARRAY_AGG","ARRAY_AGG","ARRAY_APPEND","ARRAY_AVG","ARRAY_BINARY_SEARCH","ARRAY_CONCAT","ARRAY_CONTAINS","ARRAY_COUNT","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_FLATTEN","ARRAY_IFNULL","ARRAY_INSERT","ARRAY_INTERSECT","ARRAY_LENGTH","ARRAY_MAX","ARRAY_MIN","ARRAY_MOVE","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_PUT","ARRAY_RANGE","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_REPLACE","ARRAY_REVERSE","ARRAY_SORT","ARRAY_STAR","ARRAY_SUM","ARRAY_SYMDIFF","ARRAY_SYMDIFF1","ARRAY_SYMDIFFN","ARRAY_UNION","ASIN","ATAN","ATAN2","AVG","BASE64","BASE64_DECODE","BASE64_ENCODE","BITAND ","BITCLEAR ","BITNOT ","BITOR ","BITSET ","BITSHIFT ","BITTEST ","BITXOR ","CEIL","CLOCK_LOCAL","CLOCK_MILLIS","CLOCK_STR","CLOCK_TZ","CLOCK_UTC","COALESCE","CONCAT","CONCAT2","CONTAINS","CONTAINS_TOKEN","CONTAINS_TOKEN_LIKE","CONTAINS_TOKEN_REGEXP","COS","COUNT","COUNT","COUNTN","CUME_DIST","CURL","DATE_ADD_MILLIS","DATE_ADD_STR","DATE_DIFF_MILLIS","DATE_DIFF_STR","DATE_FORMAT_STR","DATE_PART_MILLIS","DATE_PART_STR","DATE_RANGE_MILLIS","DATE_RANGE_STR","DATE_TRUNC_MILLIS","DATE_TRUNC_STR","DECODE","DECODE_JSON","DEGREES","DENSE_RANK","DURATION_TO_STR","ENCODED_SIZE","ENCODE_JSON","EXP","FIRST_VALUE","FLOOR","GREATEST","HAS_TOKEN","IFINF","IFMISSING","IFMISSINGORNULL","IFNAN","IFNANORINF","IFNULL","INITCAP","ISARRAY","ISATOM","ISBITSET","ISBOOLEAN","ISNUMBER","ISOBJECT","ISSTRING","LAG","LAST_VALUE","LEAD","LEAST","LENGTH","LN","LOG","LOWER","LTRIM","MAX","MEAN","MEDIAN","META","MILLIS","MILLIS_TO_LOCAL","MILLIS_TO_STR","MILLIS_TO_TZ","MILLIS_TO_UTC","MILLIS_TO_ZONE_NAME","MIN","MISSINGIF","NANIF","NEGINFIF","NOW_LOCAL","NOW_MILLIS","NOW_STR","NOW_TZ","NOW_UTC","NTH_VALUE","NTILE","NULLIF","NVL","NVL2","OBJECT_ADD","OBJECT_CONCAT","OBJECT_INNER_PAIRS","OBJECT_INNER_VALUES","OBJECT_LENGTH","OBJECT_NAMES","OBJECT_PAIRS","OBJECT_PUT","OBJECT_REMOVE","OBJECT_RENAME","OBJECT_REPLACE","OBJECT_UNWRAP","OBJECT_VALUES","PAIRS","PERCENT_RANK","PI","POLY_LENGTH","POSINFIF","POSITION","POWER","RADIANS","RANDOM","RANK","RATIO_TO_REPORT","REGEXP_CONTAINS","REGEXP_LIKE","REGEXP_MATCHES","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGEX_CONTAINS","REGEX_LIKE","REGEX_MATCHES","REGEX_POSITION","REGEX_REPLACE","REGEX_SPLIT","REPEAT","REPLACE","REVERSE","ROUND","ROW_NUMBER","RTRIM","SEARCH","SEARCH_META","SEARCH_SCORE","SIGN","SIN","SPLIT","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DURATION","STR_TO_MILLIS","STR_TO_TZ","STR_TO_UTC","STR_TO_ZONE_NAME","SUBSTR","SUFFIXES","SUM","TAN","TITLE","TOARRAY","TOATOM","TOBOOLEAN","TOKENS","TOKENS","TONUMBER","TOOBJECT","TOSTRING","TRIM","TRUNC","UPPER","UUID","VARIANCE","VARIANCE_POP","VARIANCE_SAMP","VAR_POP","VAR_SAMP","WEEKDAY_MILLIS","WEEKDAY_STR","CAST"]});var tm=Te({all:["ADVISE","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","BEGIN","BETWEEN","BINARY","BOOLEAN","BREAK","BUCKET","BUILD","BY","CALL","CASE","CAST","CLUSTER","COLLATE","COLLECTION","COMMIT","COMMITTED","CONNECT","CONTINUE","CORRELATED","COVER","CREATE","CURRENT","DATABASE","DATASET","DATASTORE","DECLARE","DECREMENT","DELETE","DERIVED","DESC","DESCRIBE","DISTINCT","DO","DROP","EACH","ELEMENT","ELSE","END","EVERY","EXCEPT","EXCLUDE","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FILTER","FIRST","FLATTEN","FLUSH","FOLLOWING","FOR","FORCE","FROM","FTS","FUNCTION","GOLANG","GRANT","GROUP","GROUPS","GSI","HASH","HAVING","IF","ISOLATION","IGNORE","ILIKE","IN","INCLUDE","INCREMENT","INDEX","INFER","INLINE","INNER","INSERT","INTERSECT","INTO","IS","JAVASCRIPT","JOIN","KEY","KEYS","KEYSPACE","KNOWN","LANGUAGE","LAST","LEFT","LET","LETTING","LEVEL","LIKE","LIMIT","LSM","MAP","MAPPING","MATCHED","MATERIALIZED","MERGE","MINUS","MISSING","NAMESPACE","NEST","NL","NO","NOT","NTH_VALUE","NULL","NULLS","NUMBER","OBJECT","OFFSET","ON","OPTION","OPTIONS","OR","ORDER","OTHERS","OUTER","OVER","PARSE","PARTITION","PASSWORD","PATH","POOL","PRECEDING","PREPARE","PRIMARY","PRIVATE","PRIVILEGE","PROBE","PROCEDURE","PUBLIC","RANGE","RAW","REALM","REDUCE","RENAME","RESPECT","RETURN","RETURNING","REVOKE","RIGHT","ROLE","ROLLBACK","ROW","ROWS","SATISFIES","SAVEPOINT","SCHEMA","SCOPE","SELECT","SELF","SEMI","SET","SHOW","SOME","START","STATISTICS","STRING","SYSTEM","THEN","TIES","TO","TRAN","TRANSACTION","TRIGGER","TRUE","TRUNCATE","UNBOUNDED","UNDER","UNION","UNIQUE","UNKNOWN","UNNEST","UNSET","UPDATE","UPSERT","USE","USER","USING","VALIDATE","VALUE","VALUED","VALUES","VIA","VIEW","WHEN","WHERE","WHILE","WINDOW","WITH","WITHIN","WORK","XOR"]});var YL=re(["SELECT [ALL | DISTINCT]"]),VL=re(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET","MERGE INTO","WHEN [NOT] MATCHED THEN","UPDATE SET","INSERT","NEST","UNNEST","RETURNING"]),rm=re(["UPDATE","DELETE FROM","SET SCHEMA","ADVISE","ALTER INDEX","BEGIN TRANSACTION","BUILD INDEX","COMMIT TRANSACTION","CREATE COLLECTION","CREATE FUNCTION","CREATE INDEX","CREATE PRIMARY INDEX","CREATE SCOPE","DROP COLLECTION","DROP FUNCTION","DROP INDEX","DROP PRIMARY INDEX","DROP SCOPE","EXECUTE","EXECUTE FUNCTION","EXPLAIN","GRANT","INFER","PREPARE","REVOKE","ROLLBACK TRANSACTION","SAVEPOINT","SET TRANSACTION","UPDATE STATISTICS","UPSERT","LET","SET CURRENT SCHEMA","SHOW","USE [PRIMARY] KEYS"]),WL=re(["UNION [ALL]","EXCEPT [ALL]","INTERSECT [ALL]"]),$L=re(["JOIN","{LEFT | RIGHT} [OUTER] JOIN","INNER JOIN"]),XL=re(["{ROWS | RANGE | GROUPS} BETWEEN"]),nm={tokenizerOptions:{reservedSelect:YL,reservedClauses:[...VL,...rm],reservedSetOperations:WL,reservedJoins:$L,reservedPhrases:XL,supportsXor:!0,reservedKeywords:tm,reservedFunctionNames:em,stringTypes:['""-bs',"''-bs"],identTypes:["``"],extraParens:["[]","{}"],paramTypes:{positional:!0,numbered:["$"],named:["$"]},lineCommentTypes:["#","--"],operators:["%","==",":","||"]},formatOptions:{onelineClauses:rm}};var im=Te({all:["ADD","AGENT","AGGREGATE","ALL","ALTER","AND","ANY","ARRAY","ARROW","AS","ASC","AT","ATTRIBUTE","AUTHID","AVG","BEGIN","BETWEEN","BFILE_BASE","BINARY","BLOB_BASE","BLOCK","BODY","BOTH","BOUND","BULK","BY","BYTE","CALL","CALLING","CASCADE","CASE","CHAR","CHAR_BASE","CHARACTER","CHARSET","CHARSETFORM","CHARSETID","CHECK","CLOB_BASE","CLOSE","CLUSTER","CLUSTERS","COLAUTH","COLLECT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPILED","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTEXT","CONVERT","COUNT","CRASH","CREATE","CURRENT","CURSOR","CUSTOMDATUM","DANGLING","DATA","DATE","DATE_BASE","DAY","DECIMAL","DECLARE","DEFAULT","DEFINE","DELETE","DESC","DETERMINISTIC","DISTINCT","DOUBLE","DROP","DURATION","ELEMENT","ELSE","ELSIF","EMPTY","END","ESCAPE","EXCEPT","EXCEPTION","EXCEPTIONS","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FINAL","FIXED","FLOAT","FOR","FORALL","FORCE","FORM","FROM","FUNCTION","GENERAL","GOTO","GRANT","GROUP","HASH","HAVING","HEAP","HIDDEN","HOUR","IDENTIFIED","IF","IMMEDIATE","IN","INCLUDING","INDEX","INDEXES","INDICATOR","INDICES","INFINITE","INSERT","INSTANTIABLE","INT","INTERFACE","INTERSECT","INTERVAL","INTO","INVALIDATE","IS","ISOLATION","JAVA","LANGUAGE","LARGE","LEADING","LENGTH","LEVEL","LIBRARY","LIKE","LIKE2","LIKE4","LIKEC","LIMIT","LIMITED","LOCAL","LOCK","LONG","LOOP","MAP","MAX","MAXLEN","MEMBER","MERGE","MIN","MINUS","MINUTE","MOD","MODE","MODIFY","MONTH","MULTISET","NAME","NAN","NATIONAL","NATIVE","NCHAR","NEW","NOCOMPRESS","NOCOPY","NOT","NOWAIT","NULL","NUMBER_BASE","OBJECT","OCICOLL","OCIDATE","OCIDATETIME","OCIDURATION","OCIINTERVAL","OCILOBLOCATOR","OCINUMBER","OCIRAW","OCIREF","OCIREFCURSOR","OCIROWID","OCISTRING","OCITYPE","OF","ON","ONLY","OPAQUE","OPEN","OPERATOR","OPTION","OR","ORACLE","ORADATA","ORDER","OVERLAPS","ORGANIZATION","ORLANY","ORLVARY","OTHERS","OUT","OVERRIDING","PACKAGE","PARALLEL_ENABLE","PARAMETER","PARAMETERS","PARTITION","PASCAL","PIPE","PIPELINED","PRAGMA","PRECISION","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","RAW","READ","RECORD","REF","REFERENCE","REM","REMAINDER","RENAME","RESOURCE","RESULT","RETURN","RETURNING","REVERSE","REVOKE","ROLLBACK","ROW","SAMPLE","SAVE","SAVEPOINT","SB1","SB2","SB4","SECOND","SEGMENT","SELECT","SELF","SEPARATE","SEQUENCE","SERIALIZABLE","SET","SHARE","SHORT","SIZE","SIZE_T","SOME","SPARSE","SQL","SQLCODE","SQLDATA","SQLNAME","SQLSTATE","STANDARD","START","STATIC","STDDEV","STORED","STRING","STRUCT","STYLE","SUBMULTISET","SUBPARTITION","SUBSTITUTABLE","SUBTYPE","SUM","SYNONYM","TABAUTH","TABLE","TDO","THE","THEN","TIME","TIMESTAMP","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TO","TRAILING","TRANSAC","TRANSACTIONAL","TRUSTED","TYPE","UB1","UB2","UB4","UNDER","UNION","UNIQUE","UNSIGNED","UNTRUSTED","UPDATE","USE","USING","VALIST","VALUE","VALUES","VARIABLE","VARIANCE","VARRAY","VARYING","VIEW","VIEWS","VOID","WHEN","WHERE","WHILE","WITH","WORK","WRAPPED","WRITE","YEAR","ZONE"]});var sm=Te({numeric:["ABS","ACOS","ASIN","ATAN","ATAN2","BITAND","CEIL","COS","COSH","EXP","FLOOR","LN","LOG","MOD","NANVL","POWER","REMAINDER","ROUND","SIGN","SIN","SINH","SQRT","TAN","TANH","TRUNC","WIDTH_BUCKET"],character:["CHR","CONCAT","INITCAP","LOWER","LPAD","LTRIM","NLS_INITCAP","NLS_LOWER","NLSSORT","NLS_UPPER","REGEXP_REPLACE","REGEXP_SUBSTR","REPLACE","RPAD","RTRIM","SOUNDEX","SUBSTR","TRANSLATE","TREAT","TRIM","UPPER","NLS_CHARSET_DECL_LEN","NLS_CHARSET_ID","NLS_CHARSET_NAME","ASCII","INSTR","LENGTH","REGEXP_INSTR"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_TIMESTAMP","DBTIMEZONE","EXTRACT","FROM_TZ","LAST_DAY","LOCALTIMESTAMP","MONTHS_BETWEEN","NEW_TIME","NEXT_DAY","NUMTODSINTERVAL","NUMTOYMINTERVAL","ROUND","SESSIONTIMEZONE","SYS_EXTRACT_UTC","SYSDATE","SYSTIMESTAMP","TO_CHAR","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_DSINTERVAL","TO_YMINTERVAL","TRUNC","TZ_OFFSET"],comparison:["GREATEST","LEAST"],conversion:["ASCIISTR","BIN_TO_NUM","CAST","CHARTOROWID","COMPOSE","CONVERT","DECOMPOSE","HEXTORAW","NUMTODSINTERVAL","NUMTOYMINTERVAL","RAWTOHEX","RAWTONHEX","ROWIDTOCHAR","ROWIDTONCHAR","SCN_TO_TIMESTAMP","TIMESTAMP_TO_SCN","TO_BINARY_DOUBLE","TO_BINARY_FLOAT","TO_CHAR","TO_CLOB","TO_DATE","TO_DSINTERVAL","TO_LOB","TO_MULTI_BYTE","TO_NCHAR","TO_NCLOB","TO_NUMBER","TO_DSINTERVAL","TO_SINGLE_BYTE","TO_TIMESTAMP","TO_TIMESTAMP_TZ","TO_YMINTERVAL","TO_YMINTERVAL","TRANSLATE","UNISTR"],largeObject:["BFILENAME","EMPTY_BLOB,","EMPTY_CLOB"],collection:["CARDINALITY","COLLECT","POWERMULTISET","POWERMULTISET_BY_CARDINALITY","SET"],hierarchical:["SYS_CONNECT_BY_PATH"],dataMining:["CLUSTER_ID","CLUSTER_PROBABILITY","CLUSTER_SET","FEATURE_ID","FEATURE_SET","FEATURE_VALUE","PREDICTION","PREDICTION_COST","PREDICTION_DETAILS","PREDICTION_PROBABILITY","PREDICTION_SET"],xml:["APPENDCHILDXML","DELETEXML","DEPTH","EXTRACT","EXISTSNODE","EXTRACTVALUE","INSERTCHILDXML","INSERTXMLBEFORE","PATH","SYS_DBURIGEN","SYS_XMLAGG","SYS_XMLGEN","UPDATEXML","XMLAGG","XMLCDATA","XMLCOLATTVAL","XMLCOMMENT","XMLCONCAT","XMLFOREST","XMLPARSE","XMLPI","XMLQUERY","XMLROOT","XMLSEQUENCE","XMLSERIALIZE","XMLTABLE","XMLTRANSFORM"],encoding:["DECODE","DUMP","ORA_HASH","VSIZE"],nullRelated:["COALESCE","LNNVL","NULLIF","NVL","NVL2"],env:["SYS_CONTEXT","SYS_GUID","SYS_TYPEID","UID","USER","USERENV"],aggregate:["AVG","COLLECT","CORR","CORR_S","CORR_K","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","FIRST","GROUP_ID","GROUPING","GROUPING_ID","LAST","MAX","MEDIAN","MIN","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANK","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","STATS_BINOMIAL_TEST","STATS_CROSSTAB","STATS_F_TEST","STATS_KS_TEST","STATS_MODE","STATS_MW_TEST","STATS_ONE_WAY_ANOVA","STATS_T_TEST_ONE","STATS_T_TEST_PAIRED","STATS_T_TEST_INDEP","STATS_T_TEST_INDEPU","STATS_WSR_TEST","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTILE","RATIO_TO_REPORT","ROW_NUMBER"],objectReference:["DEREF","MAKE_REF","REF","REFTOHEX","VALUE"],model:["CV","ITERATION_NUMBER","PRESENTNNV","PRESENTV","PREVIOUS"],dataTypes:["VARCHAR2","NVARCHAR2","NUMBER","FLOAT","TIMESTAMP","INTERVAL YEAR","INTERVAL DAY","RAW","UROWID","NCHAR","CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","NATIONAL CHARACTER","NATIONAL CHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NUMERIC","DECIMAL","FLOAT","VARCHAR"]});var qL=re(["SELECT [ALL | DISTINCT | UNIQUE]"]),jL=re(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER [SIBLINGS] BY","OFFSET","FETCH {FIRST | NEXT}","FOR UPDATE [OF]","INSERT [INTO | ALL INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [THEN]","UPDATE SET","CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW","CREATE MATERIALIZED VIEW","CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE","RETURNING"]),am=re(["UPDATE [ONLY]","DELETE FROM [ONLY]","DROP TABLE","ALTER TABLE","ADD","DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}","MODIFY","RENAME TO","RENAME COLUMN","TRUNCATE TABLE","SET SCHEMA","BEGIN","CONNECT BY","DECLARE","EXCEPT","EXCEPTION","LOOP","START WITH"]),KL=re(["UNION [ALL]","EXCEPT","INTERSECT"]),JL=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | OUTER} APPLY"]),QL=re(["ON {UPDATE | DELETE} [SET NULL]","ON COMMIT","{ROWS | RANGE} BETWEEN"]),om={tokenizerOptions:{reservedSelect:qL,reservedClauses:[...jL,...am],reservedSetOperations:KL,reservedJoins:JL,reservedPhrases:QL,supportsXor:!0,reservedKeywords:im,reservedFunctionNames:sm,stringTypes:[{quote:"''-qq",prefixes:["N"]},{quote:"q''",prefixes:["N"]}],identTypes:['""-qq'],identChars:{rest:"$#"},variableTypes:[{regex:"&{1,2}[A-Za-z][A-Za-z0-9_$#]*"}],paramTypes:{numbered:[":"],named:[":"]},paramChars:{},operators:["**",":=","%","~=","^=",">>","<<","=>","@","||"],postProcess:zL},formatOptions:{alwaysDenseOperators:["@"],onelineClauses:am}};function zL(t){let n=qt;return t.map(e=>Ht.SET(e)&&Ht.BY(n)?{...e,type:ne.RESERVED_KEYWORD}:(Fa(e.type)&&(n=e),e))}var lm=Te({math:["ABS","ACOS","ACOSD","ACOSH","ASIN","ASIND","ASINH","ATAN","ATAN2","ATAN2D","ATAND","ATANH","CBRT","CEIL","CEILING","COS","COSD","COSH","COT","COTD","DEGREES","DIV","EXP","FACTORIAL","FLOOR","GCD","LCM","LN","LOG","LOG10","MIN_SCALE","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SCALE","SETSEED","SIGN","SIN","SIND","SINH","SQRT","TAN","TAND","TANH","TRIM_SCALE","TRUNC","WIDTH_BUCKET"],string:["ABS","ASCII","BIT_LENGTH","BTRIM","CHARACTER_LENGTH","CHAR_LENGTH","CHR","CONCAT","CONCAT_WS","FORMAT","INITCAP","LEFT","LENGTH","LOWER","LPAD","LTRIM","MD5","NORMALIZE","OCTET_LENGTH","OVERLAY","PARSE_IDENT","PG_CLIENT_ENCODING","POSITION","QUOTE_IDENT","QUOTE_LITERAL","QUOTE_NULLABLE","REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE","REPEAT","REPLACE","REVERSE","RIGHT","RPAD","RTRIM","SPLIT_PART","SPRINTF","STARTS_WITH","STRING_AGG","STRING_TO_ARRAY","STRING_TO_TABLE","STRPOS","SUBSTR","SUBSTRING","TO_ASCII","TO_HEX","TRANSLATE","TRIM","UNISTR","UPPER"],binary:["BIT_COUNT","BIT_LENGTH","BTRIM","CONVERT","CONVERT_FROM","CONVERT_TO","DECODE","ENCODE","GET_BIT","GET_BYTE","LENGTH","LTRIM","MD5","OCTET_LENGTH","OVERLAY","POSITION","RTRIM","SET_BIT","SET_BYTE","SHA224","SHA256","SHA384","SHA512","STRING_AGG","SUBSTR","SUBSTRING","TRIM"],bitstring:["BIT_COUNT","BIT_LENGTH","GET_BIT","LENGTH","OCTET_LENGTH","OVERLAY","POSITION","SET_BIT","SUBSTRING"],pattern:["REGEXP_MATCH","REGEXP_MATCHES","REGEXP_REPLACE","REGEXP_SPLIT_TO_ARRAY","REGEXP_SPLIT_TO_TABLE"],datatype:["TO_CHAR","TO_DATE","TO_NUMBER","TO_TIMESTAMP"],datetime:["CLOCK_TIMESTAMP","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_BIN","DATE_PART","DATE_TRUNC","EXTRACT","ISFINITE","JUSTIFY_DAYS","JUSTIFY_HOURS","JUSTIFY_INTERVAL","LOCALTIME","LOCALTIMESTAMP","MAKE_DATE","MAKE_INTERVAL","MAKE_TIME","MAKE_TIMESTAMP","MAKE_TIMESTAMPTZ","NOW","PG_SLEEP","PG_SLEEP_FOR","PG_SLEEP_UNTIL","STATEMENT_TIMESTAMP","TIMEOFDAY","TO_TIMESTAMP","TRANSACTION_TIMESTAMP"],enum:["ENUM_FIRST","ENUM_LAST","ENUM_RANGE"],geometry:["AREA","BOUND_BOX","BOX","CENTER","CIRCLE","DIAGONAL","DIAMETER","HEIGHT","ISCLOSED","ISOPEN","LENGTH","LINE","LSEG","NPOINTS","PATH","PCLOSE","POINT","POLYGON","POPEN","RADIUS","SLOPE","WIDTH"],network:["ABBREV","BROADCAST","FAMILY","HOST","HOSTMASK","INET_MERGE","INET_SAME_FAMILY","MACADDR8_SET7BIT","MASKLEN","NETMASK","NETWORK","SET_MASKLEN","TEXT","TRUNC"],textsearch:["ARRAY_TO_TSVECTOR","GET_CURRENT_TS_CONFIG","JSONB_TO_TSVECTOR","JSON_TO_TSVECTOR","LENGTH","NUMNODE","PHRASETO_TSQUERY","PLAINTO_TSQUERY","QUERYTREE","SETWEIGHT","STRIP","TO_TSQUERY","TO_TSVECTOR","TSQUERY_PHRASE","TSVECTOR_TO_ARRAY","TS_DEBUG","TS_DELETE","TS_FILTER","TS_HEADLINE","TS_LEXIZE","TS_PARSE","TS_RANK","TS_RANK_CD","TS_REWRITE","TS_STAT","TS_TOKEN_TYPE","WEBSEARCH_TO_TSQUERY"],uuid:["UUID"],xml:["CURSOR_TO_XML","CURSOR_TO_XMLSCHEMA","DATABASE_TO_XML","DATABASE_TO_XMLSCHEMA","DATABASE_TO_XML_AND_XMLSCHEMA","NEXTVAL","QUERY_TO_XML","QUERY_TO_XMLSCHEMA","QUERY_TO_XML_AND_XMLSCHEMA","SCHEMA_TO_XML","SCHEMA_TO_XMLSCHEMA","SCHEMA_TO_XML_AND_XMLSCHEMA","STRING","TABLE_TO_XML","TABLE_TO_XMLSCHEMA","TABLE_TO_XML_AND_XMLSCHEMA","XMLAGG","XMLCOMMENT","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","XML_IS_WELL_FORMED","XML_IS_WELL_FORMED_CONTENT","XML_IS_WELL_FORMED_DOCUMENT","XPATH","XPATH_EXISTS"],json:["ARRAY_TO_JSON","JSONB_AGG","JSONB_ARRAY_ELEMENTS","JSONB_ARRAY_ELEMENTS_TEXT","JSONB_ARRAY_LENGTH","JSONB_BUILD_ARRAY","JSONB_BUILD_OBJECT","JSONB_EACH","JSONB_EACH_TEXT","JSONB_EXTRACT_PATH","JSONB_EXTRACT_PATH_TEXT","JSONB_INSERT","JSONB_OBJECT","JSONB_OBJECT_AGG","JSONB_OBJECT_KEYS","JSONB_PATH_EXISTS","JSONB_PATH_EXISTS_TZ","JSONB_PATH_MATCH","JSONB_PATH_MATCH_TZ","JSONB_PATH_QUERY","JSONB_PATH_QUERY_ARRAY","JSONB_PATH_QUERY_ARRAY_TZ","JSONB_PATH_QUERY_FIRST","JSONB_PATH_QUERY_FIRST_TZ","JSONB_PATH_QUERY_TZ","JSONB_POPULATE_RECORD","JSONB_POPULATE_RECORDSET","JSONB_PRETTY","JSONB_SET","JSONB_SET_LAX","JSONB_STRIP_NULLS","JSONB_TO_RECORD","JSONB_TO_RECORDSET","JSONB_TYPEOF","JSON_AGG","JSON_ARRAY_ELEMENTS","JSON_ARRAY_ELEMENTS_TEXT","JSON_ARRAY_LENGTH","JSON_BUILD_ARRAY","JSON_BUILD_OBJECT","JSON_EACH","JSON_EACH_TEXT","JSON_EXTRACT_PATH","JSON_EXTRACT_PATH_TEXT","JSON_OBJECT","JSON_OBJECT_AGG","JSON_OBJECT_KEYS","JSON_POPULATE_RECORD","JSON_POPULATE_RECORDSET","JSON_STRIP_NULLS","JSON_TO_RECORD","JSON_TO_RECORDSET","JSON_TYPEOF","ROW_TO_JSON","TO_JSON","TO_JSONB","TO_TIMESTAMP"],sequence:["CURRVAL","LASTVAL","NEXTVAL","SETVAL"],conditional:["COALESCE","GREATEST","LEAST","NULLIF"],array:["ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_DIMS","ARRAY_FILL","ARRAY_LENGTH","ARRAY_LOWER","ARRAY_NDIMS","ARRAY_POSITION","ARRAY_POSITIONS","ARRAY_PREPEND","ARRAY_REMOVE","ARRAY_REPLACE","ARRAY_TO_STRING","ARRAY_UPPER","CARDINALITY","STRING_TO_ARRAY","TRIM_ARRAY","UNNEST"],range:["ISEMPTY","LOWER","LOWER_INC","LOWER_INF","MULTIRANGE","RANGE_MERGE","UPPER","UPPER_INC","UPPER_INF"],aggregate:["ARRAY_AGG","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COALESCE","CORR","COUNT","COVAR_POP","COVAR_SAMP","CUME_DIST","DENSE_RANK","EVERY","GROUPING","JSONB_AGG","JSONB_OBJECT_AGG","JSON_AGG","JSON_OBJECT_AGG","MAX","MIN","MODE","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","RANGE_AGG","RANGE_INTERSECT_AGG","RANK","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","STDDEV","STDDEV_POP","STDDEV_SAMP","STRING_AGG","SUM","TO_JSON","TO_JSONB","VARIANCE","VAR_POP","VAR_SAMP","XMLAGG"],window:["CUME_DIST","DENSE_RANK","FIRST_VALUE","LAG","LAST_VALUE","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],set:["GENERATE_SERIES","GENERATE_SUBSCRIPTS"],sysInfo:["ACLDEFAULT","ACLEXPLODE","COL_DESCRIPTION","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_QUERY","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","FORMAT_TYPE","HAS_ANY_COLUMN_PRIVILEGE","HAS_COLUMN_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE","HAS_FUNCTION_PRIVILEGE","HAS_LANGUAGE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_SEQUENCE_PRIVILEGE","HAS_SERVER_PRIVILEGE","HAS_TABLESPACE_PRIVILEGE","HAS_TABLE_PRIVILEGE","HAS_TYPE_PRIVILEGE","INET_CLIENT_ADDR","INET_CLIENT_PORT","INET_SERVER_ADDR","INET_SERVER_PORT","MAKEACLITEM","OBJ_DESCRIPTION","PG_BACKEND_PID","PG_BLOCKING_PIDS","PG_COLLATION_IS_VISIBLE","PG_CONF_LOAD_TIME","PG_CONTROL_CHECKPOINT","PG_CONTROL_INIT","PG_CONTROL_SYSTEM","PG_CONVERSION_IS_VISIBLE","PG_CURRENT_LOGFILE","PG_CURRENT_SNAPSHOT","PG_CURRENT_XACT_ID","PG_CURRENT_XACT_ID_IF_ASSIGNED","PG_DESCRIBE_OBJECT","PG_FUNCTION_IS_VISIBLE","PG_GET_CATALOG_FOREIGN_KEYS","PG_GET_CONSTRAINTDEF","PG_GET_EXPR","PG_GET_FUNCTIONDEF","PG_GET_FUNCTION_ARGUMENTS","PG_GET_FUNCTION_IDENTITY_ARGUMENTS","PG_GET_FUNCTION_RESULT","PG_GET_INDEXDEF","PG_GET_KEYWORDS","PG_GET_OBJECT_ADDRESS","PG_GET_OWNED_SEQUENCE","PG_GET_RULEDEF","PG_GET_SERIAL_SEQUENCE","PG_GET_STATISTICSOBJDEF","PG_GET_TRIGGERDEF","PG_GET_USERBYID","PG_GET_VIEWDEF","PG_HAS_ROLE","PG_IDENTIFY_OBJECT","PG_IDENTIFY_OBJECT_AS_ADDRESS","PG_INDEXAM_HAS_PROPERTY","PG_INDEX_COLUMN_HAS_PROPERTY","PG_INDEX_HAS_PROPERTY","PG_IS_OTHER_TEMP_SCHEMA","PG_JIT_AVAILABLE","PG_LAST_COMMITTED_XACT","PG_LISTENING_CHANNELS","PG_MY_TEMP_SCHEMA","PG_NOTIFICATION_QUEUE_USAGE","PG_OPCLASS_IS_VISIBLE","PG_OPERATOR_IS_VISIBLE","PG_OPFAMILY_IS_VISIBLE","PG_OPTIONS_TO_TABLE","PG_POSTMASTER_START_TIME","PG_SAFE_SNAPSHOT_BLOCKING_PIDS","PG_SNAPSHOT_XIP","PG_SNAPSHOT_XMAX","PG_SNAPSHOT_XMIN","PG_STATISTICS_OBJ_IS_VISIBLE","PG_TABLESPACE_DATABASES","PG_TABLESPACE_LOCATION","PG_TABLE_IS_VISIBLE","PG_TRIGGER_DEPTH","PG_TS_CONFIG_IS_VISIBLE","PG_TS_DICT_IS_VISIBLE","PG_TS_PARSER_IS_VISIBLE","PG_TS_TEMPLATE_IS_VISIBLE","PG_TYPEOF","PG_TYPE_IS_VISIBLE","PG_VISIBLE_IN_SNAPSHOT","PG_XACT_COMMIT_TIMESTAMP","PG_XACT_COMMIT_TIMESTAMP_ORIGIN","PG_XACT_STATUS","PQSERVERVERSION","ROW_SECURITY_ACTIVE","SESSION_USER","SHOBJ_DESCRIPTION","TO_REGCLASS","TO_REGCOLLATION","TO_REGNAMESPACE","TO_REGOPER","TO_REGOPERATOR","TO_REGPROC","TO_REGPROCEDURE","TO_REGROLE","TO_REGTYPE","TXID_CURRENT","TXID_CURRENT_IF_ASSIGNED","TXID_CURRENT_SNAPSHOT","TXID_SNAPSHOT_XIP","TXID_SNAPSHOT_XMAX","TXID_SNAPSHOT_XMIN","TXID_STATUS","TXID_VISIBLE_IN_SNAPSHOT","USER","VERSION"],sysAdmin:["BRIN_DESUMMARIZE_RANGE","BRIN_SUMMARIZE_NEW_VALUES","BRIN_SUMMARIZE_RANGE","CONVERT_FROM","CURRENT_SETTING","GIN_CLEAN_PENDING_LIST","PG_ADVISORY_LOCK","PG_ADVISORY_LOCK_SHARED","PG_ADVISORY_UNLOCK","PG_ADVISORY_UNLOCK_ALL","PG_ADVISORY_UNLOCK_SHARED","PG_ADVISORY_XACT_LOCK","PG_ADVISORY_XACT_LOCK_SHARED","PG_BACKUP_START_TIME","PG_CANCEL_BACKEND","PG_COLLATION_ACTUAL_VERSION","PG_COLUMN_COMPRESSION","PG_COLUMN_SIZE","PG_COPY_LOGICAL_REPLICATION_SLOT","PG_COPY_PHYSICAL_REPLICATION_SLOT","PG_CREATE_LOGICAL_REPLICATION_SLOT","PG_CREATE_PHYSICAL_REPLICATION_SLOT","PG_CREATE_RESTORE_POINT","PG_CURRENT_WAL_FLUSH_LSN","PG_CURRENT_WAL_INSERT_LSN","PG_CURRENT_WAL_LSN","PG_DATABASE_SIZE","PG_DROP_REPLICATION_SLOT","PG_EXPORT_SNAPSHOT","PG_FILENODE_RELATION","PG_GET_WAL_REPLAY_PAUSE_STATE","PG_IMPORT_SYSTEM_COLLATIONS","PG_INDEXES_SIZE","PG_IS_IN_BACKUP","PG_IS_IN_RECOVERY","PG_IS_WAL_REPLAY_PAUSED","PG_LAST_WAL_RECEIVE_LSN","PG_LAST_WAL_REPLAY_LSN","PG_LAST_XACT_REPLAY_TIMESTAMP","PG_LOGICAL_EMIT_MESSAGE","PG_LOGICAL_SLOT_GET_BINARY_CHANGES","PG_LOGICAL_SLOT_GET_CHANGES","PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES","PG_LOGICAL_SLOT_PEEK_CHANGES","PG_LOG_BACKEND_MEMORY_CONTEXTS","PG_LS_ARCHIVE_STATUSDIR","PG_LS_DIR","PG_LS_LOGDIR","PG_LS_TMPDIR","PG_LS_WALDIR","PG_PARTITION_ANCESTORS","PG_PARTITION_ROOT","PG_PARTITION_TREE","PG_PROMOTE","PG_READ_BINARY_FILE","PG_READ_FILE","PG_RELATION_FILENODE","PG_RELATION_FILEPATH","PG_RELATION_SIZE","PG_RELOAD_CONF","PG_REPLICATION_ORIGIN_ADVANCE","PG_REPLICATION_ORIGIN_CREATE","PG_REPLICATION_ORIGIN_DROP","PG_REPLICATION_ORIGIN_OID","PG_REPLICATION_ORIGIN_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_IS_SETUP","PG_REPLICATION_ORIGIN_SESSION_PROGRESS","PG_REPLICATION_ORIGIN_SESSION_RESET","PG_REPLICATION_ORIGIN_SESSION_SETUP","PG_REPLICATION_ORIGIN_XACT_RESET","PG_REPLICATION_ORIGIN_XACT_SETUP","PG_REPLICATION_SLOT_ADVANCE","PG_ROTATE_LOGFILE","PG_SIZE_BYTES","PG_SIZE_PRETTY","PG_START_BACKUP","PG_STAT_FILE","PG_STOP_BACKUP","PG_SWITCH_WAL","PG_TABLESPACE_SIZE","PG_TABLE_SIZE","PG_TERMINATE_BACKEND","PG_TOTAL_RELATION_SIZE","PG_TRY_ADVISORY_LOCK","PG_TRY_ADVISORY_LOCK_SHARED","PG_TRY_ADVISORY_XACT_LOCK","PG_TRY_ADVISORY_XACT_LOCK_SHARED","PG_WALFILE_NAME","PG_WALFILE_NAME_OFFSET","PG_WAL_LSN_DIFF","PG_WAL_REPLAY_PAUSE","PG_WAL_REPLAY_RESUME","SET_CONFIG"],trigger:["SUPPRESS_REDUNDANT_UPDATES_TRIGGER","TSVECTOR_UPDATE_TRIGGER","TSVECTOR_UPDATE_TRIGGER_COLUMN"],eventTrigger:["PG_EVENT_TRIGGER_DDL_COMMANDS","PG_EVENT_TRIGGER_DROPPED_OBJECTS","PG_EVENT_TRIGGER_TABLE_REWRITE_OID","PG_EVENT_TRIGGER_TABLE_REWRITE_REASON","PG_GET_OBJECT_ADDRESS"],stats:["PG_MCV_LIST_ITEMS"],cast:["CAST"],dataTypes:["BIT","BIT VARYING","CHARACTER","CHARACTER VARYING","VARCHAR","CHAR","DECIMAL","NUMERIC","TIME","TIMESTAMP","ENUM"]});var Em=Te({all:["ABORT","ABSOLUTE","ACCESS","ACTION","ADD","ADMIN","AFTER","AGGREGATE","ALL","ALSO","ALTER","ALWAYS","ANALYSE","ANALYZE","AND","ANY","ARRAY","AS","ASC","ASENSITIVE","ASSERTION","ASSIGNMENT","ASYMMETRIC","AT","ATOMIC","ATTACH","ATTRIBUTE","AUTHORIZATION","BACKWARD","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","BIT","BOOLEAN","BOTH","BREADTH","BY","CACHE","CALL","CALLED","CASCADE","CASCADED","CASE","CAST","CATALOG","CHAIN","CHAR","CHARACTER","CHARACTERISTICS","CHECK","CHECKPOINT","CLASS","CLOSE","CLUSTER","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNS","COMMENT","COMMENTS","COMMIT","COMMITTED","COMPRESSION","CONCURRENTLY","CONFIGURATION","CONFLICT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTENT","CONTINUE","CONVERSION","COPY","COST","CREATE","CROSS","CSV","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINER","DELETE","DELIMITER","DELIMITERS","DEPENDS","DEPTH","DESC","DETACH","DICTIONARY","DISABLE","DISCARD","DISTINCT","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","EACH","ELSE","ENABLE","ENCODING","ENCRYPTED","END","ENUM","ESCAPE","EVENT","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXPLAIN","EXPRESSION","EXTENSION","EXTERNAL","EXTRACT","FALSE","FAMILY","FETCH","FILTER","FINALIZE","FIRST","FLOAT","FOLLOWING","FOR","FORCE","FOREIGN","FORWARD","FREEZE","FROM","FULL","FUNCTION","FUNCTIONS","GENERATED","GLOBAL","GRANT","GRANTED","GREATEST","GROUP","GROUPING","GROUPS","HANDLER","HAVING","HEADER","HOLD","HOUR","IDENTITY","IF","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDE","INCLUDING","INCREMENT","INDEX","INDEXES","INHERIT","INHERITS","INITIALLY","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSTEAD","INT","INTEGER","INTERSECT","INTERVAL","INTO","INVOKER","IS","ISNULL","ISOLATION","JOIN","KEY","LABEL","LANGUAGE","LARGE","LAST","LATERAL","LEADING","LEAKPROOF","LEAST","LEFT","LEVEL","LIKE","LIMIT","LISTEN","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LOCKED","LOGGED","MAPPING","MATCH","MATERIALIZED","MAXVALUE","METHOD","MINUTE","MINVALUE","MODE","MONTH","MOVE","NAME","NAMES","NATIONAL","NATURAL","NCHAR","NEW","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NORMALIZE","NORMALIZED","NOT","NOTHING","NOTIFY","NOTNULL","NOWAIT","NULL","NULLIF","NULLS","NUMERIC","OBJECT","OF","OFF","OFFSET","OIDS","OLD","ON","ONLY","OPERATOR","OPTION","OPTIONS","OR","ORDER","ORDINALITY","OTHERS","OUT","OUTER","OVER","OVERLAPS","OVERLAY","OVERRIDING","OWNED","OWNER","PARALLEL","PARSER","PARTIAL","PARTITION","PASSING","PASSWORD","PLACING","PLANS","POLICY","POSITION","PRECEDING","PRECISION","PREPARE","PREPARED","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROGRAM","PUBLICATION","QUOTE","RANGE","READ","REAL","REASSIGN","RECHECK","RECURSIVE","REF","REFERENCES","REFERENCING","REFRESH","REINDEX","RELATIVE","RELEASE","RENAME","REPEATABLE","REPLACE","REPLICA","RESET","RESTART","RESTRICT","RETURN","RETURNING","RETURNS","REVOKE","RIGHT","ROLE","ROLLBACK","ROLLUP","ROUTINE","ROUTINES","ROW","ROWS","RULE","SAVEPOINT","SCHEMA","SCHEMAS","SCROLL","SEARCH","SECOND","SECURITY","SELECT","SEQUENCE","SEQUENCES","SERIALIZABLE","SERVER","SESSION","SESSION_USER","SET","SETOF","SETS","SHARE","SHOW","SIMILAR","SIMPLE","SKIP","SMALLINT","SNAPSHOT","SOME","SQL","STABLE","STANDALONE","START","STATEMENT","STATISTICS","STDIN","STDOUT","STORAGE","STORED","STRICT","STRIP","SUBSCRIPTION","SUBSTRING","SUPPORT","SYMMETRIC","SYSID","SYSTEM","TABLE","TABLES","TABLESAMPLE","TABLESPACE","TEMP","TEMPLATE","TEMPORARY","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRANSFORM","TREAT","TRIGGER","TRIM","TRUE","TRUNCATE","TRUSTED","TYPE","TYPES","UESCAPE","UNBOUNDED","UNCOMMITTED","UNENCRYPTED","UNION","UNIQUE","UNKNOWN","UNLISTEN","UNLOGGED","UNTIL","UPDATE","USER","USING","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARCHAR","VARIADIC","VARYING","VERBOSE","VERSION","VIEW","VIEWS","VOLATILE","WHEN","WHERE","WHITESPACE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","XML","XMLATTRIBUTES","XMLCONCAT","XMLELEMENT","XMLEXISTS","XMLFOREST","XMLNAMESPACES","XMLPARSE","XMLPI","XMLROOT","XMLSERIALIZE","XMLTABLE","YEAR","YES","ZONE"]});var ZL=re(["SELECT [ALL | DISTINCT]"]),eC=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","FOR {UPDATE | NO KEY UPDATE | SHARE | KEY SHARE} [OF]","INSERT INTO","VALUES","SET","CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW","CREATE MATERIALIZED VIEW [IF NOT EXISTS]","CREATE [GLOBAL | LOCAL] [TEMPORARY | TEMP | UNLOGGED] TABLE [IF NOT EXISTS]","RETURNING"]),um=re(["UPDATE [ONLY]","WHERE CURRENT OF","ON CONFLICT","DELETE FROM [ONLY]","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS] [ONLY]","ALTER TABLE ALL IN TABLESPACE","RENAME [COLUMN]","RENAME TO","ADD [COLUMN] [IF NOT EXISTS]","DROP [COLUMN] [IF EXISTS]","ALTER [COLUMN]","[SET DATA] TYPE","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","TRUNCATE [TABLE] [ONLY]","SET SCHEMA","AFTER","ABORT","ALTER AGGREGATE","ALTER COLLATION","ALTER CONVERSION","ALTER DATABASE","ALTER DEFAULT PRIVILEGES","ALTER DOMAIN","ALTER EVENT TRIGGER","ALTER EXTENSION","ALTER FOREIGN DATA WRAPPER","ALTER FOREIGN TABLE","ALTER FUNCTION","ALTER GROUP","ALTER INDEX","ALTER LANGUAGE","ALTER LARGE OBJECT","ALTER MATERIALIZED VIEW","ALTER OPERATOR","ALTER OPERATOR CLASS","ALTER OPERATOR FAMILY","ALTER POLICY","ALTER PROCEDURE","ALTER PUBLICATION","ALTER ROLE","ALTER ROUTINE","ALTER RULE","ALTER SCHEMA","ALTER SEQUENCE","ALTER SERVER","ALTER STATISTICS","ALTER SUBSCRIPTION","ALTER SYSTEM","ALTER TABLESPACE","ALTER TEXT SEARCH CONFIGURATION","ALTER TEXT SEARCH DICTIONARY","ALTER TEXT SEARCH PARSER","ALTER TEXT SEARCH TEMPLATE","ALTER TRIGGER","ALTER TYPE","ALTER USER","ALTER USER MAPPING","ALTER VIEW","ANALYZE","BEGIN","CALL","CHECKPOINT","CLOSE","CLUSTER","COMMENT","COMMIT","COMMIT PREPARED","COPY","CREATE ACCESS METHOD","CREATE AGGREGATE","CREATE CAST","CREATE COLLATION","CREATE CONVERSION","CREATE DATABASE","CREATE DOMAIN","CREATE EVENT TRIGGER","CREATE EXTENSION","CREATE FOREIGN DATA WRAPPER","CREATE FOREIGN TABLE","CREATE FUNCTION","CREATE GROUP","CREATE INDEX","CREATE LANGUAGE","CREATE OPERATOR","CREATE OPERATOR CLASS","CREATE OPERATOR FAMILY","CREATE POLICY","CREATE PROCEDURE","CREATE PUBLICATION","CREATE ROLE","CREATE RULE","CREATE SCHEMA","CREATE SEQUENCE","CREATE SERVER","CREATE STATISTICS","CREATE SUBSCRIPTION","CREATE TABLESPACE","CREATE TEXT SEARCH CONFIGURATION","CREATE TEXT SEARCH DICTIONARY","CREATE TEXT SEARCH PARSER","CREATE TEXT SEARCH TEMPLATE","CREATE TRANSFORM","CREATE TRIGGER","CREATE TYPE","CREATE USER","CREATE USER MAPPING","DEALLOCATE","DECLARE","DISCARD","DROP ACCESS METHOD","DROP AGGREGATE","DROP CAST","DROP COLLATION","DROP CONVERSION","DROP DATABASE","DROP DOMAIN","DROP EVENT TRIGGER","DROP EXTENSION","DROP FOREIGN DATA WRAPPER","DROP FOREIGN TABLE","DROP FUNCTION","DROP GROUP","DROP INDEX","DROP LANGUAGE","DROP MATERIALIZED VIEW","DROP OPERATOR","DROP OPERATOR CLASS","DROP OPERATOR FAMILY","DROP OWNED","DROP POLICY","DROP PROCEDURE","DROP PUBLICATION","DROP ROLE","DROP ROUTINE","DROP RULE","DROP SCHEMA","DROP SEQUENCE","DROP SERVER","DROP STATISTICS","DROP SUBSCRIPTION","DROP TABLESPACE","DROP TEXT SEARCH CONFIGURATION","DROP TEXT SEARCH DICTIONARY","DROP TEXT SEARCH PARSER","DROP TEXT SEARCH TEMPLATE","DROP TRANSFORM","DROP TRIGGER","DROP TYPE","DROP USER","DROP USER MAPPING","DROP VIEW","EXECUTE","EXPLAIN","FETCH","GRANT","IMPORT FOREIGN SCHEMA","LISTEN","LOAD","LOCK","MOVE","NOTIFY","PREPARE","PREPARE TRANSACTION","REASSIGN OWNED","REFRESH MATERIALIZED VIEW","REINDEX","RELEASE SAVEPOINT","RESET","REVOKE","ROLLBACK","ROLLBACK PREPARED","ROLLBACK TO SAVEPOINT","SAVEPOINT","SECURITY LABEL","SELECT INTO","SET CONSTRAINTS","SET ROLE","SET SESSION AUTHORIZATION","SET TRANSACTION","SHOW","START TRANSACTION","UNLISTEN","VACUUM"]),tC=re(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),rC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),nC=re(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN","{TIMESTAMP | TIME} {WITH | WITHOUT} TIME ZONE","IS [NOT] DISTINCT FROM"]),cm={tokenizerOptions:{reservedSelect:ZL,reservedClauses:[...eC,...um],reservedSetOperations:tC,reservedJoins:rC,reservedPhrases:nC,reservedKeywords:Em,reservedFunctionNames:lm,nestedBlockComments:!0,extraParens:["[]"],stringTypes:["$$",{quote:"''-qq",prefixes:["U&"]},{quote:"''-bs",prefixes:["E"],requirePrefix:!0},{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:[{quote:'""-qq',prefixes:["U&"]}],identChars:{rest:"$"},paramTypes:{numbered:["$"]},operators:["%","^","|/","||/","@",":=","&","|","#","~","<<",">>","~>~","~<~","~>=~","~<=~","@-@","@@","##","<->","&&","&<","&>","<<|","&<|","|>>","|&>","<^","^>","?#","?-","?|","?-|","?||","@>","<@","~=","?","@?","?&","->","->>","#>","#>>","#-","=>",">>=","<<=","~~","~~*","!~~","!~~*","~","~*","!~","!~*","-|-","||","@@@","!!","<%","%>","<<%","%>>","<<->","<->>","<<<->","<->>>","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:um}};var dm=Te({aggregate:["ANY_VALUE","APPROXIMATE PERCENTILE_DISC","AVG","COUNT","LISTAGG","MAX","MEDIAN","MIN","PERCENTILE_CONT","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],array:["array","array_concat","array_flatten","get_array_length","split_to_array","subarray"],bitwise:["BIT_AND","BIT_OR","BOOL_AND","BOOL_OR"],conditional:["COALESCE","DECODE","GREATEST","LEAST","NVL","NVL2","NULLIF"],dateTime:["ADD_MONTHS","AT TIME ZONE","CONVERT_TIMEZONE","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATE_CMP","DATE_CMP_TIMESTAMP","DATE_CMP_TIMESTAMPTZ","DATE_PART_YEAR","DATEADD","DATEDIFF","DATE_PART","DATE_TRUNC","EXTRACT","GETDATE","INTERVAL_CMP","LAST_DAY","MONTHS_BETWEEN","NEXT_DAY","SYSDATE","TIMEOFDAY","TIMESTAMP_CMP","TIMESTAMP_CMP_DATE","TIMESTAMP_CMP_TIMESTAMPTZ","TIMESTAMPTZ_CMP","TIMESTAMPTZ_CMP_DATE","TIMESTAMPTZ_CMP_TIMESTAMP","TIMEZONE","TO_TIMESTAMP","TRUNC"],spatial:["AddBBox","DropBBox","GeometryType","ST_AddPoint","ST_Angle","ST_Area","ST_AsBinary","ST_AsEWKB","ST_AsEWKT","ST_AsGeoJSON","ST_AsText","ST_Azimuth","ST_Boundary","ST_Collect","ST_Contains","ST_ContainsProperly","ST_ConvexHull","ST_CoveredBy","ST_Covers","ST_Crosses","ST_Dimension","ST_Disjoint","ST_Distance","ST_DistanceSphere","ST_DWithin","ST_EndPoint","ST_Envelope","ST_Equals","ST_ExteriorRing","ST_Force2D","ST_Force3D","ST_Force3DM","ST_Force3DZ","ST_Force4D","ST_GeometryN","ST_GeometryType","ST_GeomFromEWKB","ST_GeomFromEWKT","ST_GeomFromText","ST_GeomFromWKB","ST_InteriorRingN","ST_Intersects","ST_IsPolygonCCW","ST_IsPolygonCW","ST_IsClosed","ST_IsCollection","ST_IsEmpty","ST_IsSimple","ST_IsValid","ST_Length","ST_LengthSphere","ST_Length2D","ST_LineFromMultiPoint","ST_LineInterpolatePoint","ST_M","ST_MakeEnvelope","ST_MakeLine","ST_MakePoint","ST_MakePolygon","ST_MemSize","ST_MMax","ST_MMin","ST_Multi","ST_NDims","ST_NPoints","ST_NRings","ST_NumGeometries","ST_NumInteriorRings","ST_NumPoints","ST_Perimeter","ST_Perimeter2D","ST_Point","ST_PointN","ST_Points","ST_Polygon","ST_RemovePoint","ST_Reverse","ST_SetPoint","ST_SetSRID","ST_Simplify","ST_SRID","ST_StartPoint","ST_Touches","ST_Within","ST_X","ST_XMax","ST_XMin","ST_Y","ST_YMax","ST_YMin","ST_Z","ST_ZMax","ST_ZMin","SupportsBBox"],hash:["CHECKSUM","FUNC_SHA1","FNV_HASH","MD5","SHA","SHA1","SHA2"],hyperLogLog:["HLL","HLL_CREATE_SKETCH","HLL_CARDINALITY","HLL_COMBINE"],json:["IS_VALID_JSON","IS_VALID_JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_EXTRACT_ARRAY_ELEMENT_TEXT","JSON_EXTRACT_PATH_TEXT","JSON_PARSE","JSON_SERIALIZE"],math:["ABS","ACOS","ASIN","ATAN","ATAN2","CBRT","CEILING","CEIL","COS","COT","DEGREES","DEXP","DLOG1","DLOG10","EXP","FLOOR","LN","LOG","MOD","PI","POWER","RADIANS","RANDOM","ROUND","SIN","SIGN","SQRT","TAN","TO_HEX","TRUNC"],machineLearning:["EXPLAIN_MODEL"],string:["ASCII","BPCHARCMP","BTRIM","BTTEXT_PATTERN_CMP","CHAR_LENGTH","CHARACTER_LENGTH","CHARINDEX","CHR","COLLATE","CONCAT","CRC32","DIFFERENCE","INITCAP","LEFT","RIGHT","LEN","LENGTH","LOWER","LPAD","RPAD","LTRIM","OCTETINDEX","OCTET_LENGTH","POSITION","QUOTE_IDENT","QUOTE_LITERAL","REGEXP_COUNT","REGEXP_INSTR","REGEXP_REPLACE","REGEXP_SUBSTR","REPEAT","REPLACE","REPLICATE","REVERSE","RTRIM","SOUNDEX","SPLIT_PART","STRPOS","STRTOL","SUBSTRING","TEXTLEN","TRANSLATE","TRIM","UPPER"],superType:["decimal_precision","decimal_scale","is_array","is_bigint","is_boolean","is_char","is_decimal","is_float","is_integer","is_object","is_scalar","is_smallint","is_varchar","json_typeof"],window:["AVG","COUNT","CUME_DIST","DENSE_RANK","FIRST_VALUE","LAST_VALUE","LAG","LEAD","LISTAGG","MAX","MEDIAN","MIN","NTH_VALUE","NTILE","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","RANK","RATIO_TO_REPORT","ROW_NUMBER","STDDEV_SAMP","STDDEV_POP","SUM","VAR_SAMP","VAR_POP"],dataType:["CAST","CONVERT","TO_CHAR","TO_DATE","TO_NUMBER","TEXT_TO_INT_ALT","TEXT_TO_NUMERIC_ALT"],sysAdmin:["CHANGE_QUERY_PRIORITY","CHANGE_SESSION_PRIORITY","CHANGE_USER_PRIORITY","CURRENT_SETTING","PG_CANCEL_BACKEND","PG_TERMINATE_BACKEND","REBOOT_CLUSTER","SET_CONFIG"],sysInfo:["CURRENT_AWS_ACCOUNT","CURRENT_DATABASE","CURRENT_NAMESPACE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_USER","CURRENT_USER_ID","HAS_ASSUMEROLE_PRIVILEGE","HAS_DATABASE_PRIVILEGE","HAS_SCHEMA_PRIVILEGE","HAS_TABLE_PRIVILEGE","PG_BACKEND_PID","PG_GET_COLS","PG_GET_GRANTEE_BY_IAM_ROLE","PG_GET_IAM_ROLE_BY_USER","PG_GET_LATE_BINDING_VIEW_COLS","PG_LAST_COPY_COUNT","PG_LAST_COPY_ID","PG_LAST_UNLOAD_ID","PG_LAST_QUERY_ID","PG_LAST_UNLOAD_COUNT","SESSION_USER","SLICE_NUM","USER","VERSION"],dataTypes:["DECIMAL","NUMERIC","CHAR","CHARACTER","VARCHAR","CHARACTER VARYING","NCHAR","NVARCHAR","VARBYTE"]});var fm=Te({standard:["AES128","AES256","ALL","ALLOWOVERWRITE","ANY","ARRAY","AS","ASC","AUTHORIZATION","BACKUP","BETWEEN","BINARY","BOTH","CHECK","COLUMN","CONSTRAINT","CREATE","CROSS","DEFAULT","DEFERRABLE","DEFLATE","DEFRAG","DESC","DISABLE","DISTINCT","DO","ENABLE","ENCODE","ENCRYPT","ENCRYPTION","EXPLICIT","FALSE","FOR","FOREIGN","FREEZE","FROM","FULL","GLOBALDICT256","GLOBALDICT64K","GROUP","IDENTITY","IGNORE","ILIKE","IN","INITIALLY","INNER","INTO","IS","ISNULL","LANGUAGE","LEADING","LIKE","LIMIT","LOCALTIME","LOCALTIMESTAMP","LUN","LUNS","MINUS","NATURAL","NEW","NOT","NOTNULL","NULL","NULLS","OFF","OFFLINE","OFFSET","OID","OLD","ON","ONLY","OPEN","ORDER","OUTER","OVERLAPS","PARALLEL","PARTITION","PERCENT","PERMISSIONS","PLACING","PRIMARY","RECOVER","REFERENCES","REJECTLOG","RESORT","RESPECT","RESTORE","SIMILAR","SNAPSHOT","SOME","SYSTEM","TABLE","TAG","TDES","THEN","TIMESTAMP","TO","TOP","TRAILING","TRUE","UNIQUE","USING","VERBOSE","WALLET","WITHOUT"],dataConversionParams:["ACCEPTANYDATE","ACCEPTINVCHARS","BLANKSASNULL","DATEFORMAT","EMPTYASNULL","ENCODING","ESCAPE","EXPLICIT_IDS","FILLRECORD","IGNOREBLANKLINES","IGNOREHEADER","REMOVEQUOTES","ROUNDEC","TIMEFORMAT","TRIMBLANKS","TRUNCATECOLUMNS"],dataLoadParams:["COMPROWS","COMPUPDATE","MAXERROR","NOLOAD","STATUPDATE"],dataFormatParams:["FORMAT","CSV","DELIMITER","FIXEDWIDTH","SHAPEFILE","AVRO","JSON","PARQUET","ORC"],copyAuthParams:["ACCESS_KEY_ID","CREDENTIALS","ENCRYPTED","IAM_ROLE","MASTER_SYMMETRIC_KEY","SECRET_ACCESS_KEY","SESSION_TOKEN"],copyCompressionParams:["BZIP2","GZIP","LZOP","ZSTD"],copyMiscParams:["MANIFEST","READRATIO","REGION","SSH"],compressionEncodings:["RAW","AZ64","BYTEDICT","DELTA","DELTA32K","LZO","MOSTLY8","MOSTLY16","MOSTLY32","RUNLENGTH","TEXT255","TEXT32K"],misc:["CATALOG_ROLE","SECRET_ARN","EXTERNAL","AUTO","EVEN","KEY","PREDICATE","COMPRESSION"],dataTypes:["BPCHAR","TEXT"]});var iC=re(["SELECT [ALL | DISTINCT]"]),sC=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT INTO","VALUES","SET","CREATE [OR REPLACE | MATERIALIZED] VIEW","CREATE [TEMPORARY | TEMP | LOCAL TEMPORARY | LOCAL TEMP] TABLE [IF NOT EXISTS]"]),hm=re(["UPDATE","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ALTER TABLE APPEND","ADD [COLUMN]","DROP [COLUMN]","RENAME TO","RENAME COLUMN","ALTER COLUMN","TYPE","ENCODE","TRUNCATE [TABLE]","ABORT","ALTER DATABASE","ALTER DATASHARE","ALTER DEFAULT PRIVILEGES","ALTER GROUP","ALTER MATERIALIZED VIEW","ALTER PROCEDURE","ALTER SCHEMA","ALTER USER","ANALYSE","ANALYZE","ANALYSE COMPRESSION","ANALYZE COMPRESSION","BEGIN","CALL","CANCEL","CLOSE","COMMENT","COMMIT","COPY","CREATE DATABASE","CREATE DATASHARE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL SCHEMA","CREATE EXTERNAL TABLE","CREATE FUNCTION","CREATE GROUP","CREATE LIBRARY","CREATE MODEL","CREATE PROCEDURE","CREATE SCHEMA","CREATE USER","DEALLOCATE","DECLARE","DESC DATASHARE","DROP DATABASE","DROP DATASHARE","DROP FUNCTION","DROP GROUP","DROP LIBRARY","DROP MODEL","DROP MATERIALIZED VIEW","DROP PROCEDURE","DROP SCHEMA","DROP USER","DROP VIEW","DROP","EXECUTE","EXPLAIN","FETCH","GRANT","LOCK","PREPARE","REFRESH MATERIALIZED VIEW","RESET","REVOKE","ROLLBACK","SELECT INTO","SET SESSION AUTHORIZATION","SET SESSION CHARACTERISTICS","SHOW","SHOW EXTERNAL TABLE","SHOW MODEL","SHOW DATASHARES","SHOW PROCEDURE","SHOW TABLE","SHOW VIEW","START TRANSACTION","UNLOAD","VACUUM"]),aC=re(["UNION [ALL]","EXCEPT","INTERSECT","MINUS"]),oC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),lC=re(["NULL AS","DATA CATALOG","HIVE METASTORE","{ROWS | RANGE} BETWEEN"]),Tm={tokenizerOptions:{reservedSelect:iC,reservedClauses:[...sC,...hm],reservedSetOperations:aC,reservedJoins:oC,reservedPhrases:lC,reservedKeywords:fm,reservedFunctionNames:dm,stringTypes:["''-qq"],identTypes:['""-qq'],identChars:{first:"#"},paramTypes:{numbered:["$"]},operators:["^","%","@","|/","||/","&","|","~","<<",">>","||","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:hm}};var mm=Te({all:["ADD","AFTER","ALL","ALTER","ANALYZE","AND","ANTI","ANY","ARCHIVE","ARRAY","AS","ASC","AT","AUTHORIZATION","BETWEEN","BOTH","BUCKET","BUCKETS","BY","CACHE","CASCADE","CAST","CHANGE","CHECK","CLEAR","CLUSTER","CLUSTERED","CODEGEN","COLLATE","COLLECTION","COLUMN","COLUMNS","COMMENT","COMMIT","COMPACT","COMPACTIONS","COMPUTE","CONCATENATE","CONSTRAINT","COST","CREATE","CROSS","CUBE","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATA","DATABASE","DATABASES","DAY","DBPROPERTIES","DEFINED","DELETE","DELIMITED","DESC","DESCRIBE","DFS","DIRECTORIES","DIRECTORY","DISTINCT","DISTRIBUTE","DIV","DROP","ESCAPE","ESCAPED","EXCEPT","EXCHANGE","EXISTS","EXPORT","EXTENDED","EXTERNAL","EXTRACT","FALSE","FETCH","FIELDS","FILTER","FILEFORMAT","FIRST","FIRST_VALUE","FOLLOWING","FOR","FOREIGN","FORMAT","FORMATTED","FULL","FUNCTION","FUNCTIONS","GLOBAL","GRANT","GROUP","GROUPING","HOUR","IF","IGNORE","IMPORT","IN","INDEX","INDEXES","INNER","INPATH","INPUTFORMAT","INTERSECT","INTERVAL","INTO","IS","ITEMS","KEYS","LAST","LAST_VALUE","LATERAL","LAZY","LEADING","LEFT","LIKE","LINES","LIST","LOCAL","LOCATION","LOCK","LOCKS","LOGICAL","MACRO","MAP","MATCHED","MERGE","MINUTE","MONTH","MSCK","NAMESPACE","NAMESPACES","NATURAL","NO","NOT","NULL","NULLS","OF","ONLY","OPTION","OPTIONS","OR","ORDER","OUT","OUTER","OUTPUTFORMAT","OVER","OVERLAPS","OVERLAY","OVERWRITE","OWNER","PARTITION","PARTITIONED","PARTITIONS","PERCENT","PLACING","POSITION","PRECEDING","PRIMARY","PRINCIPALS","PROPERTIES","PURGE","QUERY","RANGE","RECORDREADER","RECORDWRITER","RECOVER","REDUCE","REFERENCES","RENAME","REPAIR","REPLACE","RESPECT","RESTRICT","REVOKE","RIGHT","RLIKE","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","SCHEMA","SECOND","SELECT","SEMI","SEPARATED","SERDE","SERDEPROPERTIES","SESSION_USER","SETS","SHOW","SKEWED","SOME","SORT","SORTED","START","STATISTICS","STORED","STRATIFY","STRUCT","SUBSTR","SUBSTRING","TABLE","TABLES","TBLPROPERTIES","TEMPORARY","TERMINATED","THEN","TO","TOUCH","TRAILING","TRANSACTION","TRANSACTIONS","TRIM","TRUE","TRUNCATE","UNARCHIVE","UNBOUNDED","UNCACHE","UNIQUE","UNKNOWN","UNLOCK","UNSET","USE","USER","USING","VIEW","WINDOW","YEAR","ANALYSE","ARRAY_ZIP","COALESCE","CONTAINS","CONVERT","DAYS","DAY_HOUR","DAY_MINUTE","DAY_SECOND","DECODE","DEFAULT","DISTINCTROW","ENCODE","EXPLODE","EXPLODE_OUTER","FIXED","GREATEST","GROUP_CONCAT","HOURS","HOUR_MINUTE","HOUR_SECOND","IFNULL","LEAST","LEVEL","MINUTE_SECOND","NULLIF","OFFSET","ON","OPTIMIZE","REGEXP","SEPARATOR","SIZE","STRING","TYPE","TYPES","UNSIGNED","VARIABLES","YEAR_MONTH"]});var pm=Te({aggregate:["APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","AVG","BIT_AND","BIT_OR","BIT_XOR","BOOL_AND","BOOL_OR","COLLECT_LIST","COLLECT_SET","CORR","COUNT","COUNT","COUNT","COUNT_IF","COUNT_MIN_SKETCH","COVAR_POP","COVAR_SAMP","EVERY","FIRST","FIRST_VALUE","GROUPING","GROUPING_ID","KURTOSIS","LAST","LAST_VALUE","MAX","MAX_BY","MEAN","MIN","MIN_BY","PERCENTILE","PERCENTILE","PERCENTILE_APPROX","SKEWNESS","STD","STDDEV","STDDEV_POP","STDDEV_SAMP","SUM","VAR_POP","VAR_SAMP","VARIANCE"],window:["CUME_DIST","DENSE_RANK","LAG","LEAD","NTH_VALUE","NTILE","PERCENT_RANK","RANK","ROW_NUMBER"],array:["ARRAY","ARRAY_CONTAINS","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_REPEAT","ARRAY_UNION","ARRAYS_OVERLAP","ARRAYS_ZIP","FLATTEN","SEQUENCE","SHUFFLE","SLICE","SORT_ARRAY"],map:["ELEMENT_AT","ELEMENT_AT","MAP","MAP_CONCAT","MAP_ENTRIES","MAP_FROM_ARRAYS","MAP_FROM_ENTRIES","MAP_KEYS","MAP_VALUES","STR_TO_MAP"],datetime:["ADD_MONTHS","CURRENT_DATE","CURRENT_DATE","CURRENT_TIMESTAMP","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","DATE_ADD","DATE_FORMAT","DATE_FROM_UNIX_DATE","DATE_PART","DATE_SUB","DATE_TRUNC","DATEDIFF","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","EXTRACT","FROM_UNIXTIME","FROM_UTC_TIMESTAMP","HOUR","LAST_DAY","MAKE_DATE","MAKE_DT_INTERVAL","MAKE_INTERVAL","MAKE_TIMESTAMP","MAKE_YM_INTERVAL","MINUTE","MONTH","MONTHS_BETWEEN","NEXT_DAY","NOW","QUARTER","SECOND","SESSION_WINDOW","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIMESTAMP_SECONDS","TO_DATE","TO_TIMESTAMP","TO_UNIX_TIMESTAMP","TO_UTC_TIMESTAMP","TRUNC","UNIX_DATE","UNIX_MICROS","UNIX_MILLIS","UNIX_SECONDS","UNIX_TIMESTAMP","WEEKDAY","WEEKOFYEAR","WINDOW","YEAR"],json:["FROM_JSON","GET_JSON_OBJECT","JSON_ARRAY_LENGTH","JSON_OBJECT_KEYS","JSON_TUPLE","SCHEMA_OF_JSON","TO_JSON"],misc:["ABS","ACOS","ACOSH","AGGREGATE","ARRAY_SORT","ASCII","ASIN","ASINH","ASSERT_TRUE","ATAN","ATAN2","ATANH","BASE64","BIGINT","BIN","BINARY","BIT_COUNT","BIT_GET","BIT_LENGTH","BOOLEAN","BROUND","BTRIM","CARDINALITY","CBRT","CEIL","CEILING","CHAR","CHAR_LENGTH","CHARACTER_LENGTH","CHR","CONCAT","CONCAT_WS","CONV","COS","COSH","COT","CRC32","CURRENT_CATALOG","CURRENT_DATABASE","CURRENT_USER","DATE","DECIMAL","DEGREES","DOUBLE","ELT","EXP","EXPM1","FACTORIAL","FIND_IN_SET","FLOAT","FLOOR","FORALL","FORMAT_NUMBER","FORMAT_STRING","FROM_CSV","GETBIT","HASH","HEX","HYPOT","INITCAP","INLINE","INLINE_OUTER","INPUT_FILE_BLOCK_LENGTH","INPUT_FILE_BLOCK_START","INPUT_FILE_NAME","INSTR","INT","ISNAN","ISNOTNULL","ISNULL","JAVA_METHOD","LCASE","LEFT","LENGTH","LEVENSHTEIN","LN","LOCATE","LOG","LOG10","LOG1P","LOG2","LOWER","LPAD","LTRIM","MAP_FILTER","MAP_ZIP_WITH","MD5","MOD","MONOTONICALLY_INCREASING_ID","NAMED_STRUCT","NANVL","NEGATIVE","NVL","NVL2","OCTET_LENGTH","OVERLAY","PARSE_URL","PI","PMOD","POSEXPLODE","POSEXPLODE_OUTER","POSITION","POSITIVE","POW","POWER","PRINTF","RADIANS","RAISE_ERROR","RAND","RANDN","RANDOM","REFLECT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_REPLACE","REPEAT","REPLACE","REVERSE","RIGHT","RINT","ROUND","RPAD","RTRIM","SCHEMA_OF_CSV","SENTENCES","SHA","SHA1","SHA2","SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHTUNSIGNED","SIGN","SIGNUM","SIN","SINH","SMALLINT","SOUNDEX","SPACE","SPARK_PARTITION_ID","SPLIT","SQRT","STACK","SUBSTR","SUBSTRING","SUBSTRING_INDEX","TAN","TANH","TIMESTAMP","TINYINT","TO_CSV","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRY_ADD","TRY_DIVIDE","TYPEOF","UCASE","UNBASE64","UNHEX","UPPER","UUID","VERSION","WIDTH_BUCKET","XPATH","XPATH_BOOLEAN","XPATH_DOUBLE","XPATH_FLOAT","XPATH_INT","XPATH_LONG","XPATH_NUMBER","XPATH_SHORT","XPATH_STRING","XXHASH64","ZIP_WITH"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","DEC","NUMERIC","VARCHAR"]});var EC=re(["SELECT [ALL | DISTINCT]"]),uC=re(["WITH","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","SORT BY","CLUSTER BY","DISTRIBUTE BY","LIMIT","INSERT [INTO | OVERWRITE] [TABLE]","VALUES","INSERT OVERWRITE [LOCAL] DIRECTORY","LOAD DATA [LOCAL] INPATH","[OVERWRITE] INTO TABLE","CREATE [OR REPLACE] [GLOBAL TEMPORARY | TEMPORARY] VIEW [IF NOT EXISTS]","CREATE [EXTERNAL] TABLE [IF NOT EXISTS]"]),Am=re(["DROP TABLE [IF EXISTS]","ALTER TABLE","ADD COLUMNS","DROP {COLUMN | COLUMNS}","RENAME TO","RENAME COLUMN","ALTER COLUMN","TRUNCATE TABLE","LATERAL VIEW","ALTER DATABASE","ALTER VIEW","CREATE DATABASE","CREATE FUNCTION","DROP DATABASE","DROP FUNCTION","DROP VIEW","REPAIR TABLE","USE DATABASE","TABLESAMPLE","PIVOT","TRANSFORM","EXPLAIN","ADD FILE","ADD JAR","ANALYZE TABLE","CACHE TABLE","CLEAR CACHE","DESCRIBE DATABASE","DESCRIBE FUNCTION","DESCRIBE QUERY","DESCRIBE TABLE","LIST FILE","LIST JAR","REFRESH","REFRESH TABLE","REFRESH FUNCTION","RESET","SHOW COLUMNS","SHOW CREATE TABLE","SHOW DATABASES","SHOW FUNCTIONS","SHOW PARTITIONS","SHOW TABLE EXTENDED","SHOW TABLES","SHOW TBLPROPERTIES","SHOW VIEWS","UNCACHE TABLE"]),cC=re(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),dC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN","[LEFT] {ANTI | SEMI} JOIN","NATURAL [LEFT] {ANTI | SEMI} JOIN"]),fC=re(["ON DELETE","ON UPDATE","CURRENT ROW","{ROWS | RANGE} BETWEEN"]),Sm={tokenizerOptions:{reservedSelect:EC,reservedClauses:[...uC,...Am],reservedSetOperations:cC,reservedJoins:dC,reservedPhrases:fC,supportsXor:!0,reservedKeywords:mm,reservedFunctionNames:pm,extraParens:["[]"],stringTypes:["''-bs",'""-bs',{quote:"''-raw",prefixes:["R","X"],requirePrefix:!0},{quote:'""-raw',prefixes:["R","X"],requirePrefix:!0}],identTypes:["``"],variableTypes:[{quote:"{}",prefixes:["$"],requirePrefix:!0}],operators:["%","~","^","|","&","<=>","==","!","||","->"],postProcess:hC},formatOptions:{onelineClauses:Am}};function hC(t){return t.map((n,e)=>{let i=t[e-1]||qt,E=t[e+1]||qt;return Ht.WINDOW(n)&&E.type===ne.OPEN_PAREN?{...n,type:ne.RESERVED_FUNCTION_NAME}:n.text==="ITEMS"&&n.type===ne.RESERVED_KEYWORD&&!(i.text==="COLLECTION"&&E.text==="TERMINATED")?{...n,type:ne.IDENTIFIER,text:n.raw}:n})}var Rm=Te({scalar:["ABS","CHANGES","CHAR","COALESCE","FORMAT","GLOB","HEX","IFNULL","IIF","INSTR","LAST_INSERT_ROWID","LENGTH","LIKE","LIKELIHOOD","LIKELY","LOAD_EXTENSION","LOWER","LTRIM","NULLIF","PRINTF","QUOTE","RANDOM","RANDOMBLOB","REPLACE","ROUND","RTRIM","SIGN","SOUNDEX","SQLITE_COMPILEOPTION_GET","SQLITE_COMPILEOPTION_USED","SQLITE_OFFSET","SQLITE_SOURCE_ID","SQLITE_VERSION","SUBSTR","SUBSTRING","TOTAL_CHANGES","TRIM","TYPEOF","UNICODE","UNLIKELY","UPPER","ZEROBLOB"],aggregate:["AVG","COUNT","GROUP_CONCAT","MAX","MIN","SUM","TOTAL"],datetime:["DATE","TIME","DATETIME","JULIANDAY","UNIXEPOCH","STRFTIME"],window:["row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value"],math:["ACOS","ACOSH","ASIN","ASINH","ATAN","ATAN2","ATANH","CEIL","CEILING","COS","COSH","DEGREES","EXP","FLOOR","LN","LOG","LOG","LOG10","LOG2","MOD","PI","POW","POWER","RADIANS","SIN","SINH","SQRT","TAN","TANH","TRUNC"],json:["JSON","JSON_ARRAY","JSON_ARRAY_LENGTH","JSON_ARRAY_LENGTH","JSON_EXTRACT","JSON_INSERT","JSON_OBJECT","JSON_PATCH","JSON_REMOVE","JSON_REPLACE","JSON_SET","JSON_TYPE","JSON_TYPE","JSON_VALID","JSON_QUOTE","JSON_GROUP_ARRAY","JSON_GROUP_OBJECT","JSON_EACH","JSON_TREE"],cast:["CAST"],dataTypes:["CHARACTER","VARCHAR","VARYING CHARACTER","NCHAR","NATIVE CHARACTER","NVARCHAR","NUMERIC","DECIMAL"]});var Nm=Te({all:["ABORT","ACTION","ADD","AFTER","ALL","ALTER","AND","ANY","ARE","ARRAY","ALWAYS","ANALYZE","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DETACH","DISTINCT","DO","DROP","EACH","ELSE","END","ESCAPE","EXCEPT","EXCLUDE","EXCLUSIVE","EXISTS","EXPLAIN","FAIL","FILTER","FIRST","FOLLOWING","FOR","FOREIGN","FROM","FULL","GENERATED","GLOB","GROUP","GROUPS","HAVING","IF","IGNORE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LEFT","LIKE","LIMIT","MATCH","MATERIALIZED","NATURAL","NO","NOT","NOTHING","NOTNULL","NULL","NULLS","OF","OFFSET","ON","ONLY","OPEN","OR","ORDER","OTHERS","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRECEDING","PRIMARY","QUERY","RAISE","RANGE","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWS","SAVEPOINT","SELECT","SET","TABLE","TEMP","TEMPORARY","THEN","TIES","TO","TRANSACTION","TRIGGER","UNBOUNDED","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT"]});var TC=re(["SELECT [ALL | DISTINCT]"]),mC=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK] INTO","REPLACE INTO","VALUES","SET","CREATE [TEMPORARY | TEMP] VIEW [IF NOT EXISTS]","CREATE [TEMPORARY | TEMP] TABLE [IF NOT EXISTS]"]),Im=re(["UPDATE [OR ABORT | OR FAIL | OR IGNORE | OR REPLACE | OR ROLLBACK]","ON CONFLICT","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD [COLUMN]","DROP [COLUMN]","RENAME [COLUMN]","RENAME TO","SET SCHEMA"]),pC=re(["UNION [ALL]","EXCEPT","INTERSECT"]),AC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),SC=re(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE | GROUPS} BETWEEN"]),gm={tokenizerOptions:{reservedSelect:TC,reservedClauses:[...mC,...Im],reservedSetOperations:pC,reservedJoins:AC,reservedPhrases:SC,reservedKeywords:Nm,reservedFunctionNames:Rm,stringTypes:["''-qq",{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``","[]"],paramTypes:{positional:!0,numbered:["?"],named:[":","@","$"]},operators:["%","~","&","|","<<",">>","==","->","->>","||"]},formatOptions:{onelineClauses:Im}};var Om=Te({set:["GROUPING"],window:["RANK","DENSE_RANK","PERCENT_RANK","CUME_DIST","ROW_NUMBER"],numeric:["POSITION","OCCURRENCES_REGEX","POSITION_REGEX","EXTRACT","CHAR_LENGTH","CHARACTER_LENGTH","OCTET_LENGTH","CARDINALITY","ABS","MOD","LN","EXP","POWER","SQRT","FLOOR","CEIL","CEILING","WIDTH_BUCKET"],string:["SUBSTRING","SUBSTRING_REGEX","UPPER","LOWER","CONVERT","TRANSLATE","TRANSLATE_REGEX","TRIM","OVERLAY","NORMALIZE","SPECIFICTYPE"],datetime:["CURRENT_DATE","CURRENT_TIME","LOCALTIME","CURRENT_TIMESTAMP","LOCALTIMESTAMP"],aggregate:["COUNT","AVG","MAX","MIN","SUM","STDDEV_POP","STDDEV_SAMP","VAR_SAMP","VAR_POP","COLLECT","FUSION","INTERSECTION","COVAR_POP","COVAR_SAMP","CORR","REGR_SLOPE","REGR_INTERCEPT","REGR_COUNT","REGR_R2","REGR_AVGX","REGR_AVGY","REGR_SXX","REGR_SYY","REGR_SXY","PERCENTILE_CONT","PERCENTILE_DISC"],cast:["CAST"],caseAbbrev:["COALESCE","NULLIF"],nonStandard:["ROUND","SIN","COS","TAN","ASIN","ACOS","ATAN"],dataTypes:["CHARACTER","CHAR","CHARACTER VARYING","CHAR VARYING","VARCHAR","CHARACTER LARGE OBJECT","CHAR LARGE OBJECT","CLOB","NATIONAL CHARACTER","NATIONAL CHAR","NCHAR","NATIONAL CHARACTER VARYING","NATIONAL CHAR VARYING","NCHAR VARYING","NATIONAL CHARACTER LARGE OBJECT","NCHAR LARGE OBJECT","NCLOB","BINARY","BINARY VARYING","VARBINARY","BINARY LARGE OBJECT","BLOB","NUMERIC","DECIMAL","DEC","TIME","TIMESTAMP"]});var _m=Te({all:["ALL","ALLOCATE","ALTER","ANY","ARE","ARRAY","AS","ASENSITIVE","ASYMMETRIC","AT","ATOMIC","AUTHORIZATION","BEGIN","BETWEEN","BIGINT","BINARY","BLOB","BOOLEAN","BOTH","BY","CALL","CALLED","CASCADED","CAST","CHAR","CHARACTER","CHECK","CLOB","CLOSE","COALESCE","COLLATE","COLUMN","COMMIT","CONDITION","CONNECT","CONSTRAINT","CORRESPONDING","CREATE","CROSS","CUBE","CURRENT","CURRENT_CATALOG","CURRENT_DEFAULT_TRANSFORM_GROUP","CURRENT_PATH","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_TRANSFORM_GROUP_FOR_TYPE","CURRENT_USER","CURSOR","CYCLE","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DELETE","DEREF","DESCRIBE","DETERMINISTIC","DISCONNECT","DISTINCT","DOUBLE","DROP","DYNAMIC","EACH","ELEMENT","END-EXEC","ESCAPE","EVERY","EXCEPT","EXEC","EXECUTE","EXISTS","EXTERNAL","FALSE","FETCH","FILTER","FLOAT","FOR","FOREIGN","FREE","FROM","FULL","FUNCTION","GET","GLOBAL","GRANT","GROUP","HAVING","HOLD","HOUR","IDENTITY","IN","INDICATOR","INNER","INOUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","LANGUAGE","LARGE","LATERAL","LEADING","LEFT","LIKE","LIKE_REGEX","LOCAL","MATCH","MEMBER","MERGE","METHOD","MINUTE","MODIFIES","MODULE","MONTH","MULTISET","NATIONAL","NATURAL","NCHAR","NCLOB","NEW","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OF","OLD","ON","ONLY","OPEN","ORDER","OUT","OUTER","OVER","OVERLAPS","PARAMETER","PARTITION","PRECISION","PREPARE","PRIMARY","PROCEDURE","RANGE","READS","REAL","RECURSIVE","REF","REFERENCES","REFERENCING","RELEASE","RESULT","RETURN","RETURNS","REVOKE","RIGHT","ROLLBACK","ROLLUP","ROW","ROWS","SAVEPOINT","SCOPE","SCROLL","SEARCH","SECOND","SELECT","SENSITIVE","SESSION_USER","SET","SIMILAR","SMALLINT","SOME","SPECIFIC","SQL","SQLEXCEPTION","SQLSTATE","SQLWARNING","START","STATIC","SUBMULTISET","SYMMETRIC","SYSTEM","SYSTEM_USER","TABLE","TABLESAMPLE","THEN","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSLATION","TREAT","TRIGGER","TRUE","UESCAPE","UNION","UNIQUE","UNKNOWN","UNNEST","UPDATE","USER","USING","VALUE","VALUES","VARBINARY","VARCHAR","VARYING","WHENEVER","WINDOW","WITHIN","WITHOUT","YEAR"]});var RC=re(["SELECT [ALL | DISTINCT]"]),NC=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET","CREATE [RECURSIVE] VIEW","CREATE [GLOBAL TEMPORARY | LOCAL TEMPORARY] TABLE"]),Lm=re(["UPDATE","WHERE CURRENT OF","DELETE FROM","DROP TABLE","ALTER TABLE","ADD COLUMN","DROP [COLUMN]","RENAME COLUMN","RENAME TO","ALTER [COLUMN]","{SET | DROP} DEFAULT","ADD SCOPE","DROP SCOPE {CASCADE | RESTRICT}","RESTART WITH","TRUNCATE TABLE","SET SCHEMA"]),IC=re(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),gC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),OC=re(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),Cm={tokenizerOptions:{reservedSelect:RC,reservedClauses:[...NC,...Lm],reservedSetOperations:IC,reservedJoins:gC,reservedPhrases:OC,reservedKeywords:_m,reservedFunctionNames:Om,stringTypes:[{quote:"''-qq-bs",prefixes:["N","U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq',"``"],paramTypes:{positional:!0},operators:["||"]},formatOptions:{onelineClauses:Lm}};var wm=Te({all:["ABS","ACOS","ALL_MATCH","ANY_MATCH","APPROX_DISTINCT","APPROX_MOST_FREQUENT","APPROX_PERCENTILE","APPROX_SET","ARBITRARY","ARRAYS_OVERLAP","ARRAY_AGG","ARRAY_DISTINCT","ARRAY_EXCEPT","ARRAY_INTERSECT","ARRAY_JOIN","ARRAY_MAX","ARRAY_MIN","ARRAY_POSITION","ARRAY_REMOVE","ARRAY_SORT","ARRAY_UNION","ASIN","ATAN","ATAN2","AT_TIMEZONE","AVG","BAR","BETA_CDF","BING_TILE","BING_TILES_AROUND","BING_TILE_AT","BING_TILE_COORDINATES","BING_TILE_POLYGON","BING_TILE_QUADKEY","BING_TILE_ZOOM_LEVEL","BITWISE_AND","BITWISE_AND_AGG","BITWISE_LEFT_SHIFT","BITWISE_NOT","BITWISE_OR","BITWISE_OR_AGG","BITWISE_RIGHT_SHIFT","BITWISE_RIGHT_SHIFT_ARITHMETIC","BITWISE_XOR","BIT_COUNT","BOOL_AND","BOOL_OR","CARDINALITY","CAST","CBRT","CEIL","CEILING","CHAR2HEXINT","CHECKSUM","CHR","CLASSIFY","COALESCE","CODEPOINT","COLOR","COMBINATIONS","CONCAT","CONCAT_WS","CONTAINS","CONTAINS_SEQUENCE","CONVEX_HULL_AGG","CORR","COS","COSH","COSINE_SIMILARITY","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CRC32","CUME_DIST","CURRENT_CATALOG","CURRENT_DATE","CURRENT_GROUPS","CURRENT_SCHEMA","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_USER","DATE","DATE_ADD","DATE_DIFF","DATE_FORMAT","DATE_PARSE","DATE_TRUNC","DAY","DAY_OF_MONTH","DAY_OF_WEEK","DAY_OF_YEAR","DEGREES","DENSE_RANK","DOW","DOY","E","ELEMENT_AT","EMPTY_APPROX_SET","EVALUATE_CLASSIFIER_PREDICTIONS","EVERY","EXP","EXTRACT","FEATURES","FILTER","FIRST_VALUE","FLATTEN","FLOOR","FORMAT","FORMAT_DATETIME","FORMAT_NUMBER","FROM_BASE","FROM_BASE32","FROM_BASE64","FROM_BASE64URL","FROM_BIG_ENDIAN_32","FROM_BIG_ENDIAN_64","FROM_ENCODED_POLYLINE","FROM_GEOJSON_GEOMETRY","FROM_HEX","FROM_IEEE754_32","FROM_IEEE754_64","FROM_ISO8601_DATE","FROM_ISO8601_TIMESTAMP","FROM_ISO8601_TIMESTAMP_NANOS","FROM_UNIXTIME","FROM_UNIXTIME_NANOS","FROM_UTF8","GEOMETRIC_MEAN","GEOMETRY_FROM_HADOOP_SHAPE","GEOMETRY_INVALID_REASON","GEOMETRY_NEAREST_POINTS","GEOMETRY_TO_BING_TILES","GEOMETRY_UNION","GEOMETRY_UNION_AGG","GREATEST","GREAT_CIRCLE_DISTANCE","HAMMING_DISTANCE","HASH_COUNTS","HISTOGRAM","HMAC_MD5","HMAC_SHA1","HMAC_SHA256","HMAC_SHA512","HOUR","HUMAN_READABLE_SECONDS","IF","INDEX","INFINITY","INTERSECTION_CARDINALITY","INVERSE_BETA_CDF","INVERSE_NORMAL_CDF","IS_FINITE","IS_INFINITE","IS_JSON_SCALAR","IS_NAN","JACCARD_INDEX","JSON_ARRAY_CONTAINS","JSON_ARRAY_GET","JSON_ARRAY_LENGTH","JSON_EXISTS","JSON_EXTRACT","JSON_EXTRACT_SCALAR","JSON_FORMAT","JSON_PARSE","JSON_QUERY","JSON_SIZE","JSON_VALUE","KURTOSIS","LAG","LAST_DAY_OF_MONTH","LAST_VALUE","LEAD","LEARN_CLASSIFIER","LEARN_LIBSVM_CLASSIFIER","LEARN_LIBSVM_REGRESSOR","LEARN_REGRESSOR","LEAST","LENGTH","LEVENSHTEIN_DISTANCE","LINE_INTERPOLATE_POINT","LINE_INTERPOLATE_POINTS","LINE_LOCATE_POINT","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOG10","LOG2","LOWER","LPAD","LTRIM","LUHN_CHECK","MAKE_SET_DIGEST","MAP","MAP_AGG","MAP_CONCAT","MAP_ENTRIES","MAP_FILTER","MAP_FROM_ENTRIES","MAP_KEYS","MAP_UNION","MAP_VALUES","MAP_ZIP_WITH","MAX","MAX_BY","MD5","MERGE","MERGE_SET_DIGEST","MILLISECOND","MIN","MINUTE","MIN_BY","MOD","MONTH","MULTIMAP_AGG","MULTIMAP_FROM_ENTRIES","MURMUR3","NAN","NGRAMS","NONE_MATCH","NORMALIZE","NORMAL_CDF","NOW","NTH_VALUE","NTILE","NULLIF","NUMERIC_HISTOGRAM","OBJECTID","OBJECTID_TIMESTAMP","PARSE_DATA_SIZE","PARSE_DATETIME","PARSE_DURATION","PERCENT_RANK","PI","POSITION","POW","POWER","QDIGEST_AGG","QUARTER","RADIANS","RAND","RANDOM","RANK","REDUCE","REDUCE_AGG","REGEXP_COUNT","REGEXP_EXTRACT","REGEXP_EXTRACT_ALL","REGEXP_LIKE","REGEXP_POSITION","REGEXP_REPLACE","REGEXP_SPLIT","REGRESS","REGR_INTERCEPT","REGR_SLOPE","RENDER","REPEAT","REPLACE","REVERSE","RGB","ROUND","ROW_NUMBER","RPAD","RTRIM","SECOND","SEQUENCE","SHA1","SHA256","SHA512","SHUFFLE","SIGN","SIMPLIFY_GEOMETRY","SIN","SKEWNESS","SLICE","SOUNDEX","SPATIAL_PARTITIONING","SPATIAL_PARTITIONS","SPLIT","SPLIT_PART","SPLIT_TO_MAP","SPLIT_TO_MULTIMAP","SPOOKY_HASH_V2_32","SPOOKY_HASH_V2_64","SQRT","STARTS_WITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRPOS","ST_AREA","ST_ASBINARY","ST_ASTEXT","ST_BOUNDARY","ST_BUFFER","ST_CENTROID","ST_CONTAINS","ST_CONVEXHULL","ST_COORDDIM","ST_CROSSES","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_ENDPOINT","ST_ENVELOPE","ST_ENVELOPEASPTS","ST_EQUALS","ST_EXTERIORRING","ST_GEOMETRIES","ST_GEOMETRYFROMTEXT","ST_GEOMETRYN","ST_GEOMETRYTYPE","ST_GEOMFROMBINARY","ST_INTERIORRINGN","ST_INTERIORRINGS","ST_INTERSECTION","ST_INTERSECTS","ST_ISCLOSED","ST_ISEMPTY","ST_ISRING","ST_ISSIMPLE","ST_ISVALID","ST_LENGTH","ST_LINEFROMTEXT","ST_LINESTRING","ST_MULTIPOINT","ST_NUMGEOMETRIES","ST_NUMINTERIORRING","ST_NUMPOINTS","ST_OVERLAPS","ST_POINT","ST_POINTN","ST_POINTS","ST_POLYGON","ST_RELATE","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_TOUCHES","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","SUBSTR","SUBSTRING","SUM","TAN","TANH","TDIGEST_AGG","TIMESTAMP_OBJECTID","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO_BASE","TO_BASE32","TO_BASE64","TO_BASE64URL","TO_BIG_ENDIAN_32","TO_BIG_ENDIAN_64","TO_CHAR","TO_DATE","TO_ENCODED_POLYLINE","TO_GEOJSON_GEOMETRY","TO_GEOMETRY","TO_HEX","TO_IEEE754_32","TO_IEEE754_64","TO_ISO8601","TO_MILLISECONDS","TO_SPHERICAL_GEOGRAPHY","TO_TIMESTAMP","TO_UNIXTIME","TO_UTF8","TRANSFORM","TRANSFORM_KEYS","TRANSFORM_VALUES","TRANSLATE","TRIM","TRIM_ARRAY","TRUNCATE","TRY","TRY_CAST","TYPEOF","UPPER","URL_DECODE","URL_ENCODE","URL_EXTRACT_FRAGMENT","URL_EXTRACT_HOST","URL_EXTRACT_PARAMETER","URL_EXTRACT_PATH","URL_EXTRACT_PORT","URL_EXTRACT_PROTOCOL","URL_EXTRACT_QUERY","UUID","VALUES_AT_QUANTILES","VALUE_AT_QUANTILE","VARIANCE","VAR_POP","VAR_SAMP","VERSION","WEEK","WEEK_OF_YEAR","WIDTH_BUCKET","WILSON_INTERVAL_LOWER","WILSON_INTERVAL_UPPER","WITH_TIMEZONE","WORD_STEM","XXHASH64","YEAR","YEAR_OF_WEEK","YOW","ZIP","ZIP_WITH"],rowPattern:["CLASSIFIER","FIRST","LAST","MATCH_NUMBER","NEXT","PERMUTE","PREV"]});var ym=Te({all:["ABSENT","ADD","ADMIN","AFTER","ALL","ALTER","ANALYZE","AND","ANY","ARRAY","AS","ASC","AT","AUTHORIZATION","BERNOULLI","BETWEEN","BOTH","BY","CALL","CASCADE","CASE","CATALOGS","COLUMN","COLUMNS","COMMENT","COMMIT","COMMITTED","CONDITIONAL","CONSTRAINT","COPARTITION","CREATE","CROSS","CUBE","CURRENT","CURRENT_PATH","CURRENT_ROLE","DATA","DEALLOCATE","DEFAULT","DEFINE","DEFINER","DELETE","DENY","DESC","DESCRIBE","DESCRIPTOR","DISTINCT","DISTRIBUTED","DOUBLE","DROP","ELSE","EMPTY","ENCODING","END","ERROR","ESCAPE","EXCEPT","EXCLUDING","EXECUTE","EXISTS","EXPLAIN","FALSE","FETCH","FINAL","FIRST","FOLLOWING","FOR","FROM","FULL","FUNCTIONS","GRANT","GRANTED","GRANTS","GRAPHVIZ","GROUP","GROUPING","GROUPS","HAVING","IGNORE","IN","INCLUDING","INITIAL","INNER","INPUT","INSERT","INTERSECT","INTERVAL","INTO","INVOKER","IO","IS","ISOLATION","JOIN","JSON","JSON_ARRAY","JSON_OBJECT","KEEP","KEY","KEYS","LAST","LATERAL","LEADING","LEFT","LEVEL","LIKE","LIMIT","LOCAL","LOGICAL","MATCH","MATCHED","MATCHES","MATCH_RECOGNIZE","MATERIALIZED","MEASURES","NATURAL","NEXT","NFC","NFD","NFKC","NFKD","NO","NONE","NOT","NULL","NULLS","OBJECT","OF","OFFSET","OMIT","ON","ONE","ONLY","OPTION","OR","ORDER","ORDINALITY","OUTER","OUTPUT","OVER","OVERFLOW","PARTITION","PARTITIONS","PASSING","PAST","PATH","PATTERN","PER","PERMUTE","PRECEDING","PRECISION","PREPARE","PRIVILEGES","PROPERTIES","PRUNE","QUOTES","RANGE","READ","RECURSIVE","REFRESH","RENAME","REPEATABLE","RESET","RESPECT","RESTRICT","RETURNING","REVOKE","RIGHT","ROLE","ROLES","ROLLBACK","ROLLUP","ROW","ROWS","RUNNING","SCALAR","SCHEMA","SCHEMAS","SECURITY","SEEK","SELECT","SERIALIZABLE","SESSION","SET","SETS","SHOW","SKIP","SOME","START","STATS","STRING","SUBSET","SYSTEM","TABLE","TABLES","TABLESAMPLE","TEXT","THEN","TIES","TIME","TIMESTAMP","TO","TRAILING","TRANSACTION","TRUE","TYPE","UESCAPE","UNBOUNDED","UNCOMMITTED","UNCONDITIONAL","UNION","UNIQUE","UNKNOWN","UNMATCHED","UNNEST","UPDATE","USE","USER","USING","UTF16","UTF32","UTF8","VALIDATE","VALUE","VALUES","VERBOSE","VIEW","WHEN","WHERE","WINDOW","WITH","WITHIN","WITHOUT","WORK","WRAPPER","WRITE","ZONE"],types:["BIGINT","INT","INTEGER","SMALLINT","TINYINT","BOOLEAN","DATE","DECIMAL","REAL","DOUBLE","HYPERLOGLOG","QDIGEST","TDIGEST","P4HYPERLOGLOG","INTERVAL","TIMESTAMP","TIME","VARBINARY","VARCHAR","CHAR","ROW","ARRAY","MAP","JSON","JSON2016","IPADDRESS","GEOMETRY","UUID","SETDIGEST","JONIREGEXP","RE2JREGEXP","LIKEPATTERN","COLOR","CODEPOINTS","FUNCTION","JSONPATH"]});var _C=re(["SELECT [ALL | DISTINCT]"]),LC=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY [ALL | DISTINCT]","HAVING","WINDOW","PARTITION BY","ORDER BY","LIMIT","OFFSET","FETCH {FIRST | NEXT}","INSERT INTO","VALUES","SET","CREATE [OR REPLACE] [MATERIALIZED] VIEW","CREATE TABLE [IF NOT EXISTS]","MATCH_RECOGNIZE","MEASURES","ONE ROW PER MATCH","ALL ROWS PER MATCH","AFTER MATCH","PATTERN","SUBSET","DEFINE"]),bm=re(["UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","ADD COLUMN [IF NOT EXISTS]","DROP COLUMN [IF EXISTS]","RENAME COLUMN [IF EXISTS]","RENAME TO","SET AUTHORIZATION [USER | ROLE]","SET PROPERTIES","EXECUTE","TRUNCATE TABLE","ALTER SCHEMA","ALTER MATERIALIZED VIEW","ALTER VIEW","CREATE SCHEMA","CREATE ROLE","DROP SCHEMA","DROP MATERIALIZED VIEW","DROP VIEW","DROP ROLE","EXPLAIN","ANALYZE","EXPLAIN ANALYZE","EXPLAIN ANALYZE VERBOSE","USE","COMMENT ON TABLE","COMMENT ON COLUMN","DESCRIBE INPUT","DESCRIBE OUTPUT","REFRESH MATERIALIZED VIEW","RESET SESSION","SET SESSION","SET PATH","SET TIME ZONE","SHOW GRANTS","SHOW CREATE TABLE","SHOW CREATE SCHEMA","SHOW CREATE VIEW","SHOW CREATE MATERIALIZED VIEW","SHOW TABLES","SHOW SCHEMAS","SHOW CATALOGS","SHOW COLUMNS","SHOW STATS FOR","SHOW ROLES","SHOW CURRENT ROLES","SHOW ROLE GRANTS","SHOW FUNCTIONS","SHOW SESSION"]),CC=re(["UNION [ALL | DISTINCT]","EXCEPT [ALL | DISTINCT]","INTERSECT [ALL | DISTINCT]"]),wC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL [INNER] JOIN","NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN"]),yC=re(["{ROWS | RANGE | GROUPS} BETWEEN","IS [NOT] DISTINCT FROM"]),Dm={tokenizerOptions:{reservedSelect:_C,reservedClauses:[...LC,...bm],reservedSetOperations:CC,reservedJoins:wC,reservedPhrases:yC,reservedKeywords:ym,reservedFunctionNames:wm,extraParens:["[]","{}"],stringTypes:[{quote:"''-qq",prefixes:["U&"]},{quote:"''-raw",prefixes:["X"],requirePrefix:!0}],identTypes:['""-qq'],paramTypes:{positional:!0},operators:["%","->","=>",":","||","|","^","$"]},formatOptions:{onelineClauses:bm}};var Pm=Te({aggregate:["APPROX_COUNT_DISTINCT","AVG","CHECKSUM_AGG","COUNT","COUNT_BIG","GROUPING","GROUPING_ID","MAX","MIN","STDEV","STDEVP","SUM","VAR","VARP"],analytic:["CUME_DIST","FIRST_VALUE","LAG","LAST_VALUE","LEAD","PERCENTILE_CONT","PERCENTILE_DISC","PERCENT_RANK","Collation - COLLATIONPROPERTY","Collation - TERTIARY_WEIGHTS"],configuration:["@@DBTS","@@LANGID","@@LANGUAGE","@@LOCK_TIMEOUT","@@MAX_CONNECTIONS","@@MAX_PRECISION","@@NESTLEVEL","@@OPTIONS","@@REMSERVER","@@SERVERNAME","@@SERVICENAME","@@SPID","@@TEXTSIZE","@@VERSION"],conversion:["CAST","CONVERT","PARSE","TRY_CAST","TRY_CONVERT","TRY_PARSE"],cryptographic:["ASYMKEY_ID","ASYMKEYPROPERTY","CERTPROPERTY","CERT_ID","CRYPT_GEN_RANDOM","DECRYPTBYASYMKEY","DECRYPTBYCERT","DECRYPTBYKEY","DECRYPTBYKEYAUTOASYMKEY","DECRYPTBYKEYAUTOCERT","DECRYPTBYPASSPHRASE","ENCRYPTBYASYMKEY","ENCRYPTBYCERT","ENCRYPTBYKEY","ENCRYPTBYPASSPHRASE","HASHBYTES","IS_OBJECTSIGNED","KEY_GUID","KEY_ID","KEY_NAME","SIGNBYASYMKEY","SIGNBYCERT","SYMKEYPROPERTY","VERIFYSIGNEDBYCERT","VERIFYSIGNEDBYASYMKEY"],cursor:["@@CURSOR_ROWS","@@FETCH_STATUS","CURSOR_STATUS"],dataType:["DATALENGTH","IDENT_CURRENT","IDENT_INCR","IDENT_SEED","IDENTITY","SQL_VARIANT_PROPERTY"],datetime:["@@DATEFIRST","CURRENT_TIMESTAMP","CURRENT_TIMEZONE","CURRENT_TIMEZONE_ID","DATEADD","DATEDIFF","DATEDIFF_BIG","DATEFROMPARTS","DATENAME","DATEPART","DATETIME2FROMPARTS","DATETIMEFROMPARTS","DATETIMEOFFSETFROMPARTS","DAY","EOMONTH","GETDATE","GETUTCDATE","ISDATE","MONTH","SMALLDATETIMEFROMPARTS","SWITCHOFFSET","SYSDATETIME","SYSDATETIMEOFFSET","SYSUTCDATETIME","TIMEFROMPARTS","TODATETIMEOFFSET","YEAR","JSON","ISJSON","JSON_VALUE","JSON_QUERY","JSON_MODIFY"],mathematical:["ABS","ACOS","ASIN","ATAN","ATN2","CEILING","COS","COT","DEGREES","EXP","FLOOR","LOG","LOG10","PI","POWER","RADIANS","RAND","ROUND","SIGN","SIN","SQRT","SQUARE","TAN","CHOOSE","GREATEST","IIF","LEAST"],metadata:["@@PROCID","APP_NAME","APPLOCK_MODE","APPLOCK_TEST","ASSEMBLYPROPERTY","COL_LENGTH","COL_NAME","COLUMNPROPERTY","DATABASEPROPERTYEX","DB_ID","DB_NAME","FILE_ID","FILE_IDEX","FILE_NAME","FILEGROUP_ID","FILEGROUP_NAME","FILEGROUPPROPERTY","FILEPROPERTY","FILEPROPERTYEX","FULLTEXTCATALOGPROPERTY","FULLTEXTSERVICEPROPERTY","INDEX_COL","INDEXKEY_PROPERTY","INDEXPROPERTY","NEXT VALUE FOR","OBJECT_DEFINITION","OBJECT_ID","OBJECT_NAME","OBJECT_SCHEMA_NAME","OBJECTPROPERTY","OBJECTPROPERTYEX","ORIGINAL_DB_NAME","PARSENAME","SCHEMA_ID","SCHEMA_NAME","SCOPE_IDENTITY","SERVERPROPERTY","STATS_DATE","TYPE_ID","TYPE_NAME","TYPEPROPERTY"],ranking:["DENSE_RANK","NTILE","RANK","ROW_NUMBER","PUBLISHINGSERVERNAME"],security:["CERTENCODED","CERTPRIVATEKEY","CURRENT_USER","DATABASE_PRINCIPAL_ID","HAS_DBACCESS","HAS_PERMS_BY_NAME","IS_MEMBER","IS_ROLEMEMBER","IS_SRVROLEMEMBER","LOGINPROPERTY","ORIGINAL_LOGIN","PERMISSIONS","PWDENCRYPT","PWDCOMPARE","SESSION_USER","SESSIONPROPERTY","SUSER_ID","SUSER_NAME","SUSER_SID","SUSER_SNAME","SYSTEM_USER","USER","USER_ID","USER_NAME"],string:["ASCII","CHAR","CHARINDEX","CONCAT","CONCAT_WS","DIFFERENCE","FORMAT","LEFT","LEN","LOWER","LTRIM","NCHAR","PATINDEX","QUOTENAME","REPLACE","REPLICATE","REVERSE","RIGHT","RTRIM","SOUNDEX","SPACE","STR","STRING_AGG","STRING_ESCAPE","STUFF","SUBSTRING","TRANSLATE","TRIM","UNICODE","UPPER"],system:["$PARTITION","@@ERROR","@@IDENTITY","@@PACK_RECEIVED","@@ROWCOUNT","@@TRANCOUNT","BINARY_CHECKSUM","CHECKSUM","COMPRESS","CONNECTIONPROPERTY","CONTEXT_INFO","CURRENT_REQUEST_ID","CURRENT_TRANSACTION_ID","DECOMPRESS","ERROR_LINE","ERROR_MESSAGE","ERROR_NUMBER","ERROR_PROCEDURE","ERROR_SEVERITY","ERROR_STATE","FORMATMESSAGE","GET_FILESTREAM_TRANSACTION_CONTEXT","GETANSINULL","HOST_ID","HOST_NAME","ISNULL","ISNUMERIC","MIN_ACTIVE_ROWVERSION","NEWID","NEWSEQUENTIALID","ROWCOUNT_BIG","SESSION_CONTEXT","XACT_STATE"],statistical:["@@CONNECTIONS","@@CPU_BUSY","@@IDLE","@@IO_BUSY","@@PACK_SENT","@@PACKET_ERRORS","@@TIMETICKS","@@TOTAL_ERRORS","@@TOTAL_READ","@@TOTAL_WRITE","TEXTPTR","TEXTVALID"],trigger:["COLUMNS_UPDATED","EVENTDATA","TRIGGER_NESTLEVEL","UPDATE"],caseAbbrev:["COALESCE","NULLIF"],dataTypes:["DECIMAL","NUMERIC","FLOAT","REAL","DATETIME2","DATETIMEOFFSET","TIME","CHAR","VARCHAR","NCHAR","NVARCHAR","BINARY","VARBINARY"]});var Mm=Te({standard:["ADD","ALL","ALTER","AND","ANY","AS","ASC","AUTHORIZATION","BACKUP","BEGIN","BETWEEN","BREAK","BROWSE","BULK","BY","CASCADE","CHECK","CHECKPOINT","CLOSE","CLUSTERED","COALESCE","COLLATE","COLUMN","COMMIT","COMPUTE","CONSTRAINT","CONTAINS","CONTAINSTABLE","CONTINUE","CONVERT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATABASE","DBCC","DEALLOCATE","DECLARE","DEFAULT","DELETE","DENY","DESC","DISK","DISTINCT","DISTRIBUTED","DOUBLE","DROP","DUMP","ERRLVL","ESCAPE","EXEC","EXECUTE","EXISTS","EXIT","EXTERNAL","FETCH","FILE","FILLFACTOR","FOR","FOREIGN","FREETEXT","FREETEXTTABLE","FROM","FULL","FUNCTION","GOTO","GRANT","GROUP","HAVING","HOLDLOCK","IDENTITY","IDENTITYCOL","IDENTITY_INSERT","IF","IN","INDEX","INNER","INSERT","INTERSECT","INTO","IS","JOIN","KEY","KILL","LEFT","LIKE","LINENO","LOAD","MERGE","NATIONAL","NOCHECK","NONCLUSTERED","NOT","NULL","NULLIF","OF","OFF","OFFSETS","ON","OPEN","OPENDATASOURCE","OPENQUERY","OPENROWSET","OPENXML","OPTION","OR","ORDER","OUTER","OVER","PERCENT","PIVOT","PLAN","PRECISION","PRIMARY","PRINT","PROC","PROCEDURE","PUBLIC","RAISERROR","READ","READTEXT","RECONFIGURE","REFERENCES","REPLICATION","RESTORE","RESTRICT","RETURN","REVERT","REVOKE","RIGHT","ROLLBACK","ROWCOUNT","ROWGUIDCOL","RULE","SAVE","SCHEMA","SECURITYAUDIT","SELECT","SEMANTICKEYPHRASETABLE","SEMANTICSIMILARITYDETAILSTABLE","SEMANTICSIMILARITYTABLE","SESSION_USER","SET","SETUSER","SHUTDOWN","SOME","STATISTICS","SYSTEM_USER","TABLE","TABLESAMPLE","TEXTSIZE","THEN","TO","TOP","TRAN","TRANSACTION","TRIGGER","TRUNCATE","TRY_CONVERT","TSEQUAL","UNION","UNIQUE","UNPIVOT","UPDATE","UPDATETEXT","USE","USER","VALUES","VARYING","VIEW","WAITFOR","WHERE","WHILE","WITH","WITHIN GROUP","WRITETEXT"],odbc:["ABSOLUTE","ACTION","ADA","ADD","ALL","ALLOCATE","ALTER","AND","ANY","ARE","AS","ASC","ASSERTION","AT","AUTHORIZATION","AVG","BEGIN","BETWEEN","BIT","BIT_LENGTH","BOTH","BY","CASCADE","CASCADED","CAST","CATALOG","CHAR","CHARACTER","CHARACTER_LENGTH","CHAR_LENGTH","CHECK","CLOSE","COALESCE","COLLATE","COLLATION","COLUMN","COMMIT","CONNECT","CONNECTION","CONSTRAINT","CONSTRAINTS","CONTINUE","CONVERT","CORRESPONDING","COUNT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","DATE","DAY","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DESCRIBE","DESCRIPTOR","DIAGNOSTICS","DISCONNECT","DISTINCT","DOMAIN","DOUBLE","DROP","END-EXEC","ESCAPE","EXCEPTION","EXEC","EXECUTE","EXISTS","EXTERNAL","EXTRACT","FALSE","FETCH","FIRST","FLOAT","FOR","FOREIGN","FORTRAN","FOUND","FROM","FULL","GET","GLOBAL","GO","GOTO","GRANT","GROUP","HAVING","HOUR","IDENTITY","IMMEDIATE","IN","INCLUDE","INDEX","INDICATOR","INITIALLY","INNER","INPUT","INSENSITIVE","INSERT","INT","INTEGER","INTERSECT","INTERVAL","INTO","IS","ISOLATION","JOIN","KEY","LANGUAGE","LAST","LEADING","LEFT","LEVEL","LIKE","LOCAL","LOWER","MATCH","MAX","MIN","MINUTE","MODULE","MONTH","NAMES","NATIONAL","NATURAL","NCHAR","NEXT","NO","NONE","NOT","NULL","NULLIF","NUMERIC","OCTET_LENGTH","OF","ONLY","OPEN","OPTION","OR","ORDER","OUTER","OUTPUT","OVERLAPS","PAD","PARTIAL","PASCAL","POSITION","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURE","PUBLIC","READ","REAL","REFERENCES","RELATIVE","RESTRICT","REVOKE","RIGHT","ROLLBACK","ROWS","SCHEMA","SCROLL","SECOND","SECTION","SELECT","SESSION","SESSION_USER","SET","SIZE","SMALLINT","SOME","SPACE","SQL","SQLCA","SQLCODE","SQLERROR","SQLSTATE","SQLWARNING","SUBSTRING","SUM","SYSTEM_USER","TABLE","TEMPORARY","TIME","TIMESTAMP","TIMEZONE_HOUR","TIMEZONE_MINUTE","TO","TRAILING","TRANSACTION","TRANSLATE","TRANSLATION","TRIM","TRUE","UNION","UNIQUE","UNKNOWN","UPDATE","UPPER","USAGE","USER","VALUE","VALUES","VARCHAR","VARYING","VIEW","WHENEVER","WHERE","WITH","WORK","WRITE","YEAR","ZONE"]});var bC=re(["SELECT [ALL | DISTINCT]"]),DC=re(["WITH","INTO","FROM","WHERE","GROUP BY","HAVING","WINDOW","PARTITION BY","ORDER BY","OFFSET","FETCH {FIRST | NEXT}","INSERT [INTO]","VALUES","SET","MERGE [INTO]","WHEN [NOT] MATCHED [BY TARGET | BY SOURCE] [THEN]","UPDATE SET","CREATE [OR ALTER] [MATERIALIZED] VIEW","CREATE TABLE","CREATE [OR ALTER] {PROC | PROCEDURE}"]),vm=re(["UPDATE","WHERE CURRENT OF","DELETE [FROM]","DROP TABLE [IF EXISTS]","ALTER TABLE","ADD","DROP COLUMN [IF EXISTS]","ALTER COLUMN","TRUNCATE TABLE","ADD SENSITIVITY CLASSIFICATION","ADD SIGNATURE","AGGREGATE","ANSI_DEFAULTS","ANSI_NULLS","ANSI_NULL_DFLT_OFF","ANSI_NULL_DFLT_ON","ANSI_PADDING","ANSI_WARNINGS","APPLICATION ROLE","ARITHABORT","ARITHIGNORE","ASSEMBLY","ASYMMETRIC KEY","AUTHORIZATION","AVAILABILITY GROUP","BACKUP","BACKUP CERTIFICATE","BACKUP MASTER KEY","BACKUP SERVICE MASTER KEY","BEGIN CONVERSATION TIMER","BEGIN DIALOG CONVERSATION","BROKER PRIORITY","BULK INSERT","CERTIFICATE","CLOSE MASTER KEY","CLOSE SYMMETRIC KEY","COLLATE","COLUMN ENCRYPTION KEY","COLUMN MASTER KEY","COLUMNSTORE INDEX","CONCAT_NULL_YIELDS_NULL","CONTEXT_INFO","CONTRACT","CREDENTIAL","CRYPTOGRAPHIC PROVIDER","CURSOR_CLOSE_ON_COMMIT","DATABASE","DATABASE AUDIT SPECIFICATION","DATABASE ENCRYPTION KEY","DATABASE HADR","DATABASE SCOPED CONFIGURATION","DATABASE SCOPED CREDENTIAL","DATABASE SET","DATEFIRST","DATEFORMAT","DEADLOCK_PRIORITY","DENY","DENY XML","DISABLE TRIGGER","ENABLE TRIGGER","END CONVERSATION","ENDPOINT","EVENT NOTIFICATION","EVENT SESSION","EXECUTE AS","EXTERNAL DATA SOURCE","EXTERNAL FILE FORMAT","EXTERNAL LANGUAGE","EXTERNAL LIBRARY","EXTERNAL RESOURCE POOL","EXTERNAL TABLE","FIPS_FLAGGER","FMTONLY","FORCEPLAN","FULLTEXT CATALOG","FULLTEXT INDEX","FULLTEXT STOPLIST","FUNCTION","GET CONVERSATION GROUP","GET_TRANSMISSION_STATUS","GRANT","GRANT XML","IDENTITY_INSERT","IMPLICIT_TRANSACTIONS","INDEX","LANGUAGE","LOCK_TIMEOUT","LOGIN","MASTER KEY","MESSAGE TYPE","MOVE CONVERSATION","NOCOUNT","NOEXEC","NUMERIC_ROUNDABORT","OFFSETS","OPEN MASTER KEY","OPEN SYMMETRIC KEY","PARSEONLY","PARTITION FUNCTION","PARTITION SCHEME","PROCEDURE","QUERY_GOVERNOR_COST_LIMIT","QUEUE","QUOTED_IDENTIFIER","RECEIVE","REMOTE SERVICE BINDING","REMOTE_PROC_TRANSACTIONS","RESOURCE GOVERNOR","RESOURCE POOL","RESTORE","RESTORE FILELISTONLY","RESTORE HEADERONLY","RESTORE LABELONLY","RESTORE MASTER KEY","RESTORE REWINDONLY","RESTORE SERVICE MASTER KEY","RESTORE VERIFYONLY","REVERT","REVOKE","REVOKE XML","ROLE","ROUTE","ROWCOUNT","RULE","SCHEMA","SEARCH PROPERTY LIST","SECURITY POLICY","SELECTIVE XML INDEX","SEND","SENSITIVITY CLASSIFICATION","SEQUENCE","SERVER AUDIT","SERVER AUDIT SPECIFICATION","SERVER CONFIGURATION","SERVER ROLE","SERVICE","SERVICE MASTER KEY","SETUSER","SHOWPLAN_ALL","SHOWPLAN_TEXT","SHOWPLAN_XML","SIGNATURE","SPATIAL INDEX","STATISTICS","STATISTICS IO","STATISTICS PROFILE","STATISTICS TIME","STATISTICS XML","SYMMETRIC KEY","SYNONYM","TABLE","TABLE IDENTITY","TEXTSIZE","TRANSACTION ISOLATION LEVEL","TRIGGER","TYPE","UPDATE STATISTICS","USER","WORKLOAD GROUP","XACT_ABORT","XML INDEX","XML SCHEMA COLLECTION"]),PC=re(["UNION [ALL]","EXCEPT","INTERSECT"]),MC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","{CROSS | OUTER} APPLY"]),vC=re(["ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]","{ROWS | RANGE} BETWEEN"]),xm={tokenizerOptions:{reservedSelect:bC,reservedClauses:[...DC,...vm],reservedSetOperations:PC,reservedJoins:MC,reservedPhrases:vC,reservedKeywords:Mm,reservedFunctionNames:Pm,nestedBlockComments:!0,stringTypes:[{quote:"''-qq",prefixes:["N"]}],identTypes:['""-qq',"[]"],identChars:{first:"#@",rest:"#@$"},paramTypes:{named:["@"],quoted:["@"]},operators:["%","&","|","^","~","!<","!>","+=","-=","*=","/=","%=","|=","&=","^=","::"]},formatOptions:{alwaysDenseOperators:["::"],onelineClauses:vm}};var Um=Te({all:["ABORT","ABSOLUTE","ACCESS","ACCESSIBLE","ACCOUNT","ACTION","ACTIVE","ADD","ADMIN","AFTER","AGAINST","AGGREGATE","AGGREGATES","AGGREGATOR","AGGREGATOR_ID","AGGREGATOR_PLAN_HASH","AGGREGATORS","ALGORITHM","ALL","ALSO","ALTER","ALWAYS","ANALYZE","AND","ANY","ARGHISTORY","ARRANGE","ARRANGEMENT","ARRAY","AS","ASC","ASCII","ASENSITIVE","ASM","ASSERTION","ASSIGNMENT","AST","ASYMMETRIC","ASYNC","AT","ATTACH","ATTRIBUTE","AUTHORIZATION","AUTO","AUTO_INCREMENT","AUTO_REPROVISION","AUTOSTATS","AUTOSTATS_CARDINALITY_MODE","AUTOSTATS_ENABLED","AUTOSTATS_HISTOGRAM_MODE","AUTOSTATS_SAMPLING","AVAILABILITY","AVG","AVG_ROW_LENGTH","AVRO","AZURE","BACKGROUND","_BACKGROUND_THREADS_FOR_CLEANUP","BACKUP","BACKUP_HISTORY","BACKUP_ID","BACKWARD","BATCH","BATCHES","BATCH_INTERVAL","_BATCH_SIZE_LIMIT","BEFORE","BEGIN","BETWEEN","BIGINT","BINARY","_BINARY","BIT","BLOB","BOOL","BOOLEAN","BOOTSTRAP","BOTH","_BT","BTREE","BUCKET_COUNT","BUCKETS","BY","BYTE","BYTE_LENGTH","CACHE","CALL","CALL_FOR_PIPELINE","CALLED","CAPTURE","CASCADE","CASCADED","CASE","CATALOG","CHAIN","CHANGE","CHAR","CHARACTER","CHARACTERISTICS","CHARSET","CHECK","CHECKPOINT","_CHECK_CAN_CONNECT","_CHECK_CONSISTENCY","CHECKSUM","_CHECKSUM","CLASS","CLEAR","CLIENT","CLIENT_FOUND_ROWS","CLOSE","CLUSTER","CLUSTERED","CNF","COALESCE","COLLATE","COLLATION","COLUMN","COLUMNAR","COLUMNS","COLUMNSTORE","COLUMNSTORE_SEGMENT_ROWS","COMMENT","COMMENTS","COMMIT","COMMITTED","_COMMIT_LOG_TAIL","COMPACT","COMPILE","COMPRESSED","COMPRESSION","CONCURRENT","CONCURRENTLY","CONDITION","CONFIGURATION","CONNECTION","CONNECTIONS","CONFIG","CONSTRAINT","CONTAINS","CONTENT","CONTINUE","_CONTINUE_REPLAY","CONVERSION","CONVERT","COPY","_CORE","COST","CREATE","CREDENTIALS","CROSS","CUBE","CSV","CUME_DIST","CURRENT","CURRENT_CATALOG","CURRENT_DATE","CURRENT_SCHEMA","CURRENT_SECURITY_GROUPS","CURRENT_SECURITY_ROLES","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURSOR","CYCLE","DATA","DATABASE","DATABASES","DATE","DATETIME","DAY","DAY_HOUR","DAY_MICROSECOND","DAY_MINUTE","DAY_SECOND","DEALLOCATE","DEC","DECIMAL","DECLARE","DEFAULT","DEFAULTS","DEFERRABLE","DEFERRED","DEFINED","DEFINER","DELAYED","DELAY_KEY_WRITE","DELETE","DELIMITER","DELIMITERS","DENSE_RANK","DESC","DESCRIBE","DETACH","DETERMINISTIC","DICTIONARY","DIFFERENTIAL","DIRECTORY","DISABLE","DISCARD","_DISCONNECT","DISK","DISTINCT","DISTINCTROW","DISTRIBUTED_JOINS","DIV","DO","DOCUMENT","DOMAIN","DOUBLE","DROP","_DROP_PROFILE","DUAL","DUMP","DUPLICATE","DURABILITY","DYNAMIC","EARLIEST","EACH","ECHO","ELECTION","ELSE","ELSEIF","ENABLE","ENCLOSED","ENCODING","ENCRYPTED","END","ENGINE","ENGINES","ENUM","ERRORS","ESCAPE","ESCAPED","ESTIMATE","EVENT","EVENTS","EXCEPT","EXCLUDE","EXCLUDING","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXPLAIN","EXTENDED","EXTENSION","EXTERNAL","EXTERNAL_HOST","EXTERNAL_PORT","EXTRACTOR","EXTRACTORS","EXTRA_JOIN","_FAILOVER","FAILED_LOGIN_ATTEMPTS","FAILURE","FALSE","FAMILY","FAULT","FETCH","FIELDS","FILE","FILES","FILL","FIX_ALTER","FIXED","FLOAT","FLOAT4","FLOAT8","FLUSH","FOLLOWING","FOR","FORCE","FORCE_COMPILED_MODE","FORCE_INTERPRETER_MODE","FOREGROUND","FOREIGN","FORMAT","FORWARD","FREEZE","FROM","FS","_FSYNC","FULL","FULLTEXT","FUNCTION","FUNCTIONS","GC","GCS","GET_FORMAT","_GC","_GCX","GENERATE","GEOGRAPHY","GEOGRAPHYPOINT","GEOMETRY","GEOMETRYPOINT","GLOBAL","_GLOBAL_VERSION_TIMESTAMP","GRANT","GRANTED","GRANTS","GROUP","GROUPING","GROUPS","GZIP","HANDLE","HANDLER","HARD_CPU_LIMIT_PERCENTAGE","HASH","HAS_TEMP_TABLES","HAVING","HDFS","HEADER","HEARTBEAT_NO_LOGGING","HIGH_PRIORITY","HISTOGRAM","HOLD","HOLDING","HOST","HOSTS","HOUR","HOUR_MICROSECOND","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IDENTITY","IF","IGNORE","ILIKE","IMMEDIATE","IMMUTABLE","IMPLICIT","IMPORT","IN","INCLUDING","INCREMENT","INCREMENTAL","INDEX","INDEXES","INFILE","INHERIT","INHERITS","_INIT_PROFILE","INIT","INITIALIZE","INITIALLY","INJECT","INLINE","INNER","INOUT","INPUT","INSENSITIVE","INSERT","INSERT_METHOD","INSTANCE","INSTEAD","IN","INT","INT1","INT2","INT3","INT4","INT8","INTEGER","_INTERNAL_DYNAMIC_TYPECAST","INTERPRETER_MODE","INTERSECT","INTERVAL","INTO","INVOKER","ISOLATION","ITERATE","JOIN","JSON","KAFKA","KEY","KEY_BLOCK_SIZE","KEYS","KILL","KILLALL","LABEL","LAG","LANGUAGE","LARGE","LAST","LAST_VALUE","LATERAL","LATEST","LC_COLLATE","LC_CTYPE","LEAD","LEADING","LEAF","LEAKPROOF","LEAVE","LEAVES","LEFT","LEVEL","LICENSE","LIKE","LIMIT","LINES","LISTEN","LLVM","LOADDATA_WHERE","LOAD","LOCAL","LOCALTIME","LOCALTIMESTAMP","LOCATION","LOCK","LONG","LONGBLOB","LONGTEXT","LOOP","LOW_PRIORITY","_LS","LZ4","MANAGEMENT","_MANAGEMENT_THREAD","MAPPING","MASTER","MATCH","MATERIALIZED","MAXVALUE","MAX_CONCURRENCY","MAX_ERRORS","MAX_PARTITIONS_PER_BATCH","MAX_QUEUE_DEPTH","MAX_RETRIES_PER_BATCH_PARTITION","MAX_ROWS","MBC","MPL","MEDIUMBLOB","MEDIUMINT","MEDIUMTEXT","MEMBER","MEMORY","MEMORY_PERCENTAGE","_MEMSQL_TABLE_ID_LOOKUP","MEMSQL","MEMSQL_DESERIALIZE","MEMSQL_IMITATING_KAFKA","MEMSQL_SERIALIZE","MERGE","METADATA","MICROSECOND","MIDDLEINT","MIN_ROWS","MINUS","MINUTE_MICROSECOND","MINUTE_SECOND","MINVALUE","MOD","MODE","MODEL","MODIFIES","MODIFY","MONTH","MOVE","MPL","NAMES","NAMED","NAMESPACE","NATIONAL","NATURAL","NCHAR","NEXT","NO","NODE","NONE","NO_QUERY_REWRITE","NOPARAM","NOT","NOTHING","NOTIFY","NOWAIT","NO_WRITE_TO_BINLOG","NO_QUERY_REWRITE","NORELY","NTH_VALUE","NTILE","NULL","NULLCOLS","NULLS","NUMERIC","NVARCHAR","OBJECT","OF","OFF","OFFLINE","OFFSET","OFFSETS","OIDS","ON","ONLINE","ONLY","OPEN","OPERATOR","OPTIMIZATION","OPTIMIZE","OPTIMIZER","OPTIMIZER_STATE","OPTION","OPTIONS","OPTIONALLY","OR","ORDER","ORDERED_SERIALIZE","ORPHAN","OUT","OUT_OF_ORDER","OUTER","OUTFILE","OVER","OVERLAPS","OVERLAY","OWNED","OWNER","PACK_KEYS","PAIRED","PARSER","PARQUET","PARTIAL","PARTITION","PARTITION_ID","PARTITIONING","PARTITIONS","PASSING","PASSWORD","PASSWORD_LOCK_TIME","PAUSE","_PAUSE_REPLAY","PERIODIC","PERSISTED","PIPELINE","PIPELINES","PLACING","PLAN","PLANS","PLANCACHE","PLUGINS","POOL","POOLS","PORT","PRECEDING","PRECISION","PREPARE","PRESERVE","PRIMARY","PRIOR","PRIVILEGES","PROCEDURAL","PROCEDURE","PROCEDURES","PROCESS","PROCESSLIST","PROFILE","PROFILES","PROGRAM","PROMOTE","PROXY","PURGE","QUARTER","QUERIES","QUERY","QUERY_TIMEOUT","QUEUE","RANGE","RANK","READ","_READ","READS","REAL","REASSIGN","REBALANCE","RECHECK","RECORD","RECURSIVE","REDUNDANCY","REDUNDANT","REF","REFERENCE","REFERENCES","REFRESH","REGEXP","REINDEX","RELATIVE","RELEASE","RELOAD","RELY","REMOTE","REMOVE","RENAME","REPAIR","_REPAIR_TABLE","REPEAT","REPEATABLE","_REPL","_REPROVISIONING","REPLACE","REPLICA","REPLICATE","REPLICATING","REPLICATION","REQUIRE","RESOURCE","RESOURCE_POOL","RESET","RESTART","RESTORE","RESTRICT","RESULT","_RESURRECT","RETRY","RETURN","RETURNING","RETURNS","REVERSE","RG_POOL","REVOKE","RIGHT","RIGHT_ANTI_JOIN","RIGHT_SEMI_JOIN","RIGHT_STRAIGHT_JOIN","RLIKE","ROLES","ROLLBACK","ROLLUP","ROUTINE","ROW","ROW_COUNT","ROW_FORMAT","ROW_NUMBER","ROWS","ROWSTORE","RULE","_RPC","RUNNING","S3","SAFE","SAVE","SAVEPOINT","SCALAR","SCHEMA","SCHEMAS","SCHEMA_BINDING","SCROLL","SEARCH","SECOND","SECOND_MICROSECOND","SECURITY","SELECT","SEMI_JOIN","_SEND_THREADS","SENSITIVE","SEPARATOR","SEQUENCE","SEQUENCES","SERIAL","SERIALIZABLE","SERIES","SERVICE_USER","SERVER","SESSION","SESSION_USER","SET","SETOF","SECURITY_LISTS_INTERSECT","SHA","SHARD","SHARDED","SHARDED_ID","SHARE","SHOW","SHUTDOWN","SIGNAL","SIGNED","SIMILAR","SIMPLE","SITE","SKIP","SKIPPED_BATCHES","__SLEEP","SMALLINT","SNAPSHOT","_SNAPSHOT","_SNAPSHOTS","SOFT_CPU_LIMIT_PERCENTAGE","SOME","SONAME","SPARSE","SPATIAL","SPATIAL_CHECK_INDEX","SPECIFIC","SQL","SQL_BIG_RESULT","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQLEXCEPTION","SQL_MODE","SQL_NO_CACHE","SQL_NO_LOGGING","SQL_SMALL_RESULT","SQLSTATE","SQLWARNING","STDIN","STDOUT","STOP","STORAGE","STRAIGHT_JOIN","STRICT","STRING","STRIP","SUCCESS","SUPER","SYMMETRIC","SYNC_SNAPSHOT","SYNC","_SYNC","_SYNC2","_SYNC_PARTITIONS","_SYNC_SNAPSHOT","SYNCHRONIZE","SYSID","SYSTEM","TABLE","TABLE_CHECKSUM","TABLES","TABLESPACE","TAGS","TARGET_SIZE","TASK","TEMP","TEMPLATE","TEMPORARY","TEMPTABLE","_TERM_BUMP","TERMINATE","TERMINATED","TEXT","THEN","TIME","TIMEOUT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIMEZONE","TINYBLOB","TINYINT","TINYTEXT","TO","TRACELOGS","TRADITIONAL","TRAILING","TRANSFORM","TRANSACTION","_TRANSACTIONS_EXPERIMENTAL","TREAT","TRIGGER","TRIGGERS","TRUE","TRUNC","TRUNCATE","TRUSTED","TWO_PHASE","_TWOPCID","TYPE","TYPES","UNBOUNDED","UNCOMMITTED","UNDEFINED","UNDO","UNENCRYPTED","UNENFORCED","UNHOLD","UNICODE","UNION","UNIQUE","_UNITTEST","UNKNOWN","UNLISTEN","_UNLOAD","UNLOCK","UNLOGGED","UNPIVOT","UNSIGNED","UNTIL","UPDATE","UPGRADE","USAGE","USE","USER","USERS","USING","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","_UTF8","VACUUM","VALID","VALIDATE","VALIDATOR","VALUE","VALUES","VARBINARY","VARCHAR","VARCHARACTER","VARIABLES","VARIADIC","VARYING","VERBOSE","VIEW","VOID","VOLATILE","VOTING","WAIT","_WAKE","WARNINGS","WEEK","WHEN","WHERE","WHILE","WHITESPACE","WINDOW","WITH","WITHOUT","WITHIN","_WM_HEARTBEAT","WORK","WORKLOAD","WRAPPER","WRITE","XACT_ID","XOR","YEAR","YEAR_MONTH","YES","ZEROFILL","ZONE"]});var Gm=Te({all:["ABS","ACOS","ADDDATE","ADDTIME","AES_DECRYPT","AES_ENCRYPT","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_COUNT_DISTINCT_ACCUMULATE","APPROX_COUNT_DISTINCT_COMBINE","APPROX_COUNT_DISTINCT_ESTIMATE","APPROX_GEOGRAPHY_INTERSECTS","APPROX_PERCENTILE","ASCII","ASIN","ATAN","ATAN2","AVG","BIN","BINARY","BIT_AND","BIT_COUNT","BIT_OR","BIT_XOR","CAST","CEIL","CEILING","CHAR","CHARACTER_LENGTH","CHAR_LENGTH","CHARSET","COALESCE","COERCIBILITY","COLLATION","COLLECT","CONCAT","CONCAT_WS","CONNECTION_ID","CONV","CONVERT","CONVERT_TZ","COS","COT","COUNT","CUME_DIST","CURDATE","CURRENT_DATE","CURRENT_ROLE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","CURTIME","DATABASE","DATE","DATE_ADD","DATEDIFF","DATE_FORMAT","DATE_SUB","DATE_TRUNC","DAY","DAYNAME","DAYOFMONTH","DAYOFWEEK","DAYOFYEAR","DECODE","DEFAULT","DEGREES","DENSE_RANK","DIV","DOT_PRODUCT","ELT","EUCLIDEAN_DISTANCE","EXP","EXTRACT","FIELD","FIRST","FIRST_VALUE","FLOOR","FORMAT","FOUND_ROWS","FROM_BASE64","FROM_DAYS","FROM_UNIXTIME","GEOGRAPHY_AREA","GEOGRAPHY_CONTAINS","GEOGRAPHY_DISTANCE","GEOGRAPHY_INTERSECTS","GEOGRAPHY_LATITUDE","GEOGRAPHY_LENGTH","GEOGRAPHY_LONGITUDE","GEOGRAPHY_POINT","GEOGRAPHY_WITHIN_DISTANCE","GEOMETRY_AREA","GEOMETRY_CONTAINS","GEOMETRY_DISTANCE","GEOMETRY_FILTER","GEOMETRY_INTERSECTS","GEOMETRY_LENGTH","GEOMETRY_POINT","GEOMETRY_WITHIN_DISTANCE","GEOMETRY_X","GEOMETRY_Y","GREATEST","GROUPING","GROUP_CONCAT","HEX","HIGHLIGHT","HOUR","ICU_VERSION","IF","IFNULL","INET_ATON","INET_NTOA","INET6_ATON","INET6_NTOA","INITCAP","INSERT","INSTR","INTERVAL","IS","IS NULL","JSON_AGG","JSON_ARRAY_CONTAINS_DOUBLE","JSON_ARRAY_CONTAINS_JSON","JSON_ARRAY_CONTAINS_STRING","JSON_ARRAY_PUSH_DOUBLE","JSON_ARRAY_PUSH_JSON","JSON_ARRAY_PUSH_STRING","JSON_DELETE_KEY","JSON_EXTRACT_DOUBLE","JSON_EXTRACT_JSON","JSON_EXTRACT_STRING","JSON_EXTRACT_BIGINT","JSON_GET_TYPE","JSON_LENGTH","JSON_SET_DOUBLE","JSON_SET_JSON","JSON_SET_STRING","JSON_SPLICE_DOUBLE","JSON_SPLICE_JSON","JSON_SPLICE_STRING","LAG","LAST_DAY","LAST_VALUE","LCASE","LEAD","LEAST","LEFT","LENGTH","LIKE","LN","LOCALTIME","LOCALTIMESTAMP","LOCATE","LOG","LOG10","LOG2","LPAD","LTRIM","MATCH","MAX","MD5","MEDIAN","MICROSECOND","MIN","MINUTE","MOD","MONTH","MONTHNAME","MONTHS_BETWEEN","NOT","NOW","NTH_VALUE","NTILE","NULLIF","OCTET_LENGTH","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIVOT","POSITION","POW","POWER","QUARTER","QUOTE","RADIANS","RAND","RANK","REGEXP","REPEAT","REPLACE","REVERSE","RIGHT","RLIKE","ROUND","ROW_COUNT","ROW_NUMBER","RPAD","RTRIM","SCALAR","SCHEMA","SEC_TO_TIME","SHA1","SHA2","SIGMOID","SIGN","SIN","SLEEP","SPLIT","SOUNDEX","SOUNDS LIKE","SOURCE_POS_WAIT","SPACE","SQRT","STDDEV","STDDEV_POP","STDDEV_SAMP","STR_TO_DATE","SUBDATE","SUBSTR","SUBSTRING","SUBSTRING_INDEX","SUM","SYS_GUID","TAN","TIME","TIMEDIFF","TIME_BUCKET","TIME_FORMAT","TIMESTAMP","TIMESTAMPADD","TIMESTAMPDIFF","TIME_TO_SEC","TO_BASE64","TO_CHAR","TO_DAYS","TO_JSON","TO_NUMBER","TO_SECONDS","TO_TIMESTAMP","TRIM","TRUNC","TRUNCATE","UCASE","UNHEX","UNIX_TIMESTAMP","UPDATEXML","UPPER","USER","UTC_DATE","UTC_TIME","UTC_TIMESTAMP","UUID","VALUES","VARIANCE","VAR_POP","VAR_SAMP","VECTOR_SUB","VERSION","WEEK","WEEKDAY","WEEKOFYEAR","YEAR","BIT","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","BIGINT","DECIMAL","DEC","NUMERIC","FIXED","FLOAT","DOUBLE","DOUBLE PRECISION","REAL","DATETIME","TIMESTAMP","TIME","YEAR","CHAR","NATIONAL CHAR","VARCHAR","NATIONAL VARCHAR","BINARY","VARBINARY","BLOB","TEXT","ENUM"]});var xC=re(["SELECT [ALL | DISTINCT | DISTINCTROW]"]),UC=re(["WITH","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","LIMIT","OFFSET","INSERT [IGNORE] [INTO]","VALUES","REPLACE [INTO]","SET","CREATE VIEW","CREATE [ROWSTORE] [REFERENCE | TEMPORARY | GLOBAL TEMPORARY] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [TEMPORARY] PROCEDURE [IF NOT EXISTS]","CREATE [OR REPLACE] [EXTERNAL] FUNCTION"]),Bm=re(["UPDATE","DELETE [FROM]","DROP [TEMPORARY] TABLE [IF EXISTS]","ALTER [ONLINE] TABLE","ADD [COLUMN]","ADD [UNIQUE] {INDEX | KEY}","DROP [COLUMN]","MODIFY [COLUMN]","CHANGE","RENAME [TO | AS]","TRUNCATE [TABLE]","ADD AGGREGATOR","ADD LEAF","AGGREGATOR SET AS MASTER","ALTER DATABASE","ALTER PIPELINE","ALTER RESOURCE POOL","ALTER USER","ALTER VIEW","ANALYZE TABLE","ATTACH DATABASE","ATTACH LEAF","ATTACH LEAF ALL","BACKUP DATABASE","BINLOG","BOOTSTRAP AGGREGATOR","CACHE INDEX","CALL","CHANGE","CHANGE MASTER TO","CHANGE REPLICATION FILTER","CHANGE REPLICATION SOURCE TO","CHECK BLOB CHECKSUM","CHECK TABLE","CHECKSUM TABLE","CLEAR ORPHAN DATABASES","CLONE","COMMIT","CREATE DATABASE","CREATE GROUP","CREATE INDEX","CREATE LINK","CREATE MILESTONE","CREATE PIPELINE","CREATE RESOURCE POOL","CREATE ROLE","CREATE USER","DEALLOCATE PREPARE","DESCRIBE","DETACH DATABASE","DETACH PIPELINE","DROP DATABASE","DROP FUNCTION","DROP INDEX","DROP LINK","DROP PIPELINE","DROP PROCEDURE","DROP RESOURCE POOL","DROP ROLE","DROP USER","DROP VIEW","EXECUTE","EXPLAIN","FLUSH","FORCE","GRANT","HANDLER","HELP","KILL CONNECTION","KILLALL QUERIES","LOAD DATA","LOAD INDEX INTO CACHE","LOAD XML","LOCK INSTANCE FOR BACKUP","LOCK TABLES","MASTER_POS_WAIT","OPTIMIZE TABLE","PREPARE","PURGE BINARY LOGS","REBALANCE PARTITIONS","RELEASE SAVEPOINT","REMOVE AGGREGATOR","REMOVE LEAF","REPAIR TABLE","REPLACE","REPLICATE DATABASE","RESET","RESET MASTER","RESET PERSIST","RESET REPLICA","RESET SLAVE","RESTART","RESTORE DATABASE","RESTORE REDUNDANCY","REVOKE","ROLLBACK","ROLLBACK TO SAVEPOINT","SAVEPOINT","SET CHARACTER SET","SET DEFAULT ROLE","SET NAMES","SET PASSWORD","SET RESOURCE GROUP","SET ROLE","SET TRANSACTION","SHOW","SHOW CHARACTER SET","SHOW COLLATION","SHOW COLUMNS","SHOW CREATE DATABASE","SHOW CREATE FUNCTION","SHOW CREATE PIPELINE","SHOW CREATE PROCEDURE","SHOW CREATE TABLE","SHOW CREATE USER","SHOW CREATE VIEW","SHOW DATABASES","SHOW ENGINE","SHOW ENGINES","SHOW ERRORS","SHOW FUNCTION CODE","SHOW FUNCTION STATUS","SHOW GRANTS","SHOW INDEX","SHOW MASTER STATUS","SHOW OPEN TABLES","SHOW PLUGINS","SHOW PRIVILEGES","SHOW PROCEDURE CODE","SHOW PROCEDURE STATUS","SHOW PROCESSLIST","SHOW PROFILE","SHOW PROFILES","SHOW RELAYLOG EVENTS","SHOW REPLICA STATUS","SHOW REPLICAS","SHOW SLAVE","SHOW SLAVE HOSTS","SHOW STATUS","SHOW TABLE STATUS","SHOW TABLES","SHOW VARIABLES","SHOW WARNINGS","SHUTDOWN","SNAPSHOT DATABASE","SOURCE_POS_WAIT","START GROUP_REPLICATION","START PIPELINE","START REPLICA","START SLAVE","START TRANSACTION","STOP GROUP_REPLICATION","STOP PIPELINE","STOP REPLICA","STOP REPLICATING","STOP SLAVE","TEST PIPELINE","UNLOCK INSTANCE","UNLOCK TABLES","USE","XA","ITERATE","LEAVE","LOOP","REPEAT","RETURN","WHILE"]),GC=re(["UNION [ALL | DISTINCT]","EXCEPT","INTERSECT","MINUS"]),BC=re(["JOIN","{LEFT | RIGHT | FULL} [OUTER] JOIN","{INNER | CROSS} JOIN","NATURAL {LEFT | RIGHT} [OUTER] JOIN","STRAIGHT_JOIN"]),FC=re(["ON DELETE","ON UPDATE","CHARACTER SET","{ROWS | RANGE} BETWEEN"]),Fm={tokenizerOptions:{reservedSelect:xC,reservedClauses:[...UC,...Bm],reservedSetOperations:GC,reservedJoins:BC,reservedPhrases:FC,reservedKeywords:Um,reservedFunctionNames:Gm,stringTypes:['""-qq-bs',"''-qq-bs",{quote:"''-raw",prefixes:["B","X"],requirePrefix:!0}],identTypes:["``"],identChars:{first:"$",rest:"$",allowFirstCharNumber:!0},variableTypes:[{regex:"@@?[A-Za-z0-9_$]+"},{quote:"``",prefixes:["@"],requirePrefix:!0}],lineCommentTypes:["--","#"],operators:[":=","&","|","^","~","<<",">>","<=>","&&","||","::","::$","::%",":>","!:>"],postProcess:HC},formatOptions:{alwaysDenseOperators:["::","::$","::%"],onelineClauses:Bm}};function HC(t){return t.map((n,e)=>{let i=t[e+1]||qt;return Ht.SET(n)&&i.text==="("?{...n,type:ne.RESERVED_FUNCTION_NAME}:n})}var Hm=Te({all:["ABS","ACOS","ACOSH","ADD_MONTHS","ALL_USER_NAMES","ANY_VALUE","APPROX_COUNT_DISTINCT","APPROX_PERCENTILE","APPROX_PERCENTILE_ACCUMULATE","APPROX_PERCENTILE_COMBINE","APPROX_PERCENTILE_ESTIMATE","APPROX_TOP_K","APPROX_TOP_K_ACCUMULATE","APPROX_TOP_K_COMBINE","APPROX_TOP_K_ESTIMATE","APPROXIMATE_JACCARD_INDEX","APPROXIMATE_SIMILARITY","ARRAY_AGG","ARRAY_APPEND","ARRAY_CAT","ARRAY_COMPACT","ARRAY_CONSTRUCT","ARRAY_CONSTRUCT_COMPACT","ARRAY_CONTAINS","ARRAY_INSERT","ARRAY_INTERSECTION","ARRAY_POSITION","ARRAY_PREPEND","ARRAY_SIZE","ARRAY_SLICE","ARRAY_TO_STRING","ARRAY_UNION_AGG","ARRAY_UNIQUE_AGG","ARRAYS_OVERLAP","AS_ARRAY","AS_BINARY","AS_BOOLEAN","AS_CHAR","AS_VARCHAR","AS_DATE","AS_DECIMAL","AS_NUMBER","AS_DOUBLE","AS_REAL","AS_INTEGER","AS_OBJECT","AS_TIME","AS_TIMESTAMP_LTZ","AS_TIMESTAMP_NTZ","AS_TIMESTAMP_TZ","ASCII","ASIN","ASINH","ATAN","ATAN2","ATANH","AUTO_REFRESH_REGISTRATION_HISTORY","AUTOMATIC_CLUSTERING_HISTORY","AVG","BASE64_DECODE_BINARY","BASE64_DECODE_STRING","BASE64_ENCODE","BIT_LENGTH","BITAND","BITAND_AGG","BITMAP_BIT_POSITION","BITMAP_BUCKET_NUMBER","BITMAP_CONSTRUCT_AGG","BITMAP_COUNT","BITMAP_OR_AGG","BITNOT","BITOR","BITOR_AGG","BITSHIFTLEFT","BITSHIFTRIGHT","BITXOR","BITXOR_AGG","BOOLAND","BOOLAND_AGG","BOOLNOT","BOOLOR","BOOLOR_AGG","BOOLXOR","BOOLXOR_AGG","BUILD_SCOPED_FILE_URL","BUILD_STAGE_FILE_URL","CASE","CAST","CBRT","CEIL","CHARINDEX","CHECK_JSON","CHECK_XML","CHR","CHAR","COALESCE","COLLATE","COLLATION","COMPLETE_TASK_GRAPHS","COMPRESS","CONCAT","CONCAT_WS","CONDITIONAL_CHANGE_EVENT","CONDITIONAL_TRUE_EVENT","CONTAINS","CONVERT_TIMEZONE","COPY_HISTORY","CORR","COS","COSH","COT","COUNT","COUNT_IF","COVAR_POP","COVAR_SAMP","CUME_DIST","CURRENT_ACCOUNT","CURRENT_AVAILABLE_ROLES","CURRENT_CLIENT","CURRENT_DATABASE","CURRENT_DATE","CURRENT_IP_ADDRESS","CURRENT_REGION","CURRENT_ROLE","CURRENT_SCHEMA","CURRENT_SCHEMAS","CURRENT_SECONDARY_ROLES","CURRENT_SESSION","CURRENT_STATEMENT","CURRENT_TASK_GRAPHS","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_TRANSACTION","CURRENT_USER","CURRENT_VERSION","CURRENT_WAREHOUSE","DATA_TRANSFER_HISTORY","DATABASE_REFRESH_HISTORY","DATABASE_REFRESH_PROGRESS","DATABASE_REFRESH_PROGRESS_BY_JOB","DATABASE_STORAGE_USAGE_HISTORY","DATE_FROM_PARTS","DATE_PART","DATE_TRUNC","DATEADD","DATEDIFF","DAYNAME","DECODE","DECOMPRESS_BINARY","DECOMPRESS_STRING","DECRYPT","DECRYPT_RAW","DEGREES","DENSE_RANK","DIV0","EDITDISTANCE","ENCRYPT","ENCRYPT_RAW","ENDSWITH","EQUAL_NULL","EXP","EXPLAIN_JSON","EXTERNAL_FUNCTIONS_HISTORY","EXTERNAL_TABLE_FILES","EXTERNAL_TABLE_FILE_REGISTRATION_HISTORY","EXTRACT","EXTRACT_SEMANTIC_CATEGORIES","FACTORIAL","FIRST_VALUE","FLATTEN","FLOOR","GENERATE_COLUMN_DESCRIPTION","GENERATOR","GET","GET_ABSOLUTE_PATH","GET_DDL","GET_IGNORE_CASE","GET_OBJECT_REFERENCES","GET_PATH","GET_PRESIGNED_URL","GET_RELATIVE_PATH","GET_STAGE_LOCATION","GETBIT","GREATEST","GROUPING","GROUPING_ID","HASH","HASH_AGG","HAVERSINE","HEX_DECODE_BINARY","HEX_DECODE_STRING","HEX_ENCODE","HLL","HLL_ACCUMULATE","HLL_COMBINE","HLL_ESTIMATE","HLL_EXPORT","HLL_IMPORT","HOUR","MINUTE","SECOND","IFF","IFNULL","ILIKE","ILIKE ANY","INFER_SCHEMA","INITCAP","INSERT","INVOKER_ROLE","INVOKER_SHARE","IS_ARRAY","IS_BINARY","IS_BOOLEAN","IS_CHAR","IS_VARCHAR","IS_DATE","IS_DATE_VALUE","IS_DECIMAL","IS_DOUBLE","IS_REAL","IS_GRANTED_TO_INVOKER_ROLE","IS_INTEGER","IS_NULL_VALUE","IS_OBJECT","IS_ROLE_IN_SESSION","IS_TIME","IS_TIMESTAMP_LTZ","IS_TIMESTAMP_NTZ","IS_TIMESTAMP_TZ","JAROWINKLER_SIMILARITY","JSON_EXTRACT_PATH_TEXT","KURTOSIS","LAG","LAST_DAY","LAST_QUERY_ID","LAST_TRANSACTION","LAST_VALUE","LEAD","LEAST","LEFT","LENGTH","LEN","LIKE","LIKE ALL","LIKE ANY","LISTAGG","LN","LOCALTIME","LOCALTIMESTAMP","LOG","LOGIN_HISTORY","LOGIN_HISTORY_BY_USER","LOWER","LPAD","LTRIM","MATERIALIZED_VIEW_REFRESH_HISTORY","MD5","MD5_HEX","MD5_BINARY","MD5_NUMBER \u2014 Obsoleted","MD5_NUMBER_LOWER64","MD5_NUMBER_UPPER64","MEDIAN","MIN","MAX","MINHASH","MINHASH_COMBINE","MOD","MODE","MONTHNAME","MONTHS_BETWEEN","NEXT_DAY","NORMAL","NTH_VALUE","NTILE","NULLIF","NULLIFZERO","NVL","NVL2","OBJECT_AGG","OBJECT_CONSTRUCT","OBJECT_CONSTRUCT_KEEP_NULL","OBJECT_DELETE","OBJECT_INSERT","OBJECT_KEYS","OBJECT_PICK","OCTET_LENGTH","PARSE_IP","PARSE_JSON","PARSE_URL","PARSE_XML","PERCENT_RANK","PERCENTILE_CONT","PERCENTILE_DISC","PI","PIPE_USAGE_HISTORY","POLICY_CONTEXT","POLICY_REFERENCES","POSITION","POW","POWER","PREVIOUS_DAY","QUERY_ACCELERATION_HISTORY","QUERY_HISTORY","QUERY_HISTORY_BY_SESSION","QUERY_HISTORY_BY_USER","QUERY_HISTORY_BY_WAREHOUSE","RADIANS","RANDOM","RANDSTR","RANK","RATIO_TO_REPORT","REGEXP","REGEXP_COUNT","REGEXP_INSTR","REGEXP_LIKE","REGEXP_REPLACE","REGEXP_SUBSTR","REGEXP_SUBSTR_ALL","REGR_AVGX","REGR_AVGY","REGR_COUNT","REGR_INTERCEPT","REGR_R2","REGR_SLOPE","REGR_SXX","REGR_SXY","REGR_SYY","REGR_VALX","REGR_VALY","REPEAT","REPLACE","REPLICATION_GROUP_REFRESH_HISTORY","REPLICATION_GROUP_REFRESH_PROGRESS","REPLICATION_GROUP_REFRESH_PROGRESS_BY_JOB","REPLICATION_GROUP_USAGE_HISTORY","REPLICATION_USAGE_HISTORY","REST_EVENT_HISTORY","RESULT_SCAN","REVERSE","RIGHT","RLIKE","ROUND","ROW_NUMBER","RPAD","RTRIM","RTRIMMED_LENGTH","SEARCH_OPTIMIZATION_HISTORY","SEQ1","SEQ2","SEQ4","SEQ8","SERVERLESS_TASK_HISTORY","SHA1","SHA1_HEX","SHA1_BINARY","SHA2","SHA2_HEX","SHA2_BINARY","SIGN","SIN","SINH","SKEW","SOUNDEX","SPACE","SPLIT","SPLIT_PART","SPLIT_TO_TABLE","SQRT","SQUARE","ST_AREA","ST_ASEWKB","ST_ASEWKT","ST_ASGEOJSON","ST_ASWKB","ST_ASBINARY","ST_ASWKT","ST_ASTEXT","ST_AZIMUTH","ST_CENTROID","ST_COLLECT","ST_CONTAINS","ST_COVEREDBY","ST_COVERS","ST_DIFFERENCE","ST_DIMENSION","ST_DISJOINT","ST_DISTANCE","ST_DWITHIN","ST_ENDPOINT","ST_ENVELOPE","ST_GEOGFROMGEOHASH","ST_GEOGPOINTFROMGEOHASH","ST_GEOGRAPHYFROMWKB","ST_GEOGRAPHYFROMWKT","ST_GEOHASH","ST_GEOMETRYFROMWKB","ST_GEOMETRYFROMWKT","ST_HAUSDORFFDISTANCE","ST_INTERSECTION","ST_INTERSECTS","ST_LENGTH","ST_MAKEGEOMPOINT","ST_GEOM_POINT","ST_MAKELINE","ST_MAKEPOINT","ST_POINT","ST_MAKEPOLYGON","ST_POLYGON","ST_NPOINTS","ST_NUMPOINTS","ST_PERIMETER","ST_POINTN","ST_SETSRID","ST_SIMPLIFY","ST_SRID","ST_STARTPOINT","ST_SYMDIFFERENCE","ST_UNION","ST_WITHIN","ST_X","ST_XMAX","ST_XMIN","ST_Y","ST_YMAX","ST_YMIN","STAGE_DIRECTORY_FILE_REGISTRATION_HISTORY","STAGE_STORAGE_USAGE_HISTORY","STARTSWITH","STDDEV","STDDEV_POP","STDDEV_SAMP","STRIP_NULL_VALUE","STRTOK","STRTOK_SPLIT_TO_TABLE","STRTOK_TO_ARRAY","SUBSTR","SUBSTRING","SUM","SYSDATE","SYSTEM$ABORT_SESSION","SYSTEM$ABORT_TRANSACTION","SYSTEM$AUTHORIZE_PRIVATELINK","SYSTEM$AUTHORIZE_STAGE_PRIVATELINK_ACCESS","SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS","SYSTEM$CANCEL_ALL_QUERIES","SYSTEM$CANCEL_QUERY","SYSTEM$CLUSTERING_DEPTH","SYSTEM$CLUSTERING_INFORMATION","SYSTEM$CLUSTERING_RATIO ","SYSTEM$CURRENT_USER_TASK_NAME","SYSTEM$DATABASE_REFRESH_HISTORY ","SYSTEM$DATABASE_REFRESH_PROGRESS","SYSTEM$DATABASE_REFRESH_PROGRESS_BY_JOB ","SYSTEM$DISABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$DISABLE_DATABASE_REPLICATION","SYSTEM$ENABLE_BEHAVIOR_CHANGE_BUNDLE","SYSTEM$ESTIMATE_QUERY_ACCELERATION","SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS","SYSTEM$EXPLAIN_JSON_TO_TEXT","SYSTEM$EXPLAIN_PLAN_JSON","SYSTEM$EXTERNAL_TABLE_PIPE_STATUS","SYSTEM$GENERATE_SAML_CSR","SYSTEM$GENERATE_SCIM_ACCESS_TOKEN","SYSTEM$GET_AWS_SNS_IAM_POLICY","SYSTEM$GET_PREDECESSOR_RETURN_VALUE","SYSTEM$GET_PRIVATELINK","SYSTEM$GET_PRIVATELINK_AUTHORIZED_ENDPOINTS","SYSTEM$GET_PRIVATELINK_CONFIG","SYSTEM$GET_SNOWFLAKE_PLATFORM_INFO","SYSTEM$GET_TAG","SYSTEM$GET_TAG_ALLOWED_VALUES","SYSTEM$GET_TAG_ON_CURRENT_COLUMN","SYSTEM$GET_TAG_ON_CURRENT_TABLE","SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER","SYSTEM$LAST_CHANGE_COMMIT_TIME","SYSTEM$LINK_ACCOUNT_OBJECTS_BY_NAME","SYSTEM$MIGRATE_SAML_IDP_REGISTRATION","SYSTEM$PIPE_FORCE_RESUME","SYSTEM$PIPE_STATUS","SYSTEM$REVOKE_PRIVATELINK","SYSTEM$REVOKE_STAGE_PRIVATELINK_ACCESS","SYSTEM$SET_RETURN_VALUE","SYSTEM$SHOW_OAUTH_CLIENT_SECRETS","SYSTEM$STREAM_GET_TABLE_TIMESTAMP","SYSTEM$STREAM_HAS_DATA","SYSTEM$TASK_DEPENDENTS_ENABLE","SYSTEM$TYPEOF","SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS","SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN","SYSTEM$WAIT","SYSTEM$WHITELIST","SYSTEM$WHITELIST_PRIVATELINK","TAG_REFERENCES","TAG_REFERENCES_ALL_COLUMNS","TAG_REFERENCES_WITH_LINEAGE","TAN","TANH","TASK_DEPENDENTS","TASK_HISTORY","TIME_FROM_PARTS","TIME_SLICE","TIMEADD","TIMEDIFF","TIMESTAMP_FROM_PARTS","TIMESTAMPADD","TIMESTAMPDIFF","TO_ARRAY","TO_BINARY","TO_BOOLEAN","TO_CHAR","TO_VARCHAR","TO_DATE","DATE","TO_DECIMAL","TO_NUMBER","TO_NUMERIC","TO_DOUBLE","TO_GEOGRAPHY","TO_GEOMETRY","TO_JSON","TO_OBJECT","TO_TIME","TIME","TO_TIMESTAMP","TO_TIMESTAMP_LTZ","TO_TIMESTAMP_NTZ","TO_TIMESTAMP_TZ","TO_VARIANT","TO_XML","TRANSLATE","TRIM","TRUNCATE","TRUNC","TRUNC","TRY_BASE64_DECODE_BINARY","TRY_BASE64_DECODE_STRING","TRY_CAST","TRY_HEX_DECODE_BINARY","TRY_HEX_DECODE_STRING","TRY_PARSE_JSON","TRY_TO_BINARY","TRY_TO_BOOLEAN","TRY_TO_DATE","TRY_TO_DECIMAL","TRY_TO_NUMBER","TRY_TO_NUMERIC","TRY_TO_DOUBLE","TRY_TO_GEOGRAPHY","TRY_TO_GEOMETRY","TRY_TO_TIME","TRY_TO_TIMESTAMP","TRY_TO_TIMESTAMP_LTZ","TRY_TO_TIMESTAMP_NTZ","TRY_TO_TIMESTAMP_TZ","TYPEOF","UNICODE","UNIFORM","UPPER","UUID_STRING","VALIDATE","VALIDATE_PIPE_LOAD","VAR_POP","VAR_SAMP","VARIANCE","VARIANCE_SAMP","VARIANCE_POP","WAREHOUSE_LOAD_HISTORY","WAREHOUSE_METERING_HISTORY","WIDTH_BUCKET","XMLGET","YEAR","YEAROFWEEK","YEAROFWEEKISO","DAY","DAYOFMONTH","DAYOFWEEK","DAYOFWEEKISO","DAYOFYEAR","WEEK","WEEK","WEEKOFYEAR","WEEKISO","MONTH","QUARTER","ZEROIFNULL","ZIPF"]});var km=Te({all:["ACCOUNT","ALL","ALTER","AND","ANY","AS","BETWEEN","BY","CASE","CAST","CHECK","COLUMN","CONNECT","CONNECTION","CONSTRAINT","CREATE","CROSS","CURRENT","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","CURRENT_USER","DATABASE","DELETE","DISTINCT","DROP","ELSE","EXISTS","FALSE","FOLLOWING","FOR","FROM","FULL","GRANT","GROUP","GSCLUSTER","HAVING","ILIKE","IN","INCREMENT","INNER","INSERT","INTERSECT","INTO","IS","ISSUE","JOIN","LATERAL","LEFT","LIKE","LOCALTIME","LOCALTIMESTAMP","MINUS","NATURAL","NOT","NULL","OF","ON","OR","ORDER","ORGANIZATION","QUALIFY","REGEXP","REVOKE","RIGHT","RLIKE","ROW","ROWS","SAMPLE","SCHEMA","SELECT","SET","SOME","START","TABLE","TABLESAMPLE","THEN","TO","TRIGGER","TRUE","TRY_CAST","UNION","UNIQUE","UPDATE","USING","VALUES","VIEW","WHEN","WHENEVER","WHERE","WITH"]});var kC=re(["SELECT [ALL | DISTINCT]"]),YC=re(["WITH [RECURSIVE]","FROM","WHERE","GROUP BY","HAVING","PARTITION BY","ORDER BY","QUALIFY","LIMIT","OFFSET","FETCH [FIRST | NEXT]","INSERT [OVERWRITE] [ALL INTO | INTO | ALL | FIRST]","{THEN | ELSE} INTO","VALUES","SET","CREATE [OR REPLACE] [SECURE] [RECURSIVE] VIEW [IF NOT EXISTS]","CREATE [OR REPLACE] [VOLATILE] TABLE [IF NOT EXISTS]","CREATE [OR REPLACE] [LOCAL | GLOBAL] {TEMP|TEMPORARY} TABLE [IF NOT EXISTS]","CLUSTER BY","[WITH] {MASKING POLICY | TAG | ROW ACCESS POLICY}","COPY GRANTS","USING TEMPLATE","MERGE INTO","WHEN MATCHED [AND]","THEN {UPDATE SET | DELETE}","WHEN NOT MATCHED THEN INSERT"]),Ym=re(["UPDATE","DELETE FROM","DROP TABLE [IF EXISTS]","ALTER TABLE [IF EXISTS]","RENAME TO","SWAP WITH","[SUSPEND | RESUME] RECLUSTER","DROP CLUSTERING KEY","ADD [COLUMN]","RENAME COLUMN","{ALTER | MODIFY} [COLUMN]","DROP [COLUMN]","{ADD | ALTER | MODIFY | DROP} [CONSTRAINT]","RENAME CONSTRAINT","{ADD | DROP} SEARCH OPTIMIZATION","{SET | UNSET} TAG","{ADD | DROP} ROW ACCESS POLICY","DROP ALL ROW ACCESS POLICIES","{SET | DROP} DEFAULT","{SET | DROP} NOT NULL","[SET DATA] TYPE","[UNSET] COMMENT","{SET | UNSET} MASKING POLICY","TRUNCATE [TABLE] [IF EXISTS]","ALTER ACCOUNT","ALTER API INTEGRATION","ALTER CONNECTION","ALTER DATABASE","ALTER EXTERNAL TABLE","ALTER FAILOVER GROUP","ALTER FILE FORMAT","ALTER FUNCTION","ALTER INTEGRATION","ALTER MASKING POLICY","ALTER MATERIALIZED VIEW","ALTER NETWORK POLICY","ALTER NOTIFICATION INTEGRATION","ALTER PIPE","ALTER PROCEDURE","ALTER REPLICATION GROUP","ALTER RESOURCE MONITOR","ALTER ROLE","ALTER ROW ACCESS POLICY","ALTER SCHEMA","ALTER SECURITY INTEGRATION","ALTER SEQUENCE","ALTER SESSION","ALTER SESSION POLICY","ALTER SHARE","ALTER STAGE","ALTER STORAGE INTEGRATION","ALTER STREAM","ALTER TAG","ALTER TASK","ALTER USER","ALTER VIEW","ALTER WAREHOUSE","BEGIN","CALL","COMMIT","COPY INTO","CREATE ACCOUNT","CREATE API INTEGRATION","CREATE CONNECTION","CREATE DATABASE","CREATE EXTERNAL FUNCTION","CREATE EXTERNAL TABLE","CREATE FAILOVER GROUP","CREATE FILE FORMAT","CREATE FUNCTION","CREATE INTEGRATION","CREATE MANAGED ACCOUNT","CREATE MASKING POLICY","CREATE MATERIALIZED VIEW","CREATE NETWORK POLICY","CREATE NOTIFICATION INTEGRATION","CREATE PIPE","CREATE PROCEDURE","CREATE REPLICATION GROUP","CREATE RESOURCE MONITOR","CREATE ROLE","CREATE ROW ACCESS POLICY","CREATE SCHEMA","CREATE SECURITY INTEGRATION","CREATE SEQUENCE","CREATE SESSION POLICY","CREATE SHARE","CREATE STAGE","CREATE STORAGE INTEGRATION","CREATE STREAM","CREATE TAG","CREATE TASK","CREATE USER","CREATE WAREHOUSE","DELETE","DESCRIBE DATABASE","DESCRIBE EXTERNAL TABLE","DESCRIBE FILE FORMAT","DESCRIBE FUNCTION","DESCRIBE INTEGRATION","DESCRIBE MASKING POLICY","DESCRIBE MATERIALIZED VIEW","DESCRIBE NETWORK POLICY","DESCRIBE PIPE","DESCRIBE PROCEDURE","DESCRIBE RESULT","DESCRIBE ROW ACCESS POLICY","DESCRIBE SCHEMA","DESCRIBE SEQUENCE","DESCRIBE SESSION POLICY","DESCRIBE SHARE","DESCRIBE STAGE","DESCRIBE STREAM","DESCRIBE TABLE","DESCRIBE TASK","DESCRIBE TRANSACTION","DESCRIBE USER","DESCRIBE VIEW","DESCRIBE WAREHOUSE","DROP CONNECTION","DROP DATABASE","DROP EXTERNAL TABLE","DROP FAILOVER GROUP","DROP FILE FORMAT","DROP FUNCTION","DROP INTEGRATION","DROP MANAGED ACCOUNT","DROP MASKING POLICY","DROP MATERIALIZED VIEW","DROP NETWORK POLICY","DROP PIPE","DROP PROCEDURE","DROP REPLICATION GROUP","DROP RESOURCE MONITOR","DROP ROLE","DROP ROW ACCESS POLICY","DROP SCHEMA","DROP SEQUENCE","DROP SESSION POLICY","DROP SHARE","DROP STAGE","DROP STREAM","DROP TAG","DROP TASK","DROP USER","DROP VIEW","DROP WAREHOUSE","EXECUTE IMMEDIATE","EXECUTE TASK","EXPLAIN","GET","GRANT OWNERSHIP","GRANT ROLE","INSERT","LIST","MERGE","PUT","REMOVE","REVOKE ROLE","ROLLBACK","SHOW COLUMNS","SHOW CONNECTIONS","SHOW DATABASES","SHOW DATABASES IN FAILOVER GROUP","SHOW DATABASES IN REPLICATION GROUP","SHOW DELEGATED AUTHORIZATIONS","SHOW EXTERNAL FUNCTIONS","SHOW EXTERNAL TABLES","SHOW FAILOVER GROUPS","SHOW FILE FORMATS","SHOW FUNCTIONS","SHOW GLOBAL ACCOUNTS","SHOW GRANTS","SHOW INTEGRATIONS","SHOW LOCKS","SHOW MANAGED ACCOUNTS","SHOW MASKING POLICIES","SHOW MATERIALIZED VIEWS","SHOW NETWORK POLICIES","SHOW OBJECTS","SHOW ORGANIZATION ACCOUNTS","SHOW PARAMETERS","SHOW PIPES","SHOW PRIMARY KEYS","SHOW PROCEDURES","SHOW REGIONS","SHOW REPLICATION ACCOUNTS","SHOW REPLICATION DATABASES","SHOW REPLICATION GROUPS","SHOW RESOURCE MONITORS","SHOW ROLES","SHOW ROW ACCESS POLICIES","SHOW SCHEMAS","SHOW SEQUENCES","SHOW SESSION POLICIES","SHOW SHARES","SHOW SHARES IN FAILOVER GROUP","SHOW SHARES IN REPLICATION GROUP","SHOW STAGES","SHOW STREAMS","SHOW TABLES","SHOW TAGS","SHOW TASKS","SHOW TRANSACTIONS","SHOW USER FUNCTIONS","SHOW USERS","SHOW VARIABLES","SHOW VIEWS","SHOW WAREHOUSES","TRUNCATE MATERIALIZED VIEW","UNDROP DATABASE","UNDROP SCHEMA","UNDROP TABLE","UNDROP TAG","UNSET","USE DATABASE","USE ROLE","USE SCHEMA","USE SECONDARY ROLES","USE WAREHOUSE"]),VC=re(["UNION [ALL]","MINUS","EXCEPT","INTERSECT"]),WC=re(["[INNER] JOIN","[NATURAL] {LEFT | RIGHT | FULL} [OUTER] JOIN","{CROSS | NATURAL} JOIN"]),$C=re(["{ROWS | RANGE} BETWEEN","ON {UPDATE | DELETE} [SET NULL | SET DEFAULT]"]),Vm={tokenizerOptions:{reservedSelect:kC,reservedClauses:[...YC,...Ym],reservedSetOperations:VC,reservedJoins:WC,reservedPhrases:$C,reservedKeywords:km,reservedFunctionNames:Hm,stringTypes:["$$","''-qq-bs"],identTypes:['""-qq'],variableTypes:[{regex:"[$][1-9]\\d*"},{regex:"[$][_a-zA-Z][_a-zA-Z0-9$]*"}],extraParens:["[]"],identChars:{rest:"$"},lineCommentTypes:["--","//"],operators:["%","::","||",":","=>"]},formatOptions:{alwaysDenseOperators:[":","::"],onelineClauses:Ym}};var jt=t=>t.replace(/[.*+?^${}()|[\]\\]/gu,"\\$&"),Kl=/\s+/uy,xr=t=>new RegExp(`(?:${t})`,"uy"),XC=t=>t.split("").map(n=>/ /gu.test(n)?"\\s+":`[${n.toUpperCase()}${n.toLowerCase()}]`).join(""),Wm=t=>t+"(?:-"+t+")*",$m=({prefixes:t,requirePrefix:n})=>`(?:${t.map(XC).join("|")}${n?"":"|"})`;var qm=t=>new RegExp(`(?:${t.map(jt).join("|")}).*?(?=\r
|\r|
|$)`,"uy"),Jl=(t,n=[])=>{let e=t==="open"?0:1,i=["()",...n].map(E=>E[e]);return xr(i.map(jt).join("|"))},jm=t=>xr(`${ql(t).map(jt).join("|")}`),qC=({rest:t,dashes:n})=>t||n?`(?![${t||""}${n?"-":""}])`:"",Qr=(t,n={})=>{if(t.length===0)return/^\b$/u;let e=qC(n),i=ql(t).map(jt).join("|").replace(/ /gu,"\\s+");return new RegExp(`(?:${i})${e}\\b`,"iuy")},Va=(t,n)=>{if(!t.length)return;let e=t.map(jt).join("|");return xr(`(?:${e})(?:${n})`)},jC=()=>{let t={"<":">","[":"]","(":")","{":"}"},n="{left}(?:(?!{right}').)*?{right}",e=Object.entries(t).map(([R,_])=>n.replace(/{left}/g,jt(R)).replace(/{right}/g,jt(_))),i=jt(Object.keys(t).join(""));return`[Qq]'(?:${String.raw`(?<tag>[^\s${i}])(?:(?!\k<tag>').)*?\k<tag>`}|${e.join("|")})'`},Xm={"``":"(?:`[^`]*`)+","[]":String.raw`(?:\[[^\]]*\])(?:\][^\]]*\])*`,'""-qq':String.raw`(?:"[^"]*")+`,'""-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")`,'""-qq-bs':String.raw`(?:"[^"\\]*(?:\\.[^"\\]*)*")+`,'""-raw':String.raw`(?:"[^"]*")`,"''-qq":String.raw`(?:'[^']*')+`,"''-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')`,"''-qq-bs":String.raw`(?:'[^'\\]*(?:\\.[^'\\]*)*')+`,"''-raw":String.raw`(?:'[^']*')`,$$:String.raw`(?<tag>\$\w*\$)[\s\S]*?\k<tag>`,"'''..'''":String.raw`'''[^\\]*?(?:\\.[^\\]*?)*?'''`,'""".."""':String.raw`"""[^\\]*?(?:\\.[^\\]*?)*?"""`,"{}":String.raw`(?:\{[^\}]*\})`,"q''":jC()},Km=t=>typeof t=="string"?Xm[t]:"regex"in t?t.regex:$m(t)+Xm[t.quote],Jm=t=>xr(t.map(n=>"regex"in n?n.regex:Km(n)).join("|")),Ql=t=>t.map(Km).join("|"),zl=t=>xr(Ql(t)),Qm=(t={})=>xr(Zl(t)),Zl=({first:t,rest:n,dashes:e,allowFirstCharNumber:i}={})=>{let E="\\p{Alphabetic}\\p{Mark}_",d="\\p{Decimal_Number}",R=jt(t??""),_=jt(n??""),I=i?`[${E}${d}${R}][${E}${d}${_}]*`:`[${E}${R}][${E}${d}${_}]*`;return e?Wm(I):I};function Wa(t,n){let e=t.slice(0,n).split(/\n/);return{line:e.length,col:e[e.length-1].length+1}}var ns=class{input="";index=0;constructor(n){this.rules=n}tokenize(n){this.input=n,this.index=0;let e=[],i;for(;this.index<this.input.length;){let E=this.getWhitespace();if(this.index<this.input.length){if(i=this.getNextToken(),!i)throw this.createParseError();e.push({...i,precedingWhitespace:E})}}return e}createParseError(){let n=this.input.slice(this.index,this.index+10),{line:e,col:i}=Wa(this.input,this.index);return new Error(`Parse error: Unexpected "${n}" at line ${e} column ${i}`)}getWhitespace(){Kl.lastIndex=this.index;let n=Kl.exec(this.input);if(n)return this.index+=n[0].length,n[0]}getNextToken(){for(let n of this.rules){let e=this.match(n);if(e)return e}}match(n){n.regex.lastIndex=this.index;let e=n.regex.exec(this.input);if(e){let i=e[0],E={type:n.type,raw:i,text:n.text?n.text(i):i,start:this.index};return n.key&&(E.key=n.key(i)),this.index+=i.length,E}}};var zm=/\/\*/uy,JC=/([^/*]|\*[^/]|\/[^*])+/uy,QC=/\*\//uy,$a=class{lastIndex=0;exec(n){let e="",i,E=0;if(i=this.matchSection(zm,n))e+=i,E++;else return null;for(;E>0;)if(i=this.matchSection(zm,n))e+=i,E++;else if(i=this.matchSection(QC,n))e+=i,E--;else if(i=this.matchSection(JC,n))e+=i;else return null;return[e]}matchSection(n,e){n.lastIndex=this.lastIndex;let i=n.exec(e);return i&&(this.lastIndex+=i[0].length),i?i[0]:null}};var is=class{constructor(n){this.cfg=n,this.rulesBeforeParams=this.buildRulesBeforeParams(n),this.rulesAfterParams=this.buildRulesAfterParams(n)}tokenize(n,e){let i=[...this.rulesBeforeParams,...this.buildParamRules(this.cfg,e),...this.rulesAfterParams],E=new ns(i).tokenize(n);return this.cfg.postProcess?this.cfg.postProcess(E):E}buildRulesBeforeParams(n){return this.validRules([{type:ne.BLOCK_COMMENT,regex:n.nestedBlockComments?new $a:/(\/\*[^]*?\*\/)/uy},{type:ne.LINE_COMMENT,regex:qm(n.lineCommentTypes??["--"])},{type:ne.QUOTED_IDENTIFIER,regex:zl(n.identTypes)},{type:ne.NUMBER,regex:/(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\s*)?[0-9]+(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\.[0-9]+)?)?)(?!\w)/uy},{type:ne.RESERVED_PHRASE,regex:Qr(n.reservedPhrases??[],n.identChars),text:Lt},{type:ne.CASE,regex:/CASE\b/iuy,text:Lt},{type:ne.END,regex:/END\b/iuy,text:Lt},{type:ne.BETWEEN,regex:/BETWEEN\b/iuy,text:Lt},{type:ne.LIMIT,regex:n.reservedClauses.includes("LIMIT")?/LIMIT\b/iuy:void 0,text:Lt},{type:ne.RESERVED_CLAUSE,regex:Qr(n.reservedClauses,n.identChars),text:Lt},{type:ne.RESERVED_SELECT,regex:Qr(n.reservedSelect,n.identChars),text:Lt},{type:ne.RESERVED_SET_OPERATION,regex:Qr(n.reservedSetOperations,n.identChars),text:Lt},{type:ne.WHEN,regex:/WHEN\b/iuy,text:Lt},{type:ne.ELSE,regex:/ELSE\b/iuy,text:Lt},{type:ne.THEN,regex:/THEN\b/iuy,text:Lt},{type:ne.RESERVED_JOIN,regex:Qr(n.reservedJoins,n.identChars),text:Lt},{type:ne.AND,regex:/AND\b/iuy,text:Lt},{type:ne.OR,regex:/OR\b/iuy,text:Lt},{type:ne.XOR,regex:n.supportsXor?/XOR\b/iuy:void 0,text:Lt},{type:ne.RESERVED_FUNCTION_NAME,regex:Qr(n.reservedFunctionNames,n.identChars),text:Lt},{type:ne.RESERVED_KEYWORD,regex:Qr(n.reservedKeywords,n.identChars),text:Lt}])}buildRulesAfterParams(n){return this.validRules([{type:ne.VARIABLE,regex:n.variableTypes?Jm(n.variableTypes):void 0},{type:ne.STRING,regex:zl(n.stringTypes)},{type:ne.IDENTIFIER,regex:Qm(n.identChars)},{type:ne.DELIMITER,regex:/[;]/uy},{type:ne.COMMA,regex:/[,]/y},{type:ne.OPEN_PAREN,regex:Jl("open",n.extraParens)},{type:ne.CLOSE_PAREN,regex:Jl("close",n.extraParens)},{type:ne.OPERATOR,regex:jm(["+","-","/",">","<","=","<>","<=",">=","!=",...n.operators??[]])},{type:ne.ASTERISK,regex:/[*]/uy},{type:ne.DOT,regex:/[.]/uy}])}buildParamRules(n,e){var i,E,d,R,_;let I={named:e?.named||((i=n.paramTypes)===null||i===void 0?void 0:i.named)||[],quoted:e?.quoted||((E=n.paramTypes)===null||E===void 0?void 0:E.quoted)||[],numbered:e?.numbered||((d=n.paramTypes)===null||d===void 0?void 0:d.numbered)||[],positional:typeof e?.positional=="boolean"?e.positional:(R=n.paramTypes)===null||R===void 0?void 0:R.positional,custom:e?.custom||((_=n.paramTypes)===null||_===void 0?void 0:_.custom)||[]};return this.validRules([{type:ne.NAMED_PARAMETER,regex:Va(I.named,Zl(n.paramChars||n.identChars)),key:S=>S.slice(1)},{type:ne.QUOTED_PARAMETER,regex:Va(I.quoted,Ql(n.identTypes)),key:S=>(({tokenKey:C,quoteChar:w})=>C.replace(new RegExp(jt("\\"+w),"gu"),w))({tokenKey:S.slice(2,-1),quoteChar:S.slice(-1)})},{type:ne.NUMBERED_PARAMETER,regex:Va(I.numbered,"[0-9]+"),key:S=>S.slice(1)},{type:ne.POSITIONAL_PARAMETER,regex:I.positional?/[?]/y:void 0},...I.custom.map(S=>({type:ne.CUSTOM_PARAMETER,regex:xr(S.regex),key:S.key??(C=>C)}))])}validRules(n){return n.filter(e=>!!e.regex)}},Lt=t=>ka(t.toUpperCase());var Zm=new Map,ep=t=>{let n=Zm.get(t);return n||(n=zC(t),Zm.set(t,n)),n},zC=t=>({tokenizer:new is(t.tokenizerOptions),formatOptions:ZC(t.formatOptions)}),ZC=t=>({alwaysDenseOperators:t.alwaysDenseOperators||[],onelineClauses:Object.fromEntries(t.onelineClauses.map(n=>[n,!0]))});function eE(t){return t.indentStyle==="tabularLeft"||t.indentStyle==="tabularRight"?" ".repeat(10):t.useTabs?"	":" ".repeat(t.tabWidth)}function Ti(t){return t.indentStyle==="tabularLeft"||t.indentStyle==="tabularRight"}var ss=class{constructor(n){this.params=n,this.index=0}get({key:n,text:e}){return this.params?n?this.params[n]:this.params[this.index++]:e}getPositionalParameterIndex(){return this.index}setPositionalParameterIndex(n){this.index=n}};var ap=Se(rp(),1);function np(t){return t.map(ew).map(tw).map(rw).map(nw)}var ew=(t,n,e)=>{if(Fa(t.type)){let i=iw(e,n);if(i&&i.text===".")return{...t,type:ne.IDENTIFIER,text:t.raw}}return t},tw=(t,n,e)=>{if(t.type===ne.RESERVED_FUNCTION_NAME){let i=qa(e,n);if(!i||!sw(i))return{...t,type:ne.RESERVED_KEYWORD}}return t},rw=(t,n,e)=>{if(t.type===ne.IDENTIFIER){let i=qa(e,n);if(i&&ip(i))return{...t,type:ne.ARRAY_IDENTIFIER}}return t},nw=(t,n,e)=>{if(t.type===ne.RESERVED_KEYWORD){let i=qa(e,n);if(i&&ip(i))return{...t,type:ne.ARRAY_KEYWORD}}return t},iw=(t,n)=>qa(t,n,-1),qa=(t,n,e=1)=>{let i=1;for(;t[n+i*e]&&aw(t[n+i*e]);)i++;return t[n+i*e]},sw=t=>t.type===ne.OPEN_PAREN&&t.text==="(",ip=t=>t.type===ne.OPEN_PAREN&&t.text==="[",aw=t=>t.type===ne.BLOCK_COMMENT||t.type===ne.LINE_COMMENT;var bn=class{index=0;tokens=[];input="";constructor(n){this.tokenize=n}reset(n,e){this.input=n,this.index=0,this.tokens=this.tokenize(n)}next(){return this.tokens[this.index++]}save(){}formatError(n){let{line:e,col:i}=Wa(this.input,n.start);return`Parse error at token: ${n.text} at line ${e} column ${i}`}has(n){return n in ne}};var Ae;(function(t){t.statement="statement",t.clause="clause",t.set_operation="set_operation",t.function_call="function_call",t.array_subscript="array_subscript",t.property_access="property_access",t.parenthesis="parenthesis",t.between_predicate="between_predicate",t.case_expression="case_expression",t.case_when="case_when",t.case_else="case_else",t.limit_clause="limit_clause",t.all_columns_asterisk="all_columns_asterisk",t.literal="literal",t.identifier="identifier",t.keyword="keyword",t.parameter="parameter",t.operator="operator",t.comma="comma",t.line_comment="line_comment",t.block_comment="block_comment"})(Ae||(Ae={}));function tE(t){return t[0]}var _e=new bn(t=>[]),mi=([[t]])=>t,gt=t=>({type:Ae.keyword,tokenType:t.type,text:t.text,raw:t.raw}),Ct=(t,{leading:n,trailing:e})=>(n!=null&&n.length&&(t={...t,leadingComments:n}),e!=null&&e.length&&(t={...t,trailingComments:e}),t),ow=(t,{leading:n,trailing:e})=>{if(n!=null&&n.length){let[i,...E]=t;t=[Ct(i,{leading:n}),...E]}if(e!=null&&e.length){let i=t.slice(0,-1),E=t[t.length-1];t=[...i,Ct(E,{trailing:e})]}return t},lw={Lexer:_e,ParserRules:[{name:"main$ebnf$1",symbols:[]},{name:"main$ebnf$1",symbols:["main$ebnf$1","statement"],postprocess:t=>t[0].concat([t[1]])},{name:"main",symbols:["main$ebnf$1"],postprocess:([t])=>{let n=t[t.length-1];return n&&!n.hasSemicolon?n.children.length>0?t:t.slice(0,-1):t}},{name:"statement$subexpression$1",symbols:[_e.has("DELIMITER")?{type:"DELIMITER"}:DELIMITER]},{name:"statement$subexpression$1",symbols:[_e.has("EOF")?{type:"EOF"}:EOF]},{name:"statement",symbols:["expressions_or_clauses","statement$subexpression$1"],postprocess:([t,[n]])=>({type:Ae.statement,children:t,hasSemicolon:n.type===ne.DELIMITER})},{name:"expressions_or_clauses$ebnf$1",symbols:[]},{name:"expressions_or_clauses$ebnf$1",symbols:["expressions_or_clauses$ebnf$1","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"expressions_or_clauses$ebnf$2",symbols:[]},{name:"expressions_or_clauses$ebnf$2",symbols:["expressions_or_clauses$ebnf$2","clause"],postprocess:t=>t[0].concat([t[1]])},{name:"expressions_or_clauses",symbols:["expressions_or_clauses$ebnf$1","expressions_or_clauses$ebnf$2"],postprocess:([t,n])=>[...t,...n]},{name:"clause$subexpression$1",symbols:["limit_clause"]},{name:"clause$subexpression$1",symbols:["select_clause"]},{name:"clause$subexpression$1",symbols:["other_clause"]},{name:"clause$subexpression$1",symbols:["set_operation"]},{name:"clause",symbols:["clause$subexpression$1"],postprocess:mi},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["free_form_sql"]},{name:"limit_clause$ebnf$1$subexpression$1$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1$ebnf$1","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"limit_clause$ebnf$1$subexpression$1",symbols:[_e.has("COMMA")?{type:"COMMA"}:COMMA,"limit_clause$ebnf$1$subexpression$1$ebnf$1"]},{name:"limit_clause$ebnf$1",symbols:["limit_clause$ebnf$1$subexpression$1"],postprocess:tE},{name:"limit_clause$ebnf$1",symbols:[],postprocess:()=>null},{name:"limit_clause",symbols:[_e.has("LIMIT")?{type:"LIMIT"}:LIMIT,"_","expression_chain_","limit_clause$ebnf$1"],postprocess:([t,n,e,i])=>{if(i){let[E,d]=i;return{type:Ae.limit_clause,limitKw:Ct(gt(t),{trailing:n}),offset:e,count:d}}else return{type:Ae.limit_clause,limitKw:Ct(gt(t),{trailing:n}),count:e}}},{name:"select_clause$subexpression$1$ebnf$1",symbols:[]},{name:"select_clause$subexpression$1$ebnf$1",symbols:["select_clause$subexpression$1$ebnf$1","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"select_clause$subexpression$1",symbols:["all_columns_asterisk","select_clause$subexpression$1$ebnf$1"]},{name:"select_clause$subexpression$1$ebnf$2",symbols:[]},{name:"select_clause$subexpression$1$ebnf$2",symbols:["select_clause$subexpression$1$ebnf$2","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"select_clause$subexpression$1",symbols:["asteriskless_free_form_sql","select_clause$subexpression$1$ebnf$2"]},{name:"select_clause",symbols:[_e.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT,"select_clause$subexpression$1"],postprocess:([t,[n,e]])=>({type:Ae.clause,nameKw:gt(t),children:[n,...e]})},{name:"select_clause",symbols:[_e.has("RESERVED_SELECT")?{type:"RESERVED_SELECT"}:RESERVED_SELECT],postprocess:([t])=>({type:Ae.clause,nameKw:gt(t),children:[]})},{name:"all_columns_asterisk",symbols:[_e.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK],postprocess:()=>({type:Ae.all_columns_asterisk})},{name:"other_clause$ebnf$1",symbols:[]},{name:"other_clause$ebnf$1",symbols:["other_clause$ebnf$1","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"other_clause",symbols:[_e.has("RESERVED_CLAUSE")?{type:"RESERVED_CLAUSE"}:RESERVED_CLAUSE,"other_clause$ebnf$1"],postprocess:([t,n])=>({type:Ae.clause,nameKw:gt(t),children:n})},{name:"set_operation$ebnf$1",symbols:[]},{name:"set_operation$ebnf$1",symbols:["set_operation$ebnf$1","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"set_operation",symbols:[_e.has("RESERVED_SET_OPERATION")?{type:"RESERVED_SET_OPERATION"}:RESERVED_SET_OPERATION,"set_operation$ebnf$1"],postprocess:([t,n])=>({type:Ae.set_operation,nameKw:gt(t),children:n})},{name:"expression_chain_$ebnf$1",symbols:["expression_with_comments_"]},{name:"expression_chain_$ebnf$1",symbols:["expression_chain_$ebnf$1","expression_with_comments_"],postprocess:t=>t[0].concat([t[1]])},{name:"expression_chain_",symbols:["expression_chain_$ebnf$1"],postprocess:tE},{name:"expression_chain$ebnf$1",symbols:[]},{name:"expression_chain$ebnf$1",symbols:["expression_chain$ebnf$1","_expression_with_comments"],postprocess:t=>t[0].concat([t[1]])},{name:"expression_chain",symbols:["expression","expression_chain$ebnf$1"],postprocess:([t,n])=>[t,...n]},{name:"andless_expression_chain$ebnf$1",symbols:[]},{name:"andless_expression_chain$ebnf$1",symbols:["andless_expression_chain$ebnf$1","_andless_expression_with_comments"],postprocess:t=>t[0].concat([t[1]])},{name:"andless_expression_chain",symbols:["andless_expression","andless_expression_chain$ebnf$1"],postprocess:([t,n])=>[t,...n]},{name:"expression_with_comments_",symbols:["expression","_"],postprocess:([t,n])=>Ct(t,{trailing:n})},{name:"_expression_with_comments",symbols:["_","expression"],postprocess:([t,n])=>Ct(n,{leading:t})},{name:"_andless_expression_with_comments",symbols:["_","andless_expression"],postprocess:([t,n])=>Ct(n,{leading:t})},{name:"free_form_sql$subexpression$1",symbols:["asteriskless_free_form_sql"]},{name:"free_form_sql$subexpression$1",symbols:["asterisk"]},{name:"free_form_sql",symbols:["free_form_sql$subexpression$1"],postprocess:mi},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["logic_operator"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["between_predicate"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comma"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["comment"]},{name:"asteriskless_free_form_sql$subexpression$1",symbols:["other_keyword"]},{name:"asteriskless_free_form_sql",symbols:["asteriskless_free_form_sql$subexpression$1"],postprocess:mi},{name:"expression$subexpression$1",symbols:["andless_expression"]},{name:"expression$subexpression$1",symbols:["logic_operator"]},{name:"expression",symbols:["expression$subexpression$1"],postprocess:mi},{name:"andless_expression$subexpression$1",symbols:["asteriskless_andless_expression"]},{name:"andless_expression$subexpression$1",symbols:["asterisk"]},{name:"andless_expression",symbols:["andless_expression$subexpression$1"],postprocess:mi},{name:"asteriskless_andless_expression$subexpression$1",symbols:["array_subscript"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["case_expression"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["function_call"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["property_access"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["parenthesis"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["curly_braces"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["square_brackets"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["operator"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["identifier"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["parameter"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["literal"]},{name:"asteriskless_andless_expression$subexpression$1",symbols:["keyword"]},{name:"asteriskless_andless_expression",symbols:["asteriskless_andless_expression$subexpression$1"],postprocess:mi},{name:"array_subscript",symbols:[_e.has("ARRAY_IDENTIFIER")?{type:"ARRAY_IDENTIFIER"}:ARRAY_IDENTIFIER,"_","square_brackets"],postprocess:([t,n,e])=>({type:Ae.array_subscript,array:Ct({type:Ae.identifier,text:t.text},{trailing:n}),parenthesis:e})},{name:"array_subscript",symbols:[_e.has("ARRAY_KEYWORD")?{type:"ARRAY_KEYWORD"}:ARRAY_KEYWORD,"_","square_brackets"],postprocess:([t,n,e])=>({type:Ae.array_subscript,array:Ct(gt(t),{trailing:n}),parenthesis:e})},{name:"function_call",symbols:[_e.has("RESERVED_FUNCTION_NAME")?{type:"RESERVED_FUNCTION_NAME"}:RESERVED_FUNCTION_NAME,"_","parenthesis"],postprocess:([t,n,e])=>({type:Ae.function_call,nameKw:Ct(gt(t),{trailing:n}),parenthesis:e})},{name:"parenthesis",symbols:[{literal:"("},"expressions_or_clauses",{literal:")"}],postprocess:([t,n,e])=>({type:Ae.parenthesis,children:n,openParen:"(",closeParen:")"})},{name:"curly_braces$ebnf$1",symbols:[]},{name:"curly_braces$ebnf$1",symbols:["curly_braces$ebnf$1","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"curly_braces",symbols:[{literal:"{"},"curly_braces$ebnf$1",{literal:"}"}],postprocess:([t,n,e])=>({type:Ae.parenthesis,children:n,openParen:"{",closeParen:"}"})},{name:"square_brackets$ebnf$1",symbols:[]},{name:"square_brackets$ebnf$1",symbols:["square_brackets$ebnf$1","free_form_sql"],postprocess:t=>t[0].concat([t[1]])},{name:"square_brackets",symbols:[{literal:"["},"square_brackets$ebnf$1",{literal:"]"}],postprocess:([t,n,e])=>({type:Ae.parenthesis,children:n,openParen:"[",closeParen:"]"})},{name:"property_access$subexpression$1",symbols:["identifier"]},{name:"property_access$subexpression$1",symbols:["array_subscript"]},{name:"property_access$subexpression$1",symbols:["all_columns_asterisk"]},{name:"property_access",symbols:["expression","_",_e.has("DOT")?{type:"DOT"}:DOT,"_","property_access$subexpression$1"],postprocess:([t,n,e,i,[E]])=>({type:Ae.property_access,object:Ct(t,{trailing:n}),property:Ct(E,{leading:i})})},{name:"between_predicate",symbols:[_e.has("BETWEEN")?{type:"BETWEEN"}:BETWEEN,"_","andless_expression_chain","_",_e.has("AND")?{type:"AND"}:AND,"_","andless_expression"],postprocess:([t,n,e,i,E,d,R])=>({type:Ae.between_predicate,betweenKw:gt(t),expr1:ow(e,{leading:n,trailing:i}),andKw:gt(E),expr2:[Ct(R,{leading:d})]})},{name:"case_expression$ebnf$1",symbols:["expression_chain_"],postprocess:tE},{name:"case_expression$ebnf$1",symbols:[],postprocess:()=>null},{name:"case_expression$ebnf$2",symbols:[]},{name:"case_expression$ebnf$2",symbols:["case_expression$ebnf$2","case_clause"],postprocess:t=>t[0].concat([t[1]])},{name:"case_expression",symbols:[_e.has("CASE")?{type:"CASE"}:CASE,"_","case_expression$ebnf$1","case_expression$ebnf$2",_e.has("END")?{type:"END"}:END],postprocess:([t,n,e,i,E])=>({type:Ae.case_expression,caseKw:Ct(gt(t),{trailing:n}),endKw:gt(E),expr:e||[],clauses:i})},{name:"case_clause",symbols:[_e.has("WHEN")?{type:"WHEN"}:WHEN,"_","expression_chain_",_e.has("THEN")?{type:"THEN"}:THEN,"_","expression_chain_"],postprocess:([t,n,e,i,E,d])=>({type:Ae.case_when,whenKw:Ct(gt(t),{trailing:n}),thenKw:Ct(gt(i),{trailing:E}),condition:e,result:d})},{name:"case_clause",symbols:[_e.has("ELSE")?{type:"ELSE"}:ELSE,"_","expression_chain_"],postprocess:([t,n,e])=>({type:Ae.case_else,elseKw:Ct(gt(t),{trailing:n}),result:e})},{name:"comma$subexpression$1",symbols:[_e.has("COMMA")?{type:"COMMA"}:COMMA]},{name:"comma",symbols:["comma$subexpression$1"],postprocess:([[t]])=>({type:Ae.comma})},{name:"asterisk$subexpression$1",symbols:[_e.has("ASTERISK")?{type:"ASTERISK"}:ASTERISK]},{name:"asterisk",symbols:["asterisk$subexpression$1"],postprocess:([[t]])=>({type:Ae.operator,text:t.text})},{name:"operator$subexpression$1",symbols:[_e.has("OPERATOR")?{type:"OPERATOR"}:OPERATOR]},{name:"operator",symbols:["operator$subexpression$1"],postprocess:([[t]])=>({type:Ae.operator,text:t.text})},{name:"identifier$subexpression$1",symbols:[_e.has("IDENTIFIER")?{type:"IDENTIFIER"}:IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[_e.has("QUOTED_IDENTIFIER")?{type:"QUOTED_IDENTIFIER"}:QUOTED_IDENTIFIER]},{name:"identifier$subexpression$1",symbols:[_e.has("VARIABLE")?{type:"VARIABLE"}:VARIABLE]},{name:"identifier",symbols:["identifier$subexpression$1"],postprocess:([[t]])=>({type:Ae.identifier,text:t.text})},{name:"parameter$subexpression$1",symbols:[_e.has("NAMED_PARAMETER")?{type:"NAMED_PARAMETER"}:NAMED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[_e.has("QUOTED_PARAMETER")?{type:"QUOTED_PARAMETER"}:QUOTED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[_e.has("NUMBERED_PARAMETER")?{type:"NUMBERED_PARAMETER"}:NUMBERED_PARAMETER]},{name:"parameter$subexpression$1",symbols:[_e.has("POSITIONAL_PARAMETER")?{type:"POSITIONAL_PARAMETER"}:POSITIONAL_PARAMETER]},{name:"parameter$subexpression$1",symbols:[_e.has("CUSTOM_PARAMETER")?{type:"CUSTOM_PARAMETER"}:CUSTOM_PARAMETER]},{name:"parameter",symbols:["parameter$subexpression$1"],postprocess:([[t]])=>({type:Ae.parameter,key:t.key,text:t.text})},{name:"literal$subexpression$1",symbols:[_e.has("NUMBER")?{type:"NUMBER"}:NUMBER]},{name:"literal$subexpression$1",symbols:[_e.has("STRING")?{type:"STRING"}:STRING]},{name:"literal",symbols:["literal$subexpression$1"],postprocess:([[t]])=>({type:Ae.literal,text:t.text})},{name:"keyword$subexpression$1",symbols:[_e.has("RESERVED_KEYWORD")?{type:"RESERVED_KEYWORD"}:RESERVED_KEYWORD]},{name:"keyword$subexpression$1",symbols:[_e.has("RESERVED_PHRASE")?{type:"RESERVED_PHRASE"}:RESERVED_PHRASE]},{name:"keyword$subexpression$1",symbols:[_e.has("RESERVED_JOIN")?{type:"RESERVED_JOIN"}:RESERVED_JOIN]},{name:"keyword",symbols:["keyword$subexpression$1"],postprocess:([[t]])=>gt(t)},{name:"logic_operator$subexpression$1",symbols:[_e.has("AND")?{type:"AND"}:AND]},{name:"logic_operator$subexpression$1",symbols:[_e.has("OR")?{type:"OR"}:OR]},{name:"logic_operator$subexpression$1",symbols:[_e.has("XOR")?{type:"XOR"}:XOR]},{name:"logic_operator",symbols:["logic_operator$subexpression$1"],postprocess:([[t]])=>gt(t)},{name:"other_keyword$subexpression$1",symbols:[_e.has("WHEN")?{type:"WHEN"}:WHEN]},{name:"other_keyword$subexpression$1",symbols:[_e.has("THEN")?{type:"THEN"}:THEN]},{name:"other_keyword$subexpression$1",symbols:[_e.has("ELSE")?{type:"ELSE"}:ELSE]},{name:"other_keyword$subexpression$1",symbols:[_e.has("END")?{type:"END"}:END]},{name:"other_keyword",symbols:["other_keyword$subexpression$1"],postprocess:([[t]])=>gt(t)},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1","comment"],postprocess:t=>t[0].concat([t[1]])},{name:"_",symbols:["_$ebnf$1"],postprocess:([t])=>t},{name:"comment",symbols:[_e.has("LINE_COMMENT")?{type:"LINE_COMMENT"}:LINE_COMMENT],postprocess:([t])=>({type:Ae.line_comment,text:t.text,precedingWhitespace:t.precedingWhitespace})},{name:"comment",symbols:[_e.has("BLOCK_COMMENT")?{type:"BLOCK_COMMENT"}:BLOCK_COMMENT],postprocess:([t])=>({type:Ae.block_comment,text:t.text,precedingWhitespace:t.precedingWhitespace})}],ParserStart:"main"},sp=lw;var{Parser:Ew,Grammar:uw}=ap.default;function op(t){let n={},e=new bn(E=>[...np(t.tokenize(E,n)),Xl(E.length)]),i=new Ew(uw.fromCompiled(sp),{lexer:e});return{parse:(E,d)=>{n=d;let{results:R}=i.feed(E);if(R.length===1)return R[0];throw R.length===0?new Error("Parse error: Invalid SQL"):new Error(`Parse error: Ambiguous grammar
${JSON.stringify(R,void 0,2)}`)}}}var cw=/^\s+/u;function rE(t,n,e){return dw(t.split(`
`)).flatMap(i=>{if(i.length===1)return i;if(n==="tabular")return fw(i);if(n==="before")return Tw(i,e);throw new Error(`Unexpected commaPosition: ${n}`)}).join(`
`)}function dw(t){let n=[];for(let e=0;e<t.length;e++){let i=[t[e]];for(;t[e].match(/.*,(\s*(--.*)?$)/);)e++,i.push(t[e]);n.push(i)}return n}function fw(t){let n=Ha(Aw(t))-1;return t.map((e,i)=>i===t.length-1?e:hw(e,n))}function hw(t,n){let[,e,i]=t.match(/^(.*?),(\s*--.*)?$/)||[],E=" ".repeat(n-e.length);return`${e}${E},${i??""}`}function Tw(t,n){return pw(t).map((e,i)=>{if(i===0)return e;let[E]=e.match(cw)||[""];return mw(E,n)+n.replace(/ {2}$/,", ")+e.trimStart()})}function mw(t,n){return t.replace(new RegExp(n+"$"),"")}function pw(t){return t.map(n=>n.replace(/,(\s*(--.*)?$)/,"$1"))}function Aw(t){return t.map(n=>n.replace(/\s*--.*/,""))}function nE(t){let n=t.split(`
`),e=[];for(let i=0;i<n.length;i++){if(n[i].match(/^\s*SELECT/i)){let E=[];if(n[i].match(/.*,$/))E=[n[i]];else{if(e.push(n[i]),n[i].match(/^\s*SELECT\s+.+(?!,$)/i))continue;E.push(n[++i])}for(;n[i++].match(/.*,$/);)E.push(n[i]);let d=E.map(_=>({line:_,matches:_.match(/(^.*?\S) (AS )?(\S+,?$)/i)})).map(({line:_,matches:I})=>I?{precedingText:I[1],as:I[2],alias:I[3]}:{precedingText:_}),R=Ha(d.map(({precedingText:_})=>_.replace(/\s*,\s*$/,"")));E=d.map(({precedingText:_,as:I,alias:S})=>_+(S?" ".repeat(R-_.length+1)+(I??"")+S:"")),e=[...e,...E]}e.push(n[i])}return e.join(`
`)}var z;(function(t){t[t.SPACE=0]="SPACE",t[t.NO_SPACE=1]="NO_SPACE",t[t.NO_NEWLINE=2]="NO_NEWLINE",t[t.NEWLINE=3]="NEWLINE",t[t.MANDATORY_NEWLINE=4]="MANDATORY_NEWLINE",t[t.INDENT=5]="INDENT",t[t.SINGLE_INDENT=6]="SINGLE_INDENT"})(z||(z={}));var Dn=class{items=[];constructor(n){this.indentation=n}add(...n){for(let e of n)switch(e){case z.SPACE:this.items.push(z.SPACE);break;case z.NO_SPACE:this.trimHorizontalWhitespace();break;case z.NO_NEWLINE:this.trimWhitespace();break;case z.NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(z.NEWLINE);break;case z.MANDATORY_NEWLINE:this.trimHorizontalWhitespace(),this.addNewline(z.MANDATORY_NEWLINE);break;case z.INDENT:this.addIndentation();break;case z.SINGLE_INDENT:this.items.push(z.SINGLE_INDENT);break;default:this.items.push(e)}}trimHorizontalWhitespace(){for(;Sw(Jr(this.items));)this.items.pop()}trimWhitespace(){for(;Rw(Jr(this.items));)this.items.pop()}addNewline(n){if(this.items.length>0)switch(Jr(this.items)){case z.NEWLINE:this.items.pop(),this.items.push(n);break;case z.MANDATORY_NEWLINE:break;default:this.items.push(n);break}}addIndentation(){for(let n=0;n<this.indentation.getLevel();n++)this.items.push(z.SINGLE_INDENT)}toString(){return this.items.map(n=>this.itemToString(n)).join("")}getLayoutItems(){return this.items}itemToString(n){switch(n){case z.SPACE:return" ";case z.NEWLINE:case z.MANDATORY_NEWLINE:return`
`;case z.SINGLE_INDENT:return this.indentation.getSingleIndent();default:return n}}},Sw=t=>t===z.SPACE||t===z.SINGLE_INDENT,Rw=t=>t===z.SPACE||t===z.SINGLE_INDENT||t===z.NEWLINE;function iE(t,n){if(n==="standard")return t;let e=[];return t.length>=10&&t.includes(" ")&&([t,...e]=t.split(" ")),n==="tabularLeft"?t=t.padEnd(9," "):t=t.padStart(9," "),t+["",...e].join(" ")}function lp(t){return wT(t)||t===ne.RESERVED_CLAUSE||t===ne.RESERVED_SELECT||t===ne.RESERVED_SET_OPERATION||t===ne.RESERVED_JOIN||t===ne.LIMIT}var sE="top-level",Nw="block-level",Pn=class{indentTypes=[];constructor(n){this.indent=n}getSingleIndent(){return this.indent}getLevel(){return this.indentTypes.length}increaseTopLevel(){this.indentTypes.push(sE)}increaseBlockLevel(){this.indentTypes.push(Nw)}decreaseTopLevel(){this.indentTypes.length>0&&Jr(this.indentTypes)===sE&&this.indentTypes.pop()}decreaseBlockLevel(){for(;this.indentTypes.length>0&&this.indentTypes.pop()===sE;);}};var as=class extends Dn{length=0;trailingSpace=!1;constructor(n){super(new Pn("")),this.expressionWidth=n}add(...n){if(n.forEach(e=>this.addToLength(e)),this.length>this.expressionWidth)throw new pi;super.add(...n)}addToLength(n){if(typeof n=="string")this.length+=n.length,this.trailingSpace=!1;else{if(n===z.MANDATORY_NEWLINE||n===z.NEWLINE)throw new pi;n===z.INDENT||n===z.SINGLE_INDENT||n===z.SPACE?this.trailingSpace||(this.length++,this.trailingSpace=!0):(n===z.NO_NEWLINE||n===z.NO_SPACE)&&this.trailingSpace&&(this.trailingSpace=!1,this.length--)}}},pi=class extends Error{};var os=class t{inline=!1;nodes=[];index=-1;constructor({cfg:n,dialectCfg:e,params:i,layout:E,inline:d=!1}){this.cfg=n,this.dialectCfg=e,this.inline=d,this.params=i,this.layout=E}format(n){for(this.nodes=n,this.index=0;this.index<this.nodes.length;this.index++)this.formatNode(this.nodes[this.index]);return this.layout}formatNode(n){this.formatComments(n.leadingComments),this.formatNodeWithoutComments(n),this.formatComments(n.trailingComments)}formatNodeWithoutComments(n){switch(n.type){case Ae.function_call:return this.formatFunctionCall(n);case Ae.array_subscript:return this.formatArraySubscript(n);case Ae.property_access:return this.formatPropertyAccess(n);case Ae.parenthesis:return this.formatParenthesis(n);case Ae.between_predicate:return this.formatBetweenPredicate(n);case Ae.case_expression:return this.formatCaseExpression(n);case Ae.case_when:return this.formatCaseWhen(n);case Ae.case_else:return this.formatCaseElse(n);case Ae.clause:return this.formatClause(n);case Ae.set_operation:return this.formatSetOperation(n);case Ae.limit_clause:return this.formatLimitClause(n);case Ae.all_columns_asterisk:return this.formatAllColumnsAsterisk(n);case Ae.literal:return this.formatLiteral(n);case Ae.identifier:return this.formatIdentifier(n);case Ae.parameter:return this.formatParameter(n);case Ae.operator:return this.formatOperator(n);case Ae.comma:return this.formatComma(n);case Ae.line_comment:return this.formatLineComment(n);case Ae.block_comment:return this.formatBlockComment(n);case Ae.keyword:return this.formatKeywordNode(n)}}formatFunctionCall(n){this.withComments(n.nameKw,()=>{this.layout.add(this.showKw(n.nameKw))}),this.formatNode(n.parenthesis)}formatArraySubscript(n){this.withComments(n.array,()=>{this.layout.add(n.array.type===Ae.keyword?this.showKw(n.array):n.array.text)}),this.formatNode(n.parenthesis)}formatPropertyAccess(n){this.formatNode(n.object),this.layout.add(z.NO_SPACE,"."),this.formatNode(n.property)}formatParenthesis(n){let e=this.formatInlineExpression(n.children);e?(this.layout.add(n.openParen),this.layout.add(...e.getLayoutItems()),this.layout.add(z.NO_SPACE,n.closeParen,z.SPACE)):(this.layout.add(n.openParen,z.NEWLINE),Ti(this.cfg)?(this.layout.add(z.INDENT),this.layout=this.formatSubExpression(n.children)):(this.layout.indentation.increaseBlockLevel(),this.layout.add(z.INDENT),this.layout=this.formatSubExpression(n.children),this.layout.indentation.decreaseBlockLevel()),this.layout.add(z.NEWLINE,z.INDENT,n.closeParen,z.SPACE))}formatBetweenPredicate(n){this.layout.add(this.showKw(n.betweenKw),z.SPACE),this.layout=this.formatSubExpression(n.expr1),this.layout.add(z.NO_SPACE,z.SPACE,this.showNonTabularKw(n.andKw),z.SPACE),this.layout=this.formatSubExpression(n.expr2),this.layout.add(z.SPACE)}formatCaseExpression(n){this.formatNode(n.caseKw),this.layout.indentation.increaseBlockLevel(),this.layout=this.formatSubExpression(n.expr),this.layout=this.formatSubExpression(n.clauses),this.layout.indentation.decreaseBlockLevel(),this.layout.add(z.NEWLINE,z.INDENT),this.formatNode(n.endKw)}formatCaseWhen(n){this.layout.add(z.NEWLINE,z.INDENT),this.formatNode(n.whenKw),this.layout=this.formatSubExpression(n.condition),this.formatNode(n.thenKw),this.layout=this.formatSubExpression(n.result)}formatCaseElse(n){this.layout.add(z.NEWLINE,z.INDENT),this.formatNode(n.elseKw),this.layout=this.formatSubExpression(n.result)}formatClause(n){this.isOnelineClause(n)?this.formatClauseInOnelineStyle(n):Ti(this.cfg)?this.formatClauseInTabularStyle(n):this.formatClauseInIndentedStyle(n)}isOnelineClause(n){return this.dialectCfg.onelineClauses[n.nameKw.text]}formatClauseInIndentedStyle(n){this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n.nameKw),z.NEWLINE),this.layout.indentation.increaseTopLevel(),this.layout.add(z.INDENT),this.layout=this.formatSubExpression(n.children),this.layout.indentation.decreaseTopLevel()}formatClauseInOnelineStyle(n){this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n.nameKw),z.SPACE),this.layout=this.formatSubExpression(n.children)}formatClauseInTabularStyle(n){this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n.nameKw),z.SPACE),this.layout.indentation.increaseTopLevel(),this.layout=this.formatSubExpression(n.children),this.layout.indentation.decreaseTopLevel()}formatSetOperation(n){this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n.nameKw),z.NEWLINE),this.layout.add(z.INDENT),this.layout=this.formatSubExpression(n.children)}formatLimitClause(n){this.withComments(n.limitKw,()=>{this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n.limitKw))}),this.layout.indentation.increaseTopLevel(),Ti(this.cfg)?this.layout.add(z.SPACE):this.layout.add(z.NEWLINE,z.INDENT),n.offset?(this.layout=this.formatSubExpression(n.offset),this.layout.add(z.NO_SPACE,",",z.SPACE),this.layout=this.formatSubExpression(n.count)):this.layout=this.formatSubExpression(n.count),this.layout.indentation.decreaseTopLevel()}formatAllColumnsAsterisk(n){this.layout.add("*",z.SPACE)}formatLiteral(n){this.layout.add(n.text,z.SPACE)}formatIdentifier(n){this.layout.add(n.text,z.SPACE)}formatParameter(n){this.layout.add(this.params.get(n),z.SPACE)}formatOperator({text:n}){this.cfg.denseOperators||this.dialectCfg.alwaysDenseOperators.includes(n)?this.layout.add(z.NO_SPACE,n):n===":"?this.layout.add(z.NO_SPACE,n,z.SPACE):this.layout.add(n,z.SPACE)}formatComma(n){this.inline?this.layout.add(z.NO_SPACE,",",z.SPACE):this.layout.add(z.NO_SPACE,",",z.NEWLINE,z.INDENT)}withComments(n,e){this.formatComments(n.leadingComments),e(),this.formatComments(n.trailingComments)}formatComments(n){n&&n.forEach(e=>{e.type===Ae.line_comment?this.formatLineComment(e):this.formatBlockComment(e)})}formatLineComment(n){Ya(n.precedingWhitespace||"")?this.layout.add(z.NEWLINE,z.INDENT,n.text,z.MANDATORY_NEWLINE,z.INDENT):this.layout.getLayoutItems().length>0?this.layout.add(z.NO_NEWLINE,z.SPACE,n.text,z.MANDATORY_NEWLINE,z.INDENT):this.layout.add(n.text,z.MANDATORY_NEWLINE,z.INDENT)}formatBlockComment(n){this.isMultilineBlockComment(n)?(this.splitBlockComment(n.text).forEach(e=>{this.layout.add(z.NEWLINE,z.INDENT,e)}),this.layout.add(z.NEWLINE,z.INDENT)):this.layout.add(n.text,z.SPACE)}isMultilineBlockComment(n){return Ya(n.text)||Ya(n.precedingWhitespace||"")}isDocComment(n){let e=n.split(/\n/);return/^\/\*\*?$/.test(e[0])&&e.slice(1,e.length-1).every(i=>/^\s*\*/.test(i))&&/^\s*\*\/$/.test(Jr(e))}splitBlockComment(n){return this.isDocComment(n)?n.split(/\n/).map(e=>/^\s*\*/.test(e)?" "+e.replace(/^\s*/,""):e):n.split(/\n/).map(e=>e.replace(/^\s*/,""))}formatSubExpression(n){return new t({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:this.layout,inline:this.inline}).format(n)}formatInlineExpression(n){let e=this.params.getPositionalParameterIndex();try{return new t({cfg:this.cfg,dialectCfg:this.dialectCfg,params:this.params,layout:new as(this.cfg.expressionWidth),inline:!0}).format(n)}catch(i){if(i instanceof pi){this.params.setPositionalParameterIndex(e);return}else throw i}}formatKeywordNode(n){switch(n.tokenType){case ne.RESERVED_JOIN:return this.formatJoin(n);case ne.AND:case ne.OR:case ne.XOR:return this.formatLogicalOperator(n);default:return this.formatKeyword(n)}}formatJoin(n){Ti(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n),z.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n),z.SPACE)}formatKeyword(n){this.layout.add(this.showKw(n),z.SPACE)}formatLogicalOperator(n){this.cfg.logicalOperatorNewline==="before"?Ti(this.cfg)?(this.layout.indentation.decreaseTopLevel(),this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n),z.SPACE),this.layout.indentation.increaseTopLevel()):this.layout.add(z.NEWLINE,z.INDENT,this.showKw(n),z.SPACE):this.layout.add(this.showKw(n),z.NEWLINE,z.INDENT)}showKw(n){return lp(n.tokenType)?iE(this.showNonTabularKw(n),this.cfg.indentStyle):this.showNonTabularKw(n)}showNonTabularKw(n){switch(this.cfg.keywordCase){case"preserve":return ka(n.raw);case"upper":return n.text;case"lower":return n.text.toLowerCase()}}};var ls=class{constructor(n,e){this.dialect=n,this.cfg=e,this.params=new ss(this.cfg.params)}format(n){let e=this.parse(n),i=this.formatAst(e);return this.postFormat(i).trimEnd()}parse(n){return op(this.dialect.tokenizer).parse(n,this.cfg.paramTypes||{})}formatAst(n){return n.map(e=>this.formatStatement(e)).join(`
`.repeat(this.cfg.linesBetweenQueries+1))}formatStatement(n){let e=new os({cfg:this.cfg,dialectCfg:this.dialect.formatOptions,params:this.params,layout:new Dn(new Pn(eE(this.cfg)))}).format(n.children);return n.hasSemicolon&&(this.cfg.newlineBeforeSemicolon?e.add(z.NEWLINE,";"):e.add(z.NO_NEWLINE,";")),e.toString()}postFormat(n){return this.cfg.tabulateAlias&&(n=nE(n)),(this.cfg.commaPosition==="before"||this.cfg.commaPosition==="tabular")&&(n=rE(n,this.cfg.commaPosition,eE(this.cfg))),n}};var Sr=class extends Error{};function Ep(t){if("multilineLists"in t)throw new Sr("multilineLists config is no more supported.");if("newlineBeforeOpenParen"in t)throw new Sr("newlineBeforeOpenParen config is no more supported.");if("newlineBeforeCloseParen"in t)throw new Sr("newlineBeforeCloseParen config is no more supported.");if("aliasAs"in t)throw new Sr("aliasAs config is no more supported.");if(t.expressionWidth<=0)throw new Sr(`expressionWidth config must be positive number. Received ${t.expressionWidth} instead.`);if(t.commaPosition==="before"&&t.useTabs)throw new Sr("commaPosition: before does not work when tabs are used for indentation.");return t.params&&!Iw(t.params)&&console.warn('WARNING: All "params" option values should be strings.'),t}function Iw(t){return(t instanceof Array?t:Object.values(t)).every(e=>typeof e=="string")}var up={bigquery:"bigquery",db2:"db2",hive:"hive",mariadb:"mariadb",mysql:"mysql",n1ql:"n1ql",plsql:"plsql",postgresql:"postgresql",redshift:"redshift",spark:"spark",sqlite:"sqlite",sql:"sql",trino:"trino",transactsql:"transactsql",tsql:"transactsql",singlestoredb:"singlestoredb",snowflake:"snowflake"},cp=Object.keys(up),gw={tabWidth:2,useTabs:!1,keywordCase:"preserve",indentStyle:"standard",logicalOperatorNewline:"before",tabulateAlias:!1,commaPosition:"after",expressionWidth:50,linesBetweenQueries:1,denseOperators:!1,newlineBeforeSemicolon:!1},aE=(t,n={})=>{if(typeof n.language=="string"&&!cp.includes(n.language))throw new Sr(`Unsupported SQL dialect: ${n.language}`);let e=up[n.language||"sql"];return dp(t,{...n,dialect:jl[e]})},dp=(t,{dialect:n,...e})=>{if(typeof t!="string")throw new Error("Invalid query argument. Expected string, instead got "+typeof t);let i=Ep({...gw,...e});return new ls(ep(n),i).format(t)};var ja=Se(require("vscode"));var Ka=class{async provideDocumentFormattingEdits(n,e){try{D.context.globalState.get("hasFirstFormatMessageShown")||(await D.context.globalState.update("hasFirstFormatMessageShown",!0),await pt("sqlite3-editor.displayFormatterWelcome"));let i=we();return[ja.default.TextEdit.replace(new ja.default.Range(new ja.default.Position(0,0),n.lineAt(n.lineCount-1).range.end),aE(n.getText(),{language:"sqlite",tabWidth:e.tabSize,useTabs:!e.insertSpaces,commaPosition:i.get("format.commaPosition"),denseOperators:i.get("format.denseOperators"),expressionWidth:i.get("format.expressionWidth"),indentStyle:i.get("format.indentStyle"),keywordCase:i.get("format.keywordCase"),linesBetweenQueries:i.get("format.linesBetweenQueries"),logicalOperatorNewline:i.get("format.logicalOperatorNewline"),newlineBeforeSemicolon:i.get("format.newlineBeforeSemicolon"),tabulateAlias:i.get("format.tabulateAlias")})+(i.get("format.trailingNewLine")?`
`:""))]}catch(i){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(30,i))}}};var _w=[...ts.keys()].sort((t,n)=>n.length-t.length),Ja=(t,n)=>{t=t.toUpperCase();for(let e of _w){let i=new RegExp(e.split(" ").map(R=>Wf(R)).join("\\s+")),E=Math.max(0,n-e.length),d=t.slice(E).search(i)+E;if(E<=d&&d<=n){let R=ts.get(e);return R===void 0||R.syntax.size===0&&R.help===void 0?void 0:{joinedKeyword:e,help:R.help,files:R.syntax}}}};var oE=async(t,n,e,i,E={})=>{if(e!==void 0&&!(e in Ar&&!i)){{let d=ci[e.toLowerCase()];if(d)return`\`\`\`query-editor
${e.toLowerCase()}${d.args}
\`\`\`

${d.docs}

*source: sqlite.org*`}{let d=fi[(e.startsWith("pragma_")?e.slice(7):e).toLowerCase()];if(d)return`\`\`\`query-editor
${d.signature}
\`\`\`

${d.docs}

*source: sqlite.org*`}{let d=await E.fn?.(e);if(d!==void 0)return d}}if(e!==void 0){let d=await E.table?.(e);if(d!==void 0)return d}{let d=Ja(t,n);if(d!==void 0){let R="";if(d.help!==void 0&&(R+=Ar[d.help]),E.joinedKeywords!==void 0&&(R=await E.joinedKeywords(d,R)),R!=="")return R}}if(e!==void 0&&e.toUpperCase()in Ar)return Ar[e.toUpperCase()]};var Ur=Se(require("vscode"));var Qa=class{async provideHover(n,e,i){try{{let S=mt(n);if(S===void 0||D.connManager.connections(S)[0]!==void 0)return}let E=n.getText(),d=n.getWordRangeAtPosition(e),R,_=!1;d!==void 0&&(R=n.getText(d),_=E[n.offsetAt(d.end)]==="(");let I=await oE(E,n.offsetAt(e),R,_);if(I!==void 0)return new Ur.default.Hover(new Ur.default.MarkdownString(I))}catch(E){throw console.error(E),Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(13,E)),E}}},za=class{#e;constructor(n){this.#e=n}async provideHover(n,e,i){try{let E=mt(n);if(E===void 0)return;let d=D.connManager.connections(E)[0];if(d===void 0)return;let R,_=(await d.p.request("semantic_highlight",()=>(R=n.getText(),[R]))).unpack(),I=n.offsetAt(e),S,C=!1;for(let{start:M,end:G}of _)if(mr(M,G).contains(e)){let $=n.offsetAt(new Ur.default.Position(Number(G.line),Number(G.column)));S=R.slice(n.offsetAt(new Ur.default.Position(Number(M.line),Number(M.column))),$),C=R[$]==="(";let k=/^"(.+)"$|^\[(.+)\]$|^`(.+)`$/s.exec(S);k!==null&&(S=k[1]??k[2]??k[3]);break}let w=await oE(R,I,S,C,{fn:async M=>{let G=await this.#e.$$getArguments(d.p,M);if(G!==void 0)return`\`\`\`query-editor
${M.toLowerCase()}${G}
\`\`\`
`},table:async M=>{let G=(await d.p.query(["SELECT sql FROM sqlite_schema WHERE name = ? COLLATE NOCASE",[M],"read_only",ze])).unpack().sql[0];if(G!==void 0)return`\`\`\`query-editor
${G}
\`\`\`
`},joinedKeywords:(M,G)=>(we().get("experimental.queryEditorKeywordSyntaxDocumentation")&&(G!==""&&(G+=`

---

`),G+=`### ${M.joinedKeyword}`,G+=Array.from(M.files,$=>`### ${st($)}
![${st($)}](${st(at(D.context.extensionUri,`syntax/${$}.svg`).toString())})
`).join("")),G)});if(w!==void 0)return new Ur.default.Hover(new Ur.default.MarkdownString(w));if(we().get("experimental.queryEditorKeywordSyntaxDocumentation")){let M=Ja(R,I);if(M!==void 0)return new Ur.default.Hover(new Ur.default.MarkdownString(`${M.joinedKeyword}

---

`+Array.from(M.files,G=>`### ${st(G)}
![${st(G)}](${st(at(D.context.extensionUri,`syntax/${G}.svg`).toString())})
`).join("")))}}catch(E){throw console.error(E),Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(13,E)),E}}};var hp=Se(require("vscode")),Lw=t=>{if(t.length===0||t.includes(-1))return"(...)";{let n=t.reduce((E,d)=>Math.min(E,d)),e=t.reduce((E,d)=>Math.max(E,d)),i=[];for(let E=1;E<=n;E++)i.push(`p${E}`);for(let E=n+1;E<=e;E++)i.push(`p${E}?`);return`(${i.join(", ")})`}},Za=class{$$map=new WeakMap;async $$getCompletionItems(n){return(await this.#e(n)).$$completions}async $$getArguments(n,e){return(await this.#e(n)).$$arguments.get(e.toLowerCase())}async#e(n){return this.$$map.has(n)||this.$$map.set(n,(async()=>{let e=Xr.$$zip((await n.query([`WITH nonBuiltinFunctions AS (SELECT DISTINCT name, narg FROM pragma_function_list WHERE NOT builtin ORDER BY name, narg)
SELECT name, group_concat(narg, ',') as narg FROM nonBuiltinFunctions GROUP BY name`,[],"read_only",ze])).unpack()).map(i=>({$$name:ke(i.name,!1),$$args:Lw(i.narg.split(",").map(E=>+E))}));return{$$completions:e.map(i=>({label:i.$$name,kind:hp.default.CompletionItemKind.Function,detail:i.$$name+i.$$args})),$$arguments:new Map(e.map(i=>[i.$$name.toLowerCase(),i.$$args]))}})()),this.$$map.get(n)}};var Es=Se(require("vscode"));var ww=["keyword","number","string","operator","comment","function","variable"],eo=class{onDidChangeSemanticTokens;legend=new Es.default.SemanticTokensLegend(ww,[]);constructor(){this.onDidChangeSemanticTokens=D.connManager.onDidChange}async provideDocumentSemanticTokens(n,e){try{let i=mt(n);if(i===void 0)return;let E=D.connManager.connections(i)[0];if(E===void 0)return;let d=(await E.p.request("semantic_highlight",()=>[n.getText()])).unpack(),R=new Es.default.SemanticTokensBuilder(this.legend);for(let{kind:_,start:I,end:S}of d){let C;switch(_){case"Keyword":C="keyword";break;case"Number":C="number";break;case"String":C="string";break;case"Operator":C="operator";break;case"Function":C="function";break;case"Comment":C=I.line===0n&&I.column===0n&&ar(n.getText(mr(I,S)))!==null?"variable":"comment";break;case"Variable":C=va.includes(n.getText(mr(I,S)))?"function":"variable";break;case"Other":break}if(C!==void 0){let w=mr(I,S);for(let b=w.start.line;b<=w.end.line;b++)R.push(new Es.default.Range(b,b===w.start.line?w.start.character:0,b,b===w.end.line?w.end.character:n.lineAt(b).text.length),C)}}return R.build()}catch(i){Ne(i).includes("Illegal value for `line`")?Z(Es.default.window.showWarningMessage(Ne(i))):Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(12,i))}}};var us=Se(require("vscode"));var to=class{#e;constructor(n){this.#e=n}async provideSignatureHelp(n,e,i,E){try{let d=n.getText(new us.default.Range(new us.default.Position(0,0),e)),R=0,_=0,I=n.offsetAt(e)-1;if(I<0)return;for(;;){let M=d[I];if(M==="("){if(R--,R===-1)break}else if(M===")")R++;else if(M===","&&R===0)_++;else if(M==="'"||M==="`"||M==='"'){if(--I<0)return;for(;d[I]!==M;)if(--I<0)return}else if(M==="]"){for(;d[I]!=="[";)if(--I<0)return}if(--I<0)return}let S=/(?:(\w+)|'([^']*)'|"([^"]*)"|\[([^\[]*)\])$/.exec(d.slice(0,I));if(!S)return;let C=(S[1]??S[2]??S[3]??S[4])?.toLowerCase();if(C===void 0)return;let w;if(w=ci[C],!w){let M=mt(n);if(M===void 0)return;let G=D.connManager.connections(M)[0];if(G===void 0)return;let $=await this.#e.$$getArguments(G.p,C);if($===void 0)return;w={args:$}}let b=new us.default.SignatureHelp;return b.signatures=[{label:C+w.args,parameters:w.args.slice(1,-1).split(",").map(M=>({label:M})),documentation:w.docs!==void 0?new us.default.MarkdownString(w.docs+`

*source: sqlite.org*`):void 0,activeParameter:_}],b}catch(d){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(14,d))}}};var Tp=()=>{let t=[],n=new Za;t.push(CT()),t.push(Rr.default.languages.registerHoverProvider({language:"query-editor"},new Qa)),t.push(Rr.default.languages.registerHoverProvider({language:"query-editor"},new za(n))),t.push(Rr.default.languages.registerCompletionItemProvider({language:"query-editor"},new Ba(n),"."," ")),t.push(Rr.default.languages.registerCompletionItemProvider({language:"query-editor"},new Ga));let e=new eo;t.push(Rr.default.languages.registerDocumentSemanticTokensProvider({language:"query-editor"},e,e.legend)),t.push(Rr.default.languages.registerSignatureHelpProvider({language:"query-editor"},new to(n),"(",","));let i=new Ma;return t.push(i),t.push(Rr.default.languages.registerCodeLensProvider({language:"query-editor"},i)),t.push(Rr.default.languages.registerCodeLensProvider({scheme:"file"},new Pa)),t.push(Rr.default.languages.registerDocumentFormattingEditProvider({language:"query-editor"},new Ka)),t.push(new oa),{dispose:()=>{t.forEach(E=>{E.dispose()}),t.length=0}}};var lt=Se(require("vscode"));var Pw=async t=>{let n=await lt.default.window.showInputBox({title:D.t("Enter Values for Placeholders"),prompt:D.t("Placeholders: {{- list }}",{list:t.map(i=>i.name??"?").join(", ")})+`
`+D.t("Examples: 'text', 123, x'ffff', NULL"),ignoreFocusOut:!0,value:t.map(()=>"NULL").join(", "),validateInput:i=>{if(i.trim()!=="")try{if(Pl("LiteralValueList",i).length!==t.length)return{message:D.t("Invalid number of values."),severity:lt.default.InputBoxValidationSeverity.Error}}catch(E){if(E instanceof SyntaxError)return{message:D.t("Syntax error."),severity:lt.default.InputBoxValidationSeverity.Error}}}});if(n===void 0)return null;let e=Ml("LiteralValueList",n);return e===null||e.length!==t.length?null:e.map(i=>typeof i.value=="function"?i.value():typeof i.value=="boolean"?i.value?1:0:i.value)},Mw=(t,n,e)=>{let i=new Map,E=[];for(let[R,_]of n.entries())for(let I of _.ranges_relative_to_stmt)i.set(I,R),E.push(I);let d=t.split(`
`);for(let R of E.sort((_,I)=>_.start.line!==I.start.line?Number(I.start.line-_.start.line):Number(I.start.column-_.start.column)))d=[...d.slice(0,Number(R.start.line)),d[Number(R.start.line)].slice(0,Number(R.start.column))+aT(e[i.get(R)])+d[Number(R.end.line)].slice(Number(R.end.column)),...d.slice(Number(R.end.line+1n))];return d.join(`
`)},cs=async(t,n,e)=>{let i=lt.default.window.activeTextEditor;if(!i||i.document.languageId!=="query-editor")return;let E=ar(i.document.lineAt(0).text);if(E===null||E[2].trim()===""){let C="-- database: ",w="/path/to/database.db";await i.edit(b=>{b.insert(new lt.default.Position(0,0),C+w+`
`)}),i.selection=new lt.default.Selection(0,C.length,0,C.length+w.length),Z(lt.default.window.showErrorMessage(D.t("Could not read the metadata{% text in the active file %}. Please specify which database to query{% in the metadata text %}.")));return}let d=mt(i.document);if(d===void 0)return;if(!await _r(d)){i.selection=new lt.default.Selection(0,E[1].length,0,E[1].length+E[2].length),Z(lt.default.window.showErrorMessage(D.t("The file {{- databasePath}} does not exist.",{databasePath:d.toString(!0)})));return}let R=D.connManager.connections(d)[0];if(R===void 0){await vt(d);return}let _=D.connManager.webviewPanels(d);if(_.length===0){await vt(d);let C=D.connManager.webviewPanels(d);if(C.length===0)return;_=C}let I=C=>{for(;;){if(C=C.trimStart(),!C.startsWith("--"))return C;let w=C.indexOf(`
`);if(w===-1)return"";C=C.slice(w)}},S=i.document.getText();try{if(t)await Lr({title:D.t("Executing the queries..."),interrupt:()=>{R.p.interrupt()}},async()=>{let C=I(S.slice(E[0].length).trim());Z(Yi(C));try{await R.p.query([C,[],"script",ze]),Z(lt.default.window.showInformationMessage(D.t("{% SQL %}Script executed successfully.")))}catch(w){Z(lt.default.window.showErrorMessage(Ne(w))),console.error(w)}});else{let C=(_.find(b=>b.active)??_.find(b=>b.visible)??_[0])?.webview,w=async({stmt_executed:b,kind:M,placeholders:G,table_to_be_focused:$})=>{let k=G.length===0?[]:await Pw(G);if(k===null)return;let H=I(Mw(b,G,k).trim()).replace(/;\s*$/,"");b=I(b.trim()).replace(/;\s*$/,""),!D.context.globalState.get("tipsShown.dropTable")&&/\bDROP (?:TABLE|VIEW)\b/.test(b)&&(Z(lt.default.window.showInformationMessage("Tip: "+D.t("You can execute DROP TABLE and DROP VIEW from the right-click menu on the table name dropdown."))),Z(D.context.globalState.update("tipsShown.dropTable",!0))),!D.context.globalState.get("tipsShown.renameTable")&&/\bALTER\s+TABLE\s+.*\s+RENAME\s+TO\b/.test(b)&&(Z(lt.default.window.showInformationMessage("Tip: "+D.t("You can rename a table from the right-click menu on the table name dropdown."))),Z(D.context.globalState.update("tipsShown.renameTable",!0))),!D.context.globalState.get("tipsShown.createIndex")&&/\bCREATE\s+INDEX\b/.test(b)&&(Z(lt.default.window.showInformationMessage("Tip: "+D.t("You can create an index from the right-click menu on the table column."))),Z(D.context.globalState.update("tipsShown.createIndex",!0))),Z(Yi(b));let ie="`";if(M==="Explain"&&we().get("queryEditor.experimental.visualizeExplainOutput"))C!==void 0&&Z(rt(C,24,H.replace(/^\s*EXPLAIN(\s+QUERY\s+PLAN)?/i,"").trimStart()));else if(new RegExp(String.raw`^\s*PRAGMA\s*\w+\s*(\(\s*(\w|\.|"[^"]+"|'[^']+'|${ie}[^${ie}]+${ie})+\s*\))?;?\s*$`,"i").test(b)||M==="Explain")try{await Lr({title:D.t("Executing the query..."),interrupt:()=>{R.p.interrupt()}},async()=>{let P=(await R.p.query([b,k,"read_write",{...ze,check_placeholders:G.map(X=>X.name)}])).unpack();try{let X=Object.keys(P),Q=`temp_${M==="Explain"?"explain":"pragma"}_output`;if(X.length>0){await R.p.query([`DROP TABLE IF EXISTS temp.${Q};CREATE TEMPORARY TABLE IF NOT EXISTS ${Q}(${X.map(ee=>ke(ee)).join(", ")});`,[],"script",ze]);for(let ee of Xr.$$zip(P))await R.p.query([`INSERT INTO temp.${Q} VALUES (${X.map(()=>"?").join(", ")})`,X.map(te=>ee[te]),"read_write",ze]);C!==void 0&&await rt(C,3,`SELECT * FROM temp.${Q} -- ${b.replace(/[\n\r]/g," ")}`)}}catch(X){Z(D.loggerAndReporter.showErrorMessageAndAskIfReport(32,X))}})}catch(P){Z(lt.default.window.showErrorMessage(Ne(P))),console.error(P)}else if(M==="Select")C!==void 0&&Z(rt(C,3,H));else{try{await Lr({title:D.t("Executing the query..."),interrupt:()=>{R.p.interrupt()}},()=>k.length>0?R.p.query([b,k,"read_write",{...ze,check_placeholders:G.map(P=>P.name)}]):R.p.query([b,[],"script",ze]))}catch(P){Z(lt.default.window.showErrorMessage(Ne(P))),console.error(P);return}b.startsWith("PRAGMA ")&&!b.includes("=")?Z(lt.default.window.showWarningMessage(D.t("{% SQL %}Statement executed successfully. To view the output of a PRAGMA statement, use the pragma function, e.g. `PRAGMA table_list` -> `SELECT * FROM pragma_table_list`."))):$!==null&&C!==void 0&&e.get(C)?.type!=="no table selected"&&!(($.schema===null||$.schema==="main")&&e.get(C)?.name===$.table)?Z(lt.default.window.showInformationMessage(D.t("{% SQL %}Statement executed successfully."),D.t("Open {{- tableName}}",{tableName:`${$.schema===null?"":`${$.schema}.`}${$.table}`})).then(P=>{P!==void 0&&($.schema===null||$.schema==="main"?Z(rt(C,4,$.table,null)):Z(rt(C,3,`SELECT * FROM ${ke($.schema)}.${ke($.table,!0)}`)))})):Z(lt.default.window.showInformationMessage(D.t("{% SQL %}Statement executed successfully.")))}};if(typeof n=="object"&&typeof n.stmt_executed=="string"&&n.stmt_executed)await w(n);else{let M=(await R.p.request("code_lens",[S])).unpack().filter(G=>G.cte_identifier===null).find(({start:G,end:$})=>mr(G,$).contains(i.selection.active));M===void 0?Z(lt.default.window.showErrorMessage(D.t("No statement{% to be executed %} on the cursor."))):await w(M)}}}finally{if(d.scheme===Nt)for(let C of D.connManager.connections(d))C.notifyDatabaseChange()}},mp=async t=>{let n=lt.default.window.activeTextEditor;if(!n)return;let e=[];for(let E of n.selections)E.isEmpty||e.push(n.document.getText(E));if(e.length===0){Z(lt.default.window.showErrorMessage(D.t("No text selected.")));return}let i=D.connManager.connections()[0]?.p;if(i!==void 0)for(let E of e){let d=(await i.request("code_lens",[E])).unpack().filter(_=>_.cte_identifier===null),R=d.length===1?d[0]:void 0;R!==void 0?await cs(!1,R,t):await cs(!1,{kind:"Other",stmt_executed:E,placeholders:[],table_to_be_focused:null},t)}};var Gr=Se(require("vscode"));var ro=class{#e=[];#t=new WeakMap;#r;#n;#i;#s=new Gr.default.EventEmitter;#o=Gr.default.window.createTreeView("sqlite3-editor.tableList",{treeDataProvider:{onDidChangeTreeData:this.#s.event,getChildren:n=>{if(n!==void 0)return[];for(let e of D.connManager.connections()){let i=this.#t.get(e);if(i!==void 0&&i.length>0)return i}return[]},getParent(n){},getTreeItem(n){let e=new Gr.default.TreeItem(n.label);return e.description="table",e.command={title:"Open Table",command:"sqlite3-editor.selectTable",arguments:[n.label]},n.description==="table"?e.contextValue="sqlite3-editor.viewItem.table":n.description==="view"&&(e.contextValue="sqlite3-editor.viewItem.view"),e}}});constructor(){this.#r=new WeakMap,this.#e.push(D.connManager.onDidChange(()=>{this.#s.fire()})),this.#e.push(this.#o.onDidChangeVisibility(async n=>{n.visible&&await this.#l()})),this.#e.push(Gr.default.window.onDidChangeActiveTextEditor(async n=>{this.#s.fire(),this.#a(),await Promise.all([pt("setContext","sqlite3-editor.isQueryEditorActive",n?.document.languageId==="query-editor"),this.#l()])})),this.#n=Gr.default.window.createStatusBarItem("sqlite3-editor.tableSize",Gr.default.StatusBarAlignment.Right,1e4),this.#e.push(this.#n),this.#n.name="SQLite3 Editor - Table Size",this.#i=Gr.default.window.createStatusBarItem("sqlite3-editor.query",Gr.default.StatusBarAlignment.Right,10001),this.#e.push(this.#i),this.#i.name="SQLite3 Editor - Query"}async setTableList(n,e){this.#t.set(n,e),this.#s.fire(),await this.#l()}async setActiveTable(n,e){this.#r.set(n.webview,e),this.#a(),await this.#l()}async onDidChangeViewState(){this.#s.fire(),this.#a(),await this.#l()}showQueryInStatusBar(n){return n!==void 0&&(this.#i.text=n.split(`
`)[0],this.#i.tooltip=n,this.#i.show()),()=>{this.#i.tooltip===n&&this.#i.hide()}}getActiveTableMap(){return this.#r}dispose(){this.#s.dispose(),this.#o.dispose(),this.#e.forEach(n=>{n.dispose()}),this.#e.length=0}async#l(){if(!this.#o.visible)return;let n=D.connManager.webviewPanels()[0];if(n===void 0)return;let e=D.connManager.connections()[0];if(e===void 0)return;let i=this.#r.get(n.webview)?.name??null;if(i===null)return;let E=this.#t.get(e)?.find(d=>d.label===i);if(E)try{await this.#o.reveal(E,{focus:!1,select:!0})}catch(d){if(Ne(d).includes("Cannot resolve tree item for element"))return;throw d}}#a(){let n=D.connManager.webviewPanels()[0];if(n===void 0){this.#n.hide();return}let e=this.#r.get(n.webview);if(e?.rows===void 0){this.#n.hide();return}let i=e.rows===1?D.t("{{count}} record",{count:e.rows}):D.t("{{count}} records",{count:e.rows}),E=e.cols===1?D.t("{{count}} column",{count:e.cols}):D.t("{{count}} columns",{count:e.cols});this.#n.text=i,this.#n.tooltip=`${e.name!==void 0?`${e.name}: `:""}${i}, ${E}`,this.#n.show()}};var Ai=Br;function no(){let t=["C2HVD091Dhb1Da","y29UBK1HBMfNzxi","D29YA3nWywnL","DNnJB2rLlM9Wzw5xAxrO","D3jPDgvgAwXL","B25eAwrdAgfUz2vby3rPDMvuzxH0rwrPDg9Y","DMvYC2LVBG","z2v0","rgvHy3rPDMf0zwq","DMLLD0nVBhvTBG","ugXLyxnLihjLB3bLBIb0AguGzwrPDg9YihrHyIb0BYbHChbSEsb0AguGy29UzMLNDxjHDgLVBIbJAgfUz2vZlG","B25eAwreyxrHyMfZzuzPBgvezwXLDgu","yNvPBgq","B3bLBKv4DgvYBMfS","Dw5WywnR","zw52","CMvWB3j0rxjYB3i","B25eAwreyxrHyMfZzuzPBgvnB3zL","CMvNAxn0zxjdDxn0B21fzgL0B3jqCM92AwrLCG","y2HHCKnVzgvbDa","C3rHCLvZrgLHBg9N","C2nOzw1L","y29UDgv4Da","C3rVCMfNzq","BgfIzwW","z2v0qwn0AxzLvgfIBgvnyxa","vgHLigzPBguGE3STigzPBgv9FsbHBhjLywr5igv4Axn0CY4","v2vIDMLLDYbPCYbKAxnWB3nLza","y29TBwvUDezPBgu","CgXHDgzVCM0","C3fSAxrLmY1LzgL0B3iUzwrPDg9Y","zgLZCgXHEwvKu29TzxrOAw5Nv2vUDfDYB25NrxjYB3i","C3fSAxrLmY1LzgL0B3iUDwKUCMvJB3jKq291BNrPBMDmAw1PDa","C3rHCNrZv2L0Aa","Bg9NtgLUzq","CMvXDwvZDfjHDW","mte4ota0mgzervbYAG","ovfHwhfkDW","zNvUy3rPB24","B3b0Aw9UCW","ywn0AxzL","DxbKyxrLugfUzwXmyxn0vxnLzfrPBwu","DxjP","ChvZAa","zw50CMLLCW","ndKYntu2r3riAgHo","nJeXody1BhLwueDy","ntq2ntqWtxzKtenX","C2HVD1f1zxj5sw5tDgf0Dxncyxi","DMfSDwvZ","vgHLicjKyxrHiIbHCMD1BwvUDcbTDxn0igjLig9Mihr5CguGC3rYAw5N","cIOGBwvZC2fNzsbjrdOG","C2v0rgvIDwDgBgfN","AhrTBa","D2HHDhnozxDeAwfSB2CUy29UzgL0Aw9UlMzPCNn0sw5ZDgfSBgvKvMvYC2LVBG","y29TBwL0","vw5ZDxbWB3j0zwqGAw5ZDgfSBgf0Aw9Uig1LDgHVzc4","D2LUzg93","zgvSzxrL","CMvKDwnL","CgfJA2fNzuPtt04","BwvZC2fNzq","CMvXDwvZDa","C3fSAxrLmY1LzgL0B3iUB3b0Aw9UywW","D2LUmZi","ywrK","y29TBwfUzhm","B25eAwrdAgfUz2vdB25MAwD1CMf0Aw9U","C3fSAxrLmY1LzgL0B3iU","A2v5CW","y29UBMvJDgLVBNm","Dg9tDhjPBMC","C3rHCNrmB25NuxvLCNLuAgf0u3vWCg9YDeLUDgvYCNvWDgLVBG","qwn0AxzHDgvK","D29YA3nWywnLu3rHDgu","rw5JB3vUDgvYzwqGB25Lig9MigvYCM9YCYb0Agf0ignHBIbIzsbYzxnVBhzLzcbIEsbYzwXVywrPBMCGDgHLEYuGyxbWBgLJyxrPB24Gjx0GD2LUzg93lIbqBgvHC2uGCMvSB2fKihrOzsb3Aw5KB3CGyw5KihrYEsbHz2fPBI4","C2HVD0LUzM9YBwf0Aw9UtwvZC2fNzq","zMLUza","D29YA2jLBMnOlMfJDgLVBI5YzwXVywrxAw5KB3C","DhjPBq","vgHLigrHDgfIyxnLj3mGAu5VzguGAgfZigjLzw4Gy2HHBMDLzc4Gqw4Gyxr0zw1WDcb3yxmGBwfKzsb0BYbYzwnVBM5Ly3qGDg8GDgHLig5LDYbPtM9KzsWGyNv0ihrOzsbMB2XSB3DPBMCGzxjYB3iGB2nJDxjYzwq6ihT7zxjYFx0","uMvSB2fKihDPBMrVDW","mtmYnZzSAxnjB3u","Dhv0B3jPywW","odG5nZq2ANPKA2P2","D2vIDMLLDW","ywrKrxzLBNrmAxn0zw5LCG","CMvHza","vxjP","zxH0zw5ZAw9UvxjP","ohLtBhDsvG","zNjVBq","zxH0zw5ZAw9U","Dhj5x3jLy29UBMvJDa","D2vIDMLLD1bHBMvS","y2XLyxi","zgvMyxvSDa","Aw5JBhvKzxm","C3vIC2nYAxb0Aw9UCW","m2fmrvDkrq","C2HVD0vYCM9YtwvZC2fNzufUzefZA0LMuMvWB3j0","C3fSAxrLmW","B25nB2rPzMLLza","CgfYC2u","mtyWntuXm2nHu2f3rG","C3fSAxrLmY5LEgu","z2XVyMfSu3rHDgu","zg9JDw1LBNq","yxnZAwDU","zxjYB3jdB2rL","CMvNAxn0zxjdB21Tyw5K","C3fSAxrLmY1LzgL0B3iUy29TBwvUDc5MAwXLCgf0Aa","DxbKyxrL","C2HVD0vYCM9YtwvZC2fNzq","B25eAwrdAgfUz2vwAwv3u3rHDgu"];return no=function(){return t},no()}(function(t,n){let e=Br,i=t();for(;;)try{if(parseInt(e(475))/1*(-parseInt(e(520))/2)+parseInt(e(537))/3*(-parseInt(e(483))/4)+parseInt(e(485))/5+parseInt(e(522))/6+parseInt(e(542))/7+parseInt(e(528))/8*(-parseInt(e(484))/9)+-parseInt(e(474))/10===n)break;i.push(i.shift())}catch{i.push(i.shift())}})(no,117188);var ry=t=>Array[Ai(529)](t)[Ai(497)]((n,e)=>n*e[Ai(572)](0)%98231,2)===37646,ny=t=>{let n=Ai,e=rT(),i=new ba(t);return i[n(587)](n(511)),iy(new Proxy({},{get(E,d,R){let _=n;return d===_(544)?new Na(t[_(544)]):t[d]}}),e,i)};function Br(t,n){let e=no();return Br=function(i,E){i=i-474;let d=e[i];if(Br.nXpnhm===void 0){var R=function(C){let w="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=",b="",M="";for(let G=0,$,k,H=0;k=C.charAt(H++);~k&&($=G%4?$*64+k:k,G++%4)?b+=String.fromCharCode(255&$>>(-2*G&6)):0)k=w.indexOf(k);for(let G=0,$=b.length;G<$;G++)M+="%"+("00"+b.charCodeAt(G).toString(16)).slice(-2);return decodeURIComponent(M)};Br.QlsANX=R,t=arguments,Br.nXpnhm=!0}let _=e[0],I=i+_,S=t[I];return S?d=S:(d=Br.QlsANX(d),t[I]=d),d},Br(t,n)}var iy=async(t,n,e)=>{let i=Ai,E=d=>{let R=Br;return t.subscriptions[R(481)](typeof d===R(476)?{dispose:d}:d),d};try{Object[i(546)](D,{context:t,t:n,loggerAndReporter:e,tmpDir:E(new ia(sh(t))),connManager:E(new Ea)});let d=E(new ya),R=new _a,_=new Set,I=E(new ro),S=E(new Da),C=new Gs,w=E(new Fi("SQLite3 Editor - sqlite-utils")),b=E(new Fi("SQLite3 Editor - Shell")),M=new Fs((async()=>{let $=i;return{sqliteCLI:await(0,Ap.default)(process[$(582)]===$(502)?$(543):$(539),{nothrow:!0}).then(H=>!!H)}})()),G=ry(t[i(530)].id);setTimeout(()=>{let $=i;G&&Z(Ut.default[$(495)][$(551)]($(494)))},1e3);{let $=async(H,...ie)=>{let P=i,X=D[P(554)].webviewPanels()[0];if(X!==void 0)return rt(X[P(523)],H,...ie)},k={async alterTableRename(H){await $(12,H?.label??null)},async askIfCommit(){await $(23)},async createTable(){await $(9)},async dropTable(H){await $(10,H?.[i(577)]??null)},async dropView(H){await $(11,H?.[i(577)]??null)},async find(){await $(8)},async insert(H){await $(13,H?.label??null)},async openCustomQueryEditor(){await $(6)},async selectTable(H){await $(4,H??null,null)},async toggleAutoReload(){await $(7)},async toggleSchema(){await $(5)},debugStarUsDialog(){let H=i;R[H(490)](La[H(573)])},debugTutorial(){let H=i;R[H(490)](La[H(521)])},delegateToWebview(){},noop(){},async clearGlobalState(){let H=i;await t[H(544)][H(533)]();for(let ie of t[H(512)][H(507)]())ie[H(586)](H(576))&&await t[H(512)][H(550)](ie,void 0)},resetTableState(){C[i(533)]()},async showHistory(){await lh()},async clearHistory(){await Eh()},async openSourceLicenses(){await iT(t[i(527)])},async associate(){let H=i;await Zf(),await ua(void 0,H(523),d)},async compare(H,ie){let P=i;await uT(D[P(575)][P(536)],H,ie)},async connect(H){await ua(H,i(523),d)},async connectAndOpenPanel(H){await eh(H)},async createDatabase(H){let ie=i,P=Ut.default[ie(526)][ie(541)](H);if(await _r(P)){Z(Ut.default[ie(495)][ie(551)](n(ie(579),{file:P[ie(509)](!0)})));return}await Ut.default[ie(555)].fs[ie(557)](P,new Uint8Array);let X=[..._[ie(487)]()][ie(515)](Q=>Q[ie(478)])?.[ie(562)];await pt("workbench.action.closeActiveEditor"),await vt(P,X)},async openPanel(){let H=i,ie=D[H(554)][H(508)]()[0]?.[H(480)];ie!==void 0&&await vt(ie)},async openInMemoryDatabase(){await rh()},async displayFormatterWelcome(){await nT(t[i(527)])},async reopenInTextEditor(H){let ie=i;await pt(ie(556),Ut.default[ie(526)][ie(541)](H),ie(534))},async execute(H){await cs(!1,H,I[i(578)]())},async executescript(){await cs(!0,void 0,I[i(578)]())},async executeSelection(){await mp(I[i(578)]())},async goto(){await NT()},async openExternal(H){let ie=i;await Ut.default[ie(568)][ie(566)](Ut.default[ie(526)][ie(541)](H))},async"popOutEditor.commit"(H){await S[i(493)](H)},reportError(H){e[i(569)](35,H)},showOutput(){e[i(553)]()}};for(let[H,ie]of Object[i(482)](k))E(Ut.default[i(504)][i(548)](i(506)+H,(...P)=>ie(...P)))}t.globalState[i(560)](i(492))===void 0&&Z(t[i(544)][i(550)](i(492),t[i(530)][i(498)][i(559)]));{let $={openCustomDocument(H,ie,P){return d.connect(H)},async resolveCustomEditor(H,ie,P){let X=i,Q=ie;try{if("errorHTML"in H){_[X(503)](Q),Q.onDidDispose(()=>{_[X(496)](Q)}),Q[X(523)].html=H.errorHTML,Q[X(523)][X(477)]={enableScripts:!1,localResourceRoots:[],enableCommandUris:!0};return}Q[X(523)][X(477)]={enableScripts:!0,enableCommandUris:!0,localResourceRoots:[at(t[X(527)],X(523))]};let ee=Lh(H,Q,R,I,S,C,w,b,M,()=>{te=!0});Q[X(523)][X(491)]=await R[X(565)](H,ee[Bs],Q,M);let te=!1;E(Q.webview.onDidReceiveMessage(async({requestId:se,apiID:Oe,body:Y,query:oe})=>{let W=X;if(!te)try{if(Oe===od){let q=I[W(486)](oe);H.p[W(588)]("handle",Y,ce=>{let pe=W;q(),Z(rt(Q[pe(523)],1,se,{body:new Uint8Array(ce)}))},ce=>{let pe=W;q(),Z(rt(Q[pe(523)],1,se,{err:ce[pe(499)][pe(517)](),errorCode:ce[pe(547)]}))})}else{let q=await ee[Oe](...ta[W(567)](Y));Z(rt(Q[W(523)],1,se,{body:new Uint8Array(ea.pack(q))}))}}catch(q){if(q instanceof Error&&q[W(499)].includes(W(580)))return;if(q instanceof Error&&q.message[W(535)](W(488))&&!t[W(544)][W(560)]("displayedSomethingWentWrongError")){Z(t.globalState.update(W(584),!0)),await Ut.default.window.showErrorMessage(n(W(513)),"Reload window","Close")===W(519)&&await pt(W(516));return}Z(e.showErrorMessageAndAskIfReport(9,Ne(q)+(W(489)+Oe)))}})),D[X(554)][X(479)](Q),E(Q[X(552)](async se=>{let Oe=X;se[Oe(532)][Oe(478)]&&D[Oe(554)][Oe(479)](Q),await I[Oe(552)]()})),H.onDidDatabaseChange(()=>{te||Z(rt(Q.webview,2))}),H[X(570)](async()=>{let se=X;if(!te)try{await H.p[se(500)](se(531),[]),Z(rt(Q[se(523)],16)),Z(rt(Q[se(523)],2))}catch(Oe){Z(e[se(538)](33,n(se(518),{err:Ne(Oe)})))}}),H[X(564)](async()=>{Z(rt(Q[X(523)],15))}),H.commentFile[X(540)](()=>{let se=X;Z(rt(Q[se(523)],20,H[se(581)][se(525)]()))}),H.p[X(524)](X(510),()=>{Z(rt(Q.webview,17))}),H.p.addEventListener("endLongQueryThatSupportInterruption",()=>{Z(rt(Q[X(523)],18))})}catch(ee){if(ee instanceof Error&&ee[X(499)]===X(580))return;Z(e[X(538)](11,ee))}}},k={supportsMultipleEditorsPerDocument:!0,webviewOptions:{enableFindWidget:!1,retainContextWhenHidden:!0}};E(Ut.default[i(495)].registerCustomEditorProvider(i(583),$,k)),E(Ut.default[i(495)][i(571)](i(501),$,k))}E(Ut.default.window[i(558)](async $=>{let k=i;if($!==void 0)try{if(!we($[k(545)][k(480)])[k(560)]("queryEditor.autoConnect"))return;let H=Zn($[k(545)]);if(H===void 0||H[k(574)]!==Nt&&!await _r(H)||D[k(554)][k(508)](H).length>0)return;await ua($[k(545)],k(499),d)}catch(H){Z(e[k(538)](38,H))}})),Tp(),th(t[i(536)]),E(Ut.default[i(555)][i(505)]($=>{let k=i,H=ie=>$.affectsConfiguration(ie);if((H(k(585))||H(k(549)))&&Z(Ut.default[k(495)][k(514)](n(k(563)))),H("sqlite3-editor.ui"))for(let ie of D[k(554)].webviewPanels())Z(rt(ie[k(523)],14))}))}catch(d){throw Z(e[i(538)](18,d)),d}e.logLine("Initialized")},sy=()=>{let t=Ai;Hi.clear(),D.loggerAndReporter.logLine(t(561))};0&&(module.exports={activate,deactivate});
