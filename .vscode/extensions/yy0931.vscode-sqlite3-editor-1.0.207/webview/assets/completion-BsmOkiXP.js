import{k as e,i as o,f as t}from"./keyword_help-waI29P34.js";import{e as n}from"./index-DtYXtRjT.js";/* empty css              */const s=["->","->>","abs","acos","acosh","asin","asinh","atan","atan2","atanh","avg","bm25","ceil","ceiling","changes","char","coalesce","concat","concat_ws","cos","cosh","count","cume_dist","current_date","current_time","current_timestamp","date","datetime","degrees","dense_rank","exp","first_value","floor","format","fts3_tokenizer","fts5","fts5_get_locale","fts5_insttoken","fts5_locale","fts5_source_id","glob","group_concat","hex","highlight","if","ifnull","iif","instr","json","json_array","json_array_length","json_error_position","json_extract","json_group_array","json_group_object","json_insert","json_object","json_patch","json_pretty","json_quote","json_remove","json_replace","json_set","json_type","json_valid","jsonb","jsonb_array","jsonb_extract","jsonb_group_array","jsonb_group_object","jsonb_insert","jsonb_object","jsonb_patch","jsonb_remove","jsonb_replace","jsonb_set","julianday","lag","last_insert_rowid","last_value","lead","length","like","likelihood","likely","ln","load_extension","log","log10","log2","lower","ltrim","match","matchinfo","max","min","mod","nth_value","ntile","nullif","octet_length","offsets","optimize","percent_rank","pi","pow","power","printf","quote","radians","random","randomblob","rank","replace","round","row_number","rtreecheck","rtreedepth","rtreenode","rtrim","sign","sin","sinh","snippet","soundex","sqlite_compileoption_get","sqlite_compileoption_used","sqlite_log","sqlite_offset","sqlite_source_id","sqlite_version","sqrt","strftime","string_agg","substr","substring","subtype","sum","tan","tanh","time","timediff","total","total_changes","trim","trunc","typeof","unhex","unicode","unixepoch","unknown","unlikely","upper","zeroblob"],i=(i,r,a,l,_)=>({builtinFunctions:s.map((o=>{const n=t[o];switch(i&&(o=o.toUpperCase()),o){case"->":case"->>":return{label:o,kind:a.Function,detail:o+(n?.args??""),documentation:l(e[o])};default:return{label:o,kind:a.Function,detail:o+(n?.args??""),documentation:void 0===n?void 0:l(n.docs+"\n\n*source: sqlite.org*")}}})),keywords:[...o.entries()].flatMap((([o,{syntax:t,help:s}])=>{if("NOTNULL"===o||"ISNULL"===o)return[];const i=void 0!==s?e[s]:o.toUpperCase()in e?e[o.toUpperCase()]:void 0;if(r&&_){let e="";for(const o of t)e+=`### ${n(o)}\n![${n(o)}](${n(_(`syntax/${o}.svg`))})\n`;return[{label:o,kind:a.Keyword,documentation:e?l((void 0===i?"":i+"\n\n")+e+`\n\n---\nSQLite ${n("version-3.49.1")}`):void 0!==i?l(i):void 0,meta:{keyword:o}}]}return[{label:o,kind:a.Keyword,documentation:void 0!==i?l(i):void 0,meta:{keyword:o}}]})),storageClasses:["INT","INTEGER","REAL","TEXT","BLOB"].map((e=>({label:e,kind:a.EnumMember})))});export{i as offlineCompletions};
