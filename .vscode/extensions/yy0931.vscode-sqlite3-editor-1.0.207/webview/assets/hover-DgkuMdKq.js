import{i as e,k as t,f as a}from"./keyword_help-waI29P34.js";import{a as i}from"./index-DtYXtRjT.js";/* empty css              */const s=[...e.keys()].sort(((e,t)=>t.length-e.length)),n={analysis_limit:{signature:"PRAGMA analysis_limit;\nPRAGMA analysis_limit = N;",docs:"Query or change a limit on the [approximate ANALYZE](https://www.sqlite.org/lang_analyze.html#approx) setting. This is the approximate number of rows examined in each index by the [ANALYZE](https://www.sqlite.org/lang_analyze.html) command. If the argument _N_ is omitted, then the analysis limit is unchanged. If the limit is zero, then the analysis limit is disabled and the ANALYZE command will examine all rows of each index. If N is greater than zero, then the analysis limit is set to N and subsequent ANALYZE commands will stop analyzing each index after it has examined approximately N rows. If N is a negative number or something other than an integer value, then the pragma behaves as if the N argument was omitted. In all cases, the value returned is the new analysis limit used for subsequent ANALYZE commands. This pragma can be used to help the ANALYZE command run faster on large databases. The results of analysis are not as good when only part of each index is examined, but the results are usually good enough. Setting N to 100 or 1000 allows the ANALYZE command to run quickly, even on enormous database files. This pragma was added in SQLite version 3.32.0 (2020-05-22). The current implementation only uses the lower 31 bits of the N value - higher order bits are silently ignored. Future versions of SQLite might begin using higher order bits. Beginning with SQLite version 3.46.0 (2024-05-23), the recommended way of running [ANALYZE](https://www.sqlite.org/lang_analyze.html) is with the [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) command. The [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) will automatically set a reasonable, temporary analysis limit that ensures that the [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) command will finish quickly even on enormous databases. Applications that use the [PRAGMA optimize](https://www.sqlite.org/pragma.html#pragma_optimize) instead of running [ANALYZE](https://www.sqlite.org/lang_analyze.html) directly do not need to set an analysis limit."},application_id:{signature:"PRAGMA schema.application_id;\nPRAGMA schema.application_id = integer;",docs:'The application\\_id PRAGMA is used to query or set the 32-bit signed big-endian "Application ID" integer located at offset 68 into the [database header](https://www.sqlite.org/fileformat2.html#database_header). Applications that use SQLite as their [application file-format](https://www.sqlite.org/appfileformat.html) should set the Application ID integer to a unique integer so that utilities such as [file(1)](http://www.darwinsys.com/file/) can determine the specific file type rather than just reporting "SQLite3 Database". A list of assigned application IDs can be seen by consulting the [magic.txt](https://sqlite.org/src/artifact?ci=trunk&filename=magic.txt) file in the SQLite source repository. See also the [user\\_version pragma](https://www.sqlite.org/pragma.html#pragma_user_version).'},auto_vacuum:{signature:"PRAGMA schema.auto_vacuum;\nPRAGMA schema.auto_vacuum = 0 | NONE | 1 | FULL | 2 | INCREMENTAL;",docs:'Query or set the auto-vacuum status in the database.The default setting for auto-vacuum is 0 or "none", unless the [SQLITE\\_DEFAULT\\_AUTOVACUUM](https://www.sqlite.org/compile.html#default_autovacuum) compile-time option is used. The "none" setting means that auto-vacuum is disabled. When auto-vacuum is disabled and data is deleted data from a database, the database file remains the same size. Unused database file pages are added to a "[freelist](https://www.sqlite.org/fileformat2.html#freelist)" and reused for subsequent inserts. So no database file space is lost. However, the database file does not shrink. In this mode the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command can be used to rebuild the entire database file and thus reclaim unused disk space.When the auto-vacuum mode is 1 or "full", the freelist pages are moved to the end of the database file and the database file is truncated to remove the freelist pages at every transaction commit. Note, however, that auto-vacuum only truncates the freelist pages from the file. Auto-vacuum does not defragment the database nor repack individual database pages the way that the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command does. In fact, because it moves pages around within the file, auto-vacuum can actually make fragmentation worse.Auto-vacuuming is only possible if the database stores some additional information that allows each database page to be traced backwards to its referrer. Therefore, auto-vacuuming must be turned on before any tables are created. It is not possible to enable or disable auto-vacuum after a table has been created.When the value of auto-vacuum is 2 or "incremental" then the additional information needed to do auto-vacuuming is stored in the database file but auto-vacuuming does not occur automatically at each commit as it does with auto\\_vacuum=full. In incremental mode, the separate [incremental\\_vacuum](https://www.sqlite.org/pragma.html#pragma_incremental_vacuum) pragma must be invoked to cause the auto-vacuum to occur.The database connection can be changed between full and incremental autovacuum mode at any time. However, changing from "none" to "full" or "incremental" can only occur when the database is new (no tables have yet been created) or by running the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command. To change auto-vacuum modes, first use the auto\\_vacuum pragma to set the new desired mode, then invoke the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command to reorganize the entire database file. To change from "full" or "incremental" back to "none" always requires running [VACUUM](https://www.sqlite.org/lang_vacuum.html) even on an empty database. When the auto\\_vacuum pragma is invoked with no arguments, it returns the current auto\\_vacuum mode.'},automatic_index:{signature:"PRAGMA automatic_index;\nPRAGMA automatic_index = boolean;",docs:"Query, set, or clear the [automatic indexing](https://www.sqlite.org/optoverview.html#autoindex) capability. [Automatic indexing](https://www.sqlite.org/optoverview.html#autoindex) is enabled by default as of [version 3.7.17](https://www.sqlite.org/releaselog/3_7_17.html) (2013-05-20), but this might change in future releases of SQLite."},busy_timeout:{signature:"PRAGMA busy_timeout;\nPRAGMA busy_timeout = milliseconds;",docs:"Query or change the setting of the [busy timeout](https://www.sqlite.org/c3ref/busy_timeout.html). This pragma is an alternative to the [sqlite3\\_busy\\_timeout()](https://www.sqlite.org/c3ref/busy_timeout.html) C-language interface which is made available as a pragma for use with language bindings that do not provide direct access to [sqlite3\\_busy\\_timeout()](https://www.sqlite.org/c3ref/busy_timeout.html). Each database connection can only have a single [busy handler](https://www.sqlite.org/c3ref/busy_handler.html). This PRAGMA sets the busy handler for the process, possibly overwriting any previously set busy handler."},cache_size:{signature:"PRAGMA schema.cache_size;\nPRAGMA schema.cache_size = pages;\nPRAGMA schema.cache_size = -kibibytes;",docs:"Query or change the suggested maximum number of database disk pages that SQLite will hold in memory at once per open database file. Whether or not this suggestion is honored is at the discretion of the [Application Defined Page Cache](https://www.sqlite.org/c3ref/pcache_methods2.html). The default page cache that is built into SQLite honors the request, however alternative application-defined page cache implementations may choose to interpret the suggested cache size in different ways or to ignore it all together. The default suggested cache size is -2000, which means the cache size is limited to 2048000 bytes of memory. The default suggested cache size can be altered using the [SQLITE\\_DEFAULT\\_CACHE\\_SIZE](https://www.sqlite.org/compile.html#default_cache_size) compile-time options. The TEMP database has a default suggested cache size of 0 pages.If the argument N is positive then the suggested cache size is set to N. If the argument N is negative, then the number of cache pages is adjusted to be a number of pages that would use approximately abs(N\\*1024) bytes of memory based on the current page size. SQLite remembers the number of pages in the page cache, not the amount of memory used. So if you set the cache size using a negative number and subsequently change the page size (using the [PRAGMA page\\_size](https://www.sqlite.org/pragma.html#pragma_page_size) command) then the maximum amount of cache memory will go up or down in proportion to the change in page size. _Backwards compatibility note:_ The behavior of cache\\_size with a negative N was different prior to [version 3.7.10](https://www.sqlite.org/releaselog/3_7_10.html) (2012-01-16). In earlier versions, the number of pages in the cache was set to the absolute value of N.When you change the cache size using the cache\\_size pragma, the change only endures for the current session. The cache size reverts to the default value when the database is closed and reopened.The default page cache implemention does not allocate the full amount of cache memory all at once. Cache memory is allocated in smaller chunks on an as-needed basis. The page\\_cache setting is a (suggested) upper bound on the amount of memory that the cache can use, not the amount of memory it will use all of the time. This is the behavior of the default page cache implementation, but an [application defined page cache](https://www.sqlite.org/c3ref/pcache_methods2.html) is free to behave differently if it wants."},cache_spill:{signature:"PRAGMA cache_spill;\nPRAGMA cache_spill= boolean;\nPRAGMA schema.cache_spill= N;",docs:'The cache\\_spill pragma enables or disables the ability of the pager to spill dirty cache pages to the database file in the middle of a transaction. Cache\\_spill is enabled by default and most applications should leave it that way as cache spilling is usually advantageous. However, a cache spill has the side-effect of acquiring an [EXCLUSIVE lock](https://www.sqlite.org/lockingv3.html#excl_lock) on the database file. Hence, some applications that have large long-running transactions may want to disable cache spilling in order to prevent the application from acquiring an exclusive lock on the database until the moment that the transaction [COMMIT](https://www.sqlite.org/lang_transaction.html)s. The "PRAGMA cache\\_spill=_N_" form of this pragma sets a minimum cache size threshold required for spilling to occur. The number of pages in cache must exceed both the cache\\_spill threshold and the maximum cache size set by the [PRAGMA cache\\_size](https://www.sqlite.org/pragma.html#pragma_cache_size) statement in order for spilling to occur. The "PRAGMA cache\\_spill=_boolean_" form of this pragma applies across all databases attached to the database connection. But the "PRAGMA cache\\_spill=_N_" form of this statement only applies to the "main" schema or whatever other schema is specified as part of the statement.'},case_sensitive_like:{signature:"PRAGMA case_sensitive_like = boolean;",docs:"The default behavior of the [LIKE](https://www.sqlite.org/lang_expr.html#like) operator is to ignore case for ASCII characters. Hence, by default **'a' LIKE 'A'** is true. The case\\_sensitive\\_like pragma installs a new application-defined LIKE function that is either case sensitive or insensitive depending on the value of the case\\_sensitive\\_like pragma. When case\\_sensitive\\_like is disabled, the default LIKE behavior is expressed. When case\\_sensitive\\_like is enabled, case becomes significant. So, for example, **'a' LIKE 'A'** is false but **'a' LIKE 'a'** is still true.This pragma uses [sqlite3\\_create\\_function()](https://www.sqlite.org/c3ref/create_function.html) to overload the LIKE and GLOB functions, which may override previous implementations of LIKE and GLOB registered by the application. This pragma only changes the behavior of the SQL [LIKE](https://www.sqlite.org/lang_expr.html#like) operator. It does not change the behavior of the [sqlite3\\_strlike()](https://www.sqlite.org/c3ref/strlike.html) C-language interface, which is always case insensitive.**WARNING:** If a database uses the LIKE operator anywhere in the schema, such as in a [CHECK constraint](https://www.sqlite.org/lang_createtable.html#ckconst) or in an [expression index](https://www.sqlite.org/expridx.html) or in the WHERE clause of a [partial index](https://www.sqlite.org/partialindex.html), then changing the definition of the LIKE operator using this PRAGMA can cause the database to appear to be corrupt. [PRAGMA integrity\\_check](https://www.sqlite.org/pragma.html#pragma_integrity_check) will report errors. The database is not really corrupt in that changing the behavior of LIKE back to the way it was when the schema was defined and the database was populated will clear the problem. If the use of LIKE occurs only in indexes, then the problem can be cleared by running [REINDEX](https://www.sqlite.org/lang_reindex.html). Nevertheless, the use of the case\\_sensitive\\_like pragma is discouraged. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},cell_size_check:{signature:"PRAGMA cell_size_check;\nPRAGMA cell_size_check = boolean;",docs:'The cell\\_size\\_check pragma enables or disables additional sanity checking on database b-tree pages as they are initially read from disk. With cell size checking enabled, database corruption is detected earlier and is less likely to "spread". However, there is a small performance hit for doing the extra checks and so cell size checking is turned off by default.'},checkpoint_fullfsync:{signature:"PRAGMA checkpoint_fullfsync;\nPRAGMA checkpoint_fullfsync = boolean;",docs:"Query or change the fullfsync flag for [checkpoint](https://www.sqlite.org/wal.html#ckpt) operations. If this flag is set, then the F\\_FULLFSYNC syncing method is used during checkpoint operations on systems that support F\\_FULLFSYNC. The default value of the checkpoint\\_fullfsync flag is off. Only Mac OS-X supports F\\_FULLFSYNC.If the [fullfsync](https://www.sqlite.org/pragma.html#pragma_fullfsync) flag is set, then the F\\_FULLFSYNC syncing method is used for all sync operations and the checkpoint\\_fullfsync setting is irrelevant."},collation_list:{signature:"PRAGMA collation_list;",docs:"Return a list of the collating sequences defined for the current database connection."},compile_options:{signature:"PRAGMA compile_options;",docs:'This pragma returns the names of [compile-time options](https://www.sqlite.org/compile.html) used when building SQLite, one option per row. The "SQLITE\\_" prefix is omitted from the returned option names. See also the [sqlite3\\_compileoption\\_get()](https://www.sqlite.org/c3ref/compileoption_get.html) C/C++ interface and the [sqlite\\_compileoption\\_get()](https://www.sqlite.org/lang_corefunc.html#sqlite_compileoption_get) SQL functions.'},count_changes:{signature:"PRAGMA count_changes;\nPRAGMA count_changes = boolean;",docs:"Query or change the count-changes flag. Normally, when the count-changes flag is not set, [INSERT](https://www.sqlite.org/lang_insert.html), [UPDATE](https://www.sqlite.org/lang_update.html) and [DELETE](https://www.sqlite.org/lang_delete.html) statements return no data. When count-changes is set, each of these commands returns a single row of data consisting of one integer value - the number of rows inserted, modified or deleted by the command. The returned change count does not include any insertions, modifications or deletions performed by triggers, any changes made automatically by [foreign key actions](https://www.sqlite.org/foreignkeys.html#fk_actions), or updates caused by an [upsert](https://www.sqlite.org/lang_upsert.html).Another way to get the row change counts is to use the [sqlite3\\_changes()](https://www.sqlite.org/c3ref/changes.html) or [sqlite3\\_total\\_changes()](https://www.sqlite.org/c3ref/total_changes.html) interfaces. There is a subtle different, though. When an INSERT, UPDATE, or DELETE is run against a view using an [INSTEAD OF trigger](https://www.sqlite.org/lang_createtrigger.html#instead_of_trigger), the count\\_changes pragma reports the number of rows in the view that fired the trigger, whereas [sqlite3\\_changes()](https://www.sqlite.org/c3ref/changes.html) and [sqlite3\\_total\\_changes()](https://www.sqlite.org/c3ref/total_changes.html) do not. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},data_store_directory:{signature:"PRAGMA data_store_directory;\nPRAGMA data_store_directory = 'directory-name';",docs:"Query or change the value of the [sqlite3\\_data\\_directory](https://www.sqlite.org/c3ref/data_directory.html) global variable, which windows operating-system interface backends use to determine where to store database files specified using a relative pathname.Changing the data\\_store\\_directory setting is not threadsafe. Never change the data\\_store\\_directory setting if another thread within the application is running any SQLite interface at the same time. Doing so results in undefined behavior. Changing the data\\_store\\_directory setting writes to the [sqlite3\\_data\\_directory](https://www.sqlite.org/c3ref/data_directory.html) global variable and that global variable is not protected by a mutex.This facility is provided for WinRT which does not have an OS mechanism for reading or changing the current working directory. The use of this pragma in any other context is discouraged and may be disallowed in future releases. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},data_version:{signature:"PRAGMA schema.data_version;",docs:'The "PRAGMA data\\_version" command provides an indication that the database file has been modified. Interactive programs that hold database content in memory or that display database content on-screen can use the PRAGMA data\\_version command to determine if they need to flush and reload their memory or update the screen display.The integer values returned by two invocations of "PRAGMA data\\_version" from the same connection will be different if changes were committed to the database by any other connection in the interim. The "PRAGMA data\\_version" value is unchanged for commits made on the same database connection. The behavior of "PRAGMA data\\_version" is the same for all database connections, including database connections in separate processes and [shared cache](https://www.sqlite.org/sharedcache.html) database connections. The "PRAGMA data\\_version" value is a local property of each database connection and so values returned by two concurrent invocations of "PRAGMA data\\_version" on separate database connections are often different even though the underlying database is identical. It is only meaningful to compare the "PRAGMA data\\_version" values returned by the same database connection at two different points in time.'},database_list:{signature:"PRAGMA database_list;",docs:'This pragma works like a query to return one row for each database attached to the current database connection. The second column is "main" for the main database file, "temp" for the database file used to store TEMP objects, or the name of the ATTACHed database for other database files. The third column is the name of the database file itself, or an empty string if the database is not associated with a file.'},default_cache_size:{signature:"PRAGMA schema.default_cache_size;\nPRAGMA schema.default_cache_size= Number-of-pages;",docs:"This pragma queries or sets the suggested maximum number of pages of disk cache that will be allocated per open database file. The difference between this pragma and [cache\\_size](https://www.sqlite.org/pragma.html#pragma_cache_size) is that the value set here persists across database connections. The value of the default cache size is stored in the 4-byte big-endian integer located at offset 48 in the header of the database file. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},defer_foreign_keys:{signature:"PRAGMA defer_foreign_keys;\nPRAGMA defer_foreign_keys = boolean;",docs:'When the defer\\_foreign\\_keys [PRAGMA](https://www.sqlite.org/pragma.html#syntax) is on, enforcement of all [foreign key constraints](https://www.sqlite.org/foreignkeys.html) is delayed until the outermost transaction is committed. The defer\\_foreign\\_keys pragma defaults to OFF so that foreign key constraints are only deferred if they are created as "DEFERRABLE INITIALLY DEFERRED". The defer\\_foreign\\_keys pragma is automatically switched off at each COMMIT or ROLLBACK. Hence, the defer\\_foreign\\_keys pragma must be separately enabled for each transaction. This pragma is only meaningful if foreign key constraints are enabled, of course.The [sqlite3\\_db\\_status](https://www.sqlite.org/c3ref/db_status.html)(db,[SQLITE\\_DBSTATUS\\_DEFERRED\\_FKS](https://www.sqlite.org/c3ref/c_dbstatus_options.html#sqlitedbstatusdeferredfks),...) C-language interface can be used during a transaction to determine if there are deferred and unresolved foreign key constraints.'},empty_result_callbacks:{signature:"PRAGMA empty_result_callbacks;\nPRAGMA empty_result_callbacks = boolean;",docs:"Query or change the empty-result-callbacks flag.The empty-result-callbacks flag affects the [sqlite3\\_exec()](https://www.sqlite.org/c3ref/exec.html) API only. Normally, when the empty-result-callbacks flag is cleared, the callback function supplied to the [sqlite3\\_exec()](https://www.sqlite.org/c3ref/exec.html) is not invoked for commands that return zero rows of data. When empty-result-callbacks is set in this situation, the callback function is invoked exactly once, with the third parameter set to 0 (NULL). This is to enable programs that use the [sqlite3\\_exec()](https://www.sqlite.org/c3ref/exec.html) API to retrieve column-names even when a query returns no data. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},encoding:{signature:"PRAGMA encoding;\nPRAGMA encoding = 'UTF-8';\nPRAGMA encoding = 'UTF-16';\nPRAGMA encoding = 'UTF-16le';\nPRAGMA encoding = 'UTF-16be';",docs:"In first form, if the main database has already been created, then this pragma returns the text encoding used by the main database, one of 'UTF-8', 'UTF-16le' (little-endian UTF-16 encoding) or 'UTF-16be' (big-endian UTF-16 encoding). If the main database has not already been created, then the value returned is the text encoding that will be used to create the main database, if it is created by this session.The second through fifth forms of this pragma set the encoding that the main database will be created with if it is created by this session. The string 'UTF-16' is interpreted as \"UTF-16 encoding using native machine byte-ordering\". It is not possible to change the text encoding of a database after it has been created and any attempt to do so will be silently ignored.If no encoding is first set with this pragma, then the encoding with which the main database will be created defaults to one determined by the [API used to open the connection](https://www.sqlite.org/c3ref/open.html).Once an encoding has been set for a database, it cannot be changed.Databases created by the [ATTACH](https://www.sqlite.org/lang_attach.html) command always use the same encoding as the main database. An attempt to [ATTACH](https://www.sqlite.org/lang_attach.html) a database with a different text encoding from the \"main\" database will fail."},foreign_key_check:{signature:"PRAGMA schema.foreign_key_check;\nPRAGMA schema.foreign_key_check(table-name);",docs:'The foreign\\_key\\_check pragma checks the database, or the table called "_table-name_", for [foreign key constraints](https://www.sqlite.org/foreignkeys.html) that are violated. The foreign\\_key\\_check pragma returns one row output for each foreign key violation. There are four columns in each result row. The first column is the name of the table that contains the REFERENCES clause. The second column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) of the row that contains the invalid REFERENCES clause, or NULL if the child table is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table. The third column is the name of the table that is referred to. The fourth column is the index of the specific foreign key constraint that failed. The fourth column in the output of the foreign\\_key\\_check pragma is the same integer as the first column in the output of the [foreign\\_key\\_list pragma](https://www.sqlite.org/pragma.html#pragma_foreign_key_list). When a "_table-name_" is specified, the only foreign key constraints checked are those created by REFERENCES clauses in the CREATE TABLE statement for _table-name_.'},foreign_key_list:{signature:"PRAGMA foreign_key_list(table-name);",docs:'This pragma returns one row for each [foreign key constraint](https://www.sqlite.org/foreignkeys.html) created by a REFERENCES clause in the CREATE TABLE statement of table "_table-name_".'},foreign_keys:{signature:"PRAGMA foreign_keys;\nPRAGMA foreign_keys = boolean;",docs:"Query, set, or clear the enforcement of [foreign key constraints](https://www.sqlite.org/foreignkeys.html). This pragma is a no-op within a transaction; foreign key constraint enforcement may only be enabled or disabled when there is no pending [BEGIN](https://www.sqlite.org/lang_transaction.html) or [SAVEPOINT](https://www.sqlite.org/lang_savepoint.html). Changing the foreign\\_keys setting affects the execution of all statements prepared using the database connection, including those prepared before the setting was changed. Any existing statements prepared using the legacy [sqlite3\\_prepare()](https://www.sqlite.org/c3ref/prepare.html) interface may fail with an [SQLITE\\_SCHEMA](https://www.sqlite.org/rescode.html#schema) error after the foreign\\_keys setting is changed. As of SQLite [version 3.6.19](https://www.sqlite.org/releaselog/3_6_19.html), the default setting for foreign key enforcement is OFF. However, that might change in a future release of SQLite. The default setting for foreign key enforcement can be specified at compile-time using the [SQLITE\\_DEFAULT\\_FOREIGN\\_KEYS](https://www.sqlite.org/compile.html#default_foreign_keys) preprocessor macro. To minimize future problems, applications should set the foreign key enforcement flag as required by the application and not depend on the default setting."},freelist_count:{signature:"PRAGMA schema.freelist_count;",docs:"Return the number of unused pages in the database file."},full_column_names:{signature:"PRAGMA full_column_names;\nPRAGMA full_column_names = boolean;",docs:"Query or change the full\\_column\\_names flag. This flag together with the [short\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_short_column_names) flag determine the way SQLite assigns names to result columns of [SELECT](https://www.sqlite.org/lang_select.html) statements. Result columns are named by applying the following rules in order:*   If there is an AS clause on the result, then the name of the column is the right-hand side of the AS clause.\n    \n*   If the result is a general expression, not a just the name of a source table column, then the name of the result is a copy of the expression text.\n    \n*   If the [short\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_short_column_names) pragma is ON, then the name of the result is the name of the source table column without the source table name prefix: COLUMN.\n    \n*   If both pragmas [short\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_short_column_names) and [full\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_full_column_names) are OFF then case (2) applies.\n    \n*   The name of the result column is a combination of the source table and source column name: TABLE.COLUMN\n    \n**This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},fullfsync:{signature:"PRAGMA fullfsync;\nPRAGMA fullfsync = boolean;",docs:"Query or change the fullfsync flag. This flag determines whether or not the F\\_FULLFSYNC syncing method is used on systems that support it. The default value of the fullfsync flag is off. Only Mac OS X supports F\\_FULLFSYNC.See also [checkpoint\\_fullfsync](https://www.sqlite.org/pragma.html#pragma_checkpoint_fullfsync)."},function_list:{signature:"PRAGMA function_list;",docs:"This pragma returns a list of SQL functions known to the database connection. Each row of the result describes a single calling signature for a single SQL function. Some SQL functions will have multiple rows in the result set if they can (for example) be invoked with a varying number of arguments or can accept text in various encodings."},hard_heap_limit:{signature:"PRAGMA hard_heap_limit;\nPRAGMA hard_heap_limit= N",docs:"This pragma invokes the [sqlite3\\_hard\\_heap\\_limit64()](https://www.sqlite.org/c3ref/hard_heap_limit64.html) interface with the argument N, if N is specified and N is a positive integer that is less than the current hard heap limit. The hard\\_heap\\_limit pragma always returns the same integer that would be returned by the [sqlite3\\_hard\\_heap\\_limit64](https://www.sqlite.org/c3ref/hard_heap_limit64.html)(-1) C-language function. That is to say, it always returns the value of the hard heap limit that is set after any changes imposed by this PRAGMA. This pragma can only lower the heap limit, never raise it. The C-language interface [sqlite3\\_hard\\_heap\\_limit64()](https://www.sqlite.org/c3ref/hard_heap_limit64.html) must be used to raise the heap limit.See also the [soft\\_heap\\_limit pragma](https://www.sqlite.org/pragma.html#pragma_soft_heap_limit)."},ignore_check_constraints:{signature:"PRAGMA ignore_check_constraints = boolean;",docs:"This pragma enables or disables the enforcement of CHECK constraints. The default setting is off, meaning that CHECK constraints are enforced by default."},incremental_vacuum:{signature:"PRAGMA schema.incremental_vacuum(N);\nPRAGMA schema.incremental_vacuum;",docs:'The incremental\\_vacuum pragma causes up to _N_ pages to be removed from the [freelist](https://www.sqlite.org/fileformat2.html#freelist). The database file is truncated by the same amount. The incremental\\_vacuum pragma has no effect if the database is not in [auto\\_vacuum=incremental](about:blank#pragma_auto_vacuum) mode or if there are no pages on the freelist. If there are fewer than _N_ pages on the freelist, or if _N_ is less than 1, or if the "(_N_)" argument is omitted, then the entire freelist is cleared.'},index_info:{signature:"PRAGMA schema.index_info(index-name);",docs:"This pragma returns one row for each key column in the named index. A key column is a column that is actually named in the [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) index statement or [UNIQUE constraint](https://www.sqlite.org/lang_createtable.html#uniqueconst) or [PRIMARY KEY constraint](https://www.sqlite.org/lang_createtable.html#primkeyconst) that created the index. Index entries also usually contain auxiliary columns that point back to the table row being indexed. The auxiliary index-columns are not shown by the index\\_info pragma, but they are listed by the [index\\_xinfo pragma](https://www.sqlite.org/pragma.html#pragma_index_xinfo).Output columns from the index\\_info pragma are as follows:*   The rank of the column within the index. (0 means left-most.)\n*   The rank of the column within the table being indexed. A value of -1 means [rowid](https://www.sqlite.org/lang_createtable.html#rowid) and a value of -2 means that an [expression](https://www.sqlite.org/expridx.html) is being used.\n*   The name of the column being indexed. This columns is NULL if the column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) or an [expression](https://www.sqlite.org/expridx.html).\nIf there is no index named _index-name_ but there is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table with that name, then (as of SQLite [version 3.30.0](https://www.sqlite.org/releaselog/3_30_0.html) on 2019-10-04) this pragma returns the PRIMARY KEY columns of the WITHOUT ROWID table as they are used in the records of the underlying b-tree, which is to say with duplicate columns removed."},index_list:{signature:"PRAGMA schema.index_list(table-name);",docs:'This pragma returns one row for each index associated with the given table. Output columns from the index\\_list pragma are as follows:*   A sequence number assigned to each index for internal tracking purposes.\n*   The name of the index.\n*   "1" if the index is UNIQUE and "0" if not.\n*   "c" if the index was created by a [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) statement, "u" if the index was created by a [UNIQUE constraint](https://www.sqlite.org/lang_createtable.html#uniqueconst), or "pk" if the index was created by a [PRIMARY KEY constraint](https://www.sqlite.org/lang_createtable.html#primkeyconst).\n*   "1" if the index is a [partial index](https://www.sqlite.org/partialindex.html) and "0" if not.'},index_xinfo:{signature:"PRAGMA schema.index_xinfo(index-name);",docs:"This pragma returns information about every column in an index. Unlike this [index\\_info pragma](https://www.sqlite.org/pragma.html#pragma_index_info), this pragma returns information about every column in the index, not just the key columns. (A key column is a column that is actually named in the [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) index statement or [UNIQUE constraint](https://www.sqlite.org/lang_createtable.html#uniqueconst) or [PRIMARY KEY constraint](https://www.sqlite.org/lang_createtable.html#primkeyconst) that created the index. Auxiliary columns are additional columns needed to locate the table entry that corresponds to each index entry.) Output columns from the index\\_xinfo pragma are as follows:*   The rank of the column within the index. (0 means left-most. Key columns come before auxiliary columns.)\n*   The rank of the column within the table being indexed, or -1 if the index-column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) of the table being indexed and -2 if the [index is on an expression](https://www.sqlite.org/expridx.html).\n*   The name of the column being indexed, or NULL if the index-column is the [rowid](https://www.sqlite.org/lang_createtable.html#rowid) of the table being indexed or an [expression](https://www.sqlite.org/expridx.html).\n*   1 if the index-column is sorted in reverse (DESC) order by the index and 0 otherwise.\n*   The name for the [collating sequence](https://www.sqlite.org/datatype3.html#collation) used to compare values in the index-column.\n*   1 if the index-column is a key column and 0 if the index-column is an auxiliary column.\nIf there is no index named _index-name_ but there is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table with that name, then (as of SQLite [version 3.30.0](https://www.sqlite.org/releaselog/3_30_0.html) on 2019-10-04) this pragma returns the columns of the WITHOUT ROWID table as they are used in the records of the underlying b-tree, which is to say with de-duplicated PRIMARY KEY columns first followed by data columns."},integrity_check:{signature:"PRAGMA schema.integrity_check;\nPRAGMA schema.integrity_check(N)PRAGMA schema.integrity_check(TABLENAME)",docs:"This pragma does a low-level formatting and consistency check of the database. The integrity\\_check pragma look for:*   Table or index entries that are out of sequence\n*   Misformatted records\n*   Missing pages\n*   Missing or surplus index entries\n*   UNIQUE, CHECK, and NOT NULL constraint errors\n*   Integrity of the freelist\n*   Sections of the database that are used more than once, or not at all\nIf the integrity\\_check pragma finds problems, strings are returned (as multiple rows with a single column per row) which describe the problems. Pragma integrity\\_check will return at most _N_ errors before the analysis quits, with N defaulting to 100. If pragma integrity\\_check finds no errors, a single row with the value 'ok' is returned.The usual case is that the entire database file is checked. However, if the argument is _TABLENAME_, then checking is only performed for the the table named and its associated indexes. This is called a \"partial integrity check\". Because only a subset of the database is checked, errors such as unused sections of the file or duplication use of the same section of the file by two or more tables cannot be detected. The freelist is only verified on a partial integrity check if _TABLENAME_ is [sqlite\\_schema](https://www.sqlite.org/schematab.html) or one of its aliases. Support for partial integrity checks was added with version 3.33.0 (2020-08-14). PRAGMA integrity\\_check does not find [FOREIGN KEY](https://www.sqlite.org/foreignkeys.html) errors. Use the [PRAGMA foreign\\_key\\_check](https://www.sqlite.org/pragma.html#pragma_foreign_key_check) command to find errors in FOREIGN KEY constraints.See also the [PRAGMA quick\\_check](https://www.sqlite.org/pragma.html#pragma_quick_check) command which does most of the checking of PRAGMA integrity\\_check but runs much faster."},journal_mode:{signature:"PRAGMA schema.journal_mode;\nPRAGMA schema.journal_mode= DELETE | TRUNCATE | PERSIST | MEMORY | WAL | OFF",docs:'This pragma queries or sets the journal mode for databases associated with the current [database connection](https://www.sqlite.org/c3ref/sqlite3.html).The first form of this pragma queries the current journaling mode for _database_. When _database_ is omitted, the "main" database is queried.The second form changes the journaling mode for "_database_" or for all attached databases if "_database_" is omitted. The new journal mode is returned. If the journal mode could not be changed, the original journal mode is returned.The DELETE journaling mode is the normal behavior. In the DELETE mode, the rollback journal is deleted at the conclusion of each transaction. Indeed, the delete operation is the action that causes the transaction to commit. (See the document titled [Atomic Commit In SQLite](https://www.sqlite.org/atomiccommit.html) for additional detail.)The TRUNCATE journaling mode commits transactions by truncating the rollback journal to zero-length instead of deleting it. On many systems, truncating a file is much faster than deleting the file since the containing directory does not need to be changed.The PERSIST journaling mode prevents the rollback journal from being deleted at the end of each transaction. Instead, the header of the journal is overwritten with zeros. This will prevent other database connections from rolling the journal back. The PERSIST journaling mode is useful as an optimization on platforms where deleting or truncating a file is much more expensive than overwriting the first block of a file with zeros. See also: [PRAGMA journal\\_size\\_limit](https://www.sqlite.org/pragma.html#pragma_journal_size_limit) and [SQLITE\\_DEFAULT\\_JOURNAL\\_SIZE\\_LIMIT](https://www.sqlite.org/compile.html#default_journal_size_limit).The MEMORY journaling mode stores the rollback journal in volatile RAM. This saves disk I/O but at the expense of database safety and integrity. If the application using SQLite crashes in the middle of a transaction when the MEMORY journaling mode is set, then the database file will very likely [go corrupt](https://www.sqlite.org/howtocorrupt.html#cfgerr).The WAL journaling mode uses a [write-ahead log](https://www.sqlite.org/wal.html) instead of a rollback journal to implement transactions. The WAL journaling mode is persistent; after being set it stays in effect across multiple database connections and after closing and reopening the database. A database in WAL journaling mode can only be accessed by SQLite [version 3.7.0](https://www.sqlite.org/releaselog/3_7_0.html) (2010-07-21) or later.The OFF journaling mode disables the rollback journal completely. No rollback journal is ever created and hence there is never a rollback journal to delete. The OFF journaling mode disables the atomic commit and rollback capabilities of SQLite. The [ROLLBACK](https://www.sqlite.org/lang_transaction.html) command no longer works; it behaves in an undefined way. Applications must avoid using the [ROLLBACK](https://www.sqlite.org/lang_transaction.html) command when the journal mode is OFF. If the application crashes in the middle of a transaction when the OFF journaling mode is set, then the database file will very likely [go corrupt](https://www.sqlite.org/howtocorrupt.html#cfgerr). Without a journal, there is no way for a statement to unwind partially completed operations following a constraint error. This might also leave the database in a corrupted state. For example, if a duplicate entry causes a [CREATE UNIQUE INDEX](https://www.sqlite.org/lang_createindex.html) statement to fail half-way through, it will leave behind a partially created, and hence corrupt, index. Because OFF journaling mode allows the database file to be corrupted using ordinary SQL, it is disabled when [SQLITE\\_DBCONFIG\\_DEFENSIVE](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigdefensive) is enabled.Note that the journal\\_mode for an [in-memory database](https://www.sqlite.org/inmemorydb.html) is either MEMORY or OFF and can not be changed to a different value. An attempt to change the journal\\_mode of an [in-memory database](https://www.sqlite.org/inmemorydb.html) to any setting other than MEMORY or OFF is ignored. Note also that the journal\\_mode cannot be changed while a transaction is active.'},journal_size_limit:{signature:"PRAGMA schema.journal_size_limit;\nPRAGMA schema.journal_size_limit = N;",docs:'If a database connection is operating in [exclusive locking mode](https://www.sqlite.org/pragma.html#pragma_locking_mode) or in [persistent journal mode](https://www.sqlite.org/pragma.html#pragma_journal_mode) (PRAGMA journal\\_mode=persist) then after committing a transaction the [rollback journal](https://www.sqlite.org/lockingv3.html#rollback) file may remain in the file-system. This increases performance for subsequent transactions since overwriting an existing file is faster than append to a file, but it also consumes file-system space. After a large transaction (e.g. a [VACUUM](https://www.sqlite.org/lang_vacuum.html)), the rollback journal file may consume a very large amount of space. Similarly, in [WAL mode](https://www.sqlite.org/wal.html), the write-ahead log file is not truncated following a [checkpoint](https://www.sqlite.org/wal.html#ckpt). Instead, SQLite reuses the existing file for subsequent WAL entries since overwriting is faster than appending. The journal\\_size\\_limit pragma may be used to limit the size of rollback-journal and WAL files left in the file-system after transactions or checkpoints. Each time a transaction is committed or a WAL file resets, SQLite compares the size of the rollback journal file or WAL file left in the file-system to the size limit set by this pragma and if the journal or WAL file is larger it is truncated to the limit. The second form of the pragma listed above is used to set a new limit in bytes for the specified database. A negative number implies no limit. To always truncate rollback journals and WAL files to their minimum size, set the journal\\_size\\_limit to zero. Both the first and second forms of the pragma listed above return a single result row containing a single integer column - the value of the journal size limit in bytes. The default journal size limit is -1 (no limit). The [SQLITE\\_DEFAULT\\_JOURNAL\\_SIZE\\_LIMIT](https://www.sqlite.org/compile.html#default_journal_size_limit) preprocessor macro can be used to change the default journal size limit at compile-time.This pragma only operates on the single database specified prior to the pragma name (or on the "main" database if no database is specified.) There is no way to change the journal size limit on all attached databases using a single PRAGMA statement. The size limit must be set separately for each attached database.'},legacy_alter_table:{signature:"PRAGMA legacy_alter_table;\nPRAGMA legacy_alter_table = boolean",docs:"This pragma sets or queries the value of the legacy\\_alter\\_table flag. When this flag is on, the [ALTER TABLE RENAME](https://www.sqlite.org/lang_altertable.html#altertabrename) command (for changing the name of a table) works as it did in SQLite 3.24.0 (2018-06-04) and earlier. More specifically, when this flag is on the [ALTER TABLE RENAME](https://www.sqlite.org/lang_altertable.html#altertabrename) command only rewrites the initial occurrence of the table name in its [CREATE TABLE](https://www.sqlite.org/lang_createtable.html) statement and in any associated [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) and [CREATE TRIGGER](https://www.sqlite.org/lang_createtrigger.html) statements. Other references to the table are unmodified, including:*   References to the table within the bodies of triggers and views.\n*   References to the table within CHECK constraints in the original CREATE TABLE statement.\n*   References to the table within the WHERE clauses of [partial indexes](https://www.sqlite.org/partialindex.html).\nThis pragma is provided as a work-around for older programs that contain code that expect the incomplete behavior of [ALTER TABLE RENAME](https://www.sqlite.org/lang_altertable.html#altertabrename) found in older versions of SQLite. New applications should leave this flag turned off. For compatibility with older [virtual table](https://www.sqlite.org/vtab.html) implementations, this flag is turned on temporarily while the [sqlite3\\_module.xRename](https://www.sqlite.org/vtab.html#xrename) method is being run. The value of this flag is restored after the [sqlite3\\_module.xRename](https://www.sqlite.org/vtab.html#xrename) method finishes. The legacy alter table behavior can also be toggled on and off using the [SQLITE\\_DBCONFIG\\_LEGACY\\_ALTER\\_TABLE](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfiglegacyaltertable) option to the [sqlite3\\_db\\_config()](https://www.sqlite.org/c3ref/db_config.html) interface. The legacy alter table behavior is a per-connection setting. Turning this features on or off affects all attached database files within the [database connection](https://www.sqlite.org/c3ref/sqlite3.html). The setting does not persist. Changing this setting in one connection does not affect any other connections."},legacy_file_format:{signature:"PRAGMA legacy_file_format;",docs:"This pragma no longer functions. It has become a no-op. The capabilities formerly provided by PRAGMA legacy\\_file\\_format are now available using the [SQLITE\\_DBCONFIG\\_LEGACY\\_FILE\\_FORMAT](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfiglegacyfileformat) option to the [sqlite3\\_db\\_config()](https://www.sqlite.org/c3ref/db_config.html) C-language interface."},locking_mode:{signature:"PRAGMA schema.locking_mode;\nPRAGMA schema.locking_mode= NORMAL | EXCLUSIVE",docs:'This pragma sets or queries the database connection locking-mode. The locking-mode is either NORMAL or EXCLUSIVE. In NORMAL locking-mode (the default unless overridden at compile-time using [SQLITE\\_DEFAULT\\_LOCKING\\_MODE](https://www.sqlite.org/compile.html#default_locking_mode)), a database connection unlocks the database file at the conclusion of each read or write transaction. When the locking-mode is set to EXCLUSIVE, the database connection never releases file-locks. The first time the database is read in EXCLUSIVE mode, a shared lock is obtained and held. The first time the database is written, an exclusive lock is obtained and held.Database locks obtained by a connection in EXCLUSIVE mode may be released either by closing the database connection, or by setting the locking-mode back to NORMAL using this pragma and then accessing the database file (for read or write). Simply setting the locking-mode to NORMAL is not enough - locks are not released until the next time the database file is accessed.There are three reasons to set the locking-mode to EXCLUSIVE.*   The application wants to prevent other processes from accessing the database file.\n*   The number of system calls for filesystem operations is reduced, possibly resulting in a small performance increase.\n*   [WAL](https://www.sqlite.org/wal.html) databases can be accessed in EXCLUSIVE mode without the use of shared memory. ([Additional information](https://www.sqlite.org/wal.html#noshm))\nWhen the locking\\_mode pragma specifies a particular database, for example: PRAGMA **main.**locking\\_mode=EXCLUSIVE; then the locking mode applies only to the named database. If no database name qualifier precedes the "locking\\_mode" keyword then the locking mode is applied to all databases, including any new databases added by subsequent [ATTACH](https://www.sqlite.org/lang_attach.html) commands.The "temp" database (in which TEMP tables and indices are stored) and [in-memory databases](https://www.sqlite.org/inmemorydb.html) always uses exclusive locking mode. The locking mode of temp and [in-memory databases](https://www.sqlite.org/inmemorydb.html) cannot be changed. All other databases use the normal locking mode by default and are affected by this pragma.If the locking mode is EXCLUSIVE when first entering [WAL journal mode](https://www.sqlite.org/wal.html), then the locking mode cannot be changed to NORMAL until after exiting WAL journal mode. If the locking mode is NORMAL when first entering WAL journal mode, then the locking mode can be changed between NORMAL and EXCLUSIVE and back again at any time and without needing to exit WAL journal mode.'},max_page_count:{signature:"PRAGMA schema.max_page_count;\nPRAGMA schema.max_page_count = N;",docs:"Query or set the maximum number of pages in the database file. Both forms of the pragma return the maximum page count. The second form attempts to modify the maximum page count. The maximum page count cannot be reduced below the current database size."},mmap_size:{signature:"PRAGMA schema.mmap_size;\nPRAGMA schema.mmap_size= N",docs:"Query or change the maximum number of bytes that are set aside for memory-mapped I/O on a single database. The first form (without an argument) queries the current limit. The second form (with a numeric argument) sets the limit for the specified database, or for all databases if the optional database name is omitted. In the second form, if the database name is omitted, the limit that is set becomes the default limit for all databases that are added to the [database connection](https://www.sqlite.org/c3ref/sqlite3.html) by subsequent [ATTACH](https://www.sqlite.org/lang_attach.html) statements.The argument N is the maximum number of bytes of the database file that will be accessed using memory-mapped I/O. If N is zero then memory mapped I/O is disabled. If N is negative, then the limit reverts to the default value determined by the most recent [sqlite3\\_config](https://www.sqlite.org/c3ref/config.html)([SQLITE\\_CONFIG\\_MMAP\\_SIZE](https://www.sqlite.org/c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize)), or to the compile time default determined by [SQLITE\\_DEFAULT\\_MMAP\\_SIZE](https://www.sqlite.org/compile.html#default_mmap_size) if not start-time limit has been set.The [PRAGMA mmap\\_size](https://www.sqlite.org/pragma.html#pragma_mmap_size) statement will never increase the amount of address space used for memory-mapped I/O above the hard limit set by the [SQLITE\\_MAX\\_MMAP\\_SIZE](https://www.sqlite.org/compile.html#max_mmap_size) compile-time option, nor the hard limit set at startup-time by the second argument to sqlite3\\_config([SQLITE\\_CONFIG\\_MMAP\\_SIZE](https://www.sqlite.org/c3ref/c_config_covering_index_scan.html#sqliteconfigmmapsize))The size of the memory-mapped I/O region cannot be changed while the memory-mapped I/O region is in active use, to avoid unmapping memory out from under running SQL statements. For this reason, the mmap\\_size pragma may be a no-op if the prior mmap\\_size is non-zero and there are other SQL statements running concurrently on the same [database connection](https://www.sqlite.org/c3ref/sqlite3.html)."},module_list:{signature:"PRAGMA module_list;",docs:"This pragma returns a list of [virtual table](https://www.sqlite.org/vtab.html) modules registered with the database connection."},optimize:{signature:"PRAGMA optimize;\nPRAGMA optimize(MASK);\nPRAGMA schema.optimize;\nPRAGMA schema.optimize(MASK);",docs:'Attempt to optimize the database. All schemas are optimized in the first two forms, and only the specified schema is optimized in the latter two.In most applications, using PRAGMA optimize as follows will help SQLite to achieve the best possible query performance:*   Applications with short-lived database connections should run "PRAGMA optimize;" once, just prior to closing each database connection.\n    \n*   Applications that use long-lived database connections should run "PRAGMA optimize=0x10002;" when the connection is first opened, and then also run "PRAGMA optimize;" periodically, perhaps once per day or once per hour.\n    \n*   All applications should run "PRAGMA optimize;" after a schema change, especially after one or more [CREATE INDEX](https://www.sqlite.org/lang_createindex.html) statements.\n    \nThis pragma is usually a no-op or nearly so and is very fast. On the occasions where it does need to run ANALYZE on one or more tables, it sets a temporary [analysis limit](https://www.sqlite.org/pragma.html#pragma_analysis_limit), valid for the duration of this pragma only, that prevents the ANALYZE invocations from running for too long.Recommended practice is that applications with short-lived database connections should run "PRAGMA optimize" once when the database connection closes. Applications with long-lived database connections should run "PRAGMA optimize=0x10002" when the database connection first opens, then run "PRAGMA optimize" again at periodic intervals - perhaps once per day. All applications should run "PRAGMA optimize" after schema changes, especially [CREATE INDEX](https://www.sqlite.org/lang_createindex.html). The details of optimizations performed by this pragma are expected to change and improve over time. Applications should anticipate that this pragma will perform new optimizations in future releases.The optional MASK argument is a bitmask of optimizations to perform: 0x00001 Debugging mode. Do not actually perform any optimizations but instead return one line of text for each optimization that would have been done. Off by default. 0x00002 Run [ANALYZE](https://www.sqlite.org/lang_analyze.html) on tables that might benefit. On by default. 0x00010 When running [ANALYZE](https://www.sqlite.org/lang_analyze.html), set a temporary [PRAGMA analysis\\_limit](https://www.sqlite.org/pragma.html#pragma_analysis_limit) to prevent excess run-time. On by default. 0x10000 Check the size of all tables, not just tables that have not been recently used, to see if any have grown and shrunk significantly and hence might benefit from being re-analyzed. Off by default. The default MASK is 0xfffe.To see all optimizations that would have been done without actually doing them, run "PRAGMA optimize(-1)".**Determination Of When To Run Analyze** In the current implementation, a table is analyzed if and only if all of the following are true:*   MASK bit 0x02 is set.\n*   The table is an ordinary table, not a view or virtual table.\n*   The table name does not begin with "sqlite\\_".\n*   One or more of the following are true:\n    1.  The 0x10000 bit of MASK is set\n    2.  One or more indexes on the table lack entries in the sqlite\\_stat1 table.\n    3.  The query planner used sqlite\\_stat1 statistics for one or more indexes of this table at some point during the lifetime of the current database connection.\n*   One or more of the following are true:\n    1.  One or more indexes on the table lack entries in the sqlite\\_stat1 table.\n    2.  The number of rows in the table has increased or decreased by 10-fold since the last time ANALYZE was run on the table.\nThe rules for when tables are analyzed are likely to change in future releases. New MASK values may be added in the future. Future versions of this pragma might accept a string literal argument instead of a bit mask, though the bit mask argument will continue to be supported for backwards compatibility.'},page_count:{signature:"PRAGMA schema.page_count;",docs:"Return the total number of pages in the database file."},page_size:{signature:"PRAGMA schema.page_size;\nPRAGMA schema.page_size = bytes;",docs:"Query or set the page size of the database. The page size must be a power of two between 512 and 65536 inclusive. When a new database is created, SQLite assigns a page size to the database based on platform and filesystem. For many years, the default page size was almost always 1024 bytes, but beginning with SQLite [version 3.12.0](https://www.sqlite.org/releaselog/3_12_0.html) (2016-03-29), the default page size increased to 4096. The default page size is recommended for most applications. Specifying a new page size does not change the page size immediately. Instead, the new page size is remembered and is used to set the page size when the database is first created, if it does not already exist when the page\\_size pragma is issued, or at the next [VACUUM](https://www.sqlite.org/lang_vacuum.html) command that is run on the same database connection while not in [WAL mode](https://www.sqlite.org/wal.html).The [SQLITE\\_DEFAULT\\_PAGE\\_SIZE](https://www.sqlite.org/compile.html#default_page_size) compile-time option can be used to change the default page size assigned to new databases."},parser_trace:{signature:"PRAGMA parser_trace = boolean;\n ",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the parser\\_trace pragma can be used to turn on tracing for the SQL parser used internally by SQLite. This feature is used for debugging SQLite itself. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},pragma_list:{signature:"PRAGMA pragma_list;",docs:"This pragma returns a list of PRAGMA commands known to the database connection."},query_only:{signature:"PRAGMA query_only;\nPRAGMA query_only = boolean;",docs:"The query\\_only pragma prevents data changes on database files when enabled. When this pragma is enabled, any attempt to CREATE, DELETE, DROP, INSERT, or UPDATE will result in an [SQLITE\\_READONLY](https://www.sqlite.org/rescode.html#readonly) error. However, the database is not truly read-only. You can still run a [checkpoint](https://www.sqlite.org/wal.html#ckpt) or a [COMMIT](https://www.sqlite.org/lang_transaction.html) and the return value of the [sqlite3\\_db\\_readonly()](https://www.sqlite.org/c3ref/db_readonly.html) routine is not affected."},quick_check:{signature:"PRAGMA schema.quick_check;\nPRAGMA schema.quick_check(N)PRAGMA schema.quick_check(TABLENAME)",docs:"The pragma is like [integrity\\_check](https://www.sqlite.org/pragma.html#pragma_integrity_check) except that it does not verify UNIQUE constraints and does not verify that index content matches table content. By skipping UNIQUE and index consistency checks, quick\\_check is able to run faster. PRAGMA quick\\_check runs in O(N) time whereas [PRAGMA integrity\\_check](https://www.sqlite.org/pragma.html#pragma_integrity_check) requires O(NlogN) time where N is the total number of rows in the database. Otherwise the two pragmas are the same."},read_uncommitted:{signature:"PRAGMA read_uncommitted;\nPRAGMA read_uncommitted = boolean;",docs:"Query, set, or clear READ UNCOMMITTED isolation. The default isolation level for SQLite is SERIALIZABLE. Any process or thread can select READ UNCOMMITTED isolation, but SERIALIZABLE will still be used except between connections that share a common page and schema cache. Cache sharing is enabled using the [sqlite3\\_enable\\_shared\\_cache()](https://www.sqlite.org/c3ref/enable_shared_cache.html) API. Cache sharing is disabled by default. See [SQLite Shared-Cache Mode](https://www.sqlite.org/sharedcache.html) for additional information."},recursive_triggers:{signature:"PRAGMA recursive_triggers;\nPRAGMA recursive_triggers = boolean;",docs:"Query, set, or clear the recursive trigger capability. Changing the recursive\\_triggers setting affects the execution of all statements prepared using the database connection, including those prepared before the setting was changed. Any existing statements prepared using the legacy [sqlite3\\_prepare()](https://www.sqlite.org/c3ref/prepare.html) interface may fail with an [SQLITE\\_SCHEMA](https://www.sqlite.org/rescode.html#schema) error after the recursive\\_triggers setting is changed. Prior to SQLite [version 3.6.18](https://www.sqlite.org/releaselog/3_6_18.html) (2009-09-11), recursive triggers were not supported. The behavior of SQLite was always as if this pragma was set to OFF. Support for recursive triggers was added in version 3.6.18 but was initially turned OFF by default, for compatibility. Recursive triggers may be turned on by default in future versions of SQLite. The depth of recursion for triggers has a hard upper limit set by the [SQLITE\\_MAX\\_TRIGGER\\_DEPTH](https://www.sqlite.org/limits.html#max_trigger_depth) compile-time option and a run-time limit set by [sqlite3\\_limit](https://www.sqlite.org/c3ref/limit.html)(db,[SQLITE\\_LIMIT\\_TRIGGER\\_DEPTH](https://www.sqlite.org/c3ref/c_limit_attached.html#sqlitelimittriggerdepth),...)."},reverse_unordered_selects:{signature:"PRAGMA reverse_unordered_selects;\nPRAGMA reverse_unordered_selects = boolean;",docs:"When enabled, this PRAGMA causes many [SELECT](https://www.sqlite.org/lang_select.html) statements without an ORDER BY clause to emit their results in the reverse order from what they normally would. This can help debug applications that are making invalid assumptions about the result order. The reverse\\_unordered\\_selects pragma works for most SELECT statements, however the query planner may sometimes choose an algorithm that is not easily reversed, in which case the output will appear in the same order regardless of the reverse\\_unordered\\_selects setting. SQLite makes no guarantees about the order of results if a SELECT omits the ORDER BY clause. Even so, the order of results does not change from one run to the next, and so many applications mistakenly come to depend on the arbitrary output order whatever that order happens to be. However, sometimes new versions of SQLite will contain optimizer enhancements that will cause the output order of queries without ORDER BY clauses to shift. When that happens, applications that depend on a certain output order might malfunction. By running the application multiple times with this pragma both disabled and enabled, cases where the application makes faulty assumptions about output order can be identified and fixed early, reducing problems that might be caused by linking against a different version of SQLite."},schema_version:{signature:"PRAGMA schema.schema_version;\nPRAGMA schema.schema_version = integer;",docs:'The schema\\_version pragma will get or set the value of the schema-version integer at offset 40 in the [database header](https://www.sqlite.org/fileformat2.html#database_header). SQLite automatically increments the schema-version whenever the schema changes. As each SQL statement runs, the schema version is checked to ensure that the schema has not changed since the SQL statement was [prepared](https://www.sqlite.org/c3ref/prepare.html). Subverting this mechanism by using "PRAGMA schema\\_version=N" to change the value of the schema\\_version may cause SQL statement to run using an obsolete schema, which can lead to incorrect answers and/or [database corruption](https://www.sqlite.org/howtocorrupt.html#cfgerr). It is always safe to read the schema\\_version, but changing the schema\\_version can cause problems. For this reason, attempts to change the value of schema\\_version are a silent no-op when [defensive mode](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigdefensive) is enabled for a database connection. **Warning:** Misuse of this pragma can result in [database corruption](https://www.sqlite.org/howtocorrupt.html#cfgerr). For the purposes of this pragma, the [VACUUM](https://www.sqlite.org/lang_vacuum.html) command is considered a schema change, since [VACUUM](https://www.sqlite.org/lang_vacuum.html) will usually alter the "rootpage" values for entries in the [sqlite\\_schema table](https://www.sqlite.org/schematab.html). See also the [application\\_id pragma](https://www.sqlite.org/pragma.html#pragma_application_id) and [user\\_version pragma](https://www.sqlite.org/pragma.html#pragma_user_version).'},secure_delete:{signature:"PRAGMA schema.secure_delete;\nPRAGMA schema.secure_delete = boolean|FAST",docs:'Query or change the secure-delete setting. When secure\\_delete is on, SQLite overwrites deleted content with zeros. The default setting for secure\\_delete is determined by the [SQLITE\\_SECURE\\_DELETE](https://www.sqlite.org/compile.html#secure_delete) compile-time option and is normally off. The off setting for secure\\_delete improves performance by reducing the number of CPU cycles and the amount of disk I/O. Applications that wish to avoid leaving forensic traces after content is deleted or updated should enable the secure\\_delete pragma prior to performing the delete or update, or else run [VACUUM](https://www.sqlite.org/lang_vacuum.html) after the delete or update. The "fast" setting for secure\\_delete (added circa 2017-08-01) is an intermediate setting in between "on" and "off". When secure\\_delete is set to "fast", SQLite will overwrite deleted content with zeros only if doing so does not increase the amount of I/O. In other words, the "fast" setting uses more CPU cycles but does not use more I/O. This has the effect of purging all old content from [b-tree pages](https://www.sqlite.org/fileformat2.html#btree), but leaving forensic traces on [freelist pages](https://www.sqlite.org/fileformat2.html#freelist). When there are [attached databases](https://www.sqlite.org/lang_attach.html) and no database is specified in the pragma, all databases have their secure-delete setting altered. The secure-delete setting for newly attached databases is the setting of the main database at the time the ATTACH command is evaluated. When multiple database connections share the same cache, changing the secure-delete flag on one database connection changes it for them all. **Limitation:** The secure\\_delete pragma only causes deleted content to be scrubbed from ordinary tables. If [virtual tables](https://www.sqlite.org/vtab.html) store content in [shadow tables](https://www.sqlite.org/vtab.html#xshadowname), then deleting content from the virtual table does not necessarily remove forensic traces from the shadow tables. In particular, the [FTS3](https://www.sqlite.org/fts3.html) and [FTS5](https://www.sqlite.org/fts5.html) virtual tables that come bundled with SQLite might leave forensic traces in their shadow tables even if the secure\\_delete pragma is enabled.'},short_column_names:{signature:"PRAGMA short_column_names;\nPRAGMA short_column_names = boolean;",docs:"Query or change the short-column-names flag. This flag affects the way SQLite names columns of data returned by [SELECT](https://www.sqlite.org/lang_select.html) statements. See the [full\\_column\\_names](https://www.sqlite.org/pragma.html#pragma_full_column_names) pragma for full details. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},shrink_memory:{signature:"PRAGMA shrink_memory",docs:"This pragma causes the database connection on which it is invoked to free up as much memory as it can, by calling [sqlite3\\_db\\_release\\_memory()](https://www.sqlite.org/c3ref/db_release_memory.html)."},soft_heap_limit:{signature:"PRAGMA soft_heap_limit;\nPRAGMA soft_heap_limit= N",docs:"This pragma invokes the [sqlite3\\_soft\\_heap\\_limit64()](https://www.sqlite.org/c3ref/hard_heap_limit64.html) interface with the argument N, if N is specified and is a non-negative integer. The soft\\_heap\\_limit pragma always returns the same integer that would be returned by the [sqlite3\\_soft\\_heap\\_limit64](https://www.sqlite.org/c3ref/hard_heap_limit64.html)(-1) C-language function. See also the [hard\\_heap\\_limit pragma](https://www.sqlite.org/pragma.html#pragma_hard_heap_limit)."},stats:{signature:"PRAGMA stats;\n ",docs:"This pragma returns auxiliary information about tables and indices. The returned information is used during testing to help verify that the query planner is operating correctly. The format and meaning of this pragma will likely change from one release to the next. Because of its volatility, the behavior and output format of this pragma are deliberately undocumented. The intended use of this pragma is only for testing and validation of SQLite. This pragma is subject to change without notice and is not recommended for use by application programs."},synchronous:{signature:"PRAGMA schema.synchronous;\nPRAGMA schema.synchronous = 0 | OFF | 1 | NORMAL | 2 | FULL | 3 | EXTRA;",docs:'Query or change the setting of the "synchronous" flag. The first (query) form will return the synchronous setting as an integer. The second form changes the synchronous setting. The meanings of the various synchronous settings are as follows:\n\n**EXTRA** (3)\n\nEXTRA synchronous is like FULL with the addition that the directory containing a [rollback journal](https://www.sqlite.org/lockingv3.html#rollback) is synced after that journal is unlinked to commit a transaction in DELETE mode. EXTRA provides additional durability if the commit is followed closely by a power loss.\n\n**FULL** (2)\n\nWhen synchronous is FULL (2), the SQLite database engine will use the xSync method of the [VFS](https://www.sqlite.org/vfs.html) to ensure that all content is safely written to the disk surface prior to continuing. This ensures that an operating system crash or power failure will not corrupt the database. FULL synchronous is very safe, but it is also slower. FULL is the most commonly used synchronous setting when not in [WAL mode](https://www.sqlite.org/wal.html).\n\n**NORMAL** (1)\n\nWhen synchronous is NORMAL (1), the SQLite database engine will still sync at the most critical moments, but less often than in FULL mode. There is a very small (though non-zero) chance that a power failure at just the wrong time could corrupt the database in [journal\\_mode](https://www.sqlite.org/pragma.html#pragma_journal_mode)\\=DELETE on an older filesystem. [WAL mode](https://www.sqlite.org/wal.html) is safe from corruption with synchronous=NORMAL, and probably DELETE mode is safe too on modern filesystems. WAL mode is always consistent with synchronous=NORMAL, but WAL mode does lose durability. A transaction committed in WAL mode with synchronous=NORMAL might roll back following a power loss or system crash. Transactions are durable across application crashes regardless of the synchronous setting or journal mode. The synchronous=NORMAL setting is a good choice for most applications running in [WAL mode](https://www.sqlite.org/wal.html).\n\n**OFF** (0)\n\nWith synchronous OFF (0), SQLite continues without syncing as soon as it has handed data off to the operating system. If the application running SQLite crashes, the data will be safe, but the database [might become corrupted](https://www.sqlite.org/howtocorrupt.html#cfgerr) if the operating system crashes or the computer loses power before that data has been written to the disk surface. On the other hand, commits can be orders of magnitude faster with synchronous OFF.\n\nIn [WAL](https://www.sqlite.org/wal.html) mode when synchronous is NORMAL (1), the WAL file is synchronized before each [checkpoint](https://www.sqlite.org/wal.html#ckpt) and the database file is synchronized after each completed [checkpoint](https://www.sqlite.org/wal.html#ckpt) and the WAL file header is synchronized when a WAL file begins to be reused after a checkpoint, but no sync operations occur during most transactions. With synchronous=FULL in WAL mode, an additional sync operation of the WAL file happens after each transaction commit. The extra WAL sync following each transaction helps ensure that transactions are durable across a power loss. Transactions are consistent with or without the extra syncs provided by synchronous=FULL. If durability is not a concern, then synchronous=NORMAL is normally all one needs in WAL mode.The TEMP schema always has synchronous=OFF since the content of of TEMP is ephemeral and is not expected to survive a power outage. Attempts to change the synchronous setting for TEMP are silently ignored. See also the [fullfsync](https://www.sqlite.org/pragma.html#pragma_fullfsync) and [checkpoint\\_fullfsync](https://www.sqlite.org/pragma.html#pragma_checkpoint_fullfsync) pragmas.'},table_info:{signature:"PRAGMA schema.table_info(table-name);",docs:'This pragma returns one row for each normal column in the named table. Columns in the result set include: "name" (its name); "type" (data type if given, else \'\'); "notnull" (whether or not the column can be NULL); "dflt\\_value" (the default value for the column); and "pk" (either zero for columns that are not part of the primary key, or the 1-based index of the column within the primary key).The "cid" column should not be taken to mean more than "rank within the current result set".The table named in the table\\_info pragma can also be a view.This pragma does not show information about [generated columns](https://www.sqlite.org/gencol.html) or [hidden columns](https://www.sqlite.org/vtab.html#hiddencol). Use [PRAGMA table\\_xinfo](https://www.sqlite.org/pragma.html#pragma_table_xinfo) to get a more complete list of columns that includes generated and hidden columns.'},table_list:{signature:" PRAGMA table_list;\nPRAGMA schema.table_list;\nPRAGMA table_list(table-name);",docs:'This pragma returns information about the tables and views in the schema, one table per row of output. The table\\_list pragma first appeared in SQLite version 3.37.0 (2021-11-27). As of its initial release the columns returned by the table\\_list pragma include those listed below. Future versions of SQLite will probably add additional columns of output.*   **schema**: the schema in which the table or view appears (for example "main" or "temp").\n*   **name**: the name of the table or view.\n*   **type**: the type of object - one of "table", "view", "shadow" (for [shadow tables](https://www.sqlite.org/vtab.html#xshadowname)), or "virtual" for [virtual tables](https://www.sqlite.org/vtab.html).\n*   **ncol**: the number of columns in the table, including [generated columns](https://www.sqlite.org/gencol.html) and [hidden columns](https://www.sqlite.org/vtab.html#hiddencol).\n*   **wr**: 1 if the table is a [WITHOUT ROWID](https://www.sqlite.org/withoutrowid.html) table or 0 if is not.\n*   **strict**: 1 if the table is a [STRICT table](https://www.sqlite.org/stricttables.html) or 0 if it is not.\n*   _Additional columns will likely be added in future releases._\nThe default behavior is to show all tables in all schemas. If the _schema._ name appears before the pragma, then only tables in that one schema are shown. If a _table-name_ argument is supplied, then only information about that one table is returned.'},table_xinfo:{signature:"PRAGMA schema.table_xinfo(table-name);",docs:'This pragma returns one row for each column in the named table, including [generated columns](https://www.sqlite.org/gencol.html) and [hidden columns](https://www.sqlite.org/vtab.html#hiddencol). The output has the same columns as for [PRAGMA table\\_info](https://www.sqlite.org/pragma.html#pragma_table_info) plus a column, "hidden", whose value signifies a normal column (0), a dynamic or stored generated column (2 or 3), or a hidden column in a virtual table (1). The rows for which this field is non-zero are those omitted for [PRAGMA table\\_info](https://www.sqlite.org/pragma.html#pragma_table_info).'},temp_store:{signature:"PRAGMA temp_store;\nPRAGMA temp_store = 0 | DEFAULT | 1 | FILE | 2 | MEMORY;",docs:'Query or change the setting of the "**temp\\_store**" parameter. When temp\\_store is DEFAULT (0), the compile-time C preprocessor macro [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) is used to determine where temporary tables and indices are stored. When temp\\_store is MEMORY (2) [temporary tables](https://www.sqlite.org/inmemorydb.html#temp_db) and indices are kept as if they were in pure [in-memory databases](https://www.sqlite.org/inmemorydb.html). When temp\\_store is FILE (1) [temporary tables](https://www.sqlite.org/inmemorydb.html#temp_db) and indices are stored in a file. The [temp\\_store\\_directory](https://www.sqlite.org/pragma.html#pragma_temp_store_directory) pragma can be used to specify the directory containing temporary files when **FILE** is specified. When the temp\\_store setting is changed, all existing temporary tables, indices, triggers, and views are immediately deleted.It is possible for the library compile-time C preprocessor symbol [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) to override this pragma setting. The following table summarizes the interaction of the [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) preprocessor macro and the temp\\_store pragma:\n\n| [SQLITE\\_TEMP\\_STORE](https://www.sqlite.org/compile.html#temp_store) | PRAGMA  \ntemp\\_store | Storage used for  \nTEMP tables and indices |\n| --- | --- | --- |\n| 0 | _any_ | file |\n| 1 | 0 | file |\n| 1 | 1 | file |\n| 1 | 2 | memory |\n| 2 | 0 | memory |\n| 2 | 1 | file |\n| 2 | 2 | memory |\n| 3 | _any_ | memory |'},temp_store_directory:{signature:"PRAGMA temp_store_directory;\nPRAGMA temp_store_directory = 'directory-name';",docs:"Query or change the value of the [sqlite3\\_temp\\_directory](https://www.sqlite.org/c3ref/temp_directory.html) global variable, which many operating-system interface backends use to determine where to store [temporary tables](https://www.sqlite.org/inmemorydb.html#temp_db) and indices.When the temp\\_store\\_directory setting is changed, all existing temporary tables, indices, triggers, and viewers in the database connection that issued the pragma are immediately deleted. In practice, temp\\_store\\_directory should be set immediately after the first database connection for a process is opened. If the temp\\_store\\_directory is changed for one database connection while other database connections are open in the same process, then the behavior is undefined and probably undesirable.Changing the temp\\_store\\_directory setting is not threadsafe. Never change the temp\\_store\\_directory setting if another thread within the application is running any SQLite interface at the same time. Doing so results in undefined behavior. Changing the temp\\_store\\_directory setting writes to the [sqlite3\\_temp\\_directory](https://www.sqlite.org/c3ref/temp_directory.html) global variable and that global variable is not protected by a mutex.The value _directory-name_ should be enclosed in single quotes. To revert the directory to the default, set the _directory-name_ to an empty string, e.g., _PRAGMA temp\\_store\\_directory = ''_. An error is raised if _directory-name_ is not found or is not writable. The default directory for temporary files depends on the OS. Some OS interfaces may choose to ignore this variable and place temporary files in some other directory different from the directory specified here. In that sense, this pragma is only advisory. **This pragma is deprecated** and exists for backwards compatibility only. New applications should avoid using this pragma. Older applications should discontinue use of this pragma at the earliest opportunity. This pragma may be omitted from the build when SQLite is compiled using [SQLITE\\_OMIT\\_DEPRECATED](https://www.sqlite.org/compile.html#omit_deprecated)."},threads:{signature:"PRAGMA threads;\nPRAGMA threads = N;",docs:"Query or change the value of the [sqlite3\\_limit](https://www.sqlite.org/c3ref/limit.html)(db,[SQLITE\\_LIMIT\\_WORKER\\_THREADS](https://www.sqlite.org/c3ref/c_limit_attached.html#sqlitelimitworkerthreads),...) limit for the current database connection. This limit sets an upper bound on the number of auxiliary threads that a [prepared statement](https://www.sqlite.org/c3ref/stmt.html) is allowed to launch to assist with a query. The default limit is 0 unless it is changed using the [SQLITE\\_DEFAULT\\_WORKER\\_THREADS](https://www.sqlite.org/compile.html#default_worker_threads) compile-time option. When the limit is zero, that means no auxiliary threads will be launched.This pragma is a thin wrapper around the [sqlite3\\_limit](https://www.sqlite.org/c3ref/limit.html)(db,[SQLITE\\_LIMIT\\_WORKER\\_THREADS](https://www.sqlite.org/c3ref/c_limit_attached.html#sqlitelimitworkerthreads),...) interface."},trusted_schema:{signature:"PRAGMA trusted_schema;\nPRAGMA trusted_schema = boolean;",docs:"The trusted\\_schema setting is a per-connection boolean that determines whether or not SQL functions and virtual tables that have not been security audited are allowed to be run by views, triggers, or in expressions of the schema such as [CHECK constraints](https://www.sqlite.org/lang_createtable.html#ckconst), [DEFAULT clauses](https://www.sqlite.org/lang_createtable.html#dfltval), [generated columns](https://www.sqlite.org/gencol.html), [expression indexes](https://www.sqlite.org/expridx.html), and/or [partial indexes](https://www.sqlite.org/partialindex.html). This setting can also be controlled using the [sqlite3\\_db\\_config](https://www.sqlite.org/c3ref/db_config.html)(db,[SQLITE\\_DBCONFIG\\_TRUSTED\\_SCHEMA](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigtrustedschema),...) C-language interface. In order to maintain backwards compatibility, this setting is ON by default. There are advantages to turning it off, and most applications will be unaffected if it is turned off. For that reason, all applications are encouraged to switch this setting off on every database connection as soon as that connection is opened. The [\\-DSQLITE\\_TRUSTED\\_SCHEMA=0](https://www.sqlite.org/compile.html#trusted_schema) compile-time option will cause this setting to default to OFF."},user_version:{signature:"PRAGMA schema.user_version;\nPRAGMA schema.user_version = integer;",docs:"The user\\_version pragma will get or set the value of the user-version integer at offset 60 in the [database header](https://www.sqlite.org/fileformat2.html#database_header). The user-version is an integer that is available to applications to use however they want. SQLite makes no use of the user-version itself. See also the [application\\_id pragma](https://www.sqlite.org/pragma.html#pragma_application_id) and [schema\\_version pragma](https://www.sqlite.org/pragma.html#pragma_schema_version)."},vdbe_addoptrace:{signature:"PRAGMA vdbe_addoptrace = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_addoptrace pragma can be used to cause a complete VDBE opcodes to be displayed as they are created during code generation. This feature is used for debugging SQLite itself. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},vdbe_debug:{signature:"PRAGMA vdbe_debug = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_debug pragma is a shorthand for three other debug-only pragmas: vdbe\\_addoptrace, vdbe\\_listing, and vdbe\\_trace. This feature is used for debugging SQLite itself. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},vdbe_listing:{signature:"PRAGMA vdbe_listing = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_listing pragma can be used to cause a complete listing of the virtual machine opcodes to appear on standard output as each statement is evaluated. With listing is on, the entire content of a program is printed just prior to beginning execution. The statement executes normally after the listing is printed. This feature is used for debugging SQLite itself. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},vdbe_trace:{signature:"PRAGMA vdbe_trace = boolean;",docs:"If SQLite has been compiled with the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option, then the vdbe\\_trace pragma can be used to cause virtual machine opcodes to be printed on standard output as they are evaluated. This feature is used for debugging SQLite. See the [VDBE documentation](https://www.sqlite.org/vdbe.html#trace) for more information. This pragma is intended for use when debugging SQLite itself. It is only available when the [SQLITE\\_DEBUG](https://www.sqlite.org/compile.html#debug) compile-time option is used."},wal_autocheckpoint:{signature:"PRAGMA wal_autocheckpoint;\nPRAGMA wal_autocheckpoint= N;",docs:"This pragma queries or sets the [write-ahead log](https://www.sqlite.org/wal.html) [auto-checkpoint](https://www.sqlite.org/wal.html#ckpt) interval. When the [write-ahead log](https://www.sqlite.org/wal.html) is enabled (via the [journal\\_mode pragma](https://www.sqlite.org/pragma.html#pragma_journal_mode)) a checkpoint will be run automatically whenever the write-ahead log equals or exceeds _N_ pages in length. Setting the auto-checkpoint size to zero or a negative value turns auto-checkpointing off.This pragma is a wrapper around the [sqlite3\\_wal\\_autocheckpoint()](https://www.sqlite.org/c3ref/wal_autocheckpoint.html) C interface. All automatic checkpoints are [PASSIVE](https://www.sqlite.org/c3ref/wal_checkpoint_v2.html).Autocheckpointing is enabled by default with an interval of 1000 or [SQLITE\\_DEFAULT\\_WAL\\_AUTOCHECKPOINT](https://www.sqlite.org/compile.html#default_wal_autocheckpoint)."},wal_checkpoint:{signature:"PRAGMA schema.wal_checkpoint;\nPRAGMA schema.wal_checkpoint(PASSIVE);\nPRAGMA schema.wal_checkpoint(FULL);\nPRAGMA schema.wal_checkpoint(RESTART);\nPRAGMA schema.wal_checkpoint(TRUNCATE);",docs:"If the [write-ahead log](https://www.sqlite.org/wal.html) is enabled (via the [journal\\_mode pragma](https://www.sqlite.org/pragma.html#pragma_journal_mode)), this pragma causes a [checkpoint](https://www.sqlite.org/wal.html#ckpt) operation to run on database _database_, or on all attached databases if _database_ is omitted. If [write-ahead log](https://www.sqlite.org/wal.html) mode is disabled, this pragma is a harmless no-op.Invoking this pragma without an argument is equivalent to calling the [sqlite3\\_wal\\_checkpoint()](https://www.sqlite.org/c3ref/wal_checkpoint.html) C interface.sqlite3\\_wal\\_checkpoint\\_v2()3rd parameter\n\nPASSIVE\n\nCheckpoint as many frames as possible without waiting for any database readers or writers to finish. Sync the db file if all frames in the log are checkpointed. This mode is the same as calling the [sqlite3\\_wal\\_checkpoint()](https://www.sqlite.org/c3ref/wal_checkpoint.html) C interface. The [busy-handler callback](https://www.sqlite.org/c3ref/busy_handler.html) is never invoked in this mode.\n\nFULL\n\nThis mode blocks (invokes the [busy-handler callback](https://www.sqlite.org/c3ref/busy_handler.html)) until there is no database writer and all readers are reading from the most recent database snapshot. It then checkpoints all frames in the log file and syncs the database file. FULL blocks concurrent writers while it is running, but readers can proceed.\n\nRESTART\n\nThis mode works the same way as FULL with the addition that after checkpointing the log file it blocks (calls the [busy-handler callback](https://www.sqlite.org/c3ref/busy_handler.html)) until all readers are finished with the log file. This ensures that the next client to write to the database file restarts the log file from the beginning. RESTART blocks concurrent writers while it is running, but allowed readers to proceed.\n\nTRUNCATE\n\nThis mode works the same way as RESTART with the addition that the WAL file is truncated to zero bytes upon successful completion.\n\nThe wal\\_checkpoint pragma returns a single row with three integer columns. The first column is usually 0 but will be 1 if a RESTART or FULL or TRUNCATE checkpoint was blocked from completing, for example because another thread or process was actively using the database. In other words, the first column is 0 if the equivalent call to [sqlite3\\_wal\\_checkpoint\\_v2()](https://www.sqlite.org/c3ref/wal_checkpoint_v2.html) would have returned [SQLITE\\_OK](https://www.sqlite.org/rescode.html#ok) or 1 if the equivalent call would have returned [SQLITE\\_BUSY](https://www.sqlite.org/rescode.html#busy). The second column is the number of modified pages that have been written to the write-ahead log file. The third column is the number of pages in the write-ahead log file that have been successfully moved back into the database file at the conclusion of the checkpoint. The second and third column are -1 if there is no write-ahead log, for example if this pragma is invoked on a database connection that is not in [WAL mode](https://www.sqlite.org/wal.html)."},writable_schema:{signature:"PRAGMA writable_schema = boolean;\nPRAGMA writable_schema = RESET",docs:'When this pragma is on, and the [SQLITE\\_DBCONFIG\\_DEFENSIVE](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html#sqlitedbconfigdefensive) flag is off, then the [sqlite\\_schema](https://www.sqlite.org/schematab.html) table can be changed using ordinary [UPDATE](https://www.sqlite.org/lang_update.html), [INSERT](https://www.sqlite.org/lang_insert.html), and [DELETE](https://www.sqlite.org/lang_delete.html) statements. If the argument is "RESET" then schema writing is disabled (as with "PRAGMA writable\\_schema=OFF") and, in addition, the schema is reloaded. **Warning:** misuse of this pragma can easily result in a [corrupt database file](https://www.sqlite.org/howtocorrupt.html#cfgerr). '}},o=async(o,r,l,h,c={})=>{if(void 0!==l&&(!(l in t)||h)){{const e=a[l.toLowerCase()];if(e)return`\`\`\`query-editor\n${l.toLowerCase()}${e.args}\n\`\`\`\n\n${e.docs}\n\n*source: sqlite.org*`}{const e=n[(l.startsWith("pragma_")?l.slice(7):l).toLowerCase()];if(e)return`\`\`\`query-editor\n${e.signature}\n\`\`\`\n\n${e.docs}\n\n*source: sqlite.org*`}{const e=await(c.fn?.(l));if(void 0!==e)return e}}if(void 0!==l){const e=await(c.table?.(l));if(void 0!==e)return e}{const a=((t,a)=>{t=t.toUpperCase();for(const n of s){const s=new RegExp(n.split(" ").map((e=>i(e))).join("\\s+")),o=Math.max(0,a-n.length),r=t.slice(o).search(s)+o;if(o<=r&&r<=a){const t=e.get(n);if(void 0===t)return;if(0===t.syntax.size&&void 0===t.help)return;return{joinedKeyword:n,help:t.help,files:t.syntax}}}})(o,r);if(void 0!==a){let e="";if(void 0!==a.help&&(e+=t[a.help]),void 0!==c.joinedKeywords&&(e=await c.joinedKeywords(a,e)),""!==e)return e}}if(void 0!==l&&l.toUpperCase()in t)return t[l.toUpperCase()]};export{o as offlineHover};
